var __DEV__=true,__BUNDLE_START_TIME__=this.nativePerformanceNow?nativePerformanceNow():Date.now(),process=this.process||{};process.env=process.env||{};process.env.NODE_ENV='development';
(function (global) {
  'use strict';

  function _toConsumableArray(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    } else {
      return Array.from(arr);
    }
  }

  global.require = _require;
  global.__d = define;
  var modules = Object.create(null);

  if (__DEV__) {
    var verboseNamesToModuleIds = Object.create(null);
  }

  function define(factory, moduleId, dependencyMap) {
    if (moduleId in modules) {
      if (__DEV__) {
        var inverseDependencies = arguments[4];

        if (inverseDependencies) {
          global.__accept(moduleId, factory, dependencyMap, inverseDependencies);
        } else {
          console.warn("Trying to define twice module ID " + moduleId + " in the same bundle");
        }
      }

      return;
    }

    modules[moduleId] = {
      dependencyMap: dependencyMap,
      exports: undefined,
      factory: factory,
      hasError: false,
      isInitialized: false
    };

    if (__DEV__) {
      modules[moduleId].hot = createHotReloadingObject();
      var verboseName = arguments[3];

      if (verboseName) {
        modules[moduleId].verboseName = verboseName;
        verboseNamesToModuleIds[verboseName] = moduleId;
      }
    }
  }

  function _require(moduleId) {
    if (__DEV__ && typeof moduleId === 'string') {
      var verboseName = moduleId;
      moduleId = verboseNamesToModuleIds[verboseName];

      if (moduleId == null) {
        throw new Error("Unknown named module: '" + verboseName + "'");
      } else {
        console.warn("Requiring module '" + verboseName + "' by name is only supported for " + 'debugging purposes and will BREAK IN PRODUCTION!');
      }
    }

    var moduleIdReallyIsNumber = moduleId;
    var module = modules[moduleIdReallyIsNumber];
    return module && module.isInitialized ? module.exports : guardedLoadModule(moduleIdReallyIsNumber, module);
  }

  var inGuard = false;

  function guardedLoadModule(moduleId, module) {
    if (!inGuard && global.ErrorUtils) {
      inGuard = true;
      var returnValue = void 0;

      try {
        returnValue = loadModuleImplementation(moduleId, module);
      } catch (e) {
        global.ErrorUtils.reportFatalError(e);
      }

      inGuard = false;
      return returnValue;
    } else {
      return loadModuleImplementation(moduleId, module);
    }
  }

  var ID_MASK_SHIFT = 16;
  var LOCAL_ID_MASK = ~0 >>> ID_MASK_SHIFT;

  function unpackModuleId(moduleId) {
    var segmentId = moduleId >>> ID_MASK_SHIFT;
    var localId = moduleId & LOCAL_ID_MASK;
    return {
      segmentId: segmentId,
      localId: localId
    };
  }

  _require.unpackModuleId = unpackModuleId;

  function packModuleId(value) {
    return value.segmentId << ID_MASK_SHIFT + value.localId;
  }

  _require.packModuleId = packModuleId;

  function loadModuleImplementation(moduleId, module) {
    var nativeRequire = global.nativeRequire;

    if (!module && nativeRequire) {
      var _unpackModuleId = unpackModuleId(moduleId);

      var segmentId = _unpackModuleId.segmentId,
          localId = _unpackModuleId.localId;
      nativeRequire(localId, segmentId);
      module = modules[moduleId];
    }

    if (!module) {
      throw unknownModuleError(moduleId);
    }

    if (module.hasError) {
      throw moduleThrewError(moduleId, module.error);
    }

    if (__DEV__) {
      var Systrace = _require.Systrace;
    }

    module.isInitialized = true;
    var exports = module.exports = {};
    var _module = module;
    var factory = _module.factory,
        dependencyMap = _module.dependencyMap;

    try {
      if (__DEV__) {
        Systrace.beginEvent('JS_require_' + (module.verboseName || moduleId));
      }

      var moduleObject = {
        exports: exports
      };

      if (__DEV__ && module.hot) {
        moduleObject.hot = module.hot;
      }

      factory(global, _require, moduleObject, exports, dependencyMap);

      if (!__DEV__) {
        module.factory = undefined;
        module.dependencyMap = undefined;
      }

      if (__DEV__) {
        Systrace.endEvent();
      }

      return module.exports = moduleObject.exports;
    } catch (e) {
      module.hasError = true;
      module.error = e;
      module.isInitialized = false;
      module.exports = undefined;
      throw e;
    }
  }

  function unknownModuleError(id) {
    var message = 'Requiring unknown module "' + id + '".';

    if (__DEV__) {
      message += 'If you are sure the module is there, try restarting Metro Bundler. ' + 'You may also want to run `yarn`, or `npm install` (depending on your environment).';
    }

    return Error(message);
  }

  function moduleThrewError(id, error) {
    var displayName = __DEV__ && modules[id] && modules[id].verboseName || id;
    return Error('Requiring module "' + displayName + '", which threw an exception: ' + error);
  }

  if (__DEV__) {
    _require.Systrace = {
      beginEvent: function beginEvent() {},
      endEvent: function endEvent() {}
    };

    _require.getModules = function () {
      return modules;
    };

    var createHotReloadingObject = function createHotReloadingObject() {
      var hot = {
        acceptCallback: null,
        accept: function accept(callback) {
          hot.acceptCallback = callback;
        }
      };
      return hot;
    };

    var acceptAll = function acceptAll(dependentModules, inverseDependencies, patchedModules) {
      if (!dependentModules || dependentModules.length === 0) {
        return true;
      }

      var notAccepted = dependentModules.filter(function (module) {
        return !accept(module, undefined, undefined, inverseDependencies, patchedModules);
      });
      var parents = [];

      for (var i = 0; i < notAccepted.length; i++) {
        if (inverseDependencies[notAccepted[i]].length === 0) {
          return false;
        }

        parents.push.apply(parents, _toConsumableArray(inverseDependencies[notAccepted[i]]));
      }

      return parents.length == 0;
    };

    var accept = function accept(id, factory, dependencyMap, inverseDependencies) {
      var patchedModules = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};

      if (id in patchedModules) {
        return true;
      }

      patchedModules[id] = true;
      var mod = modules[id];

      if (!mod && factory) {
        return true;
      }

      var hot = mod.hot;

      if (!hot) {
        console.warn('Cannot accept module because Hot Module Replacement ' + 'API was not installed.');
        return false;
      }

      if (factory) {
        mod.factory = factory;
      }

      if (dependencyMap) {
        mod.dependencyMap = dependencyMap;
      }

      mod.hasError = false;
      mod.isInitialized = false;

      _require(id);

      if (hot.acceptCallback) {
        hot.acceptCallback();
        return true;
      } else {
        if (!inverseDependencies) {
          throw new Error('Undefined `inverseDependencies`');
        }

        return acceptAll(inverseDependencies[id], inverseDependencies, patchedModules);
      }
    };

    global.__accept = accept;
  }
})(this);
(function (global) {
  Object.assign = function (target, sources) {
    if (__DEV__) {
      if (target == null) {
        throw new TypeError('Object.assign target cannot be null or undefined');
      }

      if (typeof target !== 'object' && typeof target !== 'function') {
        throw new TypeError('In this environment the target of assign MUST be an object. ' + 'This error is a performance optimization and not spec compliant.');
      }
    }

    for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
      var nextSource = arguments[nextIndex];

      if (nextSource == null) {
        continue;
      }

      if (__DEV__) {
        if (typeof nextSource !== 'object' && typeof nextSource !== 'function') {
          throw new TypeError('In this environment the sources for assign MUST be an object. ' + 'This error is a performance optimization and not spec compliant.');
        }
      }

      for (var key in nextSource) {
        if (__DEV__) {
          var hasOwnProperty = Object.prototype.hasOwnProperty;

          if (!hasOwnProperty.call(nextSource, key)) {
            throw new TypeError('One of the sources for assign has an enumerable key on the ' + 'prototype chain. Are you trying to assign a prototype property? ' + 'We don\'t allow it, as this is an edge case that we do not support. ' + 'This error is a performance optimization and not spec compliant.');
          }
        }

        target[key] = nextSource[key];
      }
    }

    return target;
  };
})(this);
(function (global) {
  var inspect = function () {
    function inspect(obj, opts) {
      var ctx = {
        seen: [],
        stylize: stylizeNoColor
      };
      return formatValue(ctx, obj, opts.depth);
    }

    function stylizeNoColor(str, styleType) {
      return str;
    }

    function arrayToHash(array) {
      var hash = {};
      array.forEach(function (val, idx) {
        hash[val] = true;
      });
      return hash;
    }

    function formatValue(ctx, value, recurseTimes) {
      var primitive = formatPrimitive(ctx, value);

      if (primitive) {
        return primitive;
      }

      var keys = Object.keys(value);
      var visibleKeys = arrayToHash(keys);

      if (isError(value) && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
        return formatError(value);
      }

      if (keys.length === 0) {
        if (isFunction(value)) {
          var name = value.name ? ': ' + value.name : '';
          return ctx.stylize('[Function' + name + ']', 'special');
        }

        if (isRegExp(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
        }

        if (isDate(value)) {
          return ctx.stylize(Date.prototype.toString.call(value), 'date');
        }

        if (isError(value)) {
          return formatError(value);
        }
      }

      var base = '',
          array = false,
          braces = ['{', '}'];

      if (isArray(value)) {
        array = true;
        braces = ['[', ']'];
      }

      if (isFunction(value)) {
        var n = value.name ? ': ' + value.name : '';
        base = ' [Function' + n + ']';
      }

      if (isRegExp(value)) {
        base = ' ' + RegExp.prototype.toString.call(value);
      }

      if (isDate(value)) {
        base = ' ' + Date.prototype.toUTCString.call(value);
      }

      if (isError(value)) {
        base = ' ' + formatError(value);
      }

      if (keys.length === 0 && (!array || value.length == 0)) {
        return braces[0] + base + braces[1];
      }

      if (recurseTimes < 0) {
        if (isRegExp(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
        } else {
          return ctx.stylize('[Object]', 'special');
        }
      }

      ctx.seen.push(value);
      var output;

      if (array) {
        output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
      } else {
        output = keys.map(function (key) {
          return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
        });
      }

      ctx.seen.pop();
      return reduceToSingleString(output, base, braces);
    }

    function formatPrimitive(ctx, value) {
      if (isUndefined(value)) return ctx.stylize('undefined', 'undefined');

      if (isString(value)) {
        var simple = "'" + JSON.stringify(value).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
        return ctx.stylize(simple, 'string');
      }

      if (isNumber(value)) return ctx.stylize('' + value, 'number');
      if (isBoolean(value)) return ctx.stylize('' + value, 'boolean');
      if (isNull(value)) return ctx.stylize('null', 'null');
    }

    function formatError(value) {
      return '[' + Error.prototype.toString.call(value) + ']';
    }

    function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
      var output = [];

      for (var i = 0, l = value.length; i < l; ++i) {
        if (hasOwnProperty(value, String(i))) {
          output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
        } else {
          output.push('');
        }
      }

      keys.forEach(function (key) {
        if (!key.match(/^\d+$/)) {
          output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
        }
      });
      return output;
    }

    function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
      var name, str, desc;
      desc = Object.getOwnPropertyDescriptor(value, key) || {
        value: value[key]
      };

      if (desc.get) {
        if (desc.set) {
          str = ctx.stylize('[Getter/Setter]', 'special');
        } else {
          str = ctx.stylize('[Getter]', 'special');
        }
      } else {
        if (desc.set) {
          str = ctx.stylize('[Setter]', 'special');
        }
      }

      if (!hasOwnProperty(visibleKeys, key)) {
        name = '[' + key + ']';
      }

      if (!str) {
        if (ctx.seen.indexOf(desc.value) < 0) {
          if (isNull(recurseTimes)) {
            str = formatValue(ctx, desc.value, null);
          } else {
            str = formatValue(ctx, desc.value, recurseTimes - 1);
          }

          if (str.indexOf('\n') > -1) {
            if (array) {
              str = str.split('\n').map(function (line) {
                return '  ' + line;
              }).join('\n').substr(2);
            } else {
              str = '\n' + str.split('\n').map(function (line) {
                return '   ' + line;
              }).join('\n');
            }
          }
        } else {
          str = ctx.stylize('[Circular]', 'special');
        }
      }

      if (isUndefined(name)) {
        if (array && key.match(/^\d+$/)) {
          return str;
        }

        name = JSON.stringify('' + key);

        if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
          name = name.substr(1, name.length - 2);
          name = ctx.stylize(name, 'name');
        } else {
          name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
          name = ctx.stylize(name, 'string');
        }
      }

      return name + ': ' + str;
    }

    function reduceToSingleString(output, base, braces) {
      var numLinesEst = 0;
      var length = output.reduce(function (prev, cur) {
        numLinesEst++;
        if (cur.indexOf('\n') >= 0) numLinesEst++;
        return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
      }, 0);

      if (length > 60) {
        return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
      }

      return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
    }

    function isArray(ar) {
      return Array.isArray(ar);
    }

    function isBoolean(arg) {
      return typeof arg === 'boolean';
    }

    function isNull(arg) {
      return arg === null;
    }

    function isNullOrUndefined(arg) {
      return arg == null;
    }

    function isNumber(arg) {
      return typeof arg === 'number';
    }

    function isString(arg) {
      return typeof arg === 'string';
    }

    function isSymbol(arg) {
      return typeof arg === 'symbol';
    }

    function isUndefined(arg) {
      return arg === void 0;
    }

    function isRegExp(re) {
      return isObject(re) && objectToString(re) === '[object RegExp]';
    }

    function isObject(arg) {
      return typeof arg === 'object' && arg !== null;
    }

    function isDate(d) {
      return isObject(d) && objectToString(d) === '[object Date]';
    }

    function isError(e) {
      return isObject(e) && (objectToString(e) === '[object Error]' || e instanceof Error);
    }

    function isFunction(arg) {
      return typeof arg === 'function';
    }

    function isPrimitive(arg) {
      return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || typeof arg === 'symbol' || typeof arg === 'undefined';
    }

    function objectToString(o) {
      return Object.prototype.toString.call(o);
    }

    function hasOwnProperty(obj, prop) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    }

    return inspect;
  }();

  var OBJECT_COLUMN_NAME = '(index)';
  var LOG_LEVELS = {
    trace: 0,
    info: 1,
    warn: 2,
    error: 3
  };
  var INSPECTOR_LEVELS = [];
  INSPECTOR_LEVELS[LOG_LEVELS.trace] = 'debug';
  INSPECTOR_LEVELS[LOG_LEVELS.info] = 'log';
  INSPECTOR_LEVELS[LOG_LEVELS.warn] = 'warning';
  INSPECTOR_LEVELS[LOG_LEVELS.error] = 'error';
  var INSPECTOR_FRAMES_TO_SKIP = __DEV__ ? 2 : 1;

  if (global.nativeLoggingHook) {
    function getNativeLogFunction(level) {
      return function () {
        var str = void 0;

        if (arguments.length === 1 && typeof arguments[0] === 'string') {
          str = arguments[0];
        } else {
          str = Array.prototype.map.call(arguments, function (arg) {
            return inspect(arg, {
              depth: 10
            });
          }).join(', ');
        }

        var logLevel = level;

        if (str.slice(0, 9) === 'Warning: ' && logLevel >= LOG_LEVELS.error) {
          logLevel = LOG_LEVELS.warn;
        }

        if (global.__inspectorLog) {
          global.__inspectorLog(INSPECTOR_LEVELS[logLevel], str, [].slice.call(arguments), INSPECTOR_FRAMES_TO_SKIP);
        }

        global.nativeLoggingHook(str, logLevel);
      };
    }

    function repeat(element, n) {
      return Array.apply(null, Array(n)).map(function () {
        return element;
      });
    }

    function consoleTablePolyfill(rows) {
      if (!Array.isArray(rows)) {
        var data = rows;
        rows = [];

        for (var key in data) {
          if (data.hasOwnProperty(key)) {
            var row = data[key];
            row[OBJECT_COLUMN_NAME] = key;
            rows.push(row);
          }
        }
      }

      if (rows.length === 0) {
        global.nativeLoggingHook('', LOG_LEVELS.info);
        return;
      }

      var columns = Object.keys(rows[0]).sort();
      var stringRows = [];
      var columnWidths = [];
      columns.forEach(function (k, i) {
        columnWidths[i] = k.length;

        for (var j = 0; j < rows.length; j++) {
          var cellStr = (rows[j][k] || '?').toString();
          stringRows[j] = stringRows[j] || [];
          stringRows[j][i] = cellStr;
          columnWidths[i] = Math.max(columnWidths[i], cellStr.length);
        }
      });

      function joinRow(row, space) {
        var cells = row.map(function (cell, i) {
          var extraSpaces = repeat(' ', columnWidths[i] - cell.length).join('');
          return cell + extraSpaces;
        });
        space = space || ' ';
        return cells.join(space + '|' + space);
      }

      var separators = columnWidths.map(function (columnWidth) {
        return repeat('-', columnWidth).join('');
      });
      var separatorRow = joinRow(separators, '-');
      var header = joinRow(columns);
      var table = [header, separatorRow];

      for (var i = 0; i < rows.length; i++) {
        table.push(joinRow(stringRows[i]));
      }

      global.nativeLoggingHook('\n' + table.join('\n'), LOG_LEVELS.info);
    }

    var originalConsole = global.console;
    global.console = {
      error: getNativeLogFunction(LOG_LEVELS.error),
      info: getNativeLogFunction(LOG_LEVELS.info),
      log: getNativeLogFunction(LOG_LEVELS.info),
      warn: getNativeLogFunction(LOG_LEVELS.warn),
      trace: getNativeLogFunction(LOG_LEVELS.trace),
      debug: getNativeLogFunction(LOG_LEVELS.trace),
      table: consoleTablePolyfill
    };

    if (__DEV__ && originalConsole) {
      var descriptor = Object.getOwnPropertyDescriptor(global, 'console');

      if (descriptor) {
        Object.defineProperty(global, 'originalConsole', descriptor);
      }

      Object.keys(console).forEach(function (methodName) {
        var reactNativeMethod = console[methodName];

        if (originalConsole[methodName]) {
          console[methodName] = function () {
            originalConsole[methodName].apply(originalConsole, arguments);
            reactNativeMethod.apply(console, arguments);
          };
        }
      });
    }
  } else if (!global.console) {
    var log = global.print || function consoleLoggingStub() {};

    global.console = {
      error: log,
      info: log,
      log: log,
      warn: log,
      trace: log,
      debug: log,
      table: log
    };
  }
})(this);
(function (global) {
  var _inGuard = 0;

  var _globalHandler = function onError(e) {
    throw e;
  };

  var ErrorUtils = {
    setGlobalHandler: function setGlobalHandler(fun) {
      _globalHandler = fun;
    },
    getGlobalHandler: function getGlobalHandler() {
      return _globalHandler;
    },
    reportError: function reportError(error) {
      _globalHandler && _globalHandler(error);
    },
    reportFatalError: function reportFatalError(error) {
      _globalHandler && _globalHandler(error, true);
    },
    applyWithGuard: function applyWithGuard(fun, context, args) {
      try {
        _inGuard++;
        return fun.apply(context, args);
      } catch (e) {
        ErrorUtils.reportError(e);
      } finally {
        _inGuard--;
      }

      return null;
    },
    applyWithGuardIfNeeded: function applyWithGuardIfNeeded(fun, context, args) {
      if (ErrorUtils.inGuard()) {
        return fun.apply(context, args);
      } else {
        ErrorUtils.applyWithGuard(fun, context, args);
      }

      return null;
    },
    inGuard: function inGuard() {
      return _inGuard;
    },
    guard: function guard(fun, name, context) {
      if (typeof fun !== 'function') {
        console.warn('A function must be passed to ErrorUtils.guard, got ', fun);
        return null;
      }

      name = name || fun.name || '<generated guard>';

      function guarded() {
        return ErrorUtils.applyWithGuard(fun, context || this, arguments, null, name);
      }

      return guarded;
    }
  };
  global.ErrorUtils = ErrorUtils;
})(this);
(function (global) {
  if (Number.EPSILON === undefined) {
    Object.defineProperty(Number, 'EPSILON', {
      value: Math.pow(2, -52)
    });
  }

  if (Number.MAX_SAFE_INTEGER === undefined) {
    Object.defineProperty(Number, 'MAX_SAFE_INTEGER', {
      value: Math.pow(2, 53) - 1
    });
  }

  if (Number.MIN_SAFE_INTEGER === undefined) {
    Object.defineProperty(Number, 'MIN_SAFE_INTEGER', {
      value: -(Math.pow(2, 53) - 1)
    });
  }

  if (!Number.isNaN) {
    var globalIsNaN = global.isNaN;
    Object.defineProperty(Number, 'isNaN', {
      configurable: true,
      enumerable: false,
      value: function isNaN(value) {
        return typeof value === 'number' && globalIsNaN(value);
      },
      writable: true
    });
  }
})(this);
(function (global) {
  if (!String.prototype.startsWith) {
    String.prototype.startsWith = function (search) {
      'use strict';

      if (this == null) {
        throw TypeError();
      }

      var string = String(this);
      var pos = arguments.length > 1 ? Number(arguments[1]) || 0 : 0;
      var start = Math.min(Math.max(pos, 0), string.length);
      return string.indexOf(String(search), pos) === start;
    };
  }

  if (!String.prototype.endsWith) {
    String.prototype.endsWith = function (search) {
      'use strict';

      if (this == null) {
        throw TypeError();
      }

      var string = String(this);
      var stringLength = string.length;
      var searchString = String(search);
      var pos = arguments.length > 1 ? Number(arguments[1]) || 0 : stringLength;
      var end = Math.min(Math.max(pos, 0), stringLength);
      var start = end - searchString.length;

      if (start < 0) {
        return false;
      }

      return string.lastIndexOf(searchString, start) === start;
    };
  }

  if (!String.prototype.repeat) {
    String.prototype.repeat = function (count) {
      'use strict';

      if (this == null) {
        throw TypeError();
      }

      var string = String(this);
      count = Number(count) || 0;

      if (count < 0 || count === Infinity) {
        throw RangeError();
      }

      if (count === 1) {
        return string;
      }

      var result = '';

      while (count) {
        if (count & 1) {
          result += string;
        }

        if (count >>= 1) {
          string += string;
        }
      }

      return result;
    };
  }

  if (!String.prototype.includes) {
    String.prototype.includes = function (search, start) {
      'use strict';

      if (typeof start !== 'number') {
        start = 0;
      }

      if (start + search.length > this.length) {
        return false;
      } else {
        return this.indexOf(search, start) !== -1;
      }
    };
  }

  if (!String.prototype.codePointAt) {
    String.prototype.codePointAt = function (position) {
      if (this == null) {
        throw TypeError();
      }

      var string = String(this);
      var size = string.length;
      var index = position ? Number(position) : 0;

      if (Number.isNaN(index)) {
        index = 0;
      }

      if (index < 0 || index >= size) {
        return undefined;
      }

      var first = string.charCodeAt(index);
      var second;

      if (first >= 0xd800 && first <= 0xdbff && size > index + 1) {
          second = string.charCodeAt(index + 1);

          if (second >= 0xdc00 && second <= 0xdfff) {
            return (first - 0xd800) * 0x400 + second - 0xdc00 + 0x10000;
          }
        }

      return first;
    };
  }
})(this);
(function (global) {
  function findIndex(predicate, context) {
    if (this == null) {
      throw new TypeError('Array.prototype.findIndex called on null or undefined');
    }

    if (typeof predicate !== 'function') {
      throw new TypeError('predicate must be a function');
    }

    var list = Object(this);
    var length = list.length >>> 0;

    for (var i = 0; i < length; i++) {
      if (predicate.call(context, list[i], i, list)) {
        return i;
      }
    }

    return -1;
  }

  if (!Array.prototype.findIndex) {
    Object.defineProperty(Array.prototype, 'findIndex', {
      enumerable: false,
      writable: true,
      configurable: true,
      value: findIndex
    });
  }

  if (!Array.prototype.find) {
    Object.defineProperty(Array.prototype, 'find', {
      enumerable: false,
      writable: true,
      configurable: true,
      value: function value(predicate, context) {
        if (this == null) {
          throw new TypeError('Array.prototype.find called on null or undefined');
        }

        var index = findIndex.call(this, predicate, context);
        return index === -1 ? undefined : this[index];
      }
    });
  }

  if (!Array.prototype.includes) {
    Object.defineProperty(Array.prototype, 'includes', {
      enumerable: false,
      writable: true,
      configurable: true,
      value: function value(searchElement) {
        var O = Object(this);
        var len = parseInt(O.length) || 0;

        if (len === 0) {
          return false;
        }

        var n = parseInt(arguments[1]) || 0;
        var k;

        if (n >= 0) {
          k = n;
        } else {
          k = len + n;

          if (k < 0) {
            k = 0;
          }
        }

        var currentElement;

        while (k < len) {
          currentElement = O[k];

          if (searchElement === currentElement || searchElement !== searchElement && currentElement !== currentElement) {
            return true;
          }

          k++;
        }

        return false;
      }
    });
  }
})(this);
(function (global) {
  if (!Array.from) {
    Array.from = function (arrayLike) {
      if (arrayLike == null) {
        throw new TypeError('Object is null or undefined');
      }

      var mapFn = arguments[1];
      var thisArg = arguments[2];
      var C = this;
      var items = Object(arrayLike);
      var symbolIterator = typeof Symbol === 'function' ? typeof Symbol === "function" ? Symbol.iterator : "@@iterator" : '@@iterator';
      var mapping = typeof mapFn === 'function';
      var usingIterator = typeof items[symbolIterator] === 'function';
      var key = 0;
      var ret;
      var value;

      if (usingIterator) {
        ret = typeof C === 'function' ? new C() : [];
        var it = items[symbolIterator]();
        var next;

        while (!(next = it.next()).done) {
          value = next.value;

          if (mapping) {
            value = mapFn.call(thisArg, value, key);
          }

          ret[key] = value;
          key += 1;
        }

        ret.length = key;
        return ret;
      }

      var len = items.length;

      if (isNaN(len) || len < 0) {
        len = 0;
      }

      ret = typeof C === 'function' ? new C(len) : new Array(len);

      while (key < len) {
        value = items[key];

        if (mapping) {
          value = mapFn.call(thisArg, value, key);
        }

        ret[key] = value;
        key += 1;
      }

      ret.length = key;
      return ret;
    };
  }
})(this);
(function (global) {
  (function () {
    'use strict';

    var hasOwnProperty = Object.prototype.hasOwnProperty;

    if (typeof Object.entries !== 'function') {
      Object.entries = function (object) {
        if (object == null) {
          throw new TypeError('Object.entries called on non-object');
        }

        var entries = [];

        for (var key in object) {
          if (hasOwnProperty.call(object, key)) {
            entries.push([key, object[key]]);
          }
        }

        return entries;
      };
    }

    if (typeof Object.values !== 'function') {
      Object.values = function (object) {
        if (object == null) {
          throw new TypeError('Object.values called on non-object');
        }

        var values = [];

        for (var key in object) {
          if (hasOwnProperty.call(object, key)) {
            values.push(object[key]);
          }
        }

        return values;
      };
    }
  })();
})(this);
(function (global) {
  var babelHelpers = global.babelHelpers = {};
  babelHelpers.typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj;
  };

  babelHelpers.createRawReactElement = function () {
    var REACT_ELEMENT_TYPE = typeof Symbol === "function" && (typeof Symbol === "function" ? Symbol.for : "@@for") && (typeof Symbol === "function" ? Symbol.for : "@@for")("react.element") || 0xeac7;
    return function createRawReactElement(type, key, props) {
      return {
        $$typeof: REACT_ELEMENT_TYPE,
        type: type,
        key: key,
        ref: null,
        props: props,
        _owner: null
      };
    };
  }();

  babelHelpers.classCallCheck = function (instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  };

  babelHelpers.createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  babelHelpers.defineEnumerableProperties = function (obj, descs) {
    for (var key in descs) {
      var desc = descs[key];
      desc.configurable = desc.enumerable = true;
      if ('value' in desc) desc.writable = true;
      Object.defineProperty(obj, key, desc);
    }

    return obj;
  };

  babelHelpers.defineProperty = function (obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  };

  babelHelpers._extends = babelHelpers.extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  babelHelpers.get = function get(object, property, receiver) {
    if (object === null) object = Function.prototype;
    var desc = Object.getOwnPropertyDescriptor(object, property);

    if (desc === undefined) {
      var parent = Object.getPrototypeOf(object);

      if (parent === null) {
        return undefined;
      } else {
        return get(parent, property, receiver);
      }
    } else if ("value" in desc) {
      return desc.value;
    } else {
      var getter = desc.get;

      if (getter === undefined) {
        return undefined;
      }

      return getter.call(receiver);
    }
  };

  babelHelpers.inherits = function (subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  };

  babelHelpers.interopRequireDefault = function (obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  };

  babelHelpers.interopRequireWildcard = function (obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  };

  babelHelpers.objectWithoutProperties = function (obj, keys) {
    var target = {};

    for (var i in obj) {
      if (keys.indexOf(i) >= 0) continue;
      if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
      target[i] = obj[i];
    }

    return target;
  };

  babelHelpers.possibleConstructorReturn = function (self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  };

  babelHelpers.slicedToArray = function () {
    function sliceIterator(arr, i) {
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = undefined;

      try {
        for (var _i = arr[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);

          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"]) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }

      return _arr;
    }

    return function (arr, i) {
      if (Array.isArray(arr)) {
        return arr;
      } else if ((typeof Symbol === "function" ? Symbol.iterator : "@@iterator") in Object(arr)) {
        return sliceIterator(arr, i);
      } else {
        throw new TypeError("Invalid attempt to destructure non-iterable instance");
      }
    };
  }();

  babelHelpers.taggedTemplateLiteral = function (strings, raw) {
    return Object.freeze(Object.defineProperties(strings, {
      raw: {
        value: Object.freeze(raw)
      }
    }));
  };

  babelHelpers.toArray = function (arr) {
    return Array.isArray(arr) ? arr : Array.from(arr);
  };

  babelHelpers.toConsumableArray = function (arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    } else {
      return Array.from(arr);
    }
  };
})(this);
__d(function (global, _require, module, exports, _dependencyMap) {
  var _reactNative = _require(_dependencyMap[0], "react-native");

  var _Root = _require(_dependencyMap[1], "./app/Root");

  var _Root2 = babelHelpers.interopRequireDefault(_Root);

  _reactNative.AppRegistry.registerComponent('ETTMallWork', function () {
    return _Root2.default;
  });
},11,[12,339],"index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = _require(_dependencyMap[0], 'fbjs/lib/invariant');

  var ReactNative = {
    get AccessibilityInfo() {
      return _require(_dependencyMap[1], 'AccessibilityInfo');
    },

    get ActivityIndicator() {
      return _require(_dependencyMap[2], 'ActivityIndicator');
    },

    get ART() {
      return _require(_dependencyMap[3], 'ReactNativeART');
    },

    get Button() {
      return _require(_dependencyMap[4], 'Button');
    },

    get CheckBox() {
      return _require(_dependencyMap[5], 'CheckBox');
    },

    get DatePickerIOS() {
      return _require(_dependencyMap[6], 'DatePickerIOS');
    },

    get DrawerLayoutAndroid() {
      return _require(_dependencyMap[7], 'DrawerLayoutAndroid');
    },

    get FlatList() {
      return _require(_dependencyMap[8], 'FlatList');
    },

    get Image() {
      return _require(_dependencyMap[9], 'Image');
    },

    get ImageBackground() {
      return _require(_dependencyMap[10], 'ImageBackground');
    },

    get ImageEditor() {
      return _require(_dependencyMap[11], 'ImageEditor');
    },

    get ImageStore() {
      return _require(_dependencyMap[12], 'ImageStore');
    },

    get KeyboardAvoidingView() {
      return _require(_dependencyMap[13], 'KeyboardAvoidingView');
    },

    get ListView() {
      return _require(_dependencyMap[14], 'ListView');
    },

    get MaskedViewIOS() {
      return _require(_dependencyMap[15], 'MaskedViewIOS');
    },

    get Modal() {
      return _require(_dependencyMap[16], 'Modal');
    },

    get NavigatorIOS() {
      return _require(_dependencyMap[17], 'NavigatorIOS');
    },

    get Picker() {
      return _require(_dependencyMap[18], 'Picker');
    },

    get PickerIOS() {
      return _require(_dependencyMap[19], 'PickerIOS');
    },

    get ProgressBarAndroid() {
      return _require(_dependencyMap[20], 'ProgressBarAndroid');
    },

    get ProgressViewIOS() {
      return _require(_dependencyMap[21], 'ProgressViewIOS');
    },

    get SafeAreaView() {
      return _require(_dependencyMap[22], 'SafeAreaView');
    },

    get ScrollView() {
      return _require(_dependencyMap[23], 'ScrollView');
    },

    get SectionList() {
      return _require(_dependencyMap[24], 'SectionList');
    },

    get SegmentedControlIOS() {
      return _require(_dependencyMap[25], 'SegmentedControlIOS');
    },

    get Slider() {
      return _require(_dependencyMap[26], 'Slider');
    },

    get SnapshotViewIOS() {
      return _require(_dependencyMap[27], 'SnapshotViewIOS');
    },

    get Switch() {
      return _require(_dependencyMap[28], 'Switch');
    },

    get RefreshControl() {
      return _require(_dependencyMap[29], 'RefreshControl');
    },

    get StatusBar() {
      return _require(_dependencyMap[30], 'StatusBar');
    },

    get SwipeableFlatList() {
      return _require(_dependencyMap[31], 'SwipeableFlatList');
    },

    get SwipeableListView() {
      return _require(_dependencyMap[32], 'SwipeableListView');
    },

    get TabBarIOS() {
      return _require(_dependencyMap[33], 'TabBarIOS');
    },

    get Text() {
      return _require(_dependencyMap[34], 'Text');
    },

    get TextInput() {
      return _require(_dependencyMap[35], 'TextInput');
    },

    get ToastAndroid() {
      return _require(_dependencyMap[36], 'ToastAndroid');
    },

    get ToolbarAndroid() {
      return _require(_dependencyMap[37], 'ToolbarAndroid');
    },

    get Touchable() {
      return _require(_dependencyMap[38], 'Touchable');
    },

    get TouchableHighlight() {
      return _require(_dependencyMap[39], 'TouchableHighlight');
    },

    get TouchableNativeFeedback() {
      return _require(_dependencyMap[40], 'TouchableNativeFeedback');
    },

    get TouchableOpacity() {
      return _require(_dependencyMap[41], 'TouchableOpacity');
    },

    get TouchableWithoutFeedback() {
      return _require(_dependencyMap[42], 'TouchableWithoutFeedback');
    },

    get View() {
      return _require(_dependencyMap[43], 'View');
    },

    get ViewPagerAndroid() {
      return _require(_dependencyMap[44], 'ViewPagerAndroid');
    },

    get VirtualizedList() {
      return _require(_dependencyMap[45], 'VirtualizedList');
    },

    get WebView() {
      return _require(_dependencyMap[46], 'WebView');
    },

    get ActionSheetIOS() {
      return _require(_dependencyMap[47], 'ActionSheetIOS');
    },

    get Alert() {
      return _require(_dependencyMap[48], 'Alert');
    },

    get AlertIOS() {
      return _require(_dependencyMap[49], 'AlertIOS');
    },

    get Animated() {
      return _require(_dependencyMap[50], 'Animated');
    },

    get AppRegistry() {
      return _require(_dependencyMap[51], 'AppRegistry');
    },

    get AppState() {
      return _require(_dependencyMap[52], 'AppState');
    },

    get AsyncStorage() {
      return _require(_dependencyMap[53], 'AsyncStorage');
    },

    get BackAndroid() {
      return _require(_dependencyMap[54], 'BackAndroid');
    },

    get BackHandler() {
      return _require(_dependencyMap[55], 'BackHandler');
    },

    get CameraRoll() {
      return _require(_dependencyMap[56], 'CameraRoll');
    },

    get Clipboard() {
      return _require(_dependencyMap[57], 'Clipboard');
    },

    get DatePickerAndroid() {
      return _require(_dependencyMap[58], 'DatePickerAndroid');
    },

    get DeviceInfo() {
      return _require(_dependencyMap[59], 'DeviceInfo');
    },

    get Dimensions() {
      return _require(_dependencyMap[60], 'Dimensions');
    },

    get Easing() {
      return _require(_dependencyMap[61], 'Easing');
    },

    get findNodeHandle() {
      return _require(_dependencyMap[62], 'ReactNative').findNodeHandle;
    },

    get I18nManager() {
      return _require(_dependencyMap[63], 'I18nManager');
    },

    get ImagePickerIOS() {
      return _require(_dependencyMap[64], 'ImagePickerIOS');
    },

    get InteractionManager() {
      return _require(_dependencyMap[65], 'InteractionManager');
    },

    get Keyboard() {
      return _require(_dependencyMap[66], 'Keyboard');
    },

    get LayoutAnimation() {
      return _require(_dependencyMap[67], 'LayoutAnimation');
    },

    get Linking() {
      return _require(_dependencyMap[68], 'Linking');
    },

    get NativeEventEmitter() {
      return _require(_dependencyMap[69], 'NativeEventEmitter');
    },

    get NetInfo() {
      return _require(_dependencyMap[70], 'NetInfo');
    },

    get PanResponder() {
      return _require(_dependencyMap[71], 'PanResponder');
    },

    get PermissionsAndroid() {
      return _require(_dependencyMap[72], 'PermissionsAndroid');
    },

    get PixelRatio() {
      return _require(_dependencyMap[73], 'PixelRatio');
    },

    get PushNotificationIOS() {
      return _require(_dependencyMap[74], 'PushNotificationIOS');
    },

    get Settings() {
      return _require(_dependencyMap[75], 'Settings');
    },

    get Share() {
      return _require(_dependencyMap[76], 'Share');
    },

    get StatusBarIOS() {
      return _require(_dependencyMap[77], 'StatusBarIOS');
    },

    get StyleSheet() {
      return _require(_dependencyMap[78], 'StyleSheet');
    },

    get Systrace() {
      return _require(_dependencyMap[79], 'Systrace');
    },

    get TimePickerAndroid() {
      return _require(_dependencyMap[80], 'TimePickerAndroid');
    },

    get TVEventHandler() {
      return _require(_dependencyMap[81], 'TVEventHandler');
    },

    get UIManager() {
      return _require(_dependencyMap[82], 'UIManager');
    },

    get unstable_batchedUpdates() {
      return _require(_dependencyMap[62], 'ReactNative').unstable_batchedUpdates;
    },

    get Vibration() {
      return _require(_dependencyMap[83], 'Vibration');
    },

    get VibrationIOS() {
      return _require(_dependencyMap[84], 'VibrationIOS');
    },

    get YellowBox() {
      return _require(_dependencyMap[85], 'YellowBox');
    },

    get DeviceEventEmitter() {
      return _require(_dependencyMap[86], 'RCTDeviceEventEmitter');
    },

    get NativeAppEventEmitter() {
      return _require(_dependencyMap[87], 'RCTNativeAppEventEmitter');
    },

    get NativeModules() {
      return _require(_dependencyMap[88], 'NativeModules');
    },

    get Platform() {
      return _require(_dependencyMap[89], 'Platform');
    },

    get processColor() {
      return _require(_dependencyMap[90], 'processColor');
    },

    get requireNativeComponent() {
      return _require(_dependencyMap[91], 'requireNativeComponent');
    },

    get takeSnapshot() {
      return _require(_dependencyMap[92], 'takeSnapshot');
    },

    get ColorPropType() {
      return _require(_dependencyMap[93], 'ColorPropType');
    },

    get EdgeInsetsPropType() {
      return _require(_dependencyMap[94], 'EdgeInsetsPropType');
    },

    get PointPropType() {
      return _require(_dependencyMap[95], 'PointPropType');
    },

    get ViewPropTypes() {
      return _require(_dependencyMap[96], 'ViewPropTypes');
    },

    get Navigator() {
      invariant(false, 'Navigator is deprecated and has been removed from this package. It can now be installed ' + 'and imported from `react-native-deprecated-custom-components` instead of `react-native`. ' + 'Learn about alternative navigation solutions at http://facebook.github.io/react-native/docs/navigation.html');
    }

  };
  module.exports = ReactNative;
},12,[13,14,126,179,185,241,242,243,244,224,257,259,260,261,246,262,263,284,286,287,129,289,282,226,290,292,293,294,295,251,296,297,301,303,186,305,312,313,187,274,194,195,239,153,314,252,315,316,83,84,196,317,103,323,324,322,325,326,327,135,134,221,21,283,328,204,230,231,329,69,330,299,87,133,331,332,333,334,132,19,335,191,110,336,337,281,70,91,15,52,100,168,338,127,156,227,155],"react-native-implementation");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var validateFormat = function validateFormat(format) {};

  if (process.env.NODE_ENV !== 'production') {
    validateFormat = function validateFormat(format) {
      if (format === undefined) {
        throw new Error('invariant requires an error message argument');
      }
    };
  }

  function invariant(condition, format, a, b, c, d, e, f) {
    validateFormat(format);

    if (!condition) {
      var error;

      if (format === undefined) {
        error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
      } else {
        var args = [a, b, c, d, e, f];
        var argIndex = 0;
        error = new Error(format.replace(/%s/g, function () {
          return args[argIndex++];
        }));
        error.name = 'Invariant Violation';
      }

      error.framesToPop = 1;
      throw error;
    }
  }

  module.exports = invariant;
},13,[],"node_modules/fbjs/lib/invariant.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var NativeModules = _require(_dependencyMap[0], 'NativeModules');

  var Promise = _require(_dependencyMap[1], 'Promise');

  var RCTDeviceEventEmitter = _require(_dependencyMap[2], 'RCTDeviceEventEmitter');

  var AccessibilityManager = NativeModules.AccessibilityManager;
  var VOICE_OVER_EVENT = 'voiceOverDidChange';
  var ANNOUNCEMENT_DID_FINISH_EVENT = 'announcementDidFinish';

  var _subscriptions = new Map();

  var AccessibilityInfo = {
    fetch: function fetch() {
      return new Promise(function (resolve, reject) {
        AccessibilityManager.getCurrentVoiceOverState(resolve, reject);
      });
    },
    addEventListener: function addEventListener(eventName, handler) {
      var listener;

      if (eventName === 'change') {
        listener = RCTDeviceEventEmitter.addListener(VOICE_OVER_EVENT, handler);
      } else if (eventName === 'announcementFinished') {
        listener = RCTDeviceEventEmitter.addListener(ANNOUNCEMENT_DID_FINISH_EVENT, handler);
      }

      _subscriptions.set(handler, listener);

      return {
        remove: AccessibilityInfo.removeEventListener.bind(null, eventName, handler)
      };
    },
    setAccessibilityFocus: function setAccessibilityFocus(reactTag) {
      AccessibilityManager.setAccessibilityFocus(reactTag);
    },
    announceForAccessibility: function announceForAccessibility(announcement) {
      AccessibilityManager.announceForAccessibility(announcement);
    },
    removeEventListener: function removeEventListener(eventName, handler) {
      var listener = _subscriptions.get(handler);

      if (!listener) {
        return;
      }

      listener.remove();

      _subscriptions.delete(handler);
    }
  };
  module.exports = AccessibilityInfo;
},14,[15,42,70],"AccessibilityInfo");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var BatchedBridge = _require(_dependencyMap[0], 'BatchedBridge');

  var invariant = _require(_dependencyMap[1], 'fbjs/lib/invariant');

  function genModule(config, moduleID) {
    if (!config) {
      return null;
    }

    var _config = babelHelpers.slicedToArray(config, 5),
        moduleName = _config[0],
        constants = _config[1],
        methods = _config[2],
        promiseMethods = _config[3],
        syncMethods = _config[4];

    invariant(!moduleName.startsWith('RCT') && !moduleName.startsWith('RK'), 'Module name prefixes should\'ve been stripped by the native side ' + 'but wasn\'t for ' + moduleName);

    if (!constants && !methods) {
      return {
        name: moduleName
      };
    }

    var module = {};
    methods && methods.forEach(function (methodName, methodID) {
      var isPromise = promiseMethods && arrayContains(promiseMethods, methodID);
      var isSync = syncMethods && arrayContains(syncMethods, methodID);
      invariant(!isPromise || !isSync, 'Cannot have a method that is both async and a sync hook');
      var methodType = isPromise ? 'promise' : isSync ? 'sync' : 'async';
      module[methodName] = genMethod(moduleID, methodID, methodType);
    });
    babelHelpers.extends(module, constants);

    if (__DEV__) {
      BatchedBridge.createDebugLookup(moduleID, moduleName, methods);
    }

    return {
      name: moduleName,
      module: module
    };
  }

  global.__fbGenNativeModule = genModule;

  function loadModule(name, moduleID) {
    invariant(global.nativeRequireModuleConfig, 'Can\'t lazily create module without nativeRequireModuleConfig');
    var config = global.nativeRequireModuleConfig(name);
    var info = genModule(config, moduleID);
    return info && info.module;
  }

  function genMethod(moduleID, methodID, type) {
    var fn = null;

    if (type === 'promise') {
      fn = function fn() {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return new Promise(function (resolve, reject) {
          BatchedBridge.enqueueNativeCall(moduleID, methodID, args, function (data) {
            return resolve(data);
          }, function (errorData) {
            return reject(createErrorFromErrorData(errorData));
          });
        });
      };
    } else if (type === 'sync') {
      fn = function fn() {
        if (__DEV__) {
          invariant(global.nativeCallSyncHook, 'Calling synchronous methods on native ' + 'modules is not supported in Chrome.\n\n Consider providing alternative ' + 'methods to expose this method in debug mode, e.g. by exposing constants ' + 'ahead-of-time.');
        }

        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        return global.nativeCallSyncHook(moduleID, methodID, args);
      };
    } else {
      fn = function fn() {
        for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          args[_key3] = arguments[_key3];
        }

        var lastArg = args.length > 0 ? args[args.length - 1] : null;
        var secondLastArg = args.length > 1 ? args[args.length - 2] : null;
        var hasSuccessCallback = typeof lastArg === 'function';
        var hasErrorCallback = typeof secondLastArg === 'function';
        hasErrorCallback && invariant(hasSuccessCallback, 'Cannot have a non-function arg after a function arg.');
        var onSuccess = hasSuccessCallback ? lastArg : null;
        var onFail = hasErrorCallback ? secondLastArg : null;
        var callbackCount = hasSuccessCallback + hasErrorCallback;
        args = args.slice(0, args.length - callbackCount);
        BatchedBridge.enqueueNativeCall(moduleID, methodID, args, onFail, onSuccess);
      };
    }

    fn.type = type;
    return fn;
  }

  function arrayContains(array, value) {
    return array.indexOf(value) !== -1;
  }

  function createErrorFromErrorData(errorData) {
    var _ref = errorData || {},
        message = _ref.message,
        extraErrorInfo = babelHelpers.objectWithoutProperties(_ref, ["message"]);

    var error = new Error(message);
    error.framesToPop = 1;
    return babelHelpers.extends(error, extraErrorInfo);
  }

  var NativeModules = {};

  if (global.nativeModuleProxy) {
    NativeModules = global.nativeModuleProxy;
  } else {
    var bridgeConfig = global.__fbBatchedBridgeConfig;
    invariant(bridgeConfig, '__fbBatchedBridgeConfig is not set, cannot invoke native modules');

    var defineLazyObjectProperty = _require(_dependencyMap[2], 'defineLazyObjectProperty');

    (bridgeConfig.remoteModuleConfig || []).forEach(function (config, moduleID) {
      var info = genModule(config, moduleID);

      if (!info) {
        return;
      }

      if (info.module) {
        NativeModules[info.name] = info.module;
      } else {
          defineLazyObjectProperty(NativeModules, info.name, {
            get: function get() {
              return loadModule(info.name, moduleID);
            }
          });
        }
    });
  }

  module.exports = NativeModules;
},15,[16,13,24],"NativeModules");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var MessageQueue = _require(_dependencyMap[0], 'MessageQueue');

  var BatchedBridge = new MessageQueue(typeof __fbUninstallRNGlobalErrorHandler !== 'undefined' && __fbUninstallRNGlobalErrorHandler === true);
  Object.defineProperty(global, '__fbBatchedBridge', {
    configurable: true,
    value: BatchedBridge
  });
  module.exports = BatchedBridge;
},16,[17],"BatchedBridge");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var ErrorUtils = _require(_dependencyMap[0], 'ErrorUtils');

  var Systrace = _require(_dependencyMap[1], 'Systrace');

  var deepFreezeAndThrowOnMutationInDev = _require(_dependencyMap[2], 'deepFreezeAndThrowOnMutationInDev');

  var invariant = _require(_dependencyMap[3], 'fbjs/lib/invariant');

  var stringifySafe = _require(_dependencyMap[4], 'stringifySafe');

  var TO_JS = 0;
  var TO_NATIVE = 1;
  var MODULE_IDS = 0;
  var METHOD_IDS = 1;
  var PARAMS = 2;
  var MIN_TIME_BETWEEN_FLUSHES_MS = 5;
  var TRACE_TAG_REACT_APPS = 1 << 17;
  var DEBUG_INFO_LIMIT = 32;
  var JSTimers = null;

  var MessageQueue = function () {
    function MessageQueue() {
      var shouldUninstallGlobalErrorHandler = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      babelHelpers.classCallCheck(this, MessageQueue);
      this._lazyCallableModules = {};
      this._queue = [[], [], [], 0];
      this._successCallbacks = [];
      this._failureCallbacks = [];
      this._callID = 0;
      this._lastFlush = 0;
      this._eventLoopStartTime = new Date().getTime();

      if (shouldUninstallGlobalErrorHandler) {
        this.uninstallGlobalErrorHandler();
      } else {
        this.installGlobalErrorHandler();
      }

      if (__DEV__) {
        this._debugInfo = {};
        this._remoteModuleTable = {};
        this._remoteMethodTable = {};
      }

      this.callFunctionReturnFlushedQueue = this.callFunctionReturnFlushedQueue.bind(this);
      this.callFunctionReturnResultAndFlushedQueue = this.callFunctionReturnResultAndFlushedQueue.bind(this);
      this.flushedQueue = this.flushedQueue.bind(this);
      this.invokeCallbackAndReturnFlushedQueue = this.invokeCallbackAndReturnFlushedQueue.bind(this);
    }

    babelHelpers.createClass(MessageQueue, [{
      key: "callFunctionReturnFlushedQueue",
      value: function callFunctionReturnFlushedQueue(module, method, args) {
        var _this = this;

        this.__guard(function () {
          _this.__callFunction(module, method, args);
        });

        return this.flushedQueue();
      }
    }, {
      key: "callFunctionReturnResultAndFlushedQueue",
      value: function callFunctionReturnResultAndFlushedQueue(module, method, args) {
        var _this2 = this;

        var result = void 0;

        this.__guard(function () {
          result = _this2.__callFunction(module, method, args);
        });

        return [result, this.flushedQueue()];
      }
    }, {
      key: "invokeCallbackAndReturnFlushedQueue",
      value: function invokeCallbackAndReturnFlushedQueue(cbID, args) {
        var _this3 = this;

        this.__guard(function () {
          _this3.__invokeCallback(cbID, args);
        });

        return this.flushedQueue();
      }
    }, {
      key: "flushedQueue",
      value: function flushedQueue() {
        var _this4 = this;

        this.__guard(function () {
          _this4.__callImmediates();
        });

        var queue = this._queue;
        this._queue = [[], [], [], this._callID];
        return queue[0].length ? queue : null;
      }
    }, {
      key: "getEventLoopRunningTime",
      value: function getEventLoopRunningTime() {
        return new Date().getTime() - this._eventLoopStartTime;
      }
    }, {
      key: "registerCallableModule",
      value: function registerCallableModule(name, module) {
        this._lazyCallableModules[name] = function () {
          return module;
        };
      }
    }, {
      key: "registerLazyCallableModule",
      value: function registerLazyCallableModule(name, factory) {
        var module = void 0;
        var getValue = factory;

        this._lazyCallableModules[name] = function () {
          if (getValue) {
            module = getValue();
            getValue = null;
          }

          return module;
        };
      }
    }, {
      key: "getCallableModule",
      value: function getCallableModule(name) {
        var getValue = this._lazyCallableModules[name];
        return getValue ? getValue() : null;
      }
    }, {
      key: "enqueueNativeCall",
      value: function enqueueNativeCall(moduleID, methodID, params, onFail, onSucc) {
        if (onFail || onSucc) {
          if (__DEV__) {
            this._debugInfo[this._callID] = [moduleID, methodID];

            if (this._callID > DEBUG_INFO_LIMIT) {
              delete this._debugInfo[this._callID - DEBUG_INFO_LIMIT];
            }
          }

          onFail && params.push(this._callID << 1);
          onSucc && params.push(this._callID << 1 | 1);
          this._successCallbacks[this._callID] = onSucc;
          this._failureCallbacks[this._callID] = onFail;
        }

        if (__DEV__) {
          global.nativeTraceBeginAsyncFlow && global.nativeTraceBeginAsyncFlow(TRACE_TAG_REACT_APPS, 'native', this._callID);
        }

        this._callID++;

        this._queue[MODULE_IDS].push(moduleID);

        this._queue[METHOD_IDS].push(methodID);

        if (__DEV__) {
          var isValidArgument = function isValidArgument(val) {
            var t = typeof val;

            if (t === 'undefined' || t === 'null' || t === 'boolean' || t === 'number' || t === 'string') {
              return true;
            }

            if (t === 'function' || t !== 'object') {
              return false;
            }

            if (Array.isArray(val)) {
              return val.every(isValidArgument);
            }

            for (var k in val) {
              if (typeof val[k] !== 'function' && !isValidArgument(val[k])) {
                return false;
              }
            }

            return true;
          };

          invariant(isValidArgument(params), '%s is not usable as a native method argument', params);
          deepFreezeAndThrowOnMutationInDev(params);
        }

        this._queue[PARAMS].push(params);

        var now = new Date().getTime();

        if (global.nativeFlushQueueImmediate && (now - this._lastFlush >= MIN_TIME_BETWEEN_FLUSHES_MS || this._inCall === 0)) {
          var queue = this._queue;
          this._queue = [[], [], [], this._callID];
          this._lastFlush = now;
          global.nativeFlushQueueImmediate(queue);
        }

        Systrace.counterEvent('pending_js_to_native_queue', this._queue[0].length);

        if (__DEV__ && this.__spy && isFinite(moduleID)) {
          this.__spy({
            type: TO_NATIVE,
            module: this._remoteModuleTable[moduleID],
            method: this._remoteMethodTable[moduleID][methodID],
            args: params
          });
        } else if (this.__spy) {
          this.__spy({
            type: TO_NATIVE,
            module: moduleID + '',
            method: methodID,
            args: params
          });
        }
      }
    }, {
      key: "createDebugLookup",
      value: function createDebugLookup(moduleID, name, methods) {
        if (__DEV__) {
          this._remoteModuleTable[moduleID] = name;
          this._remoteMethodTable[moduleID] = methods;
        }
      }
    }, {
      key: "uninstallGlobalErrorHandler",
      value: function uninstallGlobalErrorHandler() {
        this.__guard = this.__guardUnsafe;
      }
    }, {
      key: "installGlobalErrorHandler",
      value: function installGlobalErrorHandler() {
        this.__guard = this.__guardSafe;
      }
    }, {
      key: "__guardUnsafe",
      value: function __guardUnsafe(fn) {
        this._inCall++;
        fn();
        this._inCall--;
      }
    }, {
      key: "__guardSafe",
      value: function __guardSafe(fn) {
        this._inCall++;

        try {
          fn();
        } catch (error) {
          ErrorUtils.reportFatalError(error);
        } finally {
          this._inCall--;
        }
      }
    }, {
      key: "__callImmediates",
      value: function __callImmediates() {
        Systrace.beginEvent('JSTimers.callImmediates()');

        if (!JSTimers) {
          JSTimers = _require(_dependencyMap[5], 'JSTimers');
        }

        JSTimers.callImmediates();
        Systrace.endEvent();
      }
    }, {
      key: "__callFunction",
      value: function __callFunction(module, method, args) {
        this._lastFlush = new Date().getTime();
        this._eventLoopStartTime = this._lastFlush;
        Systrace.beginEvent(module + "." + method + "()");

        if (this.__spy) {
          this.__spy({
            type: TO_JS,
            module: module,
            method: method,
            args: args
          });
        }

        var moduleMethods = this.getCallableModule(module);
        invariant(!!moduleMethods, 'Module %s is not a registered callable module (calling %s)', module, method);
        invariant(!!moduleMethods[method], 'Method %s does not exist on module %s', method, module);
        var result = moduleMethods[method].apply(moduleMethods, args);
        Systrace.endEvent();
        return result;
      }
    }, {
      key: "__invokeCallback",
      value: function __invokeCallback(cbID, args) {
        this._lastFlush = new Date().getTime();
        this._eventLoopStartTime = this._lastFlush;
        var callID = cbID >>> 1;
        var isSuccess = cbID & 1;
        var callback = isSuccess ? this._successCallbacks[callID] : this._failureCallbacks[callID];

        if (__DEV__) {
          var debug = this._debugInfo[callID];

          var _module = debug && this._remoteModuleTable[debug[0]];

          var _method = debug && this._remoteMethodTable[debug[0]][debug[1]];

          if (!callback) {
            var errorMessage = "Callback with id " + cbID + ": " + _module + "." + _method + "() not found";

            if (_method) {
              errorMessage = "The callback " + _method + "() exists in module " + _module + ", " + 'but only one callback may be registered to a function in a native module.';
            }

            invariant(callback, errorMessage);
          }

          var profileName = debug ? '<callback for ' + _module + '.' + _method + '>' : cbID;

          if (callback && this.__spy) {
            this.__spy({
              type: TO_JS,
              module: null,
              method: profileName,
              args: args
            });
          }

          Systrace.beginEvent("MessageQueue.invokeCallback(" + profileName + ", " + stringifySafe(args) + ")");
        }

        if (!callback) {
          return;
        }

        this._successCallbacks[callID] = this._failureCallbacks[callID] = null;
        callback.apply(undefined, babelHelpers.toConsumableArray(args));

        if (__DEV__) {
          Systrace.endEvent();
        }
      }
    }], [{
      key: "spy",
      value: function spy(spyOrToggle) {
        if (spyOrToggle === true) {
          MessageQueue.prototype.__spy = function (info) {
            console.log((info.type === TO_JS ? 'N->JS' : 'JS->N') + " : " + ("" + (info.module ? info.module + '.' : '') + info.method) + ("(" + JSON.stringify(info.args) + ")"));
          };
        } else if (spyOrToggle === false) {
          MessageQueue.prototype.__spy = null;
        } else {
          MessageQueue.prototype.__spy = spyOrToggle;
        }
      }
    }]);
    return MessageQueue;
  }();

  module.exports = MessageQueue;
},17,[18,19,122,13,39,51],"MessageQueue");
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = global.ErrorUtils;
},18,[],"ErrorUtils");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = _require(_dependencyMap[0], 'fbjs/lib/invariant');

  var TRACE_TAG_REACT_APPS = 1 << 17;
  var TRACE_TAG_JS_VM_CALLS = 1 << 27;
  var _enabled = false;
  var _asyncCookie = 0;
  var _markStack = [];

  var _markStackIndex = -1;

  var _canInstallReactHook = false;
  var _useFiber = false;
  var REACT_MARKER = "\u269B";
  var userTimingPolyfill = __DEV__ ? {
    mark: function mark(markName) {
      if (_enabled) {
        _markStackIndex++;
        _markStack[_markStackIndex] = markName;
        var systraceLabel = markName;

        if (markName[0] === REACT_MARKER) {
          var indexOfId = markName.lastIndexOf(' (#');
          var cutoffIndex = indexOfId !== -1 ? indexOfId : markName.length;
          systraceLabel = markName.slice(2, cutoffIndex);
        }

        Systrace.beginEvent(systraceLabel);
      }
    },
    measure: function measure(measureName, startMark, endMark) {
      if (_enabled) {
        invariant(typeof measureName === 'string' && typeof startMark === 'string' && typeof endMark === 'undefined', 'Only performance.measure(string, string) overload is supported.');
        var topMark = _markStack[_markStackIndex];
        invariant(startMark === topMark, 'There was a mismatching performance.measure() call. ' + 'Expected "%s" but got "%s."', topMark, startMark);
        _markStackIndex--;
        Systrace.endEvent();
      }
    },
    clearMarks: function clearMarks(markName) {
      if (_enabled) {
        if (_markStackIndex === -1) {
          return;
        }

        if (markName === _markStack[_markStackIndex]) {
          if (userTimingPolyfill != null) {
            userTimingPolyfill.measure(markName, markName);
          }
        }
      }
    },
    clearMeasures: function clearMeasures() {}
  } : null;
  var reactDebugToolHook = __DEV__ ? {
    onBeforeMountComponent: function onBeforeMountComponent(debugID) {
      var ReactComponentTreeHook = _require(_dependencyMap[1], 'ReactGlobalSharedState').ReactComponentTreeHook;

      var displayName = ReactComponentTreeHook.getDisplayName(debugID);
      Systrace.beginEvent("ReactReconciler.mountComponent(" + displayName + ")");
    },
    onMountComponent: function onMountComponent(debugID) {
      Systrace.endEvent();
    },
    onBeforeUpdateComponent: function onBeforeUpdateComponent(debugID) {
      var ReactComponentTreeHook = _require(_dependencyMap[1], 'ReactGlobalSharedState').ReactComponentTreeHook;

      var displayName = ReactComponentTreeHook.getDisplayName(debugID);
      Systrace.beginEvent("ReactReconciler.updateComponent(" + displayName + ")");
    },
    onUpdateComponent: function onUpdateComponent(debugID) {
      Systrace.endEvent();
    },
    onBeforeUnmountComponent: function onBeforeUnmountComponent(debugID) {
      var ReactComponentTreeHook = _require(_dependencyMap[1], 'ReactGlobalSharedState').ReactComponentTreeHook;

      var displayName = ReactComponentTreeHook.getDisplayName(debugID);
      Systrace.beginEvent("ReactReconciler.unmountComponent(" + displayName + ")");
    },
    onUnmountComponent: function onUnmountComponent(debugID) {
      Systrace.endEvent();
    },
    onBeginLifeCycleTimer: function onBeginLifeCycleTimer(debugID, timerType) {
      var ReactComponentTreeHook = _require(_dependencyMap[1], 'ReactGlobalSharedState').ReactComponentTreeHook;

      var displayName = ReactComponentTreeHook.getDisplayName(debugID);
      Systrace.beginEvent(displayName + "." + timerType + "()");
    },
    onEndLifeCycleTimer: function onEndLifeCycleTimer(debugID, timerType) {
      Systrace.endEvent();
    }
  } : null;
  var Systrace = {
    installReactHook: function installReactHook(useFiber) {
      if (_enabled) {
        if (__DEV__) {
          if (useFiber) {
            global.performance = userTimingPolyfill;
          } else {
            _require(_dependencyMap[2], 'ReactDebugTool').addHook(reactDebugToolHook);
          }
        }
      }

      _useFiber = useFiber;
      _canInstallReactHook = true;
    },
    setEnabled: function setEnabled(enabled) {
      if (_enabled !== enabled) {
        if (__DEV__) {
          if (enabled) {
            global.nativeTraceBeginLegacy && global.nativeTraceBeginLegacy(TRACE_TAG_JS_VM_CALLS);
          } else {
            global.nativeTraceEndLegacy && global.nativeTraceEndLegacy(TRACE_TAG_JS_VM_CALLS);
          }

          if (_canInstallReactHook) {
            if (_useFiber) {
              if (enabled && global.performance === undefined) {
                global.performance = userTimingPolyfill;
              }
            } else {
              var ReactDebugTool = _require(_dependencyMap[2], 'ReactDebugTool');

              if (enabled) {
                ReactDebugTool.addHook(reactDebugToolHook);
              } else {
                ReactDebugTool.removeHook(reactDebugToolHook);
              }
            }
          }
        }

        _enabled = enabled;
      }
    },
    isEnabled: function isEnabled() {
      return _enabled;
    },
    beginEvent: function beginEvent(profileName, args) {
      if (_enabled) {
        profileName = typeof profileName === 'function' ? profileName() : profileName;
        global.nativeTraceBeginSection(TRACE_TAG_REACT_APPS, profileName, args);
      }
    },
    endEvent: function endEvent() {
      if (_enabled) {
        global.nativeTraceEndSection(TRACE_TAG_REACT_APPS);
      }
    },
    beginAsyncEvent: function beginAsyncEvent(profileName) {
      var cookie = _asyncCookie;

      if (_enabled) {
        _asyncCookie++;
        profileName = typeof profileName === 'function' ? profileName() : profileName;
        global.nativeTraceBeginAsyncSection(TRACE_TAG_REACT_APPS, profileName, cookie);
      }

      return cookie;
    },
    endAsyncEvent: function endAsyncEvent(profileName, cookie) {
      if (_enabled) {
        profileName = typeof profileName === 'function' ? profileName() : profileName;
        global.nativeTraceEndAsyncSection(TRACE_TAG_REACT_APPS, profileName, cookie);
      }
    },
    counterEvent: function counterEvent(profileName, value) {
      if (_enabled) {
        profileName = typeof profileName === 'function' ? profileName() : profileName;
        global.nativeTraceCounter && global.nativeTraceCounter(TRACE_TAG_REACT_APPS, profileName, value);
      }
    },
    attachToRelayProfiler: function attachToRelayProfiler(relayProfiler) {
      relayProfiler.attachProfileHandler('*', function (name, state) {
        if (state != null && state.queryName !== undefined) {
          name += '_' + state.queryName;
        }

        var cookie = Systrace.beginAsyncEvent(name);
        return function () {
          Systrace.endAsyncEvent(name, cookie);
        };
      });
      relayProfiler.attachAggregateHandler('*', function (name, callback) {
        Systrace.beginEvent(name);
        callback();
        Systrace.endEvent();
      });
    },
    swizzleJSON: function swizzleJSON() {
      Systrace.measureMethods(JSON, 'JSON', ['parse', 'stringify']);
    },
    measureMethods: function measureMethods(object, objectName, methodNames) {
      if (!__DEV__) {
        return;
      }

      methodNames.forEach(function (methodName) {
        object[methodName] = Systrace.measure(objectName, methodName, object[methodName]);
      });
    },
    measure: function measure(objName, fnName, func) {
      if (!__DEV__) {
        return func;
      }

      var profileName = objName + "." + fnName;
      return function () {
        if (!_enabled) {
          return func.apply(this, arguments);
        }

        Systrace.beginEvent(profileName);
        var ret = func.apply(this, arguments);
        Systrace.endEvent();
        return ret;
      };
    }
  };

  if (__DEV__) {
    _require.Systrace = Systrace;
  }

  module.exports = Systrace;
},19,[13,20,125],"Systrace");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _require = _require2(_dependencyMap[0], 'ReactNative'),
      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = _require.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

  module.exports = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactGlobalSharedState;
},20,[21],"ReactGlobalSharedState");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var ReactNative = void 0;

  if (__DEV__) {
    ReactNative = _require(_dependencyMap[0], 'ReactNativeRenderer-dev');
  } else {
    ReactNative = _require(_dependencyMap[1], 'ReactNativeRenderer-prod');
  }

  module.exports = ReactNative;
},21,[22,124],"ReactNative");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  if (__DEV__) {
    (function () {
      "use strict";

      _require2(_dependencyMap[0], "InitializeCore");

      var invariant = _require2(_dependencyMap[1], "fbjs/lib/invariant");

      var warning = _require2(_dependencyMap[2], "fbjs/lib/warning");

      var emptyFunction = _require2(_dependencyMap[3], "fbjs/lib/emptyFunction");

      var UIManager = _require2(_dependencyMap[4], "UIManager");

      var RCTEventEmitter = _require2(_dependencyMap[5], "RCTEventEmitter");

      var TextInputState = _require2(_dependencyMap[6], "TextInputState");

      var deepDiffer = _require2(_dependencyMap[7], "deepDiffer");

      var flattenStyle = _require2(_dependencyMap[8], "flattenStyle");

      var React = _require2(_dependencyMap[9], "react");

      var emptyObject = _require2(_dependencyMap[10], "fbjs/lib/emptyObject");

      var checkPropTypes = _require2(_dependencyMap[11], "prop-types/checkPropTypes");

      var shallowEqual = _require2(_dependencyMap[12], "fbjs/lib/shallowEqual");

      var ExceptionsManager = _require2(_dependencyMap[13], "ExceptionsManager");

      var deepFreezeAndThrowOnMutationInDev = _require2(_dependencyMap[14], "deepFreezeAndThrowOnMutationInDev");

      var invokeGuardedCallback = function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
        this._hasCaughtError = false;
        this._caughtError = null;
        var funcArgs = Array.prototype.slice.call(arguments, 3);

        try {
          func.apply(context, funcArgs);
        } catch (error) {
          this._caughtError = error;
          this._hasCaughtError = true;
        }
      };

      {
        if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
          var fakeNode = document.createElement("react");

          var invokeGuardedCallbackDev = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
            invariant(typeof document !== "undefined", "The `document` global was defined when React was initialized, but is not " + "defined anymore. This can happen in a test environment if a component " + "schedules an update from an asynchronous callback, but the test has already " + "finished running. To solve this, you can either unmount the component at " + "the end of your test (and ensure that any asynchronous operations get " + "canceled in `componentWillUnmount`), or you can change the test itself " + "to be asynchronous.");
            var evt = document.createEvent("Event");
            var didError = true;
            var funcArgs = Array.prototype.slice.call(arguments, 3);

            function callCallback() {
              fakeNode.removeEventListener(evtType, callCallback, false);
              func.apply(context, funcArgs);
              didError = false;
            }

            var error = void 0;
            var didSetError = false;
            var isCrossOriginError = false;

            function onError(event) {
              error = event.error;
              didSetError = true;

              if (error === null && event.colno === 0 && event.lineno === 0) {
                isCrossOriginError = true;
              }
            }

            var evtType = "react-" + (name ? name : "invokeguardedcallback");
            window.addEventListener("error", onError);
            fakeNode.addEventListener(evtType, callCallback, false);
            evt.initEvent(evtType, false, false);
            fakeNode.dispatchEvent(evt);

            if (didError) {
              if (!didSetError) {
                error = new Error("An error was thrown inside one of your components, but React " + "doesn't know what it was. This is likely due to browser " + 'flakiness. React does its best to preserve the "Pause on ' + 'exceptions" behavior of the DevTools, which requires some ' + "DEV-mode only tricks. It's possible that these don't work in " + "your browser. Try triggering the error in production mode, " + "or switching to a modern browser. If you suspect that this is " + "actually an issue with React, please file an issue.");
              } else if (isCrossOriginError) {
                error = new Error("A cross-origin error was thrown. React doesn't have access to " + "the actual error object in development. " + "See https://fb.me/react-crossorigin-error for more information.");
              }

              this._hasCaughtError = true;
              this._caughtError = error;
            } else {
              this._hasCaughtError = false;
              this._caughtError = null;
            }

            window.removeEventListener("error", onError);
          };

          invokeGuardedCallback = invokeGuardedCallbackDev;
        }
      }
      var invokeGuardedCallback$1 = invokeGuardedCallback;
      var ReactErrorUtils = {
        _caughtError: null,
        _hasCaughtError: false,
        _rethrowError: null,
        _hasRethrowError: false,
        invokeGuardedCallback: function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
          invokeGuardedCallback$1.apply(ReactErrorUtils, arguments);
        },
        invokeGuardedCallbackAndCatchFirstError: function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
          ReactErrorUtils.invokeGuardedCallback.apply(this, arguments);

          if (ReactErrorUtils.hasCaughtError()) {
            var error = ReactErrorUtils.clearCaughtError();

            if (!ReactErrorUtils._hasRethrowError) {
              ReactErrorUtils._hasRethrowError = true;
              ReactErrorUtils._rethrowError = error;
            }
          }
        },
        rethrowCaughtError: function rethrowCaughtError() {
          return _rethrowCaughtError.apply(ReactErrorUtils, arguments);
        },
        hasCaughtError: function hasCaughtError() {
          return ReactErrorUtils._hasCaughtError;
        },
        clearCaughtError: function clearCaughtError() {
          if (ReactErrorUtils._hasCaughtError) {
            var error = ReactErrorUtils._caughtError;
            ReactErrorUtils._caughtError = null;
            ReactErrorUtils._hasCaughtError = false;
            return error;
          } else {
            invariant(false, "clearCaughtError was called but no error was captured. This error " + "is likely caused by a bug in React. Please file an issue.");
          }
        }
      };

      var _rethrowCaughtError = function _rethrowCaughtError() {
        if (ReactErrorUtils._hasRethrowError) {
          var error = ReactErrorUtils._rethrowError;
          ReactErrorUtils._rethrowError = null;
          ReactErrorUtils._hasRethrowError = false;
          throw error;
        }
      };

      var eventPluginOrder = null;
      var namesToPlugins = {};

      function recomputePluginOrdering() {
        if (!eventPluginOrder) {
          return;
        }

        for (var pluginName in namesToPlugins) {
          var pluginModule = namesToPlugins[pluginName];
          var pluginIndex = eventPluginOrder.indexOf(pluginName);
          invariant(pluginIndex > -1, "EventPluginRegistry: Cannot inject event plugins that do not exist in " + "the plugin ordering, `%s`.", pluginName);

          if (plugins[pluginIndex]) {
            continue;
          }

          invariant(pluginModule.extractEvents, "EventPluginRegistry: Event plugins must implement an `extractEvents` " + "method, but `%s` does not.", pluginName);
          plugins[pluginIndex] = pluginModule;
          var publishedEvents = pluginModule.eventTypes;

          for (var eventName in publishedEvents) {
            invariant(publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName), "EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.", eventName, pluginName);
          }
        }
      }

      function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
        invariant(!eventNameDispatchConfigs.hasOwnProperty(eventName), "EventPluginHub: More than one plugin attempted to publish the same " + "event name, `%s`.", eventName);
        eventNameDispatchConfigs[eventName] = dispatchConfig;
        var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;

        if (phasedRegistrationNames) {
          for (var phaseName in phasedRegistrationNames) {
            if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
              var phasedRegistrationName = phasedRegistrationNames[phaseName];
              publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
            }
          }

          return true;
        } else if (dispatchConfig.registrationName) {
          publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
          return true;
        }

        return false;
      }

      function publishRegistrationName(registrationName, pluginModule, eventName) {
        invariant(!registrationNameModules[registrationName], "EventPluginHub: More than one plugin attempted to publish the same " + "registration name, `%s`.", registrationName);
        registrationNameModules[registrationName] = pluginModule;
        registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;
        {
          var lowerCasedName = registrationName.toLowerCase();
        }
      }

      var plugins = [];
      var eventNameDispatchConfigs = {};
      var registrationNameModules = {};
      var registrationNameDependencies = {};

      function injectEventPluginOrder(injectedEventPluginOrder) {
        invariant(!eventPluginOrder, "EventPluginRegistry: Cannot inject event plugin ordering more than " + "once. You are likely trying to load more than one copy of React.");
        eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
        recomputePluginOrdering();
      }

      function injectEventPluginsByName(injectedNamesToPlugins) {
        var isOrderingDirty = false;

        for (var pluginName in injectedNamesToPlugins) {
          if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
            continue;
          }

          var pluginModule = injectedNamesToPlugins[pluginName];

          if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
            invariant(!namesToPlugins[pluginName], "EventPluginRegistry: Cannot inject two different event plugins " + "using the same name, `%s`.", pluginName);
            namesToPlugins[pluginName] = pluginModule;
            isOrderingDirty = true;
          }
        }

        if (isOrderingDirty) {
          recomputePluginOrdering();
        }
      }

      var getFiberCurrentPropsFromNode = null;
      var getInstanceFromNode = null;
      var getNodeFromInstance = null;
      var injection$1 = {
        injectComponentTree: function injectComponentTree(Injected) {
          getFiberCurrentPropsFromNode = Injected.getFiberCurrentPropsFromNode;
          getInstanceFromNode = Injected.getInstanceFromNode;
          getNodeFromInstance = Injected.getNodeFromInstance;
          {
            warning(getNodeFromInstance && getInstanceFromNode, "EventPluginUtils.injection.injectComponentTree(...): Injected " + "module is missing getNodeFromInstance or getInstanceFromNode.");
          }
        }
      };

      function isEndish(topLevelType) {
        return topLevelType === "topMouseUp" || topLevelType === "topTouchEnd" || topLevelType === "topTouchCancel";
      }

      function isMoveish(topLevelType) {
        return topLevelType === "topMouseMove" || topLevelType === "topTouchMove";
      }

      function isStartish(topLevelType) {
        return topLevelType === "topMouseDown" || topLevelType === "topTouchStart";
      }

      var validateEventDispatches = void 0;
      {
        validateEventDispatches = function validateEventDispatches(event) {
          var dispatchListeners = event._dispatchListeners;
          var dispatchInstances = event._dispatchInstances;
          var listenersIsArr = Array.isArray(dispatchListeners);
          var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;
          var instancesIsArr = Array.isArray(dispatchInstances);
          var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;
          warning(instancesIsArr === listenersIsArr && instancesLen === listenersLen, "EventPluginUtils: Invalid `event`.");
        };
      }

      function executeDispatch(event, simulated, listener, inst) {
        var type = event.type || "unknown-event";
        event.currentTarget = getNodeFromInstance(inst);
        ReactErrorUtils.invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
        event.currentTarget = null;
      }

      function executeDispatchesInOrder(event, simulated) {
        var dispatchListeners = event._dispatchListeners;
        var dispatchInstances = event._dispatchInstances;
        {
          validateEventDispatches(event);
        }

        if (Array.isArray(dispatchListeners)) {
          for (var i = 0; i < dispatchListeners.length; i++) {
            if (event.isPropagationStopped()) {
              break;
            }

            executeDispatch(event, simulated, dispatchListeners[i], dispatchInstances[i]);
          }
        } else if (dispatchListeners) {
          executeDispatch(event, simulated, dispatchListeners, dispatchInstances);
        }

        event._dispatchListeners = null;
        event._dispatchInstances = null;
      }

      function executeDispatchesInOrderStopAtTrueImpl(event) {
        var dispatchListeners = event._dispatchListeners;
        var dispatchInstances = event._dispatchInstances;
        {
          validateEventDispatches(event);
        }

        if (Array.isArray(dispatchListeners)) {
          for (var i = 0; i < dispatchListeners.length; i++) {
            if (event.isPropagationStopped()) {
              break;
            }

            if (dispatchListeners[i](event, dispatchInstances[i])) {
              return dispatchInstances[i];
            }
          }
        } else if (dispatchListeners) {
          if (dispatchListeners(event, dispatchInstances)) {
            return dispatchInstances;
          }
        }

        return null;
      }

      function executeDispatchesInOrderStopAtTrue(event) {
        var ret = executeDispatchesInOrderStopAtTrueImpl(event);
        event._dispatchInstances = null;
        event._dispatchListeners = null;
        return ret;
      }

      function executeDirectDispatch(event) {
        {
          validateEventDispatches(event);
        }
        var dispatchListener = event._dispatchListeners;
        var dispatchInstance = event._dispatchInstances;
        invariant(!Array.isArray(dispatchListener), "executeDirectDispatch(...): Invalid `event`.");
        event.currentTarget = dispatchListener ? getNodeFromInstance(dispatchInstance) : null;
        var res = dispatchListener ? dispatchListener(event) : null;
        event.currentTarget = null;
        event._dispatchListeners = null;
        event._dispatchInstances = null;
        return res;
      }

      function hasDispatches(event) {
        return !!event._dispatchListeners;
      }

      function accumulateInto(current, next) {
        invariant(next != null, "accumulateInto(...): Accumulated items must not be null or undefined.");

        if (current == null) {
          return next;
        }

        if (Array.isArray(current)) {
          if (Array.isArray(next)) {
            current.push.apply(current, next);
            return current;
          }

          current.push(next);
          return current;
        }

        if (Array.isArray(next)) {
          return [current].concat(next);
        }

        return [current, next];
      }

      function forEachAccumulated(arr, cb, scope) {
        if (Array.isArray(arr)) {
          arr.forEach(cb, scope);
        } else if (arr) {
          cb.call(scope, arr);
        }
      }

      var eventQueue = null;

      var executeDispatchesAndRelease = function executeDispatchesAndRelease(event, simulated) {
        if (event) {
          executeDispatchesInOrder(event, simulated);

          if (!event.isPersistent()) {
            event.constructor.release(event);
          }
        }
      };

      var executeDispatchesAndReleaseSimulated = function executeDispatchesAndReleaseSimulated(e) {
        return executeDispatchesAndRelease(e, true);
      };

      var executeDispatchesAndReleaseTopLevel = function executeDispatchesAndReleaseTopLevel(e) {
        return executeDispatchesAndRelease(e, false);
      };

      function isInteractive(tag) {
        return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
      }

      function shouldPreventMouseEvent(name, type, props) {
        switch (name) {
          case "onClick":
          case "onClickCapture":
          case "onDoubleClick":
          case "onDoubleClickCapture":
          case "onMouseDown":
          case "onMouseDownCapture":
          case "onMouseMove":
          case "onMouseMoveCapture":
          case "onMouseUp":
          case "onMouseUpCapture":
            return !!(props.disabled && isInteractive(type));

          default:
            return false;
        }
      }

      var injection = {
        injectEventPluginOrder: injectEventPluginOrder,
        injectEventPluginsByName: injectEventPluginsByName
      };

      function getListener(inst, registrationName) {
        var listener = void 0;
        var stateNode = inst.stateNode;

        if (!stateNode) {
          return null;
        }

        var props = getFiberCurrentPropsFromNode(stateNode);

        if (!props) {
          return null;
        }

        listener = props[registrationName];

        if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
          return null;
        }

        invariant(!listener || typeof listener === "function", "Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
        return listener;
      }

      function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        var events = null;

        for (var i = 0; i < plugins.length; i++) {
          var possiblePlugin = plugins[i];

          if (possiblePlugin) {
            var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);

            if (extractedEvents) {
              events = accumulateInto(events, extractedEvents);
            }
          }
        }

        return events;
      }

      function runEventsInBatch(events, simulated) {
        if (events !== null) {
          eventQueue = accumulateInto(eventQueue, events);
        }

        var processingEventQueue = eventQueue;
        eventQueue = null;

        if (!processingEventQueue) {
          return;
        }

        if (simulated) {
          forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
        } else {
          forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
        }

        invariant(!eventQueue, "processEventQueue(): Additional events were enqueued while processing " + "an event queue. Support for this has not yet been implemented.");
        ReactErrorUtils.rethrowCaughtError();
      }

      function runExtractedEventsInBatch(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        var events = extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
        runEventsInBatch(events, false);
      }

      var IndeterminateComponent = 0;
      var FunctionalComponent = 1;
      var ClassComponent = 2;
      var HostRoot = 3;
      var HostPortal = 4;
      var HostComponent = 5;
      var HostText = 6;
      var CallComponent = 7;
      var CallHandlerPhase = 8;
      var ReturnComponent = 9;
      var Fragment = 10;
      var Mode = 11;
      var ContextConsumer = 12;
      var ContextProvider = 13;

      function getParent(inst) {
        do {
          inst = inst["return"];
        } while (inst && inst.tag !== HostComponent);

        if (inst) {
          return inst;
        }

        return null;
      }

      function getLowestCommonAncestor(instA, instB) {
        var depthA = 0;

        for (var tempA = instA; tempA; tempA = getParent(tempA)) {
          depthA++;
        }

        var depthB = 0;

        for (var tempB = instB; tempB; tempB = getParent(tempB)) {
          depthB++;
        }

        while (depthA - depthB > 0) {
          instA = getParent(instA);
          depthA--;
        }

        while (depthB - depthA > 0) {
          instB = getParent(instB);
          depthB--;
        }

        var depth = depthA;

        while (depth--) {
          if (instA === instB || instA === instB.alternate) {
            return instA;
          }

          instA = getParent(instA);
          instB = getParent(instB);
        }

        return null;
      }

      function isAncestor(instA, instB) {
        while (instB) {
          if (instA === instB || instA === instB.alternate) {
            return true;
          }

          instB = getParent(instB);
        }

        return false;
      }

      function getParentInstance(inst) {
        return getParent(inst);
      }

      function traverseTwoPhase(inst, fn, arg) {
        var path = [];

        while (inst) {
          path.push(inst);
          inst = getParent(inst);
        }

        var i = void 0;

        for (i = path.length; i-- > 0;) {
          fn(path[i], "captured", arg);
        }

        for (i = 0; i < path.length; i++) {
          fn(path[i], "bubbled", arg);
        }
      }

      function listenerAtPhase(inst, event, propagationPhase) {
        var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
        return getListener(inst, registrationName);
      }

      function accumulateDirectionalDispatches(inst, phase, event) {
        {
          warning(inst, "Dispatching inst must not be null");
        }
        var listener = listenerAtPhase(inst, event, phase);

        if (listener) {
          event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
          event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
        }
      }

      function accumulateTwoPhaseDispatchesSingle(event) {
        if (event && event.dispatchConfig.phasedRegistrationNames) {
          traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
        }
      }

      function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
        if (event && event.dispatchConfig.phasedRegistrationNames) {
          var targetInst = event._targetInst;
          var parentInst = targetInst ? getParentInstance(targetInst) : null;
          traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);
        }
      }

      function accumulateDispatches(inst, ignoredDirection, event) {
        if (inst && event && event.dispatchConfig.registrationName) {
          var registrationName = event.dispatchConfig.registrationName;
          var listener = getListener(inst, registrationName);

          if (listener) {
            event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
            event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
          }
        }
      }

      function accumulateDirectDispatchesSingle(event) {
        if (event && event.dispatchConfig.registrationName) {
          accumulateDispatches(event._targetInst, null, event);
        }
      }

      function accumulateTwoPhaseDispatches(events) {
        forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
      }

      function accumulateTwoPhaseDispatchesSkipTarget(events) {
        forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
      }

      function accumulateDirectDispatches(events) {
        forEachAccumulated(events, accumulateDirectDispatchesSingle);
      }

      var didWarnForAddedNewProperty = false;
      var EVENT_POOL_SIZE = 10;
      var shouldBeReleasedProperties = ["dispatchConfig", "_targetInst", "nativeEvent", "isDefaultPrevented", "isPropagationStopped", "_dispatchListeners", "_dispatchInstances"];
      var EventInterface = {
        type: null,
        target: null,
        currentTarget: emptyFunction.thatReturnsNull,
        eventPhase: null,
        bubbles: null,
        cancelable: null,
        timeStamp: function timeStamp(event) {
          return event.timeStamp || Date.now();
        },
        defaultPrevented: null,
        isTrusted: null
      };

      function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
        {
          delete this.nativeEvent;
          delete this.preventDefault;
          delete this.stopPropagation;
        }
        this.dispatchConfig = dispatchConfig;
        this._targetInst = targetInst;
        this.nativeEvent = nativeEvent;
        var Interface = this.constructor.Interface;

        for (var propName in Interface) {
          if (!Interface.hasOwnProperty(propName)) {
            continue;
          }

          {
            delete this[propName];
          }
          var normalize = Interface[propName];

          if (normalize) {
            this[propName] = normalize(nativeEvent);
          } else {
            if (propName === "target") {
              this.target = nativeEventTarget;
            } else {
              this[propName] = nativeEvent[propName];
            }
          }
        }

        var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;

        if (defaultPrevented) {
          this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
        } else {
          this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
        }

        this.isPropagationStopped = emptyFunction.thatReturnsFalse;
        return this;
      }

      babelHelpers.extends(SyntheticEvent.prototype, {
        preventDefault: function preventDefault() {
          this.defaultPrevented = true;
          var event = this.nativeEvent;

          if (!event) {
            return;
          }

          if (event.preventDefault) {
            event.preventDefault();
          } else if (typeof event.returnValue !== "unknown") {
            event.returnValue = false;
          }

          this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
        },
        stopPropagation: function stopPropagation() {
          var event = this.nativeEvent;

          if (!event) {
            return;
          }

          if (event.stopPropagation) {
            event.stopPropagation();
          } else if (typeof event.cancelBubble !== "unknown") {
            event.cancelBubble = true;
          }

          this.isPropagationStopped = emptyFunction.thatReturnsTrue;
        },
        persist: function persist() {
          this.isPersistent = emptyFunction.thatReturnsTrue;
        },
        isPersistent: emptyFunction.thatReturnsFalse,
        destructor: function destructor() {
          var Interface = this.constructor.Interface;

          for (var propName in Interface) {
            {
              Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
            }
          }

          for (var i = 0; i < shouldBeReleasedProperties.length; i++) {
            this[shouldBeReleasedProperties[i]] = null;
          }

          {
            Object.defineProperty(this, "nativeEvent", getPooledWarningPropertyDefinition("nativeEvent", null));
            Object.defineProperty(this, "preventDefault", getPooledWarningPropertyDefinition("preventDefault", emptyFunction));
            Object.defineProperty(this, "stopPropagation", getPooledWarningPropertyDefinition("stopPropagation", emptyFunction));
          }
        }
      });
      SyntheticEvent.Interface = EventInterface;

      SyntheticEvent.extend = function (Interface) {
        var Super = this;

        var E = function E() {};

        E.prototype = Super.prototype;
        var prototype = new E();

        function Class() {
          return Super.apply(this, arguments);
        }

        babelHelpers.extends(prototype, Class.prototype);
        Class.prototype = prototype;
        Class.prototype.constructor = Class;
        Class.Interface = babelHelpers.extends({}, Super.Interface, Interface);
        Class.extend = Super.extend;
        addEventPoolingTo(Class);
        return Class;
      };

      {
        var isProxySupported = typeof Proxy === "function" && !Object.isSealed(new Proxy({}, {}));

        if (isProxySupported) {
          SyntheticEvent = new Proxy(SyntheticEvent, {
            construct: function construct(target, args) {
              return this.apply(target, Object.create(target.prototype), args);
            },
            apply: function apply(constructor, that, args) {
              return new Proxy(constructor.apply(that, args), {
                set: function set(target, prop, value) {
                  if (prop !== "isPersistent" && !target.constructor.Interface.hasOwnProperty(prop) && shouldBeReleasedProperties.indexOf(prop) === -1) {
                    warning(didWarnForAddedNewProperty || target.isPersistent(), "This synthetic event is reused for performance reasons. If you're " + "seeing this, you're adding a new property in the synthetic event object. " + "The property is never released. See " + "https://fb.me/react-event-pooling for more information.");
                    didWarnForAddedNewProperty = true;
                  }

                  target[prop] = value;
                  return true;
                }
              });
            }
          });
        }
      }
      addEventPoolingTo(SyntheticEvent);

      function getPooledWarningPropertyDefinition(propName, getVal) {
        var isFunction = typeof getVal === "function";
        return {
          configurable: true,
          set: set,
          get: get
        };

        function set(val) {
          var action = isFunction ? "setting the method" : "setting the property";
          warn(action, "This is effectively a no-op");
          return val;
        }

        function get() {
          var action = isFunction ? "accessing the method" : "accessing the property";
          var result = isFunction ? "This is a no-op function" : "This is set to null";
          warn(action, result);
          return getVal;
        }

        function warn(action, result) {
          var warningCondition = false;
          warning(warningCondition, "This synthetic event is reused for performance reasons. If you're seeing this, " + "you're %s `%s` on a released/nullified synthetic event. %s. " + "If you must keep the original synthetic event around, use event.persist(). " + "See https://fb.me/react-event-pooling for more information.", action, propName, result);
        }
      }

      function getPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
        var EventConstructor = this;

        if (EventConstructor.eventPool.length) {
          var instance = EventConstructor.eventPool.pop();
          EventConstructor.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
          return instance;
        }

        return new EventConstructor(dispatchConfig, targetInst, nativeEvent, nativeInst);
      }

      function releasePooledEvent(event) {
        var EventConstructor = this;
        invariant(event instanceof EventConstructor, "Trying to release an event instance  into a pool of a different type.");
        event.destructor();

        if (EventConstructor.eventPool.length < EVENT_POOL_SIZE) {
          EventConstructor.eventPool.push(event);
        }
      }

      function addEventPoolingTo(EventConstructor) {
        EventConstructor.eventPool = [];
        EventConstructor.getPooled = getPooledEvent;
        EventConstructor.release = releasePooledEvent;
      }

      var SyntheticEvent$1 = SyntheticEvent;
      var ResponderSyntheticEvent = SyntheticEvent$1.extend({
        touchHistory: function touchHistory(nativeEvent) {
          return null;
        }
      });
      var MAX_TOUCH_BANK = 20;
      var touchBank = [];
      var touchHistory = {
        touchBank: touchBank,
        numberActiveTouches: 0,
        indexOfSingleActiveTouch: -1,
        mostRecentTimeStamp: 0
      };

      function timestampForTouch(touch) {
        return touch.timeStamp || touch.timestamp;
      }

      function createTouchRecord(touch) {
        return {
          touchActive: true,
          startPageX: touch.pageX,
          startPageY: touch.pageY,
          startTimeStamp: timestampForTouch(touch),
          currentPageX: touch.pageX,
          currentPageY: touch.pageY,
          currentTimeStamp: timestampForTouch(touch),
          previousPageX: touch.pageX,
          previousPageY: touch.pageY,
          previousTimeStamp: timestampForTouch(touch)
        };
      }

      function resetTouchRecord(touchRecord, touch) {
        touchRecord.touchActive = true;
        touchRecord.startPageX = touch.pageX;
        touchRecord.startPageY = touch.pageY;
        touchRecord.startTimeStamp = timestampForTouch(touch);
        touchRecord.currentPageX = touch.pageX;
        touchRecord.currentPageY = touch.pageY;
        touchRecord.currentTimeStamp = timestampForTouch(touch);
        touchRecord.previousPageX = touch.pageX;
        touchRecord.previousPageY = touch.pageY;
        touchRecord.previousTimeStamp = timestampForTouch(touch);
      }

      function getTouchIdentifier(_ref) {
        var identifier = _ref.identifier;
        invariant(identifier != null, "Touch object is missing identifier.");
        {
          warning(identifier <= MAX_TOUCH_BANK, "Touch identifier %s is greater than maximum supported %s which causes " + "performance issues backfilling array locations for all of the indices.", identifier, MAX_TOUCH_BANK);
        }
        return identifier;
      }

      function recordTouchStart(touch) {
        var identifier = getTouchIdentifier(touch);
        var touchRecord = touchBank[identifier];

        if (touchRecord) {
          resetTouchRecord(touchRecord, touch);
        } else {
          touchBank[identifier] = createTouchRecord(touch);
        }

        touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
      }

      function recordTouchMove(touch) {
        var touchRecord = touchBank[getTouchIdentifier(touch)];

        if (touchRecord) {
          touchRecord.touchActive = true;
          touchRecord.previousPageX = touchRecord.currentPageX;
          touchRecord.previousPageY = touchRecord.currentPageY;
          touchRecord.previousTimeStamp = touchRecord.currentTimeStamp;
          touchRecord.currentPageX = touch.pageX;
          touchRecord.currentPageY = touch.pageY;
          touchRecord.currentTimeStamp = timestampForTouch(touch);
          touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
        } else {
          console.error("Cannot record touch move without a touch start.\n" + "Touch Move: %s\n", "Touch Bank: %s", printTouch(touch), printTouchBank());
        }
      }

      function recordTouchEnd(touch) {
        var touchRecord = touchBank[getTouchIdentifier(touch)];

        if (touchRecord) {
          touchRecord.touchActive = false;
          touchRecord.previousPageX = touchRecord.currentPageX;
          touchRecord.previousPageY = touchRecord.currentPageY;
          touchRecord.previousTimeStamp = touchRecord.currentTimeStamp;
          touchRecord.currentPageX = touch.pageX;
          touchRecord.currentPageY = touch.pageY;
          touchRecord.currentTimeStamp = timestampForTouch(touch);
          touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
        } else {
          console.error("Cannot record touch end without a touch start.\n" + "Touch End: %s\n", "Touch Bank: %s", printTouch(touch), printTouchBank());
        }
      }

      function printTouch(touch) {
        return JSON.stringify({
          identifier: touch.identifier,
          pageX: touch.pageX,
          pageY: touch.pageY,
          timestamp: timestampForTouch(touch)
        });
      }

      function printTouchBank() {
        var printed = JSON.stringify(touchBank.slice(0, MAX_TOUCH_BANK));

        if (touchBank.length > MAX_TOUCH_BANK) {
          printed += " (original size: " + touchBank.length + ")";
        }

        return printed;
      }

      var ResponderTouchHistoryStore = {
        recordTouchTrack: function recordTouchTrack(topLevelType, nativeEvent) {
          if (isMoveish(topLevelType)) {
            nativeEvent.changedTouches.forEach(recordTouchMove);
          } else if (isStartish(topLevelType)) {
            nativeEvent.changedTouches.forEach(recordTouchStart);
            touchHistory.numberActiveTouches = nativeEvent.touches.length;

            if (touchHistory.numberActiveTouches === 1) {
              touchHistory.indexOfSingleActiveTouch = nativeEvent.touches[0].identifier;
            }
          } else if (isEndish(topLevelType)) {
            nativeEvent.changedTouches.forEach(recordTouchEnd);
            touchHistory.numberActiveTouches = nativeEvent.touches.length;

            if (touchHistory.numberActiveTouches === 1) {
              for (var i = 0; i < touchBank.length; i++) {
                var touchTrackToCheck = touchBank[i];

                if (touchTrackToCheck != null && touchTrackToCheck.touchActive) {
                  touchHistory.indexOfSingleActiveTouch = i;
                  break;
                }
              }

              {
                var activeRecord = touchBank[touchHistory.indexOfSingleActiveTouch];
                warning(activeRecord != null && activeRecord.touchActive, "Cannot find single active touch.");
              }
            }
          }
        },
        touchHistory: touchHistory
      };

      function accumulate(current, next) {
        invariant(next != null, "accumulate(...): Accumulated items must be not be null or undefined.");

        if (current == null) {
          return next;
        }

        if (Array.isArray(current)) {
          return current.concat(next);
        }

        if (Array.isArray(next)) {
          return [current].concat(next);
        }

        return [current, next];
      }

      var responderInst = null;
      var trackedTouchCount = 0;
      var previousActiveTouches = 0;

      var changeResponder = function changeResponder(nextResponderInst, blockHostResponder) {
        var oldResponderInst = responderInst;
        responderInst = nextResponderInst;

        if (ResponderEventPlugin.GlobalResponderHandler !== null) {
          ResponderEventPlugin.GlobalResponderHandler.onChange(oldResponderInst, nextResponderInst, blockHostResponder);
        }
      };

      var eventTypes = {
        startShouldSetResponder: {
          phasedRegistrationNames: {
            bubbled: "onStartShouldSetResponder",
            captured: "onStartShouldSetResponderCapture"
          }
        },
        scrollShouldSetResponder: {
          phasedRegistrationNames: {
            bubbled: "onScrollShouldSetResponder",
            captured: "onScrollShouldSetResponderCapture"
          }
        },
        selectionChangeShouldSetResponder: {
          phasedRegistrationNames: {
            bubbled: "onSelectionChangeShouldSetResponder",
            captured: "onSelectionChangeShouldSetResponderCapture"
          }
        },
        moveShouldSetResponder: {
          phasedRegistrationNames: {
            bubbled: "onMoveShouldSetResponder",
            captured: "onMoveShouldSetResponderCapture"
          }
        },
        responderStart: {
          registrationName: "onResponderStart"
        },
        responderMove: {
          registrationName: "onResponderMove"
        },
        responderEnd: {
          registrationName: "onResponderEnd"
        },
        responderRelease: {
          registrationName: "onResponderRelease"
        },
        responderTerminationRequest: {
          registrationName: "onResponderTerminationRequest"
        },
        responderGrant: {
          registrationName: "onResponderGrant"
        },
        responderReject: {
          registrationName: "onResponderReject"
        },
        responderTerminate: {
          registrationName: "onResponderTerminate"
        }
      };

      function setResponderAndExtractTransfer(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        var shouldSetEventType = isStartish(topLevelType) ? eventTypes.startShouldSetResponder : isMoveish(topLevelType) ? eventTypes.moveShouldSetResponder : topLevelType === "topSelectionChange" ? eventTypes.selectionChangeShouldSetResponder : eventTypes.scrollShouldSetResponder;
        var bubbleShouldSetFrom = !responderInst ? targetInst : getLowestCommonAncestor(responderInst, targetInst);
        var skipOverBubbleShouldSetFrom = bubbleShouldSetFrom === responderInst;
        var shouldSetEvent = ResponderSyntheticEvent.getPooled(shouldSetEventType, bubbleShouldSetFrom, nativeEvent, nativeEventTarget);
        shouldSetEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;

        if (skipOverBubbleShouldSetFrom) {
          accumulateTwoPhaseDispatchesSkipTarget(shouldSetEvent);
        } else {
          accumulateTwoPhaseDispatches(shouldSetEvent);
        }

        var wantsResponderInst = executeDispatchesInOrderStopAtTrue(shouldSetEvent);

        if (!shouldSetEvent.isPersistent()) {
          shouldSetEvent.constructor.release(shouldSetEvent);
        }

        if (!wantsResponderInst || wantsResponderInst === responderInst) {
          return null;
        }

        var extracted = void 0;
        var grantEvent = ResponderSyntheticEvent.getPooled(eventTypes.responderGrant, wantsResponderInst, nativeEvent, nativeEventTarget);
        grantEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;
        accumulateDirectDispatches(grantEvent);
        var blockHostResponder = executeDirectDispatch(grantEvent) === true;

        if (responderInst) {
          var terminationRequestEvent = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminationRequest, responderInst, nativeEvent, nativeEventTarget);
          terminationRequestEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;
          accumulateDirectDispatches(terminationRequestEvent);
          var shouldSwitch = !hasDispatches(terminationRequestEvent) || executeDirectDispatch(terminationRequestEvent);

          if (!terminationRequestEvent.isPersistent()) {
            terminationRequestEvent.constructor.release(terminationRequestEvent);
          }

          if (shouldSwitch) {
            var terminateEvent = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminate, responderInst, nativeEvent, nativeEventTarget);
            terminateEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;
            accumulateDirectDispatches(terminateEvent);
            extracted = accumulate(extracted, [grantEvent, terminateEvent]);
            changeResponder(wantsResponderInst, blockHostResponder);
          } else {
            var rejectEvent = ResponderSyntheticEvent.getPooled(eventTypes.responderReject, wantsResponderInst, nativeEvent, nativeEventTarget);
            rejectEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;
            accumulateDirectDispatches(rejectEvent);
            extracted = accumulate(extracted, rejectEvent);
          }
        } else {
          extracted = accumulate(extracted, grantEvent);
          changeResponder(wantsResponderInst, blockHostResponder);
        }

        return extracted;
      }

      function canTriggerTransfer(topLevelType, topLevelInst, nativeEvent) {
        return topLevelInst && (topLevelType === "topScroll" && !nativeEvent.responderIgnoreScroll || trackedTouchCount > 0 && topLevelType === "topSelectionChange" || isStartish(topLevelType) || isMoveish(topLevelType));
      }

      function noResponderTouches(nativeEvent) {
        var touches = nativeEvent.touches;

        if (!touches || touches.length === 0) {
          return true;
        }

        for (var i = 0; i < touches.length; i++) {
          var activeTouch = touches[i];
          var target = activeTouch.target;

          if (target !== null && target !== undefined && target !== 0) {
            var targetInst = getInstanceFromNode(target);

            if (isAncestor(responderInst, targetInst)) {
              return false;
            }
          }
        }

        return true;
      }

      var ResponderEventPlugin = {
        _getResponder: function _getResponder() {
          return responderInst;
        },
        eventTypes: eventTypes,
        extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
          if (isStartish(topLevelType)) {
            trackedTouchCount += 1;
          } else if (isEndish(topLevelType)) {
            if (trackedTouchCount >= 0) {
              trackedTouchCount -= 1;
            } else {
              console.error("Ended a touch event which was not counted in `trackedTouchCount`.");
              return null;
            }
          }

          ResponderTouchHistoryStore.recordTouchTrack(topLevelType, nativeEvent);
          var extracted = canTriggerTransfer(topLevelType, targetInst, nativeEvent) ? setResponderAndExtractTransfer(topLevelType, targetInst, nativeEvent, nativeEventTarget) : null;
          var isResponderTouchStart = responderInst && isStartish(topLevelType);
          var isResponderTouchMove = responderInst && isMoveish(topLevelType);
          var isResponderTouchEnd = responderInst && isEndish(topLevelType);
          var incrementalTouch = isResponderTouchStart ? eventTypes.responderStart : isResponderTouchMove ? eventTypes.responderMove : isResponderTouchEnd ? eventTypes.responderEnd : null;

          if (incrementalTouch) {
            var gesture = ResponderSyntheticEvent.getPooled(incrementalTouch, responderInst, nativeEvent, nativeEventTarget);
            gesture.touchHistory = ResponderTouchHistoryStore.touchHistory;
            accumulateDirectDispatches(gesture);
            extracted = accumulate(extracted, gesture);
          }

          var isResponderTerminate = responderInst && topLevelType === "topTouchCancel";
          var isResponderRelease = responderInst && !isResponderTerminate && isEndish(topLevelType) && noResponderTouches(nativeEvent);
          var finalTouch = isResponderTerminate ? eventTypes.responderTerminate : isResponderRelease ? eventTypes.responderRelease : null;

          if (finalTouch) {
            var finalEvent = ResponderSyntheticEvent.getPooled(finalTouch, responderInst, nativeEvent, nativeEventTarget);
            finalEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;
            accumulateDirectDispatches(finalEvent);
            extracted = accumulate(extracted, finalEvent);
            changeResponder(null);
          }

          var numberActiveTouches = ResponderTouchHistoryStore.touchHistory.numberActiveTouches;

          if (ResponderEventPlugin.GlobalInteractionHandler && numberActiveTouches !== previousActiveTouches) {
            ResponderEventPlugin.GlobalInteractionHandler.onChange(numberActiveTouches);
          }

          previousActiveTouches = numberActiveTouches;
          return extracted;
        },
        GlobalResponderHandler: null,
        GlobalInteractionHandler: null,
        injection: {
          injectGlobalResponderHandler: function injectGlobalResponderHandler(GlobalResponderHandler) {
            ResponderEventPlugin.GlobalResponderHandler = GlobalResponderHandler;
          },
          injectGlobalInteractionHandler: function injectGlobalInteractionHandler(GlobalInteractionHandler) {
            ResponderEventPlugin.GlobalInteractionHandler = GlobalInteractionHandler;
          }
        }
      };
      var customBubblingEventTypes = {};
      var customDirectEventTypes = {};
      var ReactNativeBridgeEventPlugin = {
        eventTypes: {},
        extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
          if (targetInst == null) {
            return null;
          }

          var bubbleDispatchConfig = customBubblingEventTypes[topLevelType];
          var directDispatchConfig = customDirectEventTypes[topLevelType];
          invariant(bubbleDispatchConfig || directDispatchConfig, 'Unsupported top level event type "%s" dispatched', topLevelType);
          var event = SyntheticEvent$1.getPooled(bubbleDispatchConfig || directDispatchConfig, targetInst, nativeEvent, nativeEventTarget);

          if (bubbleDispatchConfig) {
            accumulateTwoPhaseDispatches(event);
          } else if (directDispatchConfig) {
            accumulateDirectDispatches(event);
          } else {
            return null;
          }

          return event;
        },
        processEventTypes: function processEventTypes(viewConfig) {
          var bubblingEventTypes = viewConfig.bubblingEventTypes,
              directEventTypes = viewConfig.directEventTypes;
          {
            if (bubblingEventTypes != null && directEventTypes != null) {
              for (var topLevelType in directEventTypes) {
                invariant(bubblingEventTypes[topLevelType] == null, "Event cannot be both direct and bubbling: %s", topLevelType);
              }
            }
          }

          if (bubblingEventTypes != null) {
            for (var _topLevelType in bubblingEventTypes) {
              if (customBubblingEventTypes[_topLevelType] == null) {
                ReactNativeBridgeEventPlugin.eventTypes[_topLevelType] = customBubblingEventTypes[_topLevelType] = bubblingEventTypes[_topLevelType];
              }
            }
          }

          if (directEventTypes != null) {
            for (var _topLevelType2 in directEventTypes) {
              if (customDirectEventTypes[_topLevelType2] == null) {
                ReactNativeBridgeEventPlugin.eventTypes[_topLevelType2] = customDirectEventTypes[_topLevelType2] = directEventTypes[_topLevelType2];
              }
            }
          }
        }
      };
      var instanceCache = {};
      var instanceProps = {};

      function precacheFiberNode(hostInst, tag) {
        instanceCache[tag] = hostInst;
      }

      function uncacheFiberNode(tag) {
        delete instanceCache[tag];
        delete instanceProps[tag];
      }

      function getInstanceFromTag(tag) {
        if (typeof tag === "number") {
          return instanceCache[tag] || null;
        } else {
          return tag;
        }
      }

      function getTagFromInstance(inst) {
        var tag = inst.stateNode._nativeTag;

        if (tag === undefined) {
          tag = inst.stateNode.canonical._nativeTag;
        }

        invariant(tag, "All native instances should have a tag.");
        return tag;
      }

      function getFiberCurrentPropsFromNode$1(stateNode) {
        return instanceProps[stateNode._nativeTag] || null;
      }

      function updateFiberProps(tag, props) {
        instanceProps[tag] = props;
      }

      var ReactNativeComponentTree = Object.freeze({
        precacheFiberNode: precacheFiberNode,
        uncacheFiberNode: uncacheFiberNode,
        getClosestInstanceFromNode: getInstanceFromTag,
        getInstanceFromNode: getInstanceFromTag,
        getNodeFromInstance: getTagFromInstance,
        getFiberCurrentPropsFromNode: getFiberCurrentPropsFromNode$1,
        updateFiberProps: updateFiberProps
      });
      var ReactNativeEventPluginOrder = ["ResponderEventPlugin", "ReactNativeBridgeEventPlugin"];
      var ReactNativeGlobalResponderHandler = {
        onChange: function onChange(from, to, blockNativeResponder) {
          if (to !== null) {
            var tag = to.stateNode._nativeTag;
            UIManager.setJSResponder(tag, blockNativeResponder);
          } else {
            UIManager.clearJSResponder();
          }
        }
      };
      injection.injectEventPluginOrder(ReactNativeEventPluginOrder);
      injection$1.injectComponentTree(ReactNativeComponentTree);
      ResponderEventPlugin.injection.injectGlobalResponderHandler(ReactNativeGlobalResponderHandler);
      injection.injectEventPluginsByName({
        ResponderEventPlugin: ResponderEventPlugin,
        ReactNativeBridgeEventPlugin: ReactNativeBridgeEventPlugin
      });
      var fiberHostComponent = null;
      var restoreTarget = null;
      var restoreQueue = null;

      function restoreStateOfTarget(target) {
        var internalInstance = getInstanceFromNode(target);

        if (!internalInstance) {
          return;
        }

        invariant(fiberHostComponent && typeof fiberHostComponent.restoreControlledState === "function", "Fiber needs to be injected to handle a fiber target for controlled " + "events. This error is likely caused by a bug in React. Please file an issue.");
        var props = getFiberCurrentPropsFromNode(internalInstance.stateNode);
        fiberHostComponent.restoreControlledState(internalInstance.stateNode, internalInstance.type, props);
      }

      function needsStateRestore() {
        return restoreTarget !== null || restoreQueue !== null;
      }

      function restoreStateIfNeeded() {
        if (!restoreTarget) {
          return;
        }

        var target = restoreTarget;
        var queuedTargets = restoreQueue;
        restoreTarget = null;
        restoreQueue = null;
        restoreStateOfTarget(target);

        if (queuedTargets) {
          for (var i = 0; i < queuedTargets.length; i++) {
            restoreStateOfTarget(queuedTargets[i]);
          }
        }
      }

      var _batchedUpdates = function _batchedUpdates(fn, bookkeeping) {
        return fn(bookkeeping);
      };

      var _interactiveUpdates = function _interactiveUpdates(fn, a, b) {
        return fn(a, b);
      };

      var _flushInteractiveUpdates = function _flushInteractiveUpdates() {};

      var isBatching = false;

      function batchedUpdates(fn, bookkeeping) {
        if (isBatching) {
          return fn(bookkeeping);
        }

        isBatching = true;

        try {
          return _batchedUpdates(fn, bookkeeping);
        } finally {
          isBatching = false;
          var controlledComponentsHavePendingUpdates = needsStateRestore();

          if (controlledComponentsHavePendingUpdates) {
            _flushInteractiveUpdates();

            restoreStateIfNeeded();
          }
        }
      }

      var injection$2 = {
        injectRenderer: function injectRenderer(renderer) {
          _batchedUpdates = renderer.batchedUpdates;
          _interactiveUpdates = renderer.interactiveUpdates;
          _flushInteractiveUpdates = renderer.flushInteractiveUpdates;
        }
      };
      var INITIAL_TAG_COUNT = 1;
      var ReactNativeTagHandles = {
        tagsStartAt: INITIAL_TAG_COUNT,
        tagCount: INITIAL_TAG_COUNT,
        allocateTag: function allocateTag() {
          while (this.reactTagIsNativeTopRootID(ReactNativeTagHandles.tagCount)) {
            ReactNativeTagHandles.tagCount++;
          }

          var tag = ReactNativeTagHandles.tagCount;
          ReactNativeTagHandles.tagCount++;
          return tag;
        },
        assertRootTag: function assertRootTag(tag) {
          invariant(this.reactTagIsNativeTopRootID(tag), "Expect a native root tag, instead got %s", tag);
        },
        reactTagIsNativeTopRootID: function reactTagIsNativeTopRootID(reactTag) {
          return reactTag % 10 === 1;
        }
      };
      var EMPTY_NATIVE_EVENT = {};

      var touchSubsequence = function touchSubsequence(touches, indices) {
        var ret = [];

        for (var i = 0; i < indices.length; i++) {
          ret.push(touches[indices[i]]);
        }

        return ret;
      };

      var removeTouchesAtIndices = function removeTouchesAtIndices(touches, indices) {
        var rippedOut = [];
        var temp = touches;

        for (var i = 0; i < indices.length; i++) {
          var index = indices[i];
          rippedOut.push(touches[index]);
          temp[index] = null;
        }

        var fillAt = 0;

        for (var j = 0; j < temp.length; j++) {
          var cur = temp[j];

          if (cur !== null) {
            temp[fillAt++] = cur;
          }
        }

        temp.length = fillAt;
        return rippedOut;
      };

      function _receiveRootNodeIDEvent(rootNodeID, topLevelType, nativeEventParam) {
        var nativeEvent = nativeEventParam || EMPTY_NATIVE_EVENT;
        var inst = getInstanceFromTag(rootNodeID);
        batchedUpdates(function () {
          runExtractedEventsInBatch(topLevelType, inst, nativeEvent, nativeEvent.target);
        });
      }

      function receiveEvent(rootNodeID, topLevelType, nativeEventParam) {
        _receiveRootNodeIDEvent(rootNodeID, topLevelType, nativeEventParam);
      }

      function receiveTouches(eventTopLevelType, touches, changedIndices) {
        var changedTouches = eventTopLevelType === "topTouchEnd" || eventTopLevelType === "topTouchCancel" ? removeTouchesAtIndices(touches, changedIndices) : touchSubsequence(touches, changedIndices);

        for (var jj = 0; jj < changedTouches.length; jj++) {
          var touch = changedTouches[jj];
          touch.changedTouches = changedTouches;
          touch.touches = touches;
          var nativeEvent = touch;
          var rootNodeID = null;
          var target = nativeEvent.target;

          if (target !== null && target !== undefined) {
            if (target < ReactNativeTagHandles.tagsStartAt) {
              {
                warning(false, "A view is reporting that a touch occurred on tag zero.");
              }
            } else {
              rootNodeID = target;
            }
          }

          _receiveRootNodeIDEvent(rootNodeID, eventTopLevelType, nativeEvent);
        }
      }

      var ReactNativeEventEmitter = Object.freeze({
        getListener: getListener,
        registrationNames: registrationNameModules,
        _receiveRootNodeIDEvent: _receiveRootNodeIDEvent,
        receiveEvent: receiveEvent,
        receiveTouches: receiveTouches
      });
      RCTEventEmitter.register(ReactNativeEventEmitter);
      var hasSymbol = typeof Symbol === "function" && Symbol["for"];
      var REACT_ELEMENT_TYPE = hasSymbol ? Symbol["for"]("react.element") : 0xeac7;
      var REACT_CALL_TYPE = hasSymbol ? Symbol["for"]("react.call") : 0xeac8;
      var REACT_RETURN_TYPE = hasSymbol ? Symbol["for"]("react.return") : 0xeac9;
      var REACT_PORTAL_TYPE = hasSymbol ? Symbol["for"]("react.portal") : 0xeaca;
      var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol["for"]("react.fragment") : 0xeacb;
      var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol["for"]("react.strict_mode") : 0xeacc;
      var REACT_PROVIDER_TYPE = hasSymbol ? Symbol["for"]("react.provider") : 0xeacd;
      var REACT_CONTEXT_TYPE = hasSymbol ? Symbol["for"]("react.context") : 0xeace;
      var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol["for"]("react.async_mode") : 0xeacf;
      var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && (typeof Symbol === "function" ? Symbol.iterator : "@@iterator");
      var FAUX_ITERATOR_SYMBOL = "@@iterator";

      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable === "undefined") {
          return null;
        }

        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

        if (typeof maybeIterator === "function") {
          return maybeIterator;
        }

        return null;
      }

      function _createPortal(children, containerInfo, implementation) {
        var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
        return {
          $$typeof: REACT_PORTAL_TYPE,
          key: key == null ? null : "" + key,
          children: children,
          containerInfo: containerInfo,
          implementation: implementation
        };
      }

      var TouchHistoryMath = {
        centroidDimension: function centroidDimension(touchHistory, touchesChangedAfter, isXAxis, ofCurrent) {
          var touchBank = touchHistory.touchBank;
          var total = 0;
          var count = 0;
          var oneTouchData = touchHistory.numberActiveTouches === 1 ? touchHistory.touchBank[touchHistory.indexOfSingleActiveTouch] : null;

          if (oneTouchData !== null) {
            if (oneTouchData.touchActive && oneTouchData.currentTimeStamp > touchesChangedAfter) {
              total += ofCurrent && isXAxis ? oneTouchData.currentPageX : ofCurrent && !isXAxis ? oneTouchData.currentPageY : !ofCurrent && isXAxis ? oneTouchData.previousPageX : oneTouchData.previousPageY;
              count = 1;
            }
          } else {
            for (var i = 0; i < touchBank.length; i++) {
              var touchTrack = touchBank[i];

              if (touchTrack !== null && touchTrack !== undefined && touchTrack.touchActive && touchTrack.currentTimeStamp >= touchesChangedAfter) {
                var toAdd = void 0;

                if (ofCurrent && isXAxis) {
                  toAdd = touchTrack.currentPageX;
                } else if (ofCurrent && !isXAxis) {
                  toAdd = touchTrack.currentPageY;
                } else if (!ofCurrent && isXAxis) {
                  toAdd = touchTrack.previousPageX;
                } else {
                  toAdd = touchTrack.previousPageY;
                }

                total += toAdd;
                count++;
              }
            }
          }

          return count > 0 ? total / count : TouchHistoryMath.noCentroid;
        },
        currentCentroidXOfTouchesChangedAfter: function currentCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
          return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true, true);
        },
        currentCentroidYOfTouchesChangedAfter: function currentCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
          return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false, true);
        },
        previousCentroidXOfTouchesChangedAfter: function previousCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
          return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true, false);
        },
        previousCentroidYOfTouchesChangedAfter: function previousCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
          return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false, false);
        },
        currentCentroidX: function currentCentroidX(touchHistory) {
          return TouchHistoryMath.centroidDimension(touchHistory, 0, true, true);
        },
        currentCentroidY: function currentCentroidY(touchHistory) {
          return TouchHistoryMath.centroidDimension(touchHistory, 0, false, true);
        },
        noCentroid: -1
      };
      var ReactVersion = "16.3.0-alpha.1";

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      var objects = {};
      var uniqueID = 1;
      var emptyObject$2 = {};

      var ReactNativePropRegistry = function () {
        function ReactNativePropRegistry() {
          _classCallCheck(this, ReactNativePropRegistry);
        }

        ReactNativePropRegistry.register = function register(object) {
          var id = ++uniqueID;
          {
            Object.freeze(object);
          }
          objects[id] = object;
          return id;
        };

        ReactNativePropRegistry.getByID = function getByID(id) {
          if (!id) {
            return emptyObject$2;
          }

          var object = objects[id];

          if (!object) {
            console.warn("Invalid style with id `" + id + "`. Skipping ...");
            return emptyObject$2;
          }

          return object;
        };

        return ReactNativePropRegistry;
      }();

      var emptyObject$1 = {};
      var removedKeys = null;
      var removedKeyCount = 0;

      function defaultDiffer(prevProp, nextProp) {
        if (typeof nextProp !== "object" || nextProp === null) {
          return true;
        } else {
          return deepDiffer(prevProp, nextProp);
        }
      }

      function resolveObject(idOrObject) {
        if (typeof idOrObject === "number") {
          return ReactNativePropRegistry.getByID(idOrObject);
        }

        return idOrObject;
      }

      function restoreDeletedValuesInNestedArray(updatePayload, node, validAttributes) {
        if (Array.isArray(node)) {
          var i = node.length;

          while (i-- && removedKeyCount > 0) {
            restoreDeletedValuesInNestedArray(updatePayload, node[i], validAttributes);
          }
        } else if (node && removedKeyCount > 0) {
          var obj = resolveObject(node);

          for (var propKey in removedKeys) {
            if (!removedKeys[propKey]) {
              continue;
            }

            var _nextProp = obj[propKey];

            if (_nextProp === undefined) {
              continue;
            }

            var attributeConfig = validAttributes[propKey];

            if (!attributeConfig) {
              continue;
            }

            if (typeof _nextProp === "function") {
              _nextProp = true;
            }

            if (typeof _nextProp === "undefined") {
              _nextProp = null;
            }

            if (typeof attributeConfig !== "object") {
              updatePayload[propKey] = _nextProp;
            } else if (typeof attributeConfig.diff === "function" || typeof attributeConfig.process === "function") {
              var nextValue = typeof attributeConfig.process === "function" ? attributeConfig.process(_nextProp) : _nextProp;
              updatePayload[propKey] = nextValue;
            }

            removedKeys[propKey] = false;
            removedKeyCount--;
          }
        }
      }

      function diffNestedArrayProperty(updatePayload, prevArray, nextArray, validAttributes) {
        var minLength = prevArray.length < nextArray.length ? prevArray.length : nextArray.length;
        var i = void 0;

        for (i = 0; i < minLength; i++) {
          updatePayload = diffNestedProperty(updatePayload, prevArray[i], nextArray[i], validAttributes);
        }

        for (; i < prevArray.length; i++) {
          updatePayload = clearNestedProperty(updatePayload, prevArray[i], validAttributes);
        }

        for (; i < nextArray.length; i++) {
          updatePayload = addNestedProperty(updatePayload, nextArray[i], validAttributes);
        }

        return updatePayload;
      }

      function diffNestedProperty(updatePayload, prevProp, nextProp, validAttributes) {
        if (!updatePayload && prevProp === nextProp) {
          return updatePayload;
        }

        if (!prevProp || !nextProp) {
          if (nextProp) {
            return addNestedProperty(updatePayload, nextProp, validAttributes);
          }

          if (prevProp) {
            return clearNestedProperty(updatePayload, prevProp, validAttributes);
          }

          return updatePayload;
        }

        if (!Array.isArray(prevProp) && !Array.isArray(nextProp)) {
          return diffProperties(updatePayload, resolveObject(prevProp), resolveObject(nextProp), validAttributes);
        }

        if (Array.isArray(prevProp) && Array.isArray(nextProp)) {
          return diffNestedArrayProperty(updatePayload, prevProp, nextProp, validAttributes);
        }

        if (Array.isArray(prevProp)) {
          return diffProperties(updatePayload, flattenStyle(prevProp), resolveObject(nextProp), validAttributes);
        }

        return diffProperties(updatePayload, resolveObject(prevProp), flattenStyle(nextProp), validAttributes);
      }

      function addNestedProperty(updatePayload, nextProp, validAttributes) {
        if (!nextProp) {
          return updatePayload;
        }

        if (!Array.isArray(nextProp)) {
          return addProperties(updatePayload, resolveObject(nextProp), validAttributes);
        }

        for (var i = 0; i < nextProp.length; i++) {
          updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
        }

        return updatePayload;
      }

      function clearNestedProperty(updatePayload, prevProp, validAttributes) {
        if (!prevProp) {
          return updatePayload;
        }

        if (!Array.isArray(prevProp)) {
          return clearProperties(updatePayload, resolveObject(prevProp), validAttributes);
        }

        for (var i = 0; i < prevProp.length; i++) {
          updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
        }

        return updatePayload;
      }

      function diffProperties(updatePayload, prevProps, nextProps, validAttributes) {
        var attributeConfig = void 0;
        var nextProp = void 0;
        var prevProp = void 0;

        for (var propKey in nextProps) {
          attributeConfig = validAttributes[propKey];

          if (!attributeConfig) {
            continue;
          }

          prevProp = prevProps[propKey];
          nextProp = nextProps[propKey];

          if (typeof nextProp === "function") {
            nextProp = true;

            if (typeof prevProp === "function") {
              prevProp = true;
            }
          }

          if (typeof nextProp === "undefined") {
            nextProp = null;

            if (typeof prevProp === "undefined") {
              prevProp = null;
            }
          }

          if (removedKeys) {
            removedKeys[propKey] = false;
          }

          if (updatePayload && updatePayload[propKey] !== undefined) {
            if (typeof attributeConfig !== "object") {
              updatePayload[propKey] = nextProp;
            } else if (typeof attributeConfig.diff === "function" || typeof attributeConfig.process === "function") {
              var nextValue = typeof attributeConfig.process === "function" ? attributeConfig.process(nextProp) : nextProp;
              updatePayload[propKey] = nextValue;
            }

            continue;
          }

          if (prevProp === nextProp) {
            continue;
          }

          if (typeof attributeConfig !== "object") {
            if (defaultDiffer(prevProp, nextProp)) {
              (updatePayload || (updatePayload = {}))[propKey] = nextProp;
            }
          } else if (typeof attributeConfig.diff === "function" || typeof attributeConfig.process === "function") {
            var shouldUpdate = prevProp === undefined || (typeof attributeConfig.diff === "function" ? attributeConfig.diff(prevProp, nextProp) : defaultDiffer(prevProp, nextProp));

            if (shouldUpdate) {
              var _nextValue = typeof attributeConfig.process === "function" ? attributeConfig.process(nextProp) : nextProp;

              (updatePayload || (updatePayload = {}))[propKey] = _nextValue;
            }
          } else {
            removedKeys = null;
            removedKeyCount = 0;
            updatePayload = diffNestedProperty(updatePayload, prevProp, nextProp, attributeConfig);

            if (removedKeyCount > 0 && updatePayload) {
              restoreDeletedValuesInNestedArray(updatePayload, nextProp, attributeConfig);
              removedKeys = null;
            }
          }
        }

        for (var _propKey in prevProps) {
          if (nextProps[_propKey] !== undefined) {
            continue;
          }

          attributeConfig = validAttributes[_propKey];

          if (!attributeConfig) {
            continue;
          }

          if (updatePayload && updatePayload[_propKey] !== undefined) {
            continue;
          }

          prevProp = prevProps[_propKey];

          if (prevProp === undefined) {
            continue;
          }

          if (typeof attributeConfig !== "object" || typeof attributeConfig.diff === "function" || typeof attributeConfig.process === "function") {
            (updatePayload || (updatePayload = {}))[_propKey] = null;

            if (!removedKeys) {
              removedKeys = {};
            }

            if (!removedKeys[_propKey]) {
              removedKeys[_propKey] = true;
              removedKeyCount++;
            }
          } else {
            updatePayload = clearNestedProperty(updatePayload, prevProp, attributeConfig);
          }
        }

        return updatePayload;
      }

      function addProperties(updatePayload, props, validAttributes) {
        return diffProperties(updatePayload, emptyObject$1, props, validAttributes);
      }

      function clearProperties(updatePayload, prevProps, validAttributes) {
        return diffProperties(updatePayload, prevProps, emptyObject$1, validAttributes);
      }

      function create(props, validAttributes) {
        return addProperties(null, props, validAttributes);
      }

      function diff(prevProps, nextProps, validAttributes) {
        return diffProperties(null, prevProps, nextProps, validAttributes);
      }

      function mountSafeCallback(context, callback) {
        return function () {
          if (!callback) {
            return undefined;
          }

          if (typeof context.__isMounted === "boolean") {
            if (!context.__isMounted) {
              return undefined;
            }
          } else if (typeof context.isMounted === "function") {
            if (!context.isMounted()) {
              return undefined;
            }
          }

          return callback.apply(context, arguments);
        };
      }

      function throwOnStylesProp(component, props) {
        if (props.styles !== undefined) {
          var owner = component._owner || null;
          var name = component.constructor.displayName;
          var msg = "`styles` is not a supported property of `" + name + "`, did " + "you mean `style` (singular)?";

          if (owner && owner.constructor && owner.constructor.displayName) {
            msg += "\n\nCheck the `" + owner.constructor.displayName + "` parent " + " component.";
          }

          throw new Error(msg);
        }
      }

      function warnForStyleProps(props, validAttributes) {
        for (var key in validAttributes.style) {
          if (!(validAttributes[key] || props[key] === undefined)) {
            console.error("You are setting the style `{ " + key + ": ... }` as a prop. You " + "should nest it in a style object. " + "E.g. `{ style: { " + key + ": ... } }`");
          }
        }
      }

      function get(key) {
        return key._reactInternalFiber;
      }

      function set(key, value) {
        key._reactInternalFiber = value;
      }

      var ReactInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      var ReactCurrentOwner = ReactInternals.ReactCurrentOwner;
      var ReactDebugCurrentFrame = ReactInternals.ReactDebugCurrentFrame;

      function getComponentName(fiber) {
        var type = fiber.type;

        if (typeof type === "function") {
          return type.displayName || type.name;
        }

        if (typeof type === "string") {
          return type;
        }

        switch (type) {
          case REACT_FRAGMENT_TYPE:
            return "ReactFragment";

          case REACT_PORTAL_TYPE:
            return "ReactPortal";

          case REACT_CALL_TYPE:
            return "ReactCall";

          case REACT_RETURN_TYPE:
            return "ReactReturn";
        }

        return null;
      }

      var findHostInstance = function findHostInstance(fiber) {
        return null;
      };

      var findHostInstanceFabric = function findHostInstanceFabric(fiber) {
        return null;
      };

      function injectFindHostInstance(impl) {
        findHostInstance = impl;
      }

      function findNodeHandle(componentOrHandle) {
        {
          var owner = ReactCurrentOwner.current;

          if (owner !== null && owner.stateNode !== null) {
            warning(owner.stateNode._warnedAboutRefsInRender, "%s is accessing findNodeHandle inside its render(). " + "render() should be a pure function of props and state. It should " + "never access something that requires stale data from the previous " + "render, such as refs. Move this logic to componentDidMount and " + "componentDidUpdate instead.", getComponentName(owner) || "A component");
            owner.stateNode._warnedAboutRefsInRender = true;
          }
        }

        if (componentOrHandle == null) {
          return null;
        }

        if (typeof componentOrHandle === "number") {
          return componentOrHandle;
        }

        var component = componentOrHandle;
        var internalInstance = get(component);

        if (internalInstance) {
          return findHostInstance(internalInstance) || findHostInstanceFabric(internalInstance);
        } else {
          if (component) {
            return component;
          } else {
            invariant(typeof component === "object" && "_nativeTag" in component || component.render != null && typeof component.render === "function", "findNodeHandle(...): Argument is not a component " + "(type: %s, keys: %s)", typeof component, Object.keys(component));
            invariant(false, "findNodeHandle(...): Unable to find node handle for unmounted " + "component.");
          }
        }
      }

      function findNumericNodeHandleFiber(componentOrHandle) {
        var instance = findNodeHandle(componentOrHandle);

        if (instance == null || typeof instance === "number") {
          return instance;
        }

        return instance._nativeTag;
      }

      var NativeMethodsMixin = {
        measure: function measure(callback) {
          UIManager.measure(findNumericNodeHandleFiber(this), mountSafeCallback(this, callback));
        },
        measureInWindow: function measureInWindow(callback) {
          UIManager.measureInWindow(findNumericNodeHandleFiber(this), mountSafeCallback(this, callback));
        },
        measureLayout: function measureLayout(relativeToNativeNode, onSuccess, onFail) {
          UIManager.measureLayout(findNumericNodeHandleFiber(this), relativeToNativeNode, mountSafeCallback(this, onFail), mountSafeCallback(this, onSuccess));
        },
        setNativeProps: function setNativeProps(nativeProps) {
          var maybeInstance = void 0;

          try {
            maybeInstance = findNodeHandle(this);
          } catch (error) {}

          if (maybeInstance == null) {
            return;
          }

          var viewConfig = maybeInstance.viewConfig;
          {
            warnForStyleProps(nativeProps, viewConfig.validAttributes);
          }
          var updatePayload = create(nativeProps, viewConfig.validAttributes);

          if (updatePayload != null) {
            UIManager.updateView(maybeInstance._nativeTag, viewConfig.uiViewClassName, updatePayload);
          }
        },
        focus: function focus() {
          TextInputState.focusTextInput(findNumericNodeHandleFiber(this));
        },
        blur: function blur() {
          TextInputState.blurTextInput(findNumericNodeHandleFiber(this));
        }
      };
      {
        var NativeMethodsMixin_DEV = NativeMethodsMixin;
        invariant(!NativeMethodsMixin_DEV.componentWillMount && !NativeMethodsMixin_DEV.componentWillReceiveProps && !NativeMethodsMixin_DEV.UNSAFE_componentWillMount && !NativeMethodsMixin_DEV.UNSAFE_componentWillReceiveProps, "Do not override existing functions.");

        NativeMethodsMixin_DEV.componentWillMount = function () {
          throwOnStylesProp(this, this.props);
        };

        NativeMethodsMixin_DEV.componentWillReceiveProps = function (newProps) {
          throwOnStylesProp(this, newProps);
        };

        NativeMethodsMixin_DEV.UNSAFE_componentWillMount = function () {
          throwOnStylesProp(this, this.props);
        };

        NativeMethodsMixin_DEV.UNSAFE_componentWillReceiveProps = function (newProps) {
          throwOnStylesProp(this, newProps);
        };

        NativeMethodsMixin_DEV.componentWillMount.__suppressDeprecationWarning = true;
        NativeMethodsMixin_DEV.componentWillReceiveProps.__suppressDeprecationWarning = true;
      }

      function _classCallCheck$1(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _possibleConstructorReturn(self, call) {
        if (!self) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (typeof call === "object" || typeof call === "function") ? call : self;
      }

      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
      }

      var ReactNativeComponent = function (_React$Component) {
        _inherits(ReactNativeComponent, _React$Component);

        function ReactNativeComponent() {
          _classCallCheck$1(this, ReactNativeComponent);

          return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
        }

        ReactNativeComponent.prototype.blur = function blur() {
          TextInputState.blurTextInput(findNumericNodeHandleFiber(this));
        };

        ReactNativeComponent.prototype.focus = function focus() {
          TextInputState.focusTextInput(findNumericNodeHandleFiber(this));
        };

        ReactNativeComponent.prototype.measure = function measure(callback) {
          UIManager.measure(findNumericNodeHandleFiber(this), mountSafeCallback(this, callback));
        };

        ReactNativeComponent.prototype.measureInWindow = function measureInWindow(callback) {
          UIManager.measureInWindow(findNumericNodeHandleFiber(this), mountSafeCallback(this, callback));
        };

        ReactNativeComponent.prototype.measureLayout = function measureLayout(relativeToNativeNode, onSuccess, onFail) {
          UIManager.measureLayout(findNumericNodeHandleFiber(this), relativeToNativeNode, mountSafeCallback(this, onFail), mountSafeCallback(this, onSuccess));
        };

        ReactNativeComponent.prototype.setNativeProps = function setNativeProps(nativeProps) {
          var maybeInstance = void 0;

          try {
            maybeInstance = findNodeHandle(this);
          } catch (error) {}

          if (maybeInstance == null) {
            return;
          }

          var viewConfig = maybeInstance.viewConfig || maybeInstance.canonical.viewConfig;
          var updatePayload = create(nativeProps, viewConfig.validAttributes);

          if (updatePayload != null) {
            UIManager.updateView(maybeInstance._nativeTag, viewConfig.uiViewClassName, updatePayload);
          }
        };

        return ReactNativeComponent;
      }(React.Component);

      var NoEffect = 0;
      var PerformedWork = 1;
      var Placement = 2;
      var Update = 4;
      var PlacementAndUpdate = 6;
      var Deletion = 8;
      var ContentReset = 16;
      var Callback = 32;
      var DidCapture = 64;
      var Ref = 128;
      var ErrLog = 256;
      var HostEffectMask = 511;
      var Incomplete = 512;
      var ShouldCapture = 1024;
      var MOUNTING = 1;
      var MOUNTED = 2;
      var UNMOUNTED = 3;

      function isFiberMountedImpl(fiber) {
        var node = fiber;

        if (!fiber.alternate) {
          if ((node.effectTag & Placement) !== NoEffect) {
            return MOUNTING;
          }

          while (node["return"]) {
            node = node["return"];

            if ((node.effectTag & Placement) !== NoEffect) {
              return MOUNTING;
            }
          }
        } else {
          while (node["return"]) {
            node = node["return"];
          }
        }

        if (node.tag === HostRoot) {
          return MOUNTED;
        }

        return UNMOUNTED;
      }

      function isFiberMounted(fiber) {
        return isFiberMountedImpl(fiber) === MOUNTED;
      }

      function isMounted(component) {
        {
          var owner = ReactCurrentOwner.current;

          if (owner !== null && owner.tag === ClassComponent) {
            var ownerFiber = owner;
            var instance = ownerFiber.stateNode;
            warning(instance._warnedAboutRefsInRender, "%s is accessing isMounted inside its render() function. " + "render() should be a pure function of props and state. It should " + "never access something that requires stale data from the previous " + "render, such as refs. Move this logic to componentDidMount and " + "componentDidUpdate instead.", getComponentName(ownerFiber) || "A component");
            instance._warnedAboutRefsInRender = true;
          }
        }
        var fiber = get(component);

        if (!fiber) {
          return false;
        }

        return isFiberMountedImpl(fiber) === MOUNTED;
      }

      function assertIsMounted(fiber) {
        invariant(isFiberMountedImpl(fiber) === MOUNTED, "Unable to find node on an unmounted component.");
      }

      function findCurrentFiberUsingSlowPath(fiber) {
        var alternate = fiber.alternate;

        if (!alternate) {
          var state = isFiberMountedImpl(fiber);
          invariant(state !== UNMOUNTED, "Unable to find node on an unmounted component.");

          if (state === MOUNTING) {
            return null;
          }

          return fiber;
        }

        var a = fiber;
        var b = alternate;

        while (true) {
          var parentA = a["return"];
          var parentB = parentA ? parentA.alternate : null;

          if (!parentA || !parentB) {
            break;
          }

          if (parentA.child === parentB.child) {
            var child = parentA.child;

            while (child) {
              if (child === a) {
                assertIsMounted(parentA);
                return fiber;
              }

              if (child === b) {
                assertIsMounted(parentA);
                return alternate;
              }

              child = child.sibling;
            }

            invariant(false, "Unable to find node on an unmounted component.");
          }

          if (a["return"] !== b["return"]) {
            a = parentA;
            b = parentB;
          } else {
            var didFindChild = false;
            var _child = parentA.child;

            while (_child) {
              if (_child === a) {
                didFindChild = true;
                a = parentA;
                b = parentB;
                break;
              }

              if (_child === b) {
                didFindChild = true;
                b = parentA;
                a = parentB;
                break;
              }

              _child = _child.sibling;
            }

            if (!didFindChild) {
              _child = parentB.child;

              while (_child) {
                if (_child === a) {
                  didFindChild = true;
                  a = parentB;
                  b = parentA;
                  break;
                }

                if (_child === b) {
                  didFindChild = true;
                  b = parentB;
                  a = parentA;
                  break;
                }

                _child = _child.sibling;
              }

              invariant(didFindChild, "Child was not found in either parent set. This indicates a bug " + "in React related to the return pointer. Please file an issue.");
            }
          }

          invariant(a.alternate === b, "Return fibers should always be each others' alternates. " + "This error is likely caused by a bug in React. Please file an issue.");
        }

        invariant(a.tag === HostRoot, "Unable to find node on an unmounted component.");

        if (a.stateNode.current === a) {
          return fiber;
        }

        return alternate;
      }

      function findCurrentHostFiber(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);

        if (!currentParent) {
          return null;
        }

        var node = currentParent;

        while (true) {
          if (node.tag === HostComponent || node.tag === HostText) {
            return node;
          } else if (node.child) {
            node.child["return"] = node;
            node = node.child;
            continue;
          }

          if (node === currentParent) {
            return null;
          }

          while (!node.sibling) {
            if (!node["return"] || node["return"] === currentParent) {
              return null;
            }

            node = node["return"];
          }

          node.sibling["return"] = node["return"];
          node = node.sibling;
        }

        return null;
      }

      function findCurrentHostFiberWithNoPortals(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);

        if (!currentParent) {
          return null;
        }

        var node = currentParent;

        while (true) {
          if (node.tag === HostComponent || node.tag === HostText) {
            return node;
          } else if (node.child && node.tag !== HostPortal) {
            node.child["return"] = node;
            node = node.child;
            continue;
          }

          if (node === currentParent) {
            return null;
          }

          while (!node.sibling) {
            if (!node["return"] || node["return"] === currentParent) {
              return null;
            }

            node = node["return"];
          }

          node.sibling["return"] = node["return"];
          node = node.sibling;
        }

        return null;
      }

      var valueStack = [];
      var fiberStack = void 0;
      {
        fiberStack = [];
      }
      var index = -1;

      function createCursor(defaultValue) {
        return {
          current: defaultValue
        };
      }

      function pop(cursor, fiber) {
        if (index < 0) {
          {
            warning(false, "Unexpected pop.");
          }
          return;
        }

        {
          if (fiber !== fiberStack[index]) {
            warning(false, "Unexpected Fiber popped.");
          }
        }
        cursor.current = valueStack[index];
        valueStack[index] = null;
        {
          fiberStack[index] = null;
        }
        index--;
      }

      function push(cursor, value, fiber) {
        index++;
        valueStack[index] = cursor.current;
        {
          fiberStack[index] = fiber;
        }
        cursor.current = value;
      }

      function reset() {
        while (index > -1) {
          valueStack[index] = null;
          {
            fiberStack[index] = null;
          }
          index--;
        }
      }

      var describeComponentFrame = function describeComponentFrame(name, source, ownerName) {
        return "\n    in " + (name || "Unknown") + (source ? " (at " + source.fileName.replace(/^.*[\\\/]/, "") + ":" + source.lineNumber + ")" : ownerName ? " (created by " + ownerName + ")" : "");
      };

      function describeFiber(fiber) {
        switch (fiber.tag) {
          case IndeterminateComponent:
          case FunctionalComponent:
          case ClassComponent:
          case HostComponent:
            var owner = fiber._debugOwner;
            var source = fiber._debugSource;
            var name = getComponentName(fiber);
            var ownerName = null;

            if (owner) {
              ownerName = getComponentName(owner);
            }

            return describeComponentFrame(name, source, ownerName);

          default:
            return "";
        }
      }

      function getStackAddendumByWorkInProgressFiber(workInProgress) {
        var info = "";
        var node = workInProgress;

        do {
          info += describeFiber(node);
          node = node["return"];
        } while (node);

        return info;
      }

      function getCurrentFiberOwnerName() {
        {
          var fiber = ReactDebugCurrentFiber.current;

          if (fiber === null) {
            return null;
          }

          var owner = fiber._debugOwner;

          if (owner !== null && typeof owner !== "undefined") {
            return getComponentName(owner);
          }
        }
        return null;
      }

      function getCurrentFiberStackAddendum() {
        {
          var fiber = ReactDebugCurrentFiber.current;

          if (fiber === null) {
            return null;
          }

          return getStackAddendumByWorkInProgressFiber(fiber);
        }
        return null;
      }

      function resetCurrentFiber() {
        ReactDebugCurrentFrame.getCurrentStack = null;
        ReactDebugCurrentFiber.current = null;
        ReactDebugCurrentFiber.phase = null;
      }

      function setCurrentFiber(fiber) {
        ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackAddendum;
        ReactDebugCurrentFiber.current = fiber;
        ReactDebugCurrentFiber.phase = null;
      }

      function setCurrentPhase(phase) {
        ReactDebugCurrentFiber.phase = phase;
      }

      var ReactDebugCurrentFiber = {
        current: null,
        phase: null,
        resetCurrentFiber: resetCurrentFiber,
        setCurrentFiber: setCurrentFiber,
        setCurrentPhase: setCurrentPhase,
        getCurrentFiberOwnerName: getCurrentFiberOwnerName,
        getCurrentFiberStackAddendum: getCurrentFiberStackAddendum
      };

      var _require = _require2(_dependencyMap[15], "ReactFeatureFlags");

      var enableGetDerivedStateFromCatch = _require.enableGetDerivedStateFromCatch;
      var debugRenderPhaseSideEffects = _require.debugRenderPhaseSideEffects;
      var debugRenderPhaseSideEffectsForStrictMode = _require.debugRenderPhaseSideEffectsForStrictMode;
      var warnAboutDeprecatedLifecycles = _require.warnAboutDeprecatedLifecycles;
      var replayFailedUnitOfWorkWithInvokeGuardedCallback = _require.replayFailedUnitOfWorkWithInvokeGuardedCallback;
      var enableUserTimingAPI = true;
      var enableMutatingReconciler = true;
      var enableNoopReconciler = false;
      var enablePersistentReconciler = false;
      var reactEmoji = "\u269B";
      var warningEmoji = "\u26D4";
      var supportsUserTiming = typeof performance !== "undefined" && typeof performance.mark === "function" && typeof performance.clearMarks === "function" && typeof performance.measure === "function" && typeof performance.clearMeasures === "function";
      var currentFiber = null;
      var currentPhase = null;
      var currentPhaseFiber = null;
      var isCommitting = false;
      var hasScheduledUpdateInCurrentCommit = false;
      var hasScheduledUpdateInCurrentPhase = false;
      var commitCountInCurrentWorkLoop = 0;
      var effectCountInCurrentCommit = 0;
      var isWaitingForCallback = false;
      var labelsInCurrentCommit = new Set();

      var formatMarkName = function formatMarkName(markName) {
        return reactEmoji + " " + markName;
      };

      var formatLabel = function formatLabel(label, warning$$1) {
        var prefix = warning$$1 ? warningEmoji + " " : reactEmoji + " ";
        var suffix = warning$$1 ? " Warning: " + warning$$1 : "";
        return "" + prefix + label + suffix;
      };

      var beginMark = function beginMark(markName) {
        performance.mark(formatMarkName(markName));
      };

      var clearMark = function clearMark(markName) {
        performance.clearMarks(formatMarkName(markName));
      };

      var endMark = function endMark(label, markName, warning$$1) {
        var formattedMarkName = formatMarkName(markName);
        var formattedLabel = formatLabel(label, warning$$1);

        try {
          performance.measure(formattedLabel, formattedMarkName);
        } catch (err) {}

        performance.clearMarks(formattedMarkName);
        performance.clearMeasures(formattedLabel);
      };

      var getFiberMarkName = function getFiberMarkName(label, debugID) {
        return label + " (#" + debugID + ")";
      };

      var getFiberLabel = function getFiberLabel(componentName, isMounted, phase) {
        if (phase === null) {
          return componentName + " [" + (isMounted ? "update" : "mount") + "]";
        } else {
          return componentName + "." + phase;
        }
      };

      var beginFiberMark = function beginFiberMark(fiber, phase) {
        var componentName = getComponentName(fiber) || "Unknown";
        var debugID = fiber._debugID;
        var isMounted = fiber.alternate !== null;
        var label = getFiberLabel(componentName, isMounted, phase);

        if (isCommitting && labelsInCurrentCommit.has(label)) {
          return false;
        }

        labelsInCurrentCommit.add(label);
        var markName = getFiberMarkName(label, debugID);
        beginMark(markName);
        return true;
      };

      var clearFiberMark = function clearFiberMark(fiber, phase) {
        var componentName = getComponentName(fiber) || "Unknown";
        var debugID = fiber._debugID;
        var isMounted = fiber.alternate !== null;
        var label = getFiberLabel(componentName, isMounted, phase);
        var markName = getFiberMarkName(label, debugID);
        clearMark(markName);
      };

      var endFiberMark = function endFiberMark(fiber, phase, warning$$1) {
        var componentName = getComponentName(fiber) || "Unknown";
        var debugID = fiber._debugID;
        var isMounted = fiber.alternate !== null;
        var label = getFiberLabel(componentName, isMounted, phase);
        var markName = getFiberMarkName(label, debugID);
        endMark(label, markName, warning$$1);
      };

      var shouldIgnoreFiber = function shouldIgnoreFiber(fiber) {
        switch (fiber.tag) {
          case HostRoot:
          case HostComponent:
          case HostText:
          case HostPortal:
          case CallComponent:
          case ReturnComponent:
          case Fragment:
          case ContextProvider:
          case ContextConsumer:
            return true;

          default:
            return false;
        }
      };

      var clearPendingPhaseMeasurement = function clearPendingPhaseMeasurement() {
        if (currentPhase !== null && currentPhaseFiber !== null) {
          clearFiberMark(currentPhaseFiber, currentPhase);
        }

        currentPhaseFiber = null;
        currentPhase = null;
        hasScheduledUpdateInCurrentPhase = false;
      };

      var pauseTimers = function pauseTimers() {
        var fiber = currentFiber;

        while (fiber) {
          if (fiber._debugIsCurrentlyTiming) {
            endFiberMark(fiber, null, null);
          }

          fiber = fiber["return"];
        }
      };

      var resumeTimersRecursively = function resumeTimersRecursively(fiber) {
        if (fiber["return"] !== null) {
          resumeTimersRecursively(fiber["return"]);
        }

        if (fiber._debugIsCurrentlyTiming) {
          beginFiberMark(fiber, null);
        }
      };

      var resumeTimers = function resumeTimers() {
        if (currentFiber !== null) {
          resumeTimersRecursively(currentFiber);
        }
      };

      function recordEffect() {
        if (enableUserTimingAPI) {
          effectCountInCurrentCommit++;
        }
      }

      function recordScheduleUpdate() {
        if (enableUserTimingAPI) {
          if (isCommitting) {
            hasScheduledUpdateInCurrentCommit = true;
          }

          if (currentPhase !== null && currentPhase !== "componentWillMount" && currentPhase !== "componentWillReceiveProps") {
            hasScheduledUpdateInCurrentPhase = true;
          }
        }
      }

      function startRequestCallbackTimer() {
        if (enableUserTimingAPI) {
          if (supportsUserTiming && !isWaitingForCallback) {
            isWaitingForCallback = true;
            beginMark("(Waiting for async callback...)");
          }
        }
      }

      function stopRequestCallbackTimer(didExpire) {
        if (enableUserTimingAPI) {
          if (supportsUserTiming) {
            isWaitingForCallback = false;
            var warning$$1 = didExpire ? "React was blocked by main thread" : null;
            endMark("(Waiting for async callback...)", "(Waiting for async callback...)", warning$$1);
          }
        }
      }

      function startWorkTimer(fiber) {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
            return;
          }

          currentFiber = fiber;

          if (!beginFiberMark(fiber, null)) {
            return;
          }

          fiber._debugIsCurrentlyTiming = true;
        }
      }

      function cancelWorkTimer(fiber) {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
            return;
          }

          fiber._debugIsCurrentlyTiming = false;
          clearFiberMark(fiber, null);
        }
      }

      function stopWorkTimer(fiber) {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
            return;
          }

          currentFiber = fiber["return"];

          if (!fiber._debugIsCurrentlyTiming) {
            return;
          }

          fiber._debugIsCurrentlyTiming = false;
          endFiberMark(fiber, null, null);
        }
      }

      function stopFailedWorkTimer(fiber) {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
            return;
          }

          currentFiber = fiber["return"];

          if (!fiber._debugIsCurrentlyTiming) {
            return;
          }

          fiber._debugIsCurrentlyTiming = false;
          var warning$$1 = "An error was thrown inside this error boundary";
          endFiberMark(fiber, null, warning$$1);
        }
      }

      function startPhaseTimer(fiber, phase) {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming) {
            return;
          }

          clearPendingPhaseMeasurement();

          if (!beginFiberMark(fiber, phase)) {
            return;
          }

          currentPhaseFiber = fiber;
          currentPhase = phase;
        }
      }

      function stopPhaseTimer() {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming) {
            return;
          }

          if (currentPhase !== null && currentPhaseFiber !== null) {
            var warning$$1 = hasScheduledUpdateInCurrentPhase ? "Scheduled a cascading update" : null;
            endFiberMark(currentPhaseFiber, currentPhase, warning$$1);
          }

          currentPhase = null;
          currentPhaseFiber = null;
        }
      }

      function startWorkLoopTimer(nextUnitOfWork) {
        if (enableUserTimingAPI) {
          currentFiber = nextUnitOfWork;

          if (!supportsUserTiming) {
            return;
          }

          commitCountInCurrentWorkLoop = 0;
          beginMark("(React Tree Reconciliation)");
          resumeTimers();
        }
      }

      function stopWorkLoopTimer(interruptedBy) {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming) {
            return;
          }

          var warning$$1 = null;

          if (interruptedBy !== null) {
            if (interruptedBy.tag === HostRoot) {
              warning$$1 = "A top-level update interrupted the previous render";
            } else {
              var componentName = getComponentName(interruptedBy) || "Unknown";
              warning$$1 = "An update to " + componentName + " interrupted the previous render";
            }
          } else if (commitCountInCurrentWorkLoop > 1) {
            warning$$1 = "There were cascading updates";
          }

          commitCountInCurrentWorkLoop = 0;
          pauseTimers();
          endMark("(React Tree Reconciliation)", "(React Tree Reconciliation)", warning$$1);
        }
      }

      function startCommitTimer() {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming) {
            return;
          }

          isCommitting = true;
          hasScheduledUpdateInCurrentCommit = false;
          labelsInCurrentCommit.clear();
          beginMark("(Committing Changes)");
        }
      }

      function stopCommitTimer() {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming) {
            return;
          }

          var warning$$1 = null;

          if (hasScheduledUpdateInCurrentCommit) {
            warning$$1 = "Lifecycle hook scheduled a cascading update";
          } else if (commitCountInCurrentWorkLoop > 0) {
            warning$$1 = "Caused by a cascading update in earlier commit";
          }

          hasScheduledUpdateInCurrentCommit = false;
          commitCountInCurrentWorkLoop++;
          isCommitting = false;
          labelsInCurrentCommit.clear();
          endMark("(Committing Changes)", "(Committing Changes)", warning$$1);
        }
      }

      function startCommitHostEffectsTimer() {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming) {
            return;
          }

          effectCountInCurrentCommit = 0;
          beginMark("(Committing Host Effects)");
        }
      }

      function stopCommitHostEffectsTimer() {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming) {
            return;
          }

          var count = effectCountInCurrentCommit;
          effectCountInCurrentCommit = 0;
          endMark("(Committing Host Effects: " + count + " Total)", "(Committing Host Effects)", null);
        }
      }

      function startCommitLifeCyclesTimer() {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming) {
            return;
          }

          effectCountInCurrentCommit = 0;
          beginMark("(Calling Lifecycle Methods)");
        }
      }

      function stopCommitLifeCyclesTimer() {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming) {
            return;
          }

          var count = effectCountInCurrentCommit;
          effectCountInCurrentCommit = 0;
          endMark("(Calling Lifecycle Methods: " + count + " Total)", "(Calling Lifecycle Methods)", null);
        }
      }

      var warnedAboutMissingGetChildContext = void 0;
      {
        warnedAboutMissingGetChildContext = {};
      }
      var contextStackCursor = createCursor(emptyObject);
      var didPerformWorkStackCursor = createCursor(false);
      var previousContext = emptyObject;

      function getUnmaskedContext(workInProgress) {
        var hasOwnContext = isContextProvider(workInProgress);

        if (hasOwnContext) {
          return previousContext;
        }

        return contextStackCursor.current;
      }

      function cacheContext(workInProgress, unmaskedContext, maskedContext) {
        var instance = workInProgress.stateNode;
        instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
        instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
      }

      function getMaskedContext(workInProgress, unmaskedContext) {
        var type = workInProgress.type;
        var contextTypes = type.contextTypes;

        if (!contextTypes) {
          return emptyObject;
        }

        var instance = workInProgress.stateNode;

        if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
          return instance.__reactInternalMemoizedMaskedChildContext;
        }

        var context = {};

        for (var key in contextTypes) {
          context[key] = unmaskedContext[key];
        }

        {
          var name = getComponentName(workInProgress) || "Unknown";
          checkPropTypes(contextTypes, context, "context", name, ReactDebugCurrentFiber.getCurrentFiberStackAddendum);
        }

        if (instance) {
          cacheContext(workInProgress, unmaskedContext, context);
        }

        return context;
      }

      function hasContextChanged() {
        return didPerformWorkStackCursor.current;
      }

      function isContextConsumer(fiber) {
        return fiber.tag === ClassComponent && fiber.type.contextTypes != null;
      }

      function isContextProvider(fiber) {
        return fiber.tag === ClassComponent && fiber.type.childContextTypes != null;
      }

      function popContextProvider(fiber) {
        if (!isContextProvider(fiber)) {
          return;
        }

        pop(didPerformWorkStackCursor, fiber);
        pop(contextStackCursor, fiber);
      }

      function popTopLevelContextObject(fiber) {
        pop(didPerformWorkStackCursor, fiber);
        pop(contextStackCursor, fiber);
      }

      function pushTopLevelContextObject(fiber, context, didChange) {
        invariant(contextStackCursor.cursor == null, "Unexpected context found on stack. " + "This error is likely caused by a bug in React. Please file an issue.");
        push(contextStackCursor, context, fiber);
        push(didPerformWorkStackCursor, didChange, fiber);
      }

      function processChildContext(fiber, parentContext) {
        var instance = fiber.stateNode;
        var childContextTypes = fiber.type.childContextTypes;

        if (typeof instance.getChildContext !== "function") {
          {
            var componentName = getComponentName(fiber) || "Unknown";

            if (!warnedAboutMissingGetChildContext[componentName]) {
              warnedAboutMissingGetChildContext[componentName] = true;
              warning(false, "%s.childContextTypes is specified but there is no getChildContext() method " + "on the instance. You can either define getChildContext() on %s or remove " + "childContextTypes from it.", componentName, componentName);
            }
          }
          return parentContext;
        }

        var childContext = void 0;
        {
          ReactDebugCurrentFiber.setCurrentPhase("getChildContext");
        }
        startPhaseTimer(fiber, "getChildContext");
        childContext = instance.getChildContext();
        stopPhaseTimer();
        {
          ReactDebugCurrentFiber.setCurrentPhase(null);
        }

        for (var contextKey in childContext) {
          invariant(contextKey in childContextTypes, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', getComponentName(fiber) || "Unknown", contextKey);
        }

        {
          var name = getComponentName(fiber) || "Unknown";
          checkPropTypes(childContextTypes, childContext, "child context", name, ReactDebugCurrentFiber.getCurrentFiberStackAddendum);
        }
        return babelHelpers.extends({}, parentContext, childContext);
      }

      function pushContextProvider(workInProgress) {
        if (!isContextProvider(workInProgress)) {
          return false;
        }

        var instance = workInProgress.stateNode;
        var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyObject;
        previousContext = contextStackCursor.current;
        push(contextStackCursor, memoizedMergedChildContext, workInProgress);
        push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
        return true;
      }

      function invalidateContextProvider(workInProgress, didChange) {
        var instance = workInProgress.stateNode;
        invariant(instance, "Expected to have an instance by this point. " + "This error is likely caused by a bug in React. Please file an issue.");

        if (didChange) {
          var mergedContext = processChildContext(workInProgress, previousContext);
          instance.__reactInternalMemoizedMergedChildContext = mergedContext;
          pop(didPerformWorkStackCursor, workInProgress);
          pop(contextStackCursor, workInProgress);
          push(contextStackCursor, mergedContext, workInProgress);
          push(didPerformWorkStackCursor, didChange, workInProgress);
        } else {
          pop(didPerformWorkStackCursor, workInProgress);
          push(didPerformWorkStackCursor, didChange, workInProgress);
        }
      }

      function resetContext() {
        previousContext = emptyObject;
        contextStackCursor.current = emptyObject;
        didPerformWorkStackCursor.current = false;
      }

      function findCurrentUnmaskedContext(fiber) {
        invariant(isFiberMounted(fiber) && fiber.tag === ClassComponent, "Expected subtree parent to be a mounted class component. " + "This error is likely caused by a bug in React. Please file an issue.");
        var node = fiber;

        while (node.tag !== HostRoot) {
          if (isContextProvider(node)) {
            return node.stateNode.__reactInternalMemoizedMergedChildContext;
          }

          var parent = node["return"];
          invariant(parent, "Found unexpected detached subtree parent. " + "This error is likely caused by a bug in React. Please file an issue.");
          node = parent;
        }

        return node.stateNode.context;
      }

      var MAX_SIGNED_31_BIT_INT = 1073741823;
      var NoWork = 0;
      var Sync = 1;
      var Never = MAX_SIGNED_31_BIT_INT;
      var UNIT_SIZE = 10;
      var MAGIC_NUMBER_OFFSET = 2;

      function msToExpirationTime(ms) {
        return (ms / UNIT_SIZE | 0) + MAGIC_NUMBER_OFFSET;
      }

      function expirationTimeToMs(expirationTime) {
        return (expirationTime - MAGIC_NUMBER_OFFSET) * UNIT_SIZE;
      }

      function ceiling(num, precision) {
        return ((num / precision | 0) + 1) * precision;
      }

      function computeExpirationBucket(currentTime, expirationInMs, bucketSizeMs) {
        return ceiling(currentTime + expirationInMs / UNIT_SIZE, bucketSizeMs / UNIT_SIZE);
      }

      var NoContext = 0;
      var AsyncMode = 1;
      var StrictMode = 2;
      var hasBadMapPolyfill = void 0;
      {
        hasBadMapPolyfill = false;

        try {
          var nonExtensibleObject = Object.preventExtensions({});
          var testMap = new Map([[nonExtensibleObject, null]]);
          var testSet = new Set([nonExtensibleObject]);
          testMap.set(0, 0);
          testSet.add(0);
        } catch (e) {
          hasBadMapPolyfill = true;
        }
      }
      var debugCounter = void 0;
      {
        debugCounter = 1;
      }

      function FiberNode(tag, pendingProps, key, mode) {
        this.tag = tag;
        this.key = key;
        this.type = null;
        this.stateNode = null;
        this["return"] = null;
        this.child = null;
        this.sibling = null;
        this.index = 0;
        this.ref = null;
        this.pendingProps = pendingProps;
        this.memoizedProps = null;
        this.updateQueue = null;
        this.memoizedState = null;
        this.mode = mode;
        this.effectTag = NoEffect;
        this.nextEffect = null;
        this.firstEffect = null;
        this.lastEffect = null;
        this.expirationTime = NoWork;
        this.alternate = null;
        {
          this._debugID = debugCounter++;
          this._debugSource = null;
          this._debugOwner = null;
          this._debugIsCurrentlyTiming = false;

          if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
            Object.preventExtensions(this);
          }
        }
      }

      var createFiber = function createFiber(tag, pendingProps, key, mode) {
        return new FiberNode(tag, pendingProps, key, mode);
      };

      function shouldConstruct(Component) {
        return !!(Component.prototype && Component.prototype.isReactComponent);
      }

      function createWorkInProgress(current, pendingProps, expirationTime) {
        var workInProgress = current.alternate;

        if (workInProgress === null) {
          workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);
          workInProgress.type = current.type;
          workInProgress.stateNode = current.stateNode;
          {
            workInProgress._debugID = current._debugID;
            workInProgress._debugSource = current._debugSource;
            workInProgress._debugOwner = current._debugOwner;
          }
          workInProgress.alternate = current;
          current.alternate = workInProgress;
        } else {
          workInProgress.pendingProps = pendingProps;
          workInProgress.effectTag = NoEffect;
          workInProgress.nextEffect = null;
          workInProgress.firstEffect = null;
          workInProgress.lastEffect = null;
        }

        workInProgress.expirationTime = expirationTime;
        workInProgress.child = current.child;
        workInProgress.memoizedProps = current.memoizedProps;
        workInProgress.memoizedState = current.memoizedState;
        workInProgress.updateQueue = current.updateQueue;
        workInProgress.sibling = current.sibling;
        workInProgress.index = current.index;
        workInProgress.ref = current.ref;
        return workInProgress;
      }

      function createHostRootFiber(isAsync) {
        var mode = isAsync ? AsyncMode | StrictMode : NoContext;
        return createFiber(HostRoot, null, null, mode);
      }

      function createFiberFromElement(element, mode, expirationTime) {
        var owner = null;
        {
          owner = element._owner;
        }
        var fiber = void 0;
        var type = element.type;
        var key = element.key;
        var pendingProps = element.props;
        var fiberTag = void 0;

        if (typeof type === "function") {
          fiberTag = shouldConstruct(type) ? ClassComponent : IndeterminateComponent;
        } else if (typeof type === "string") {
          fiberTag = HostComponent;
        } else {
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return createFiberFromFragment(pendingProps.children, mode, expirationTime, key);

            case REACT_ASYNC_MODE_TYPE:
              fiberTag = Mode;
              mode |= AsyncMode | StrictMode;
              break;

            case REACT_STRICT_MODE_TYPE:
              fiberTag = Mode;
              mode |= StrictMode;
              break;

            case REACT_CALL_TYPE:
              fiberTag = CallComponent;
              break;

            case REACT_RETURN_TYPE:
              fiberTag = ReturnComponent;
              break;

            default:
              {
                if (typeof type === "object" && type !== null) {
                  switch (type.$$typeof) {
                    case REACT_PROVIDER_TYPE:
                      fiberTag = ContextProvider;
                      break;

                    case REACT_CONTEXT_TYPE:
                      fiberTag = ContextConsumer;
                      break;

                    default:
                      if (typeof type.tag === "number") {
                        fiber = type;
                        fiber.pendingProps = pendingProps;
                        fiber.expirationTime = expirationTime;
                        return fiber;
                      } else {
                        throwOnInvalidElementType(type, owner);
                      }

                      break;
                  }
                } else {
                  throwOnInvalidElementType(type, owner);
                }
              }
          }
        }

        fiber = createFiber(fiberTag, pendingProps, key, mode);
        fiber.type = type;
        fiber.expirationTime = expirationTime;
        {
          fiber._debugSource = element._source;
          fiber._debugOwner = element._owner;
        }
        return fiber;
      }

      function throwOnInvalidElementType(type, owner) {
        var info = "";
        {
          if (type === undefined || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
            info += " You likely forgot to export your component from the file " + "it's defined in, or you might have mixed up default and " + "named imports.";
          }

          var ownerName = owner ? getComponentName(owner) : null;

          if (ownerName) {
            info += "\n\nCheck the render method of `" + ownerName + "`.";
          }
        }
        invariant(false, "Element type is invalid: expected a string (for built-in " + "components) or a class/function (for composite components) " + "but got: %s.%s", type == null ? type : typeof type, info);
      }

      function createFiberFromFragment(elements, mode, expirationTime, key) {
        var fiber = createFiber(Fragment, elements, key, mode);
        fiber.expirationTime = expirationTime;
        return fiber;
      }

      function createFiberFromText(content, mode, expirationTime) {
        var fiber = createFiber(HostText, content, null, mode);
        fiber.expirationTime = expirationTime;
        return fiber;
      }

      function createFiberFromHostInstanceForDeletion() {
        var fiber = createFiber(HostComponent, null, null, NoContext);
        fiber.type = "DELETED";
        return fiber;
      }

      function createFiberFromPortal(portal, mode, expirationTime) {
        var pendingProps = portal.children !== null ? portal.children : [];
        var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
        fiber.expirationTime = expirationTime;
        fiber.stateNode = {
          containerInfo: portal.containerInfo,
          pendingChildren: null,
          implementation: portal.implementation
        };
        return fiber;
      }

      function createFiberRoot(containerInfo, isAsync, hydrate) {
        var uninitializedFiber = createHostRootFiber(isAsync);
        var root = {
          current: uninitializedFiber,
          containerInfo: containerInfo,
          pendingChildren: null,
          pendingCommitExpirationTime: NoWork,
          finishedWork: null,
          context: null,
          pendingContext: null,
          hydrate: hydrate,
          remainingExpirationTime: NoWork,
          firstBatch: null,
          nextScheduledRoot: null
        };
        uninitializedFiber.stateNode = root;
        return root;
      }

      var onCommitFiberRoot = null;
      var onCommitFiberUnmount = null;
      var hasLoggedError = false;

      function catchErrors(fn) {
        return function (arg) {
          try {
            return fn(arg);
          } catch (err) {
            if (true && !hasLoggedError) {
              hasLoggedError = true;
              warning(false, "React DevTools encountered an error: %s", err);
            }
          }
        };
      }

      function injectInternals(internals) {
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
          return false;
        }

        var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;

        if (hook.isDisabled) {
          return true;
        }

        if (!hook.supportsFiber) {
          {
            warning(false, "The installed version of React DevTools is too old and will not work " + "with the current version of React. Please update React DevTools. " + "https://fb.me/react-devtools");
          }
          return true;
        }

        try {
          var rendererID = hook.inject(internals);
          onCommitFiberRoot = catchErrors(function (root) {
            return hook.onCommitFiberRoot(rendererID, root);
          });
          onCommitFiberUnmount = catchErrors(function (fiber) {
            return hook.onCommitFiberUnmount(rendererID, fiber);
          });
        } catch (err) {
          {
            warning(false, "React DevTools encountered an error: %s.", err);
          }
        }

        return true;
      }

      function onCommitRoot(root) {
        if (typeof onCommitFiberRoot === "function") {
          onCommitFiberRoot(root);
        }
      }

      function onCommitUnmount(fiber) {
        if (typeof onCommitFiberUnmount === "function") {
          onCommitFiberUnmount(fiber);
        }
      }

      var lowPriorityWarning = function lowPriorityWarning() {};

      {
        var printWarning = function printWarning(format) {
          for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }

          var argIndex = 0;
          var message = "Warning: " + format.replace(/%s/g, function () {
            return args[argIndex++];
          });

          if (typeof console !== "undefined") {
            console.warn(message);
          }

          try {
            throw new Error(message);
          } catch (x) {}
        };

        lowPriorityWarning = function lowPriorityWarning(condition, format) {
          if (format === undefined) {
            throw new Error("`warning(condition, format, ...args)` requires a warning " + "message argument");
          }

          if (!condition) {
            for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
              args[_key2 - 2] = arguments[_key2];
            }

            printWarning.apply(undefined, [format].concat(args));
          }
        };
      }
      var lowPriorityWarning$1 = lowPriorityWarning;
      var ReactStrictModeWarnings = {
        discardPendingWarnings: function discardPendingWarnings() {},
        flushPendingDeprecationWarnings: function flushPendingDeprecationWarnings() {},
        flushPendingUnsafeLifecycleWarnings: function flushPendingUnsafeLifecycleWarnings() {},
        recordDeprecationWarnings: function recordDeprecationWarnings(fiber, instance) {},
        recordUnsafeLifecycleWarnings: function recordUnsafeLifecycleWarnings(fiber, instance) {}
      };
      {
        var LIFECYCLE_SUGGESTIONS = {
          UNSAFE_componentWillMount: "componentDidMount",
          UNSAFE_componentWillReceiveProps: "static getDerivedStateFromProps",
          UNSAFE_componentWillUpdate: "componentDidUpdate"
        };
        var pendingComponentWillMountWarnings = [];
        var pendingComponentWillReceivePropsWarnings = [];
        var pendingComponentWillUpdateWarnings = [];
        var pendingUnsafeLifecycleWarnings = new Map();
        var didWarnAboutDeprecatedLifecycles = new Set();
        var didWarnAboutUnsafeLifecycles = new Set();

        ReactStrictModeWarnings.discardPendingWarnings = function () {
          pendingComponentWillMountWarnings = [];
          pendingComponentWillReceivePropsWarnings = [];
          pendingComponentWillUpdateWarnings = [];
          pendingUnsafeLifecycleWarnings = new Map();
        };

        ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {
          pendingUnsafeLifecycleWarnings.forEach(function (lifecycleWarningsMap, strictRoot) {
            var lifecyclesWarningMesages = [];
            Object.keys(lifecycleWarningsMap).forEach(function (lifecycle) {
              var lifecycleWarnings = lifecycleWarningsMap[lifecycle];

              if (lifecycleWarnings.length > 0) {
                var componentNames = new Set();
                lifecycleWarnings.forEach(function (fiber) {
                  componentNames.add(getComponentName(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                var formatted = lifecycle.replace("UNSAFE_", "");
                var suggestion = LIFECYCLE_SUGGESTIONS[lifecycle];
                var sortedComponentNames = Array.from(componentNames).sort().join(", ");
                lifecyclesWarningMesages.push(formatted + ": Please update the following components to use " + (suggestion + " instead: " + sortedComponentNames));
              }
            });

            if (lifecyclesWarningMesages.length > 0) {
              var strictRootComponentStack = getStackAddendumByWorkInProgressFiber(strictRoot);
              warning(false, "Unsafe lifecycle methods were found within a strict-mode tree:%s" + "\n\n%s" + "\n\nLearn more about this warning here:" + "\nhttps://fb.me/react-strict-mode-warnings", strictRootComponentStack, lifecyclesWarningMesages.join("\n\n"));
            }
          });
          pendingUnsafeLifecycleWarnings = new Map();
        };

        var getStrictRoot = function getStrictRoot(fiber) {
          var maybeStrictRoot = null;

          while (fiber !== null) {
            if (fiber.mode & StrictMode) {
              maybeStrictRoot = fiber;
            }

            fiber = fiber["return"];
          }

          return maybeStrictRoot;
        };

        ReactStrictModeWarnings.flushPendingDeprecationWarnings = function () {
          if (pendingComponentWillMountWarnings.length > 0) {
            var uniqueNames = new Set();
            pendingComponentWillMountWarnings.forEach(function (fiber) {
              uniqueNames.add(getComponentName(fiber) || "Component");
              didWarnAboutDeprecatedLifecycles.add(fiber.type);
            });
            var sortedNames = Array.from(uniqueNames).sort().join(", ");
            lowPriorityWarning$1(false, "componentWillMount is deprecated and will be removed in the next major version. " + "Use componentDidMount instead. As a temporary workaround, " + "you can rename to UNSAFE_componentWillMount." + "\n\nPlease update the following components: %s" + "\n\nLearn more about this warning here:" + "\nhttps://fb.me/react-async-component-lifecycle-hooks", sortedNames);
            pendingComponentWillMountWarnings = [];
          }

          if (pendingComponentWillReceivePropsWarnings.length > 0) {
            var _uniqueNames = new Set();

            pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {
              _uniqueNames.add(getComponentName(fiber) || "Component");

              didWarnAboutDeprecatedLifecycles.add(fiber.type);
            });

            var _sortedNames = Array.from(_uniqueNames).sort().join(", ");

            lowPriorityWarning$1(false, "componentWillReceiveProps is deprecated and will be removed in the next major version. " + "Use static getDerivedStateFromProps instead." + "\n\nPlease update the following components: %s" + "\n\nLearn more about this warning here:" + "\nhttps://fb.me/react-async-component-lifecycle-hooks", _sortedNames);
            pendingComponentWillReceivePropsWarnings = [];
          }

          if (pendingComponentWillUpdateWarnings.length > 0) {
            var _uniqueNames2 = new Set();

            pendingComponentWillUpdateWarnings.forEach(function (fiber) {
              _uniqueNames2.add(getComponentName(fiber) || "Component");

              didWarnAboutDeprecatedLifecycles.add(fiber.type);
            });

            var _sortedNames2 = Array.from(_uniqueNames2).sort().join(", ");

            lowPriorityWarning$1(false, "componentWillUpdate is deprecated and will be removed in the next major version. " + "Use componentDidUpdate instead. As a temporary workaround, " + "you can rename to UNSAFE_componentWillUpdate." + "\n\nPlease update the following components: %s" + "\n\nLearn more about this warning here:" + "\nhttps://fb.me/react-async-component-lifecycle-hooks", _sortedNames2);
            pendingComponentWillUpdateWarnings = [];
          }
        };

        ReactStrictModeWarnings.recordDeprecationWarnings = function (fiber, instance) {
          if (didWarnAboutDeprecatedLifecycles.has(fiber.type)) {
            return;
          }

          if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
            pendingComponentWillMountWarnings.push(fiber);
          }

          if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
            pendingComponentWillReceivePropsWarnings.push(fiber);
          }

          if (typeof instance.componentWillUpdate === "function") {
            pendingComponentWillUpdateWarnings.push(fiber);
          }
        };

        ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {
          var strictRoot = getStrictRoot(fiber);

          if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
            return;
          }

          if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning === true) {
            return;
          }

          var warningsForRoot = void 0;

          if (!pendingUnsafeLifecycleWarnings.has(strictRoot)) {
            warningsForRoot = {
              UNSAFE_componentWillMount: [],
              UNSAFE_componentWillReceiveProps: [],
              UNSAFE_componentWillUpdate: []
            };
            pendingUnsafeLifecycleWarnings.set(strictRoot, warningsForRoot);
          } else {
            warningsForRoot = pendingUnsafeLifecycleWarnings.get(strictRoot);
          }

          var unsafeLifecycles = [];

          if (typeof instance.componentWillMount === "function" || typeof instance.UNSAFE_componentWillMount === "function") {
            unsafeLifecycles.push("UNSAFE_componentWillMount");
          }

          if (typeof instance.componentWillReceiveProps === "function" || typeof instance.UNSAFE_componentWillReceiveProps === "function") {
            unsafeLifecycles.push("UNSAFE_componentWillReceiveProps");
          }

          if (typeof instance.componentWillUpdate === "function" || typeof instance.UNSAFE_componentWillUpdate === "function") {
            unsafeLifecycles.push("UNSAFE_componentWillUpdate");
          }

          if (unsafeLifecycles.length > 0) {
            unsafeLifecycles.forEach(function (lifecycle) {
              warningsForRoot[lifecycle].push(fiber);
            });
          }
        };
      }
      var didWarnUpdateInsideUpdate = void 0;
      {
        didWarnUpdateInsideUpdate = false;
      }

      function createUpdateQueue(baseState) {
        var queue = {
          baseState: baseState,
          expirationTime: NoWork,
          first: null,
          last: null,
          callbackList: null,
          hasForceUpdate: false,
          isInitialized: false,
          capturedValues: null
        };
        {
          queue.isProcessing = false;
        }
        return queue;
      }

      function insertUpdateIntoQueue(queue, update) {
        if (queue.last === null) {
          queue.first = queue.last = update;
        } else {
          queue.last.next = update;
          queue.last = update;
        }

        if (queue.expirationTime === NoWork || queue.expirationTime > update.expirationTime) {
          queue.expirationTime = update.expirationTime;
        }
      }

      var q1 = void 0;
      var q2 = void 0;

      function ensureUpdateQueues(fiber) {
        q1 = q2 = null;
        var alternateFiber = fiber.alternate;
        var queue1 = fiber.updateQueue;

        if (queue1 === null) {
          queue1 = fiber.updateQueue = createUpdateQueue(null);
        }

        var queue2 = void 0;

        if (alternateFiber !== null) {
          queue2 = alternateFiber.updateQueue;

          if (queue2 === null) {
            queue2 = alternateFiber.updateQueue = createUpdateQueue(null);
          }
        } else {
          queue2 = null;
        }

        queue2 = queue2 !== queue1 ? queue2 : null;
        q1 = queue1;
        q2 = queue2;
      }

      function insertUpdateIntoFiber(fiber, update) {
        ensureUpdateQueues(fiber);
        var queue1 = q1;
        var queue2 = q2;
        {
          if ((queue1.isProcessing || queue2 !== null && queue2.isProcessing) && !didWarnUpdateInsideUpdate) {
            warning(false, "An update (setState, replaceState, or forceUpdate) was scheduled " + "from inside an update function. Update functions should be pure, " + "with zero side-effects. Consider using componentDidUpdate or a " + "callback.");
            didWarnUpdateInsideUpdate = true;
          }
        }

        if (queue2 === null) {
          insertUpdateIntoQueue(queue1, update);
          return;
        }

        if (queue1.last === null || queue2.last === null) {
          insertUpdateIntoQueue(queue1, update);
          insertUpdateIntoQueue(queue2, update);
          return;
        }

        insertUpdateIntoQueue(queue1, update);
        queue2.last = update;
      }

      function getUpdateExpirationTime(fiber) {
        switch (fiber.tag) {
          case HostRoot:
          case ClassComponent:
            var updateQueue = fiber.updateQueue;

            if (updateQueue === null) {
              return NoWork;
            }

            return updateQueue.expirationTime;

          default:
            return NoWork;
        }
      }

      function getStateFromUpdate(update, instance, prevState, props) {
        var partialState = update.partialState;

        if (typeof partialState === "function") {
          return partialState.call(instance, prevState, props);
        } else {
          return partialState;
        }
      }

      function processUpdateQueue(current, workInProgress, queue, instance, props, renderExpirationTime) {
        if (current !== null && current.updateQueue === queue) {
          var currentQueue = queue;
          queue = workInProgress.updateQueue = {
            baseState: currentQueue.baseState,
            expirationTime: currentQueue.expirationTime,
            first: currentQueue.first,
            last: currentQueue.last,
            isInitialized: currentQueue.isInitialized,
            capturedValues: currentQueue.capturedValues,
            callbackList: null,
            hasForceUpdate: false
          };
        }

        {
          queue.isProcessing = true;
        }
        queue.expirationTime = NoWork;
        var state = void 0;

        if (queue.isInitialized) {
          state = queue.baseState;
        } else {
          state = queue.baseState = workInProgress.memoizedState;
          queue.isInitialized = true;
        }

        var dontMutatePrevState = true;
        var update = queue.first;
        var didSkip = false;

        while (update !== null) {
          var updateExpirationTime = update.expirationTime;

          if (updateExpirationTime > renderExpirationTime) {
            var remainingExpirationTime = queue.expirationTime;

            if (remainingExpirationTime === NoWork || remainingExpirationTime > updateExpirationTime) {
              queue.expirationTime = updateExpirationTime;
            }

            if (!didSkip) {
              didSkip = true;
              queue.baseState = state;
            }

            update = update.next;
            continue;
          }

          if (!didSkip) {
            queue.first = update.next;

            if (queue.first === null) {
              queue.last = null;
            }
          }

          if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
            getStateFromUpdate(update, instance, state, props);
          }

          var _partialState = void 0;

          if (update.isReplace) {
            state = getStateFromUpdate(update, instance, state, props);
            dontMutatePrevState = true;
          } else {
            _partialState = getStateFromUpdate(update, instance, state, props);

            if (_partialState) {
              if (dontMutatePrevState) {
                state = babelHelpers.extends({}, state, _partialState);
              } else {
                state = babelHelpers.extends(state, _partialState);
              }

              dontMutatePrevState = false;
            }
          }

          if (update.isForced) {
            queue.hasForceUpdate = true;
          }

          if (update.callback !== null) {
            var _callbackList = queue.callbackList;

            if (_callbackList === null) {
              _callbackList = queue.callbackList = [];
            }

            _callbackList.push(update);
          }

          if (update.capturedValue !== null) {
            var _capturedValues = queue.capturedValues;

            if (_capturedValues === null) {
              queue.capturedValues = [update.capturedValue];
            } else {
              _capturedValues.push(update.capturedValue);
            }
          }

          update = update.next;
        }

        if (queue.callbackList !== null) {
          workInProgress.effectTag |= Callback;
        } else if (queue.first === null && !queue.hasForceUpdate && queue.capturedValues === null) {
          workInProgress.updateQueue = null;
        }

        if (!didSkip) {
          didSkip = true;
          queue.baseState = state;
        }

        {
          queue.isProcessing = false;
        }
        return state;
      }

      function commitCallbacks(queue, context) {
        var callbackList = queue.callbackList;

        if (callbackList === null) {
          return;
        }

        queue.callbackList = null;

        for (var i = 0; i < callbackList.length; i++) {
          var update = callbackList[i];
          var _callback = update.callback;
          update.callback = null;
          invariant(typeof _callback === "function", "Invalid argument passed as callback. Expected a function. Instead " + "received: %s", _callback);

          _callback.call(context);
        }
      }

      var fakeInternalInstance = {};
      var isArray = Array.isArray;
      var didWarnAboutStateAssignmentForComponent = void 0;
      var didWarnAboutUndefinedDerivedState = void 0;
      var didWarnAboutUninitializedState = void 0;
      var didWarnAboutWillReceivePropsAndDerivedState = void 0;
      var warnOnInvalidCallback = void 0;
      {
        didWarnAboutStateAssignmentForComponent = {};
        didWarnAboutUndefinedDerivedState = {};
        didWarnAboutUninitializedState = {};
        didWarnAboutWillReceivePropsAndDerivedState = {};
        var didWarnOnInvalidCallback = {};

        warnOnInvalidCallback = function warnOnInvalidCallback(callback, callerName) {
          if (callback === null || typeof callback === "function") {
            return;
          }

          var key = callerName + "_" + callback;

          if (!didWarnOnInvalidCallback[key]) {
            warning(false, "%s(...): Expected the last optional `callback` argument to be a " + "function. Instead received: %s.", callerName, callback);
            didWarnOnInvalidCallback[key] = true;
          }
        };

        Object.defineProperty(fakeInternalInstance, "_processChildContext", {
          enumerable: false,
          value: function value() {
            invariant(false, "_processChildContext is not available in React 16+. This likely " + "means you have multiple copies of React and are attempting to nest " + "a React 15 tree inside a React 16 tree using " + "unstable_renderSubtreeIntoContainer, which isn't supported. Try " + "to make sure you have only one copy of React (and ideally, switch " + "to ReactDOM.createPortal).");
          }
        });
        Object.freeze(fakeInternalInstance);
      }

      function callGetDerivedStateFromCatch(ctor, capturedValues) {
        var resultState = {};

        for (var i = 0; i < capturedValues.length; i++) {
          var capturedValue = capturedValues[i];
          var error = capturedValue.value;
          var partialState = ctor.getDerivedStateFromCatch.call(null, error);

          if (partialState !== null && partialState !== undefined) {
            babelHelpers.extends(resultState, partialState);
          }
        }

        return resultState;
      }

      var ReactFiberClassComponent = function ReactFiberClassComponent(scheduleWork, computeExpirationForFiber, memoizeProps, memoizeState) {
        var updater = {
          isMounted: isMounted,
          enqueueSetState: function enqueueSetState(instance, partialState, callback) {
            var fiber = get(instance);
            callback = callback === undefined ? null : callback;
            {
              warnOnInvalidCallback(callback, "setState");
            }
            var expirationTime = computeExpirationForFiber(fiber);
            var update = {
              expirationTime: expirationTime,
              partialState: partialState,
              callback: callback,
              isReplace: false,
              isForced: false,
              capturedValue: null,
              next: null
            };
            insertUpdateIntoFiber(fiber, update);
            scheduleWork(fiber, expirationTime);
          },
          enqueueReplaceState: function enqueueReplaceState(instance, state, callback) {
            var fiber = get(instance);
            callback = callback === undefined ? null : callback;
            {
              warnOnInvalidCallback(callback, "replaceState");
            }
            var expirationTime = computeExpirationForFiber(fiber);
            var update = {
              expirationTime: expirationTime,
              partialState: state,
              callback: callback,
              isReplace: true,
              isForced: false,
              capturedValue: null,
              next: null
            };
            insertUpdateIntoFiber(fiber, update);
            scheduleWork(fiber, expirationTime);
          },
          enqueueForceUpdate: function enqueueForceUpdate(instance, callback) {
            var fiber = get(instance);
            callback = callback === undefined ? null : callback;
            {
              warnOnInvalidCallback(callback, "forceUpdate");
            }
            var expirationTime = computeExpirationForFiber(fiber);
            var update = {
              expirationTime: expirationTime,
              partialState: null,
              callback: callback,
              isReplace: false,
              isForced: true,
              capturedValue: null,
              next: null
            };
            insertUpdateIntoFiber(fiber, update);
            scheduleWork(fiber, expirationTime);
          }
        };

        function checkShouldComponentUpdate(workInProgress, oldProps, newProps, oldState, newState, newContext) {
          if (oldProps === null || workInProgress.updateQueue !== null && workInProgress.updateQueue.hasForceUpdate) {
            return true;
          }

          var instance = workInProgress.stateNode;
          var ctor = workInProgress.type;

          if (typeof instance.shouldComponentUpdate === "function") {
            startPhaseTimer(workInProgress, "shouldComponentUpdate");
            var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, newContext);
            stopPhaseTimer();
            {
              warning(shouldUpdate !== undefined, "%s.shouldComponentUpdate(): Returned undefined instead of a " + "boolean value. Make sure to return true or false.", getComponentName(workInProgress) || "Unknown");
            }
            return shouldUpdate;
          }

          if (ctor.prototype && ctor.prototype.isPureReactComponent) {
            return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
          }

          return true;
        }

        function checkClassInstance(workInProgress) {
          var instance = workInProgress.stateNode;
          var type = workInProgress.type;
          {
            var name = getComponentName(workInProgress);
            var renderPresent = instance.render;

            if (!renderPresent) {
              if (type.prototype && typeof type.prototype.render === "function") {
                warning(false, "%s(...): No `render` method found on the returned component " + "instance: did you accidentally return an object from the constructor?", name);
              } else {
                warning(false, "%s(...): No `render` method found on the returned component " + "instance: you may have forgotten to define `render`.", name);
              }
            }

            var noGetInitialStateOnES6 = !instance.getInitialState || instance.getInitialState.isReactClassApproved || instance.state;
            warning(noGetInitialStateOnES6, "getInitialState was defined on %s, a plain JavaScript class. " + "This is only supported for classes created using React.createClass. " + "Did you mean to define a state property instead?", name);
            var noGetDefaultPropsOnES6 = !instance.getDefaultProps || instance.getDefaultProps.isReactClassApproved;
            warning(noGetDefaultPropsOnES6, "getDefaultProps was defined on %s, a plain JavaScript class. " + "This is only supported for classes created using React.createClass. " + "Use a static property to define defaultProps instead.", name);
            var noInstancePropTypes = !instance.propTypes;
            warning(noInstancePropTypes, "propTypes was defined as an instance property on %s. Use a static " + "property to define propTypes instead.", name);
            var noInstanceContextTypes = !instance.contextTypes;
            warning(noInstanceContextTypes, "contextTypes was defined as an instance property on %s. Use a static " + "property to define contextTypes instead.", name);
            var noComponentShouldUpdate = typeof instance.componentShouldUpdate !== "function";
            warning(noComponentShouldUpdate, "%s has a method called " + "componentShouldUpdate(). Did you mean shouldComponentUpdate()? " + "The name is phrased as a question because the function is " + "expected to return a value.", name);

            if (type.prototype && type.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
              warning(false, "%s has a method called shouldComponentUpdate(). " + "shouldComponentUpdate should not be used when extending React.PureComponent. " + "Please extend React.Component if shouldComponentUpdate is used.", getComponentName(workInProgress) || "A pure component");
            }

            var noComponentDidUnmount = typeof instance.componentDidUnmount !== "function";
            warning(noComponentDidUnmount, "%s has a method called " + "componentDidUnmount(). But there is no such lifecycle method. " + "Did you mean componentWillUnmount()?", name);
            var noComponentDidReceiveProps = typeof instance.componentDidReceiveProps !== "function";
            warning(noComponentDidReceiveProps, "%s has a method called " + "componentDidReceiveProps(). But there is no such lifecycle method. " + "If you meant to update the state in response to changing props, " + "use componentWillReceiveProps(). If you meant to fetch data or " + "run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
            var noComponentWillRecieveProps = typeof instance.componentWillRecieveProps !== "function";
            warning(noComponentWillRecieveProps, "%s has a method called " + "componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
            var noUnsafeComponentWillRecieveProps = typeof instance.UNSAFE_componentWillRecieveProps !== "function";
            warning(noUnsafeComponentWillRecieveProps, "%s has a method called " + "UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
            var hasMutatedProps = instance.props !== workInProgress.pendingProps;
            warning(instance.props === undefined || !hasMutatedProps, "%s(...): When calling super() in `%s`, make sure to pass " + "up the same props that your component's constructor was passed.", name, name);
            var noInstanceDefaultProps = !instance.defaultProps;
            warning(noInstanceDefaultProps, "Setting defaultProps as an instance property on %s is not supported and will be ignored." + " Instead, define defaultProps as a static property on %s.", name, name);
          }
          var state = instance.state;

          if (state && (typeof state !== "object" || isArray(state))) {
            warning(false, "%s.state: must be set to an object or null", getComponentName(workInProgress));
          }

          if (typeof instance.getChildContext === "function") {
            warning(typeof type.childContextTypes === "object", "%s.getChildContext(): childContextTypes must be defined in order to " + "use getChildContext().", getComponentName(workInProgress));
          }
        }

        function resetInputPointers(workInProgress, instance) {
          instance.props = workInProgress.memoizedProps;
          instance.state = workInProgress.memoizedState;
        }

        function adoptClassInstance(workInProgress, instance) {
          instance.updater = updater;
          workInProgress.stateNode = instance;
          set(instance, workInProgress);
          {
            instance._reactInternalInstance = fakeInternalInstance;
          }
        }

        function constructClassInstance(workInProgress, props) {
          var ctor = workInProgress.type;
          var unmaskedContext = getUnmaskedContext(workInProgress);
          var needsContext = isContextConsumer(workInProgress);
          var context = needsContext ? getMaskedContext(workInProgress, unmaskedContext) : emptyObject;

          if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
            new ctor(props, context);
          }

          var instance = new ctor(props, context);
          var state = instance.state !== null && instance.state !== undefined ? instance.state : null;
          adoptClassInstance(workInProgress, instance);
          {
            if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
              var componentName = getComponentName(workInProgress) || "Unknown";

              if (!didWarnAboutUninitializedState[componentName]) {
                warning(false, "%s: Did not properly initialize state during construction. " + "Expected state to be an object, but it was %s.", componentName, instance.state === null ? "null" : "undefined");
                didWarnAboutUninitializedState[componentName] = true;
              }
            }
          }
          workInProgress.memoizedState = state;
          var partialState = callGetDerivedStateFromProps(workInProgress, instance, props);

          if (partialState !== null && partialState !== undefined) {
            workInProgress.memoizedState = babelHelpers.extends({}, workInProgress.memoizedState, partialState);
          }

          if (needsContext) {
            cacheContext(workInProgress, unmaskedContext, context);
          }

          return instance;
        }

        function callComponentWillMount(workInProgress, instance) {
          startPhaseTimer(workInProgress, "componentWillMount");
          var oldState = instance.state;

          if (typeof instance.componentWillMount === "function") {
            instance.componentWillMount();
          }

          if (typeof instance.UNSAFE_componentWillMount === "function") {
            instance.UNSAFE_componentWillMount();
          }

          stopPhaseTimer();

          if (oldState !== instance.state) {
            {
              warning(false, "%s.componentWillMount(): Assigning directly to this.state is " + "deprecated (except inside a component's " + "constructor). Use setState instead.", getComponentName(workInProgress));
            }
            updater.enqueueReplaceState(instance, instance.state, null);
          }
        }

        function callComponentWillReceiveProps(workInProgress, instance, newProps, newContext) {
          var oldState = instance.state;
          startPhaseTimer(workInProgress, "componentWillReceiveProps");

          if (typeof instance.componentWillReceiveProps === "function") {
            instance.componentWillReceiveProps(newProps, newContext);
          }

          if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
            instance.UNSAFE_componentWillReceiveProps(newProps, newContext);
          }

          stopPhaseTimer();

          if (instance.state !== oldState) {
            {
              var componentName = getComponentName(workInProgress) || "Component";

              if (!didWarnAboutStateAssignmentForComponent[componentName]) {
                warning(false, "%s.componentWillReceiveProps(): Assigning directly to " + "this.state is deprecated (except inside a component's " + "constructor). Use setState instead.", componentName);
                didWarnAboutStateAssignmentForComponent[componentName] = true;
              }
            }
            updater.enqueueReplaceState(instance, instance.state, null);
          }
        }

        function callGetDerivedStateFromProps(workInProgress, instance, props) {
          var type = workInProgress.type;

          if (typeof type.getDerivedStateFromProps === "function") {
            {
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true || typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                var componentName = getComponentName(workInProgress) || "Unknown";

                if (!didWarnAboutWillReceivePropsAndDerivedState[componentName]) {
                  warning(false, "%s: Defines both componentWillReceiveProps() and static " + "getDerivedStateFromProps() methods. We recommend using " + "only getDerivedStateFromProps().", componentName);
                  didWarnAboutWillReceivePropsAndDerivedState[componentName] = true;
                }
              }
            }

            if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
              type.getDerivedStateFromProps.call(null, props, workInProgress.memoizedState);
            }

            var partialState = type.getDerivedStateFromProps.call(null, props, workInProgress.memoizedState);
            {
              if (partialState === undefined) {
                var _componentName = getComponentName(workInProgress) || "Unknown";

                if (!didWarnAboutUndefinedDerivedState[_componentName]) {
                  warning(false, "%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. " + "You have returned undefined.", _componentName);
                  didWarnAboutUndefinedDerivedState[_componentName] = _componentName;
                }
              }
            }
            return partialState;
          }
        }

        function mountClassInstance(workInProgress, renderExpirationTime) {
          var ctor = workInProgress.type;
          var current = workInProgress.alternate;
          {
            checkClassInstance(workInProgress);
          }
          var instance = workInProgress.stateNode;
          var props = workInProgress.pendingProps;
          var unmaskedContext = getUnmaskedContext(workInProgress);
          instance.props = props;
          instance.state = workInProgress.memoizedState;
          instance.refs = emptyObject;
          instance.context = getMaskedContext(workInProgress, unmaskedContext);
          {
            if (workInProgress.mode & StrictMode) {
              ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);
            }

            if (warnAboutDeprecatedLifecycles) {
              ReactStrictModeWarnings.recordDeprecationWarnings(workInProgress, instance);
            }
          }

          if ((typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function") && typeof ctor.getDerivedStateFromProps !== "function") {
            callComponentWillMount(workInProgress, instance);
            var updateQueue = workInProgress.updateQueue;

            if (updateQueue !== null) {
              instance.state = processUpdateQueue(current, workInProgress, updateQueue, instance, props, renderExpirationTime);
            }
          }

          if (typeof instance.componentDidMount === "function") {
            workInProgress.effectTag |= Update;
          }
        }

        function resumeMountClassInstance(workInProgress, renderExpirationTime) {
          var ctor = workInProgress.type;
          var instance = workInProgress.stateNode;
          resetInputPointers(workInProgress, instance);
          var oldProps = workInProgress.memoizedProps;
          var newProps = workInProgress.pendingProps;
          var oldContext = instance.context;
          var newUnmaskedContext = getUnmaskedContext(workInProgress);
          var newContext = getMaskedContext(workInProgress, newUnmaskedContext);

          if ((typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function") && typeof ctor.getDerivedStateFromProps !== "function") {
            if (oldProps !== newProps || oldContext !== newContext) {
              callComponentWillReceiveProps(workInProgress, instance, newProps, newContext);
            }
          }

          var derivedStateFromProps = void 0;

          if (oldProps !== newProps) {
            derivedStateFromProps = callGetDerivedStateFromProps(workInProgress, instance, newProps);
          }

          var oldState = workInProgress.memoizedState;
          var newState = void 0;
          var derivedStateFromCatch = void 0;

          if (workInProgress.updateQueue !== null) {
            newState = processUpdateQueue(null, workInProgress, workInProgress.updateQueue, instance, newProps, renderExpirationTime);
            var updateQueue = workInProgress.updateQueue;

            if (updateQueue !== null && updateQueue.capturedValues !== null && enableGetDerivedStateFromCatch && typeof ctor.getDerivedStateFromCatch === "function") {
              var capturedValues = updateQueue.capturedValues;
              derivedStateFromCatch = callGetDerivedStateFromCatch(ctor, capturedValues);
            }
          } else {
            newState = oldState;
          }

          if (derivedStateFromProps !== null && derivedStateFromProps !== undefined) {
            newState = newState === null || newState === undefined ? derivedStateFromProps : babelHelpers.extends({}, newState, derivedStateFromProps);
          }

          if (derivedStateFromCatch !== null && derivedStateFromCatch !== undefined) {
            newState = newState === null || newState === undefined ? derivedStateFromCatch : babelHelpers.extends({}, newState, derivedStateFromCatch);
          }

          if (oldProps === newProps && oldState === newState && !hasContextChanged() && !(workInProgress.updateQueue !== null && workInProgress.updateQueue.hasForceUpdate)) {
            if (typeof instance.componentDidMount === "function") {
              workInProgress.effectTag |= Update;
            }

            return false;
          }

          var shouldUpdate = checkShouldComponentUpdate(workInProgress, oldProps, newProps, oldState, newState, newContext);

          if (shouldUpdate) {
            if ((typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function") && typeof ctor.getDerivedStateFromProps !== "function") {
              startPhaseTimer(workInProgress, "componentWillUpdate");

              if (typeof instance.componentWillUpdate === "function") {
                instance.componentWillUpdate(newProps, newState, newContext);
              }

              if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                instance.UNSAFE_componentWillUpdate(newProps, newState, newContext);
              }

              stopPhaseTimer();
            }

            if (typeof instance.componentDidUpdate === "function") {
              workInProgress.effectTag |= Update;
            }
          } else {
            if (typeof instance.componentDidMount === "function") {
              workInProgress.effectTag |= Update;
            }

            memoizeProps(workInProgress, newProps);
            memoizeState(workInProgress, newState);
          }

          instance.props = newProps;
          instance.state = newState;
          instance.context = newContext;
          return shouldUpdate;
        }

        function updateClassInstance(current, workInProgress, renderExpirationTime) {
          var ctor = workInProgress.type;
          var instance = workInProgress.stateNode;
          resetInputPointers(workInProgress, instance);
          var oldProps = workInProgress.memoizedProps;
          var newProps = workInProgress.pendingProps;
          var oldContext = instance.context;
          var newUnmaskedContext = getUnmaskedContext(workInProgress);
          var newContext = getMaskedContext(workInProgress, newUnmaskedContext);

          if ((typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function") && typeof ctor.getDerivedStateFromProps !== "function") {
            if (oldProps !== newProps || oldContext !== newContext) {
              callComponentWillReceiveProps(workInProgress, instance, newProps, newContext);
            }
          }

          var derivedStateFromProps = void 0;

          if (oldProps !== newProps) {
            derivedStateFromProps = callGetDerivedStateFromProps(workInProgress, instance, newProps);
          }

          var oldState = workInProgress.memoizedState;
          var newState = void 0;
          var derivedStateFromCatch = void 0;

          if (workInProgress.updateQueue !== null) {
            newState = processUpdateQueue(current, workInProgress, workInProgress.updateQueue, instance, newProps, renderExpirationTime);
            var updateQueue = workInProgress.updateQueue;

            if (updateQueue !== null && updateQueue.capturedValues !== null && enableGetDerivedStateFromCatch && typeof ctor.getDerivedStateFromCatch === "function") {
              var capturedValues = updateQueue.capturedValues;
              derivedStateFromCatch = callGetDerivedStateFromCatch(ctor, capturedValues);
            }
          } else {
            newState = oldState;
          }

          if (derivedStateFromProps !== null && derivedStateFromProps !== undefined) {
            newState = newState === null || newState === undefined ? derivedStateFromProps : babelHelpers.extends({}, newState, derivedStateFromProps);
          }

          if (derivedStateFromCatch !== null && derivedStateFromCatch !== undefined) {
            newState = newState === null || newState === undefined ? derivedStateFromCatch : babelHelpers.extends({}, newState, derivedStateFromCatch);
          }

          if (oldProps === newProps && oldState === newState && !hasContextChanged() && !(workInProgress.updateQueue !== null && workInProgress.updateQueue.hasForceUpdate)) {
            if (typeof instance.componentDidUpdate === "function") {
              if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
                workInProgress.effectTag |= Update;
              }
            }

            return false;
          }

          var shouldUpdate = checkShouldComponentUpdate(workInProgress, oldProps, newProps, oldState, newState, newContext);

          if (shouldUpdate) {
            if ((typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function") && typeof ctor.getDerivedStateFromProps !== "function") {
              startPhaseTimer(workInProgress, "componentWillUpdate");

              if (typeof instance.componentWillUpdate === "function") {
                instance.componentWillUpdate(newProps, newState, newContext);
              }

              if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                instance.UNSAFE_componentWillUpdate(newProps, newState, newContext);
              }

              stopPhaseTimer();
            }

            if (typeof instance.componentDidUpdate === "function") {
              workInProgress.effectTag |= Update;
            }
          } else {
            if (typeof instance.componentDidUpdate === "function") {
              if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
                workInProgress.effectTag |= Update;
              }
            }

            memoizeProps(workInProgress, newProps);
            memoizeState(workInProgress, newState);
          }

          instance.props = newProps;
          instance.state = newState;
          instance.context = newContext;
          return shouldUpdate;
        }

        return {
          adoptClassInstance: adoptClassInstance,
          callGetDerivedStateFromProps: callGetDerivedStateFromProps,
          constructClassInstance: constructClassInstance,
          mountClassInstance: mountClassInstance,
          resumeMountClassInstance: resumeMountClassInstance,
          updateClassInstance: updateClassInstance
        };
      };

      var getCurrentFiberStackAddendum$1 = ReactDebugCurrentFiber.getCurrentFiberStackAddendum;
      var didWarnAboutMaps = void 0;
      var didWarnAboutStringRefInStrictMode = void 0;
      var ownerHasKeyUseWarning = void 0;
      var ownerHasFunctionTypeWarning = void 0;

      var warnForMissingKey = function warnForMissingKey(child) {};

      {
        didWarnAboutMaps = false;
        didWarnAboutStringRefInStrictMode = {};
        ownerHasKeyUseWarning = {};
        ownerHasFunctionTypeWarning = {};

        warnForMissingKey = function warnForMissingKey(child) {
          if (child === null || typeof child !== "object") {
            return;
          }

          if (!child._store || child._store.validated || child.key != null) {
            return;
          }

          invariant(typeof child._store === "object", "React Component in warnForMissingKey should have a _store. " + "This error is likely caused by a bug in React. Please file an issue.");
          child._store.validated = true;
          var currentComponentErrorInfo = "Each child in an array or iterator should have a unique " + '"key" prop. See https://fb.me/react-warning-keys for ' + "more information." + (getCurrentFiberStackAddendum$1() || "");

          if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
            return;
          }

          ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
          warning(false, "Each child in an array or iterator should have a unique " + '"key" prop. See https://fb.me/react-warning-keys for ' + "more information.%s", getCurrentFiberStackAddendum$1());
        };
      }
      var isArray$1 = Array.isArray;

      function coerceRef(returnFiber, current, element) {
        var mixedRef = element.ref;

        if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
          {
            if (returnFiber.mode & StrictMode) {
              var componentName = getComponentName(returnFiber) || "Component";

              if (!didWarnAboutStringRefInStrictMode[componentName]) {
                warning(false, 'A string ref, "%s", has been found within a strict mode tree. ' + "String refs are a source of potential bugs and should be avoided. " + "We recommend using createRef() instead." + "\n%s" + "\n\nLearn more about using refs safely here:" + "\nhttps://fb.me/react-strict-mode-string-ref", mixedRef, getStackAddendumByWorkInProgressFiber(returnFiber));
                didWarnAboutStringRefInStrictMode[componentName] = true;
              }
            }
          }

          if (element._owner) {
            var owner = element._owner;
            var inst = void 0;

            if (owner) {
              var ownerFiber = owner;
              invariant(ownerFiber.tag === ClassComponent, "Stateless function components cannot have refs.");
              inst = ownerFiber.stateNode;
            }

            invariant(inst, "Missing owner for string ref %s. This error is likely caused by a " + "bug in React. Please file an issue.", mixedRef);
            var stringRef = "" + mixedRef;

            if (current !== null && current.ref !== null && current.ref._stringRef === stringRef) {
              return current.ref;
            }

            var ref = function ref(value) {
              var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;

              if (value === null) {
                delete refs[stringRef];
              } else {
                refs[stringRef] = value;
              }
            };

            ref._stringRef = stringRef;
            return ref;
          } else {
            invariant(typeof mixedRef === "string", "Expected ref to be a function or a string.");
            invariant(element._owner, "Element ref was specified as a string (%s) but no owner was set. This could happen for one of" + " the following reasons:\n" + "1. You may be adding a ref to a functional component\n" + "2. You may be adding a ref to a component that was not created inside a component's render method\n" + "3. You have multiple copies of React loaded\n" + "See https://fb.me/react-refs-must-have-owner for more information.", mixedRef);
          }
        }

        return mixedRef;
      }

      function throwOnInvalidObjectType(returnFiber, newChild) {
        if (returnFiber.type !== "textarea") {
          var addendum = "";
          {
            addendum = " If you meant to render a collection of children, use an array " + "instead." + (getCurrentFiberStackAddendum$1() || "");
          }
          invariant(false, "Objects are not valid as a React child (found: %s).%s", Object.prototype.toString.call(newChild) === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : newChild, addendum);
        }
      }

      function warnOnFunctionType() {
        var currentComponentErrorInfo = "Functions are not valid as a React child. This may happen if " + "you return a Component instead of <Component /> from render. " + "Or maybe you meant to call this function rather than return it." + (getCurrentFiberStackAddendum$1() || "");

        if (ownerHasFunctionTypeWarning[currentComponentErrorInfo]) {
          return;
        }

        ownerHasFunctionTypeWarning[currentComponentErrorInfo] = true;
        warning(false, "Functions are not valid as a React child. This may happen if " + "you return a Component instead of <Component /> from render. " + "Or maybe you meant to call this function rather than return it.%s", getCurrentFiberStackAddendum$1() || "");
      }

      function ChildReconciler(shouldTrackSideEffects) {
        function deleteChild(returnFiber, childToDelete) {
          if (!shouldTrackSideEffects) {
            return;
          }

          var last = returnFiber.lastEffect;

          if (last !== null) {
            last.nextEffect = childToDelete;
            returnFiber.lastEffect = childToDelete;
          } else {
            returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
          }

          childToDelete.nextEffect = null;
          childToDelete.effectTag = Deletion;
        }

        function deleteRemainingChildren(returnFiber, currentFirstChild) {
          if (!shouldTrackSideEffects) {
            return null;
          }

          var childToDelete = currentFirstChild;

          while (childToDelete !== null) {
            deleteChild(returnFiber, childToDelete);
            childToDelete = childToDelete.sibling;
          }

          return null;
        }

        function mapRemainingChildren(returnFiber, currentFirstChild) {
          var existingChildren = new Map();
          var existingChild = currentFirstChild;

          while (existingChild !== null) {
            if (existingChild.key !== null) {
              existingChildren.set(existingChild.key, existingChild);
            } else {
              existingChildren.set(existingChild.index, existingChild);
            }

            existingChild = existingChild.sibling;
          }

          return existingChildren;
        }

        function useFiber(fiber, pendingProps, expirationTime) {
          var clone = createWorkInProgress(fiber, pendingProps, expirationTime);
          clone.index = 0;
          clone.sibling = null;
          return clone;
        }

        function placeChild(newFiber, lastPlacedIndex, newIndex) {
          newFiber.index = newIndex;

          if (!shouldTrackSideEffects) {
            return lastPlacedIndex;
          }

          var current = newFiber.alternate;

          if (current !== null) {
            var oldIndex = current.index;

            if (oldIndex < lastPlacedIndex) {
              newFiber.effectTag = Placement;
              return lastPlacedIndex;
            } else {
              return oldIndex;
            }
          } else {
            newFiber.effectTag = Placement;
            return lastPlacedIndex;
          }
        }

        function placeSingleChild(newFiber) {
          if (shouldTrackSideEffects && newFiber.alternate === null) {
            newFiber.effectTag = Placement;
          }

          return newFiber;
        }

        function updateTextNode(returnFiber, current, textContent, expirationTime) {
          if (current === null || current.tag !== HostText) {
            var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
            created["return"] = returnFiber;
            return created;
          } else {
            var existing = useFiber(current, textContent, expirationTime);
            existing["return"] = returnFiber;
            return existing;
          }
        }

        function updateElement(returnFiber, current, element, expirationTime) {
          if (current !== null && current.type === element.type) {
            var existing = useFiber(current, element.props, expirationTime);
            existing.ref = coerceRef(returnFiber, current, element);
            existing["return"] = returnFiber;
            {
              existing._debugSource = element._source;
              existing._debugOwner = element._owner;
            }
            return existing;
          } else {
            var created = createFiberFromElement(element, returnFiber.mode, expirationTime);
            created.ref = coerceRef(returnFiber, current, element);
            created["return"] = returnFiber;
            return created;
          }
        }

        function updatePortal(returnFiber, current, portal, expirationTime) {
          if (current === null || current.tag !== HostPortal || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {
            var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
            created["return"] = returnFiber;
            return created;
          } else {
            var existing = useFiber(current, portal.children || [], expirationTime);
            existing["return"] = returnFiber;
            return existing;
          }
        }

        function updateFragment(returnFiber, current, fragment, expirationTime, key) {
          if (current === null || current.tag !== Fragment) {
            var created = createFiberFromFragment(fragment, returnFiber.mode, expirationTime, key);
            created["return"] = returnFiber;
            return created;
          } else {
            var existing = useFiber(current, fragment, expirationTime);
            existing["return"] = returnFiber;
            return existing;
          }
        }

        function createChild(returnFiber, newChild, expirationTime) {
          if (typeof newChild === "string" || typeof newChild === "number") {
            var created = createFiberFromText("" + newChild, returnFiber.mode, expirationTime);
            created["return"] = returnFiber;
            return created;
          }

          if (typeof newChild === "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE:
                {
                  var _created = createFiberFromElement(newChild, returnFiber.mode, expirationTime);

                  _created.ref = coerceRef(returnFiber, null, newChild);
                  _created["return"] = returnFiber;
                  return _created;
                }

              case REACT_PORTAL_TYPE:
                {
                  var _created2 = createFiberFromPortal(newChild, returnFiber.mode, expirationTime);

                  _created2["return"] = returnFiber;
                  return _created2;
                }
            }

            if (isArray$1(newChild) || getIteratorFn(newChild)) {
              var _created3 = createFiberFromFragment(newChild, returnFiber.mode, expirationTime, null);

              _created3["return"] = returnFiber;
              return _created3;
            }

            throwOnInvalidObjectType(returnFiber, newChild);
          }

          {
            if (typeof newChild === "function") {
              warnOnFunctionType();
            }
          }
          return null;
        }

        function updateSlot(returnFiber, oldFiber, newChild, expirationTime) {
          var key = oldFiber !== null ? oldFiber.key : null;

          if (typeof newChild === "string" || typeof newChild === "number") {
            if (key !== null) {
              return null;
            }

            return updateTextNode(returnFiber, oldFiber, "" + newChild, expirationTime);
          }

          if (typeof newChild === "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE:
                {
                  if (newChild.key === key) {
                    if (newChild.type === REACT_FRAGMENT_TYPE) {
                      return updateFragment(returnFiber, oldFiber, newChild.props.children, expirationTime, key);
                    }

                    return updateElement(returnFiber, oldFiber, newChild, expirationTime);
                  } else {
                    return null;
                  }
                }

              case REACT_PORTAL_TYPE:
                {
                  if (newChild.key === key) {
                    return updatePortal(returnFiber, oldFiber, newChild, expirationTime);
                  } else {
                    return null;
                  }
                }
            }

            if (isArray$1(newChild) || getIteratorFn(newChild)) {
              if (key !== null) {
                return null;
              }

              return updateFragment(returnFiber, oldFiber, newChild, expirationTime, null);
            }

            throwOnInvalidObjectType(returnFiber, newChild);
          }

          {
            if (typeof newChild === "function") {
              warnOnFunctionType();
            }
          }
          return null;
        }

        function updateFromMap(existingChildren, returnFiber, newIdx, newChild, expirationTime) {
          if (typeof newChild === "string" || typeof newChild === "number") {
            var matchedFiber = existingChildren.get(newIdx) || null;
            return updateTextNode(returnFiber, matchedFiber, "" + newChild, expirationTime);
          }

          if (typeof newChild === "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE:
                {
                  var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

                  if (newChild.type === REACT_FRAGMENT_TYPE) {
                    return updateFragment(returnFiber, _matchedFiber, newChild.props.children, expirationTime, newChild.key);
                  }

                  return updateElement(returnFiber, _matchedFiber, newChild, expirationTime);
                }

              case REACT_PORTAL_TYPE:
                {
                  var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

                  return updatePortal(returnFiber, _matchedFiber2, newChild, expirationTime);
                }
            }

            if (isArray$1(newChild) || getIteratorFn(newChild)) {
              var _matchedFiber3 = existingChildren.get(newIdx) || null;

              return updateFragment(returnFiber, _matchedFiber3, newChild, expirationTime, null);
            }

            throwOnInvalidObjectType(returnFiber, newChild);
          }

          {
            if (typeof newChild === "function") {
              warnOnFunctionType();
            }
          }
          return null;
        }

        function warnOnInvalidKey(child, knownKeys) {
          {
            if (typeof child !== "object" || child === null) {
              return knownKeys;
            }

            switch (child.$$typeof) {
              case REACT_ELEMENT_TYPE:
              case REACT_PORTAL_TYPE:
                warnForMissingKey(child);
                var key = child.key;

                if (typeof key !== "string") {
                  break;
                }

                if (knownKeys === null) {
                  knownKeys = new Set();
                  knownKeys.add(key);
                  break;
                }

                if (!knownKeys.has(key)) {
                  knownKeys.add(key);
                  break;
                }

                warning(false, "Encountered two children with the same key, `%s`. " + "Keys should be unique so that components maintain their identity " + "across updates. Non-unique keys may cause children to be " + "duplicated and/or omitted — the behavior is unsupported and " + "could change in a future version.%s", key, getCurrentFiberStackAddendum$1());
                break;

              default:
                break;
            }
          }
          return knownKeys;
        }

        function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, expirationTime) {
          {
            var knownKeys = null;

            for (var i = 0; i < newChildren.length; i++) {
              var child = newChildren[i];
              knownKeys = warnOnInvalidKey(child, knownKeys);
            }
          }
          var resultingFirstChild = null;
          var previousNewFiber = null;
          var oldFiber = currentFirstChild;
          var lastPlacedIndex = 0;
          var newIdx = 0;
          var nextOldFiber = null;

          for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
            if (oldFiber.index > newIdx) {
              nextOldFiber = oldFiber;
              oldFiber = null;
            } else {
              nextOldFiber = oldFiber.sibling;
            }

            var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], expirationTime);

            if (newFiber === null) {
              if (oldFiber === null) {
                oldFiber = nextOldFiber;
              }

              break;
            }

            if (shouldTrackSideEffects) {
              if (oldFiber && newFiber.alternate === null) {
                deleteChild(returnFiber, oldFiber);
              }
            }

            lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

            if (previousNewFiber === null) {
              resultingFirstChild = newFiber;
            } else {
              previousNewFiber.sibling = newFiber;
            }

            previousNewFiber = newFiber;
            oldFiber = nextOldFiber;
          }

          if (newIdx === newChildren.length) {
            deleteRemainingChildren(returnFiber, oldFiber);
            return resultingFirstChild;
          }

          if (oldFiber === null) {
            for (; newIdx < newChildren.length; newIdx++) {
              var _newFiber = createChild(returnFiber, newChildren[newIdx], expirationTime);

              if (!_newFiber) {
                continue;
              }

              lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);

              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber;
              } else {
                previousNewFiber.sibling = _newFiber;
              }

              previousNewFiber = _newFiber;
            }

            return resultingFirstChild;
          }

          var existingChildren = mapRemainingChildren(returnFiber, oldFiber);

          for (; newIdx < newChildren.length; newIdx++) {
            var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], expirationTime);

            if (_newFiber2) {
              if (shouldTrackSideEffects) {
                if (_newFiber2.alternate !== null) {
                  existingChildren["delete"](_newFiber2.key === null ? newIdx : _newFiber2.key);
                }
              }

              lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);

              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber2;
              } else {
                previousNewFiber.sibling = _newFiber2;
              }

              previousNewFiber = _newFiber2;
            }
          }

          if (shouldTrackSideEffects) {
            existingChildren.forEach(function (child) {
              return deleteChild(returnFiber, child);
            });
          }

          return resultingFirstChild;
        }

        function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, expirationTime) {
          var iteratorFn = getIteratorFn(newChildrenIterable);
          invariant(typeof iteratorFn === "function", "An object is not an iterable. This error is likely caused by a bug in " + "React. Please file an issue.");
          {
            if (typeof newChildrenIterable.entries === "function") {
              var possibleMap = newChildrenIterable;

              if (possibleMap.entries === iteratorFn) {
                warning(didWarnAboutMaps, "Using Maps as children is unsupported and will likely yield " + "unexpected results. Convert it to a sequence/iterable of keyed " + "ReactElements instead.%s", getCurrentFiberStackAddendum$1());
                didWarnAboutMaps = true;
              }
            }

            var _newChildren = iteratorFn.call(newChildrenIterable);

            if (_newChildren) {
              var knownKeys = null;

              var _step = _newChildren.next();

              for (; !_step.done; _step = _newChildren.next()) {
                var child = _step.value;
                knownKeys = warnOnInvalidKey(child, knownKeys);
              }
            }
          }
          var newChildren = iteratorFn.call(newChildrenIterable);
          invariant(newChildren != null, "An iterable object provided no iterator.");
          var resultingFirstChild = null;
          var previousNewFiber = null;
          var oldFiber = currentFirstChild;
          var lastPlacedIndex = 0;
          var newIdx = 0;
          var nextOldFiber = null;
          var step = newChildren.next();

          for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
            if (oldFiber.index > newIdx) {
              nextOldFiber = oldFiber;
              oldFiber = null;
            } else {
              nextOldFiber = oldFiber.sibling;
            }

            var newFiber = updateSlot(returnFiber, oldFiber, step.value, expirationTime);

            if (newFiber === null) {
              if (!oldFiber) {
                oldFiber = nextOldFiber;
              }

              break;
            }

            if (shouldTrackSideEffects) {
              if (oldFiber && newFiber.alternate === null) {
                deleteChild(returnFiber, oldFiber);
              }
            }

            lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

            if (previousNewFiber === null) {
              resultingFirstChild = newFiber;
            } else {
              previousNewFiber.sibling = newFiber;
            }

            previousNewFiber = newFiber;
            oldFiber = nextOldFiber;
          }

          if (step.done) {
            deleteRemainingChildren(returnFiber, oldFiber);
            return resultingFirstChild;
          }

          if (oldFiber === null) {
            for (; !step.done; newIdx++, step = newChildren.next()) {
              var _newFiber3 = createChild(returnFiber, step.value, expirationTime);

              if (_newFiber3 === null) {
                continue;
              }

              lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);

              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber3;
              } else {
                previousNewFiber.sibling = _newFiber3;
              }

              previousNewFiber = _newFiber3;
            }

            return resultingFirstChild;
          }

          var existingChildren = mapRemainingChildren(returnFiber, oldFiber);

          for (; !step.done; newIdx++, step = newChildren.next()) {
            var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, expirationTime);

            if (_newFiber4 !== null) {
              if (shouldTrackSideEffects) {
                if (_newFiber4.alternate !== null) {
                  existingChildren["delete"](_newFiber4.key === null ? newIdx : _newFiber4.key);
                }
              }

              lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);

              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber4;
              } else {
                previousNewFiber.sibling = _newFiber4;
              }

              previousNewFiber = _newFiber4;
            }
          }

          if (shouldTrackSideEffects) {
            existingChildren.forEach(function (child) {
              return deleteChild(returnFiber, child);
            });
          }

          return resultingFirstChild;
        }

        function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, expirationTime) {
          if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
            deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
            var existing = useFiber(currentFirstChild, textContent, expirationTime);
            existing["return"] = returnFiber;
            return existing;
          }

          deleteRemainingChildren(returnFiber, currentFirstChild);
          var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
          created["return"] = returnFiber;
          return created;
        }

        function reconcileSingleElement(returnFiber, currentFirstChild, element, expirationTime) {
          var key = element.key;
          var child = currentFirstChild;

          while (child !== null) {
            if (child.key === key) {
              if (child.tag === Fragment ? element.type === REACT_FRAGMENT_TYPE : child.type === element.type) {
                deleteRemainingChildren(returnFiber, child.sibling);
                var existing = useFiber(child, element.type === REACT_FRAGMENT_TYPE ? element.props.children : element.props, expirationTime);
                existing.ref = coerceRef(returnFiber, child, element);
                existing["return"] = returnFiber;
                {
                  existing._debugSource = element._source;
                  existing._debugOwner = element._owner;
                }
                return existing;
              } else {
                deleteRemainingChildren(returnFiber, child);
                break;
              }
            } else {
              deleteChild(returnFiber, child);
            }

            child = child.sibling;
          }

          if (element.type === REACT_FRAGMENT_TYPE) {
            var created = createFiberFromFragment(element.props.children, returnFiber.mode, expirationTime, element.key);
            created["return"] = returnFiber;
            return created;
          } else {
            var _created4 = createFiberFromElement(element, returnFiber.mode, expirationTime);

            _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
            _created4["return"] = returnFiber;
            return _created4;
          }
        }

        function reconcileSinglePortal(returnFiber, currentFirstChild, portal, expirationTime) {
          var key = portal.key;
          var child = currentFirstChild;

          while (child !== null) {
            if (child.key === key) {
              if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                deleteRemainingChildren(returnFiber, child.sibling);
                var existing = useFiber(child, portal.children || [], expirationTime);
                existing["return"] = returnFiber;
                return existing;
              } else {
                deleteRemainingChildren(returnFiber, child);
                break;
              }
            } else {
              deleteChild(returnFiber, child);
            }

            child = child.sibling;
          }

          var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
          created["return"] = returnFiber;
          return created;
        }

        function reconcileChildFibers(returnFiber, currentFirstChild, newChild, expirationTime) {
          if (typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null) {
            newChild = newChild.props.children;
          }

          var isObject = typeof newChild === "object" && newChild !== null;

          if (isObject) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE:
                return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, expirationTime));

              case REACT_PORTAL_TYPE:
                return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, expirationTime));
            }
          }

          if (typeof newChild === "string" || typeof newChild === "number") {
            return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, expirationTime));
          }

          if (isArray$1(newChild)) {
            return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, expirationTime);
          }

          if (getIteratorFn(newChild)) {
            return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, expirationTime);
          }

          if (isObject) {
            throwOnInvalidObjectType(returnFiber, newChild);
          }

          {
            if (typeof newChild === "function") {
              warnOnFunctionType();
            }
          }

          if (typeof newChild === "undefined") {
            switch (returnFiber.tag) {
              case ClassComponent:
                {
                  {
                    var instance = returnFiber.stateNode;

                    if (instance.render._isMockFunction) {
                      break;
                    }
                  }
                }

              case FunctionalComponent:
                {
                  var Component = returnFiber.type;
                  invariant(false, "%s(...): Nothing was returned from render. This usually means a " + "return statement is missing. Or, to render nothing, " + "return null.", Component.displayName || Component.name || "Component");
                }
            }
          }

          return deleteRemainingChildren(returnFiber, currentFirstChild);
        }

        return reconcileChildFibers;
      }

      var reconcileChildFibers = ChildReconciler(true);
      var mountChildFibers = ChildReconciler(false);

      function cloneChildFibers(current, workInProgress) {
        invariant(current === null || workInProgress.child === current.child, "Resuming work not yet implemented.");

        if (workInProgress.child === null) {
          return;
        }

        var currentChild = workInProgress.child;
        var newChild = createWorkInProgress(currentChild, currentChild.pendingProps, currentChild.expirationTime);
        workInProgress.child = newChild;
        newChild["return"] = workInProgress;

        while (currentChild.sibling !== null) {
          currentChild = currentChild.sibling;
          newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps, currentChild.expirationTime);
          newChild["return"] = workInProgress;
        }

        newChild.sibling = null;
      }

      var changedBitsStack = [];
      var currentValueStack = [];
      var stack = [];
      var index$1 = -1;
      var rendererSigil = void 0;
      {
        rendererSigil = {};
      }

      function pushProvider(providerFiber) {
        var context = providerFiber.type.context;
        index$1 += 1;
        changedBitsStack[index$1] = context._changedBits;
        currentValueStack[index$1] = context._currentValue;
        stack[index$1] = providerFiber;
        context._currentValue = providerFiber.pendingProps.value;
        context._changedBits = providerFiber.stateNode;
        {
          warning(context._currentRenderer === null || context._currentRenderer === rendererSigil, "Detected multiple renderers concurrently rendering the " + "same context provider. This is currently unsupported.");
          context._currentRenderer = rendererSigil;
        }
      }

      function popProvider(providerFiber) {
        {
          warning(index$1 > -1 && providerFiber === stack[index$1], "Unexpected pop.");
        }
        var changedBits = changedBitsStack[index$1];
        var currentValue = currentValueStack[index$1];
        changedBitsStack[index$1] = null;
        currentValueStack[index$1] = null;
        stack[index$1] = null;
        index$1 -= 1;
        var context = providerFiber.type.context;
        context._currentValue = currentValue;
        context._changedBits = changedBits;
      }

      function resetProviderStack() {
        for (var i = index$1; i > -1; i--) {
          var providerFiber = stack[i];
          var context = providerFiber.type.context;
          context._currentValue = context._defaultValue;
          context._changedBits = 0;
          changedBitsStack[i] = null;
          currentValueStack[i] = null;
          stack[i] = null;
          {
            context._currentRenderer = null;
          }
        }

        index$1 = -1;
      }

      var didWarnAboutBadClass = void 0;
      var didWarnAboutGetDerivedStateOnFunctionalComponent = void 0;
      var didWarnAboutStatelessRefs = void 0;
      {
        didWarnAboutBadClass = {};
        didWarnAboutGetDerivedStateOnFunctionalComponent = {};
        didWarnAboutStatelessRefs = {};
      }

      var ReactFiberBeginWork = function ReactFiberBeginWork(config, hostContext, hydrationContext, scheduleWork, computeExpirationForFiber) {
        var shouldSetTextContent = config.shouldSetTextContent,
            shouldDeprioritizeSubtree = config.shouldDeprioritizeSubtree;
        var pushHostContext = hostContext.pushHostContext,
            pushHostContainer = hostContext.pushHostContainer;
        var enterHydrationState = hydrationContext.enterHydrationState,
            resetHydrationState = hydrationContext.resetHydrationState,
            tryToClaimNextHydratableInstance = hydrationContext.tryToClaimNextHydratableInstance;

        var _ReactFiberClassCompo = ReactFiberClassComponent(scheduleWork, computeExpirationForFiber, memoizeProps, memoizeState),
            adoptClassInstance = _ReactFiberClassCompo.adoptClassInstance,
            callGetDerivedStateFromProps = _ReactFiberClassCompo.callGetDerivedStateFromProps,
            constructClassInstance = _ReactFiberClassCompo.constructClassInstance,
            mountClassInstance = _ReactFiberClassCompo.mountClassInstance,
            resumeMountClassInstance = _ReactFiberClassCompo.resumeMountClassInstance,
            updateClassInstance = _ReactFiberClassCompo.updateClassInstance;

        function reconcileChildren(current, workInProgress, nextChildren) {
          reconcileChildrenAtExpirationTime(current, workInProgress, nextChildren, workInProgress.expirationTime);
        }

        function reconcileChildrenAtExpirationTime(current, workInProgress, nextChildren, renderExpirationTime) {
          if (current === null) {
            workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
          } else {
            workInProgress.child = reconcileChildFibers(workInProgress, current.child, nextChildren, renderExpirationTime);
          }
        }

        function updateFragment(current, workInProgress) {
          var nextChildren = workInProgress.pendingProps;

          if (hasContextChanged()) {} else if (workInProgress.memoizedProps === nextChildren) {
            return bailoutOnAlreadyFinishedWork(current, workInProgress);
          }

          reconcileChildren(current, workInProgress, nextChildren);
          memoizeProps(workInProgress, nextChildren);
          return workInProgress.child;
        }

        function updateMode(current, workInProgress) {
          var nextChildren = workInProgress.pendingProps.children;

          if (hasContextChanged()) {} else if (nextChildren === null || workInProgress.memoizedProps === nextChildren) {
            return bailoutOnAlreadyFinishedWork(current, workInProgress);
          }

          reconcileChildren(current, workInProgress, nextChildren);
          memoizeProps(workInProgress, nextChildren);
          return workInProgress.child;
        }

        function markRef(current, workInProgress) {
          var ref = workInProgress.ref;

          if (current === null && ref !== null || current !== null && current.ref !== ref) {
            workInProgress.effectTag |= Ref;
          }
        }

        function updateFunctionalComponent(current, workInProgress) {
          var fn = workInProgress.type;
          var nextProps = workInProgress.pendingProps;

          if (hasContextChanged()) {} else {
            if (workInProgress.memoizedProps === nextProps) {
              return bailoutOnAlreadyFinishedWork(current, workInProgress);
            }
          }

          var unmaskedContext = getUnmaskedContext(workInProgress);
          var context = getMaskedContext(workInProgress, unmaskedContext);
          var nextChildren = void 0;
          {
            ReactCurrentOwner.current = workInProgress;
            ReactDebugCurrentFiber.setCurrentPhase("render");
            nextChildren = fn(nextProps, context);
            ReactDebugCurrentFiber.setCurrentPhase(null);
          }
          workInProgress.effectTag |= PerformedWork;
          reconcileChildren(current, workInProgress, nextChildren);
          memoizeProps(workInProgress, nextProps);
          return workInProgress.child;
        }

        function updateClassComponent(current, workInProgress, renderExpirationTime) {
          var hasContext = pushContextProvider(workInProgress);
          var shouldUpdate = void 0;

          if (current === null) {
            if (workInProgress.stateNode === null) {
              constructClassInstance(workInProgress, workInProgress.pendingProps);
              mountClassInstance(workInProgress, renderExpirationTime);
              shouldUpdate = true;
            } else {
              shouldUpdate = resumeMountClassInstance(workInProgress, renderExpirationTime);
            }
          } else {
            shouldUpdate = updateClassInstance(current, workInProgress, renderExpirationTime);
          }

          var didCaptureError = false;
          var updateQueue = workInProgress.updateQueue;

          if (updateQueue !== null && updateQueue.capturedValues !== null) {
            shouldUpdate = true;
            didCaptureError = true;
          }

          return finishClassComponent(current, workInProgress, shouldUpdate, hasContext, didCaptureError, renderExpirationTime);
        }

        function finishClassComponent(current, workInProgress, shouldUpdate, hasContext, didCaptureError, renderExpirationTime) {
          markRef(current, workInProgress);

          if (!shouldUpdate && !didCaptureError) {
            if (hasContext) {
              invalidateContextProvider(workInProgress, false);
            }

            return bailoutOnAlreadyFinishedWork(current, workInProgress);
          }

          var ctor = workInProgress.type;
          var instance = workInProgress.stateNode;
          ReactCurrentOwner.current = workInProgress;
          var nextChildren = void 0;

          if (didCaptureError && (!enableGetDerivedStateFromCatch || typeof ctor.getDerivedStateFromCatch !== "function")) {
            nextChildren = null;
          } else {
            {
              ReactDebugCurrentFiber.setCurrentPhase("render");
              nextChildren = instance.render();

              if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
                instance.render();
              }

              ReactDebugCurrentFiber.setCurrentPhase(null);
            }
          }

          workInProgress.effectTag |= PerformedWork;

          if (didCaptureError) {
            reconcileChildrenAtExpirationTime(current, workInProgress, null, renderExpirationTime);
            workInProgress.child = null;
          }

          reconcileChildrenAtExpirationTime(current, workInProgress, nextChildren, renderExpirationTime);
          memoizeState(workInProgress, instance.state);
          memoizeProps(workInProgress, instance.props);

          if (hasContext) {
            invalidateContextProvider(workInProgress, true);
          }

          return workInProgress.child;
        }

        function pushHostRootContext(workInProgress) {
          var root = workInProgress.stateNode;

          if (root.pendingContext) {
            pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);
          } else if (root.context) {
            pushTopLevelContextObject(workInProgress, root.context, false);
          }

          pushHostContainer(workInProgress, root.containerInfo);
        }

        function updateHostRoot(current, workInProgress, renderExpirationTime) {
          pushHostRootContext(workInProgress);
          var updateQueue = workInProgress.updateQueue;

          if (updateQueue !== null) {
            var prevState = workInProgress.memoizedState;
            var state = processUpdateQueue(current, workInProgress, updateQueue, null, null, renderExpirationTime);
            memoizeState(workInProgress, state);
            updateQueue = workInProgress.updateQueue;
            var element = void 0;

            if (updateQueue !== null && updateQueue.capturedValues !== null) {
              element = null;
            } else if (prevState === state) {
              resetHydrationState();
              return bailoutOnAlreadyFinishedWork(current, workInProgress);
            } else {
              element = state.element;
            }

            var root = workInProgress.stateNode;

            if ((current === null || current.child === null) && root.hydrate && enterHydrationState(workInProgress)) {
              workInProgress.effectTag |= Placement;
              workInProgress.child = mountChildFibers(workInProgress, null, element, renderExpirationTime);
            } else {
              resetHydrationState();
              reconcileChildren(current, workInProgress, element);
            }

            memoizeState(workInProgress, state);
            return workInProgress.child;
          }

          resetHydrationState();
          return bailoutOnAlreadyFinishedWork(current, workInProgress);
        }

        function updateHostComponent(current, workInProgress, renderExpirationTime) {
          pushHostContext(workInProgress);

          if (current === null) {
            tryToClaimNextHydratableInstance(workInProgress);
          }

          var type = workInProgress.type;
          var memoizedProps = workInProgress.memoizedProps;
          var nextProps = workInProgress.pendingProps;
          var prevProps = current !== null ? current.memoizedProps : null;

          if (hasContextChanged()) {} else if (memoizedProps === nextProps) {
            var isHidden = workInProgress.mode & AsyncMode && shouldDeprioritizeSubtree(type, nextProps);

            if (isHidden) {
              workInProgress.expirationTime = Never;
            }

            if (!isHidden || renderExpirationTime !== Never) {
              return bailoutOnAlreadyFinishedWork(current, workInProgress);
            }
          }

          var nextChildren = nextProps.children;
          var isDirectTextChild = shouldSetTextContent(type, nextProps);

          if (isDirectTextChild) {
            nextChildren = null;
          } else if (prevProps && shouldSetTextContent(type, prevProps)) {
            workInProgress.effectTag |= ContentReset;
          }

          markRef(current, workInProgress);

          if (renderExpirationTime !== Never && workInProgress.mode & AsyncMode && shouldDeprioritizeSubtree(type, nextProps)) {
            workInProgress.expirationTime = Never;
            workInProgress.memoizedProps = nextProps;
            return null;
          }

          reconcileChildren(current, workInProgress, nextChildren);
          memoizeProps(workInProgress, nextProps);
          return workInProgress.child;
        }

        function updateHostText(current, workInProgress) {
          if (current === null) {
            tryToClaimNextHydratableInstance(workInProgress);
          }

          var nextProps = workInProgress.pendingProps;
          memoizeProps(workInProgress, nextProps);
          return null;
        }

        function mountIndeterminateComponent(current, workInProgress, renderExpirationTime) {
          invariant(current === null, "An indeterminate component should never have mounted. This error is " + "likely caused by a bug in React. Please file an issue.");
          var fn = workInProgress.type;
          var props = workInProgress.pendingProps;
          var unmaskedContext = getUnmaskedContext(workInProgress);
          var context = getMaskedContext(workInProgress, unmaskedContext);
          var value = void 0;
          {
            if (fn.prototype && typeof fn.prototype.render === "function") {
              var componentName = getComponentName(workInProgress) || "Unknown";

              if (!didWarnAboutBadClass[componentName]) {
                warning(false, "The <%s /> component appears to have a render method, but doesn't extend React.Component. " + "This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                didWarnAboutBadClass[componentName] = true;
              }
            }

            ReactCurrentOwner.current = workInProgress;
            value = fn(props, context);
          }
          workInProgress.effectTag |= PerformedWork;

          if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === undefined) {
            var Component = workInProgress.type;
            workInProgress.tag = ClassComponent;
            workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;

            if (typeof Component.getDerivedStateFromProps === "function") {
              var partialState = callGetDerivedStateFromProps(workInProgress, value, props);

              if (partialState !== null && partialState !== undefined) {
                workInProgress.memoizedState = babelHelpers.extends({}, workInProgress.memoizedState, partialState);
              }
            }

            var hasContext = pushContextProvider(workInProgress);
            adoptClassInstance(workInProgress, value);
            mountClassInstance(workInProgress, renderExpirationTime);
            return finishClassComponent(current, workInProgress, true, hasContext, false, renderExpirationTime);
          } else {
            workInProgress.tag = FunctionalComponent;
            {
              var _Component = workInProgress.type;

              if (_Component) {
                warning(!_Component.childContextTypes, "%s(...): childContextTypes cannot be defined on a functional component.", _Component.displayName || _Component.name || "Component");
              }

              if (workInProgress.ref !== null) {
                var info = "";
                var ownerName = ReactDebugCurrentFiber.getCurrentFiberOwnerName();

                if (ownerName) {
                  info += "\n\nCheck the render method of `" + ownerName + "`.";
                }

                var warningKey = ownerName || workInProgress._debugID || "";
                var debugSource = workInProgress._debugSource;

                if (debugSource) {
                  warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
                }

                if (!didWarnAboutStatelessRefs[warningKey]) {
                  didWarnAboutStatelessRefs[warningKey] = true;
                  warning(false, "Stateless function components cannot be given refs. " + "Attempts to access this ref will fail.%s%s", info, ReactDebugCurrentFiber.getCurrentFiberStackAddendum());
                }
              }

              if (typeof fn.getDerivedStateFromProps === "function") {
                var _componentName = getComponentName(workInProgress) || "Unknown";

                if (!didWarnAboutGetDerivedStateOnFunctionalComponent[_componentName]) {
                  warning(false, "%s: Stateless functional components do not support getDerivedStateFromProps.", _componentName);
                  didWarnAboutGetDerivedStateOnFunctionalComponent[_componentName] = true;
                }
              }
            }
            reconcileChildren(current, workInProgress, value);
            memoizeProps(workInProgress, props);
            return workInProgress.child;
          }
        }

        function updateCallComponent(current, workInProgress, renderExpirationTime) {
          var nextProps = workInProgress.pendingProps;

          if (hasContextChanged()) {} else if (workInProgress.memoizedProps === nextProps) {
            nextProps = workInProgress.memoizedProps;
          }

          var nextChildren = nextProps.children;

          if (current === null) {
            workInProgress.stateNode = mountChildFibers(workInProgress, workInProgress.stateNode, nextChildren, renderExpirationTime);
          } else {
            workInProgress.stateNode = reconcileChildFibers(workInProgress, current.stateNode, nextChildren, renderExpirationTime);
          }

          memoizeProps(workInProgress, nextProps);
          return workInProgress.stateNode;
        }

        function updatePortalComponent(current, workInProgress, renderExpirationTime) {
          pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
          var nextChildren = workInProgress.pendingProps;

          if (hasContextChanged()) {} else if (workInProgress.memoizedProps === nextChildren) {
            return bailoutOnAlreadyFinishedWork(current, workInProgress);
          }

          if (current === null) {
            workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
            memoizeProps(workInProgress, nextChildren);
          } else {
            reconcileChildren(current, workInProgress, nextChildren);
            memoizeProps(workInProgress, nextChildren);
          }

          return workInProgress.child;
        }

        function propagateContextChange(workInProgress, context, changedBits, renderExpirationTime) {
          var fiber = workInProgress.child;

          while (fiber !== null) {
            var nextFiber = void 0;

            switch (fiber.tag) {
              case ContextConsumer:
                var observedBits = fiber.stateNode | 0;

                if (fiber.type === context && (observedBits & changedBits) !== 0) {
                  var node = fiber;

                  while (node !== null) {
                    var alternate = node.alternate;

                    if (node.expirationTime === NoWork || node.expirationTime > renderExpirationTime) {
                      node.expirationTime = renderExpirationTime;

                      if (alternate !== null && (alternate.expirationTime === NoWork || alternate.expirationTime > renderExpirationTime)) {
                        alternate.expirationTime = renderExpirationTime;
                      }
                    } else if (alternate !== null && (alternate.expirationTime === NoWork || alternate.expirationTime > renderExpirationTime)) {
                      alternate.expirationTime = renderExpirationTime;
                    } else {
                      break;
                    }

                    node = node["return"];
                  }

                  nextFiber = null;
                } else {
                  nextFiber = fiber.child;
                }

                break;

              case ContextProvider:
                nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
                break;

              default:
                nextFiber = fiber.child;
                break;
            }

            if (nextFiber !== null) {
              nextFiber["return"] = fiber;
            } else {
              nextFiber = fiber;

              while (nextFiber !== null) {
                if (nextFiber === workInProgress) {
                  nextFiber = null;
                  break;
                }

                var sibling = nextFiber.sibling;

                if (sibling !== null) {
                  nextFiber = sibling;
                  break;
                }

                nextFiber = nextFiber["return"];
              }
            }

            fiber = nextFiber;
          }
        }

        function updateContextProvider(current, workInProgress, renderExpirationTime) {
          var providerType = workInProgress.type;
          var context = providerType.context;
          var newProps = workInProgress.pendingProps;
          var oldProps = workInProgress.memoizedProps;

          if (hasContextChanged()) {} else if (oldProps === newProps) {
            workInProgress.stateNode = 0;
            pushProvider(workInProgress);
            return bailoutOnAlreadyFinishedWork(current, workInProgress);
          }

          var newValue = newProps.value;
          workInProgress.memoizedProps = newProps;
          var changedBits = void 0;

          if (oldProps === null) {
            changedBits = MAX_SIGNED_31_BIT_INT;
          } else {
            if (oldProps.value === newProps.value) {
              if (oldProps.children === newProps.children) {
                workInProgress.stateNode = 0;
                pushProvider(workInProgress);
                return bailoutOnAlreadyFinishedWork(current, workInProgress);
              }

              changedBits = 0;
            } else {
              var oldValue = oldProps.value;

              if (oldValue === newValue && (oldValue !== 0 || 1 / oldValue === 1 / newValue) || oldValue !== oldValue && newValue !== newValue) {
                  if (oldProps.children === newProps.children) {
                    workInProgress.stateNode = 0;
                    pushProvider(workInProgress);
                    return bailoutOnAlreadyFinishedWork(current, workInProgress);
                  }

                  changedBits = 0;
                } else {
                changedBits = typeof context._calculateChangedBits === "function" ? context._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;
                {
                  warning((changedBits & MAX_SIGNED_31_BIT_INT) === changedBits, "calculateChangedBits: Expected the return value to be a " + "31-bit integer. Instead received: %s", changedBits);
                }
                changedBits |= 0;

                if (changedBits === 0) {
                  if (oldProps.children === newProps.children) {
                    workInProgress.stateNode = 0;
                    pushProvider(workInProgress);
                    return bailoutOnAlreadyFinishedWork(current, workInProgress);
                  }
                } else {
                  propagateContextChange(workInProgress, context, changedBits, renderExpirationTime);
                }
              }
            }
          }

          workInProgress.stateNode = changedBits;
          pushProvider(workInProgress);
          var newChildren = newProps.children;
          reconcileChildren(current, workInProgress, newChildren);
          return workInProgress.child;
        }

        function updateContextConsumer(current, workInProgress, renderExpirationTime) {
          var context = workInProgress.type;
          var newProps = workInProgress.pendingProps;
          var oldProps = workInProgress.memoizedProps;
          var newValue = context._currentValue;
          var changedBits = context._changedBits;

          if (hasContextChanged()) {} else if (changedBits === 0 && oldProps === newProps) {
            return bailoutOnAlreadyFinishedWork(current, workInProgress);
          }

          workInProgress.memoizedProps = newProps;
          var observedBits = newProps.unstable_observedBits;

          if (observedBits === undefined || observedBits === null) {
            observedBits = MAX_SIGNED_31_BIT_INT;
          }

          workInProgress.stateNode = observedBits;

          if ((changedBits & observedBits) !== 0) {
            propagateContextChange(workInProgress, context, changedBits, renderExpirationTime);
          } else if (oldProps !== null && oldProps.children === newProps.children) {
            return bailoutOnAlreadyFinishedWork(current, workInProgress);
          }

          var render = newProps.children;
          {
            warning(typeof render === "function", "A context consumer was rendered with multiple children, or a child " + "that isn't a function. A context consumer expects a single child " + "that is a function. If you did pass a function, make sure there " + "is no trailing or leading whitespace around it.");
          }
          var newChildren = render(newValue);
          reconcileChildren(current, workInProgress, newChildren);
          return workInProgress.child;
        }

        function bailoutOnAlreadyFinishedWork(current, workInProgress) {
          cancelWorkTimer(workInProgress);
          cloneChildFibers(current, workInProgress);
          return workInProgress.child;
        }

        function bailoutOnLowPriority(current, workInProgress) {
          cancelWorkTimer(workInProgress);

          switch (workInProgress.tag) {
            case HostRoot:
              pushHostRootContext(workInProgress);
              break;

            case ClassComponent:
              pushContextProvider(workInProgress);
              break;

            case HostPortal:
              pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
              break;

            case ContextProvider:
              pushProvider(workInProgress);
              break;
          }

          return null;
        }

        function memoizeProps(workInProgress, nextProps) {
          workInProgress.memoizedProps = nextProps;
        }

        function memoizeState(workInProgress, nextState) {
          workInProgress.memoizedState = nextState;
        }

        function beginWork(current, workInProgress, renderExpirationTime) {
          if (workInProgress.expirationTime === NoWork || workInProgress.expirationTime > renderExpirationTime) {
            return bailoutOnLowPriority(current, workInProgress);
          }

          switch (workInProgress.tag) {
            case IndeterminateComponent:
              return mountIndeterminateComponent(current, workInProgress, renderExpirationTime);

            case FunctionalComponent:
              return updateFunctionalComponent(current, workInProgress);

            case ClassComponent:
              return updateClassComponent(current, workInProgress, renderExpirationTime);

            case HostRoot:
              return updateHostRoot(current, workInProgress, renderExpirationTime);

            case HostComponent:
              return updateHostComponent(current, workInProgress, renderExpirationTime);

            case HostText:
              return updateHostText(current, workInProgress);

            case CallHandlerPhase:
              workInProgress.tag = CallComponent;

            case CallComponent:
              return updateCallComponent(current, workInProgress, renderExpirationTime);

            case ReturnComponent:
              return null;

            case HostPortal:
              return updatePortalComponent(current, workInProgress, renderExpirationTime);

            case Fragment:
              return updateFragment(current, workInProgress);

            case Mode:
              return updateMode(current, workInProgress);

            case ContextProvider:
              return updateContextProvider(current, workInProgress, renderExpirationTime);

            case ContextConsumer:
              return updateContextConsumer(current, workInProgress, renderExpirationTime);

            default:
              invariant(false, "Unknown unit of work tag. This error is likely caused by a bug in " + "React. Please file an issue.");
          }
        }

        return {
          beginWork: beginWork
        };
      };

      var ReactFiberCompleteWork = function ReactFiberCompleteWork(config, hostContext, hydrationContext) {
        var createInstance = config.createInstance,
            createTextInstance = config.createTextInstance,
            appendInitialChild = config.appendInitialChild,
            finalizeInitialChildren = config.finalizeInitialChildren,
            prepareUpdate = config.prepareUpdate,
            mutation = config.mutation,
            persistence = config.persistence;
        var getRootHostContainer = hostContext.getRootHostContainer,
            popHostContext = hostContext.popHostContext,
            getHostContext = hostContext.getHostContext,
            popHostContainer = hostContext.popHostContainer;
        var prepareToHydrateHostInstance = hydrationContext.prepareToHydrateHostInstance,
            prepareToHydrateHostTextInstance = hydrationContext.prepareToHydrateHostTextInstance,
            popHydrationState = hydrationContext.popHydrationState;

        function markUpdate(workInProgress) {
          workInProgress.effectTag |= Update;
        }

        function markRef(workInProgress) {
          workInProgress.effectTag |= Ref;
        }

        function appendAllReturns(returns, workInProgress) {
          var node = workInProgress.stateNode;

          if (node) {
            node["return"] = workInProgress;
          }

          while (node !== null) {
            if (node.tag === HostComponent || node.tag === HostText || node.tag === HostPortal) {
              invariant(false, "A call cannot have host component children.");
            } else if (node.tag === ReturnComponent) {
              returns.push(node.pendingProps.value);
            } else if (node.child !== null) {
              node.child["return"] = node;
              node = node.child;
              continue;
            }

            while (node.sibling === null) {
              if (node["return"] === null || node["return"] === workInProgress) {
                return;
              }

              node = node["return"];
            }

            node.sibling["return"] = node["return"];
            node = node.sibling;
          }
        }

        function moveCallToHandlerPhase(current, workInProgress, renderExpirationTime) {
          var props = workInProgress.memoizedProps;
          invariant(props, "Should be resolved by now. This error is likely caused by a bug in " + "React. Please file an issue.");
          workInProgress.tag = CallHandlerPhase;
          var returns = [];
          appendAllReturns(returns, workInProgress);
          var fn = props.handler;
          var childProps = props.props;
          var nextChildren = fn(childProps, returns);
          var currentFirstChild = current !== null ? current.child : null;
          workInProgress.child = reconcileChildFibers(workInProgress, currentFirstChild, nextChildren, renderExpirationTime);
          return workInProgress.child;
        }

        function appendAllChildren(parent, workInProgress) {
          var node = workInProgress.child;

          while (node !== null) {
            if (node.tag === HostComponent || node.tag === HostText) {
              appendInitialChild(parent, node.stateNode);
            } else if (node.tag === HostPortal) {} else if (node.child !== null) {
              node.child["return"] = node;
              node = node.child;
              continue;
            }

            if (node === workInProgress) {
              return;
            }

            while (node.sibling === null) {
              if (node["return"] === null || node["return"] === workInProgress) {
                return;
              }

              node = node["return"];
            }

            node.sibling["return"] = node["return"];
            node = node.sibling;
          }
        }

        var updateHostContainer = void 0;
        var updateHostComponent = void 0;
        var updateHostText = void 0;

        if (mutation) {
          if (enableMutatingReconciler) {
            updateHostContainer = function updateHostContainer(workInProgress) {};

            updateHostComponent = function updateHostComponent(current, workInProgress, updatePayload, type, oldProps, newProps, rootContainerInstance, currentHostContext) {
              workInProgress.updateQueue = updatePayload;

              if (updatePayload) {
                markUpdate(workInProgress);
              }
            };

            updateHostText = function updateHostText(current, workInProgress, oldText, newText) {
              if (oldText !== newText) {
                markUpdate(workInProgress);
              }
            };
          } else {
            invariant(false, "Mutating reconciler is disabled.");
          }
        } else if (persistence) {
          if (enablePersistentReconciler) {
            var cloneInstance = persistence.cloneInstance,
                createContainerChildSet = persistence.createContainerChildSet,
                appendChildToContainerChildSet = persistence.appendChildToContainerChildSet,
                finalizeContainerChildren = persistence.finalizeContainerChildren;

            var appendAllChildrenToContainer = function appendAllChildrenToContainer(containerChildSet, workInProgress) {
              var node = workInProgress.child;

              while (node !== null) {
                if (node.tag === HostComponent || node.tag === HostText) {
                  appendChildToContainerChildSet(containerChildSet, node.stateNode);
                } else if (node.tag === HostPortal) {} else if (node.child !== null) {
                  node.child["return"] = node;
                  node = node.child;
                  continue;
                }

                if (node === workInProgress) {
                  return;
                }

                while (node.sibling === null) {
                  if (node["return"] === null || node["return"] === workInProgress) {
                    return;
                  }

                  node = node["return"];
                }

                node.sibling["return"] = node["return"];
                node = node.sibling;
              }
            };

            updateHostContainer = function updateHostContainer(workInProgress) {
              var portalOrRoot = workInProgress.stateNode;
              var childrenUnchanged = workInProgress.firstEffect === null;

              if (childrenUnchanged) {} else {
                var container = portalOrRoot.containerInfo;
                var newChildSet = createContainerChildSet(container);
                appendAllChildrenToContainer(newChildSet, workInProgress);
                portalOrRoot.pendingChildren = newChildSet;
                markUpdate(workInProgress);
                finalizeContainerChildren(container, newChildSet);
              }
            };

            updateHostComponent = function updateHostComponent(current, workInProgress, updatePayload, type, oldProps, newProps, rootContainerInstance, currentHostContext) {
              var childrenUnchanged = workInProgress.firstEffect === null;
              var currentInstance = current.stateNode;

              if (childrenUnchanged && updatePayload === null) {
                workInProgress.stateNode = currentInstance;
              } else {
                var recyclableInstance = workInProgress.stateNode;
                var newInstance = cloneInstance(currentInstance, updatePayload, type, oldProps, newProps, workInProgress, childrenUnchanged, recyclableInstance);

                if (finalizeInitialChildren(newInstance, type, newProps, rootContainerInstance, currentHostContext)) {
                  markUpdate(workInProgress);
                }

                workInProgress.stateNode = newInstance;

                if (childrenUnchanged) {
                  markUpdate(workInProgress);
                } else {
                  appendAllChildren(newInstance, workInProgress);
                }
              }
            };

            updateHostText = function updateHostText(current, workInProgress, oldText, newText) {
              if (oldText !== newText) {
                var rootContainerInstance = getRootHostContainer();
                var currentHostContext = getHostContext();
                workInProgress.stateNode = createTextInstance(newText, rootContainerInstance, currentHostContext, workInProgress);
                markUpdate(workInProgress);
              }
            };
          } else {
            invariant(false, "Persistent reconciler is disabled.");
          }
        } else {
          if (enableNoopReconciler) {
            updateHostContainer = function updateHostContainer(workInProgress) {};

            updateHostComponent = function updateHostComponent(current, workInProgress, updatePayload, type, oldProps, newProps, rootContainerInstance, currentHostContext) {};

            updateHostText = function updateHostText(current, workInProgress, oldText, newText) {};
          } else {
            invariant(false, "Noop reconciler is disabled.");
          }
        }

        function completeWork(current, workInProgress, renderExpirationTime) {
          var newProps = workInProgress.pendingProps;

          switch (workInProgress.tag) {
            case FunctionalComponent:
              return null;

            case ClassComponent:
              {
                popContextProvider(workInProgress);
                var instance = workInProgress.stateNode;
                var updateQueue = workInProgress.updateQueue;

                if (updateQueue !== null && updateQueue.capturedValues !== null) {
                  workInProgress.effectTag &= ~DidCapture;

                  if (typeof instance.componentDidCatch === "function") {
                    workInProgress.effectTag |= ErrLog;
                  } else {
                    updateQueue.capturedValues = null;
                  }
                }

                return null;
              }

            case HostRoot:
              {
                popHostContainer(workInProgress);
                popTopLevelContextObject(workInProgress);
                var fiberRoot = workInProgress.stateNode;

                if (fiberRoot.pendingContext) {
                  fiberRoot.context = fiberRoot.pendingContext;
                  fiberRoot.pendingContext = null;
                }

                if (current === null || current.child === null) {
                  popHydrationState(workInProgress);
                  workInProgress.effectTag &= ~Placement;
                }

                updateHostContainer(workInProgress);
                var _updateQueue = workInProgress.updateQueue;

                if (_updateQueue !== null && _updateQueue.capturedValues !== null) {
                  workInProgress.effectTag |= ErrLog;
                }

                return null;
              }

            case HostComponent:
              {
                popHostContext(workInProgress);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress.type;

                if (current !== null && workInProgress.stateNode != null) {
                  var oldProps = current.memoizedProps;
                  var _instance = workInProgress.stateNode;
                  var currentHostContext = getHostContext();
                  var updatePayload = prepareUpdate(_instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
                  updateHostComponent(current, workInProgress, updatePayload, type, oldProps, newProps, rootContainerInstance, currentHostContext);

                  if (current.ref !== workInProgress.ref) {
                    markRef(workInProgress);
                  }
                } else {
                  if (!newProps) {
                    invariant(workInProgress.stateNode !== null, "We must have new props for new mounts. This error is likely " + "caused by a bug in React. Please file an issue.");
                    return null;
                  }

                  var _currentHostContext = getHostContext();

                  var wasHydrated = popHydrationState(workInProgress);

                  if (wasHydrated) {
                    if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, _currentHostContext)) {
                      markUpdate(workInProgress);
                    }
                  } else {
                    var _instance2 = createInstance(type, newProps, rootContainerInstance, _currentHostContext, workInProgress);

                    appendAllChildren(_instance2, workInProgress);

                    if (finalizeInitialChildren(_instance2, type, newProps, rootContainerInstance, _currentHostContext)) {
                      markUpdate(workInProgress);
                    }

                    workInProgress.stateNode = _instance2;
                  }

                  if (workInProgress.ref !== null) {
                    markRef(workInProgress);
                  }
                }

                return null;
              }

            case HostText:
              {
                var newText = newProps;

                if (current && workInProgress.stateNode != null) {
                  var oldText = current.memoizedProps;
                  updateHostText(current, workInProgress, oldText, newText);
                } else {
                  if (typeof newText !== "string") {
                    invariant(workInProgress.stateNode !== null, "We must have new props for new mounts. This error is likely " + "caused by a bug in React. Please file an issue.");
                    return null;
                  }

                  var _rootContainerInstance = getRootHostContainer();

                  var _currentHostContext2 = getHostContext();

                  var _wasHydrated = popHydrationState(workInProgress);

                  if (_wasHydrated) {
                    if (prepareToHydrateHostTextInstance(workInProgress)) {
                      markUpdate(workInProgress);
                    }
                  } else {
                    workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext2, workInProgress);
                  }
                }

                return null;
              }

            case CallComponent:
              return moveCallToHandlerPhase(current, workInProgress, renderExpirationTime);

            case CallHandlerPhase:
              workInProgress.tag = CallComponent;
              return null;

            case ReturnComponent:
              return null;

            case Fragment:
              return null;

            case Mode:
              return null;

            case HostPortal:
              popHostContainer(workInProgress);
              updateHostContainer(workInProgress);
              return null;

            case ContextProvider:
              popProvider(workInProgress);
              return null;

            case ContextConsumer:
              return null;

            case IndeterminateComponent:
              invariant(false, "An indeterminate component should have become determinate before " + "completing. This error is likely caused by a bug in React. Please " + "file an issue.");

            default:
              invariant(false, "Unknown unit of work tag. This error is likely caused by a bug in " + "React. Please file an issue.");
          }
        }

        return {
          completeWork: completeWork
        };
      };

      function createCapturedValue(value, source) {
        return {
          value: value,
          source: source,
          stack: getStackAddendumByWorkInProgressFiber(source)
        };
      }

      var ReactFiberUnwindWork = function ReactFiberUnwindWork(hostContext, scheduleWork, isAlreadyFailedLegacyErrorBoundary) {
        var popHostContainer = hostContext.popHostContainer,
            popHostContext = hostContext.popHostContext;

        function throwException(returnFiber, sourceFiber, rawValue) {
          sourceFiber.effectTag |= Incomplete;
          sourceFiber.firstEffect = sourceFiber.lastEffect = null;
          var value = createCapturedValue(rawValue, sourceFiber);
          var workInProgress = returnFiber;

          do {
            switch (workInProgress.tag) {
              case HostRoot:
                {
                  var errorInfo = value;
                  ensureUpdateQueues(workInProgress);
                  var updateQueue = workInProgress.updateQueue;
                  updateQueue.capturedValues = [errorInfo];
                  workInProgress.effectTag |= ShouldCapture;
                  return;
                }

              case ClassComponent:
                var ctor = workInProgress.type;
                var _instance = workInProgress.stateNode;

                if ((workInProgress.effectTag & DidCapture) === NoEffect && (typeof ctor.getDerivedStateFromCatch === "function" && enableGetDerivedStateFromCatch || _instance !== null && typeof _instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(_instance))) {
                  ensureUpdateQueues(workInProgress);
                  var _updateQueue = workInProgress.updateQueue;
                  var capturedValues = _updateQueue.capturedValues;

                  if (capturedValues === null) {
                    _updateQueue.capturedValues = [value];
                  } else {
                    capturedValues.push(value);
                  }

                  workInProgress.effectTag |= ShouldCapture;
                  return;
                }

                break;

              default:
                break;
            }

            workInProgress = workInProgress["return"];
          } while (workInProgress !== null);
        }

        function unwindWork(workInProgress) {
          switch (workInProgress.tag) {
            case ClassComponent:
              {
                popContextProvider(workInProgress);
                var effectTag = workInProgress.effectTag;

                if (effectTag & ShouldCapture) {
                  workInProgress.effectTag = effectTag & ~ShouldCapture | DidCapture;
                  return workInProgress;
                }

                return null;
              }

            case HostRoot:
              {
                popHostContainer(workInProgress);
                popTopLevelContextObject(workInProgress);
                var _effectTag = workInProgress.effectTag;

                if (_effectTag & ShouldCapture) {
                  workInProgress.effectTag = _effectTag & ~ShouldCapture | DidCapture;
                  return workInProgress;
                }

                return null;
              }

            case HostComponent:
              {
                popHostContext(workInProgress);
                return null;
              }

            case HostPortal:
              popHostContainer(workInProgress);
              return null;

            case ContextProvider:
              popProvider(workInProgress);
              return null;

            default:
              return null;
          }
        }

        return {
          throwException: throwException,
          unwindWork: unwindWork
        };
      };

      function showErrorDialog(capturedError) {
        var componentStack = capturedError.componentStack,
            error = capturedError.error;
        var errorToHandle = void 0;

        if (error instanceof Error) {
          var message = error.message,
              name = error.name;
          var summary = message ? name + ": " + message : name;
          errorToHandle = error;

          try {
            errorToHandle.message = summary + "\n\nThis error is located at:" + componentStack;
          } catch (e) {}
        } else if (typeof error === "string") {
          errorToHandle = new Error(error + "\n\nThis error is located at:" + componentStack);
        } else {
          errorToHandle = new Error("Unspecified error at:" + componentStack);
        }

        ExceptionsManager.handleException(errorToHandle, false);
        return false;
      }

      function logCapturedError(capturedError) {
        var logError = showErrorDialog(capturedError);

        if (logError === false) {
          return;
        }

        var error = capturedError.error;
        var suppressLogging = error && error.suppressReactErrorLogging;

        if (suppressLogging) {
          return;
        }

        {
          var componentName = capturedError.componentName,
              componentStack = capturedError.componentStack,
              errorBoundaryName = capturedError.errorBoundaryName,
              errorBoundaryFound = capturedError.errorBoundaryFound,
              willRetry = capturedError.willRetry;
          var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
          var errorBoundaryMessage = void 0;

          if (errorBoundaryFound && errorBoundaryName) {
            if (willRetry) {
              errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
            } else {
              errorBoundaryMessage = "This error was initially handled by the error boundary " + errorBoundaryName + ".\n" + "Recreating the tree from scratch failed so React will unmount the tree.";
            }
          } else {
            errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\n" + "Visit https://fb.me/react-error-boundaries to learn more about error boundaries.";
          }

          var combinedMessage = "" + componentNameMessage + componentStack + "\n\n" + ("" + errorBoundaryMessage);
          console.error(combinedMessage);
        }
      }

      var invokeGuardedCallback$3 = ReactErrorUtils.invokeGuardedCallback;
      var hasCaughtError$1 = ReactErrorUtils.hasCaughtError;
      var clearCaughtError$1 = ReactErrorUtils.clearCaughtError;

      function logError(boundary, errorInfo) {
        var source = errorInfo.source;
        var stack = errorInfo.stack;

        if (stack === null) {
          stack = getStackAddendumByWorkInProgressFiber(source);
        }

        var capturedError = {
          componentName: source !== null ? getComponentName(source) : null,
          error: errorInfo.value,
          errorBoundary: boundary,
          componentStack: stack !== null ? stack : "",
          errorBoundaryName: null,
          errorBoundaryFound: false,
          willRetry: false
        };

        if (boundary !== null) {
          capturedError.errorBoundaryName = getComponentName(boundary);
          capturedError.errorBoundaryFound = capturedError.willRetry = boundary.tag === ClassComponent;
        } else {
          capturedError.errorBoundaryName = null;
          capturedError.errorBoundaryFound = capturedError.willRetry = false;
        }

        try {
          logCapturedError(capturedError);
        } catch (e) {
          var suppressLogging = e && e.suppressReactErrorLogging;

          if (!suppressLogging) {
            console.error(e);
          }
        }
      }

      var ReactFiberCommitWork = function ReactFiberCommitWork(config, captureError, scheduleWork, computeExpirationForFiber, markLegacyErrorBoundaryAsFailed, recalculateCurrentTime) {
        var getPublicInstance = config.getPublicInstance,
            mutation = config.mutation,
            persistence = config.persistence;

        var callComponentWillUnmountWithTimer = function callComponentWillUnmountWithTimer(current, instance) {
          startPhaseTimer(current, "componentWillUnmount");
          instance.props = current.memoizedProps;
          instance.state = current.memoizedState;
          instance.componentWillUnmount();
          stopPhaseTimer();
        };

        function safelyCallComponentWillUnmount(current, instance) {
          {
            invokeGuardedCallback$3(null, callComponentWillUnmountWithTimer, null, current, instance);

            if (hasCaughtError$1()) {
              var unmountError = clearCaughtError$1();
              captureError(current, unmountError);
            }
          }
        }

        function safelyDetachRef(current) {
          var ref = current.ref;

          if (ref !== null) {
            if (typeof ref === "function") {
              {
                invokeGuardedCallback$3(null, ref, null, null);

                if (hasCaughtError$1()) {
                  var refError = clearCaughtError$1();
                  captureError(current, refError);
                }
              }
            } else {
              ref.value = null;
            }
          }
        }

        function commitLifeCycles(finishedRoot, current, finishedWork, currentTime, committedExpirationTime) {
          switch (finishedWork.tag) {
            case ClassComponent:
              {
                var _instance = finishedWork.stateNode;

                if (finishedWork.effectTag & Update) {
                  if (current === null) {
                    startPhaseTimer(finishedWork, "componentDidMount");
                    _instance.props = finishedWork.memoizedProps;
                    _instance.state = finishedWork.memoizedState;

                    _instance.componentDidMount();

                    stopPhaseTimer();
                  } else {
                    var prevProps = current.memoizedProps;
                    var prevState = current.memoizedState;
                    startPhaseTimer(finishedWork, "componentDidUpdate");
                    _instance.props = finishedWork.memoizedProps;
                    _instance.state = finishedWork.memoizedState;

                    _instance.componentDidUpdate(prevProps, prevState);

                    stopPhaseTimer();
                  }
                }

                var updateQueue = finishedWork.updateQueue;

                if (updateQueue !== null) {
                  commitCallbacks(updateQueue, _instance);
                }

                return;
              }

            case HostRoot:
              {
                var _updateQueue = finishedWork.updateQueue;

                if (_updateQueue !== null) {
                  var _instance2 = null;

                  if (finishedWork.child !== null) {
                    switch (finishedWork.child.tag) {
                      case HostComponent:
                        _instance2 = getPublicInstance(finishedWork.child.stateNode);
                        break;

                      case ClassComponent:
                        _instance2 = finishedWork.child.stateNode;
                        break;
                    }
                  }

                  commitCallbacks(_updateQueue, _instance2);
                }

                return;
              }

            case HostComponent:
              {
                var _instance3 = finishedWork.stateNode;

                if (current === null && finishedWork.effectTag & Update) {
                  var type = finishedWork.type;
                  var props = finishedWork.memoizedProps;
                  commitMount(_instance3, type, props, finishedWork);
                }

                return;
              }

            case HostText:
              {
                return;
              }

            case HostPortal:
              {
                return;
              }

            default:
              {
                invariant(false, "This unit of work tag should not have side-effects. This error is " + "likely caused by a bug in React. Please file an issue.");
              }
          }
        }

        function commitErrorLogging(finishedWork, onUncaughtError) {
          switch (finishedWork.tag) {
            case ClassComponent:
              {
                var ctor = finishedWork.type;
                var _instance4 = finishedWork.stateNode;
                var updateQueue = finishedWork.updateQueue;
                invariant(updateQueue !== null && updateQueue.capturedValues !== null, "An error logging effect should not have been scheduled if no errors " + "were captured. This error is likely caused by a bug in React. " + "Please file an issue.");
                var capturedErrors = updateQueue.capturedValues;
                updateQueue.capturedValues = null;

                if (typeof ctor.getDerivedStateFromCatch !== "function") {
                  markLegacyErrorBoundaryAsFailed(_instance4);
                }

                _instance4.props = finishedWork.memoizedProps;
                _instance4.state = finishedWork.memoizedState;

                for (var i = 0; i < capturedErrors.length; i++) {
                  var errorInfo = capturedErrors[i];
                  var _error = errorInfo.value;
                  logError(finishedWork, errorInfo);

                  _instance4.componentDidCatch(_error);
                }
              }
              break;

            case HostRoot:
              {
                var _updateQueue2 = finishedWork.updateQueue;
                invariant(_updateQueue2 !== null && _updateQueue2.capturedValues !== null, "An error logging effect should not have been scheduled if no errors " + "were captured. This error is likely caused by a bug in React. " + "Please file an issue.");
                var _capturedErrors = _updateQueue2.capturedValues;
                _updateQueue2.capturedValues = null;

                for (var _i = 0; _i < _capturedErrors.length; _i++) {
                  var _errorInfo = _capturedErrors[_i];
                  logError(finishedWork, _errorInfo);
                  onUncaughtError(_errorInfo.value);
                }

                break;
              }

            default:
              invariant(false, "This unit of work tag cannot capture errors.  This error is " + "likely caused by a bug in React. Please file an issue.");
          }
        }

        function commitAttachRef(finishedWork) {
          var ref = finishedWork.ref;

          if (ref !== null) {
            var _instance5 = finishedWork.stateNode;
            var instanceToUse = void 0;

            switch (finishedWork.tag) {
              case HostComponent:
                instanceToUse = getPublicInstance(_instance5);
                break;

              default:
                instanceToUse = _instance5;
            }

            if (typeof ref === "function") {
              ref(instanceToUse);
            } else {
              ref.value = instanceToUse;
            }
          }
        }

        function commitDetachRef(current) {
          var currentRef = current.ref;

          if (currentRef !== null) {
            if (typeof currentRef === "function") {
              currentRef(null);
            } else {
              currentRef.value = null;
            }
          }
        }

        function commitUnmount(current) {
          if (typeof onCommitUnmount === "function") {
            onCommitUnmount(current);
          }

          switch (current.tag) {
            case ClassComponent:
              {
                safelyDetachRef(current);
                var _instance6 = current.stateNode;

                if (typeof _instance6.componentWillUnmount === "function") {
                  safelyCallComponentWillUnmount(current, _instance6);
                }

                return;
              }

            case HostComponent:
              {
                safelyDetachRef(current);
                return;
              }

            case CallComponent:
              {
                commitNestedUnmounts(current.stateNode);
                return;
              }

            case HostPortal:
              {
                if (enableMutatingReconciler && mutation) {
                  unmountHostComponents(current);
                } else if (enablePersistentReconciler && persistence) {
                  emptyPortalContainer(current);
                }

                return;
              }
          }
        }

        function commitNestedUnmounts(root) {
          var node = root;

          while (true) {
            commitUnmount(node);

            if (node.child !== null && (!mutation || node.tag !== HostPortal)) {
              node.child["return"] = node;
              node = node.child;
              continue;
            }

            if (node === root) {
              return;
            }

            while (node.sibling === null) {
              if (node["return"] === null || node["return"] === root) {
                return;
              }

              node = node["return"];
            }

            node.sibling["return"] = node["return"];
            node = node.sibling;
          }
        }

        function detachFiber(current) {
          current["return"] = null;
          current.child = null;

          if (current.alternate) {
            current.alternate.child = null;
            current.alternate["return"] = null;
          }
        }

        var emptyPortalContainer = void 0;

        if (!mutation) {
          var commitContainer = void 0;

          if (persistence) {
            var replaceContainerChildren = persistence.replaceContainerChildren,
                createContainerChildSet = persistence.createContainerChildSet;

            emptyPortalContainer = function emptyPortalContainer(current) {
              var portal = current.stateNode;
              var containerInfo = portal.containerInfo;
              var emptyChildSet = createContainerChildSet(containerInfo);
              replaceContainerChildren(containerInfo, emptyChildSet);
            };

            commitContainer = function commitContainer(finishedWork) {
              switch (finishedWork.tag) {
                case ClassComponent:
                  {
                    return;
                  }

                case HostComponent:
                  {
                    return;
                  }

                case HostText:
                  {
                    return;
                  }

                case HostRoot:
                case HostPortal:
                  {
                    var portalOrRoot = finishedWork.stateNode;
                    var containerInfo = portalOrRoot.containerInfo,
                        _pendingChildren = portalOrRoot.pendingChildren;
                    replaceContainerChildren(containerInfo, _pendingChildren);
                    return;
                  }

                default:
                  {
                    invariant(false, "This unit of work tag should not have side-effects. This error is " + "likely caused by a bug in React. Please file an issue.");
                  }
              }
            };
          } else {
            commitContainer = function commitContainer(finishedWork) {};
          }

          if (enablePersistentReconciler || enableNoopReconciler) {
            return {
              commitResetTextContent: function commitResetTextContent(finishedWork) {},
              commitPlacement: function commitPlacement(finishedWork) {},
              commitDeletion: function commitDeletion(current) {
                commitNestedUnmounts(current);
                detachFiber(current);
              },
              commitWork: function commitWork(current, finishedWork) {
                commitContainer(finishedWork);
              },
              commitLifeCycles: commitLifeCycles,
              commitErrorLogging: commitErrorLogging,
              commitAttachRef: commitAttachRef,
              commitDetachRef: commitDetachRef
            };
          } else if (persistence) {
            invariant(false, "Persistent reconciler is disabled.");
          } else {
            invariant(false, "Noop reconciler is disabled.");
          }
        }

        var commitMount = mutation.commitMount,
            commitUpdate = mutation.commitUpdate,
            resetTextContent = mutation.resetTextContent,
            commitTextUpdate = mutation.commitTextUpdate,
            appendChild = mutation.appendChild,
            appendChildToContainer = mutation.appendChildToContainer,
            insertBefore = mutation.insertBefore,
            insertInContainerBefore = mutation.insertInContainerBefore,
            removeChild = mutation.removeChild,
            removeChildFromContainer = mutation.removeChildFromContainer;

        function getHostParentFiber(fiber) {
          var parent = fiber["return"];

          while (parent !== null) {
            if (isHostParent(parent)) {
              return parent;
            }

            parent = parent["return"];
          }

          invariant(false, "Expected to find a host parent. This error is likely caused by a bug " + "in React. Please file an issue.");
        }

        function isHostParent(fiber) {
          return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
        }

        function getHostSibling(fiber) {
          var node = fiber;

          siblings: while (true) {
            while (node.sibling === null) {
              if (node["return"] === null || isHostParent(node["return"])) {
                return null;
              }

              node = node["return"];
            }

            node.sibling["return"] = node["return"];
            node = node.sibling;

            while (node.tag !== HostComponent && node.tag !== HostText) {
              if (node.effectTag & Placement) {
                continue siblings;
              }

              if (node.child === null || node.tag === HostPortal) {
                continue siblings;
              } else {
                node.child["return"] = node;
                node = node.child;
              }
            }

            if (!(node.effectTag & Placement)) {
              return node.stateNode;
            }
          }
        }

        function commitPlacement(finishedWork) {
          var parentFiber = getHostParentFiber(finishedWork);
          var parent = void 0;
          var isContainer = void 0;

          switch (parentFiber.tag) {
            case HostComponent:
              parent = parentFiber.stateNode;
              isContainer = false;
              break;

            case HostRoot:
              parent = parentFiber.stateNode.containerInfo;
              isContainer = true;
              break;

            case HostPortal:
              parent = parentFiber.stateNode.containerInfo;
              isContainer = true;
              break;

            default:
              invariant(false, "Invalid host parent fiber. This error is likely caused by a bug " + "in React. Please file an issue.");
          }

          if (parentFiber.effectTag & ContentReset) {
            resetTextContent(parent);
            parentFiber.effectTag &= ~ContentReset;
          }

          var before = getHostSibling(finishedWork);
          var node = finishedWork;

          while (true) {
            if (node.tag === HostComponent || node.tag === HostText) {
              if (before) {
                if (isContainer) {
                  insertInContainerBefore(parent, node.stateNode, before);
                } else {
                  insertBefore(parent, node.stateNode, before);
                }
              } else {
                if (isContainer) {
                  appendChildToContainer(parent, node.stateNode);
                } else {
                  appendChild(parent, node.stateNode);
                }
              }
            } else if (node.tag === HostPortal) {} else if (node.child !== null) {
              node.child["return"] = node;
              node = node.child;
              continue;
            }

            if (node === finishedWork) {
              return;
            }

            while (node.sibling === null) {
              if (node["return"] === null || node["return"] === finishedWork) {
                return;
              }

              node = node["return"];
            }

            node.sibling["return"] = node["return"];
            node = node.sibling;
          }
        }

        function unmountHostComponents(current) {
          var node = current;
          var currentParentIsValid = false;
          var currentParent = void 0;
          var currentParentIsContainer = void 0;

          while (true) {
            if (!currentParentIsValid) {
              var parent = node["return"];

              findParent: while (true) {
                invariant(parent !== null, "Expected to find a host parent. This error is likely caused by " + "a bug in React. Please file an issue.");

                switch (parent.tag) {
                  case HostComponent:
                    currentParent = parent.stateNode;
                    currentParentIsContainer = false;
                    break findParent;

                  case HostRoot:
                    currentParent = parent.stateNode.containerInfo;
                    currentParentIsContainer = true;
                    break findParent;

                  case HostPortal:
                    currentParent = parent.stateNode.containerInfo;
                    currentParentIsContainer = true;
                    break findParent;
                }

                parent = parent["return"];
              }

              currentParentIsValid = true;
            }

            if (node.tag === HostComponent || node.tag === HostText) {
              commitNestedUnmounts(node);

              if (currentParentIsContainer) {
                removeChildFromContainer(currentParent, node.stateNode);
              } else {
                removeChild(currentParent, node.stateNode);
              }
            } else if (node.tag === HostPortal) {
              currentParent = node.stateNode.containerInfo;

              if (node.child !== null) {
                node.child["return"] = node;
                node = node.child;
                continue;
              }
            } else {
              commitUnmount(node);

              if (node.child !== null) {
                node.child["return"] = node;
                node = node.child;
                continue;
              }
            }

            if (node === current) {
              return;
            }

            while (node.sibling === null) {
              if (node["return"] === null || node["return"] === current) {
                return;
              }

              node = node["return"];

              if (node.tag === HostPortal) {
                currentParentIsValid = false;
              }
            }

            node.sibling["return"] = node["return"];
            node = node.sibling;
          }
        }

        function commitDeletion(current) {
          unmountHostComponents(current);
          detachFiber(current);
        }

        function commitWork(current, finishedWork) {
          switch (finishedWork.tag) {
            case ClassComponent:
              {
                return;
              }

            case HostComponent:
              {
                var _instance7 = finishedWork.stateNode;

                if (_instance7 != null) {
                  var newProps = finishedWork.memoizedProps;
                  var oldProps = current !== null ? current.memoizedProps : newProps;
                  var type = finishedWork.type;
                  var updatePayload = finishedWork.updateQueue;
                  finishedWork.updateQueue = null;

                  if (updatePayload !== null) {
                    commitUpdate(_instance7, updatePayload, type, oldProps, newProps, finishedWork);
                  }
                }

                return;
              }

            case HostText:
              {
                invariant(finishedWork.stateNode !== null, "This should have a text node initialized. This error is likely " + "caused by a bug in React. Please file an issue.");
                var textInstance = finishedWork.stateNode;
                var newText = finishedWork.memoizedProps;
                var oldText = current !== null ? current.memoizedProps : newText;
                commitTextUpdate(textInstance, oldText, newText);
                return;
              }

            case HostRoot:
              {
                return;
              }

            default:
              {
                invariant(false, "This unit of work tag should not have side-effects. This error is " + "likely caused by a bug in React. Please file an issue.");
              }
          }
        }

        function commitResetTextContent(current) {
          resetTextContent(current.stateNode);
        }

        if (enableMutatingReconciler) {
          return {
            commitResetTextContent: commitResetTextContent,
            commitPlacement: commitPlacement,
            commitDeletion: commitDeletion,
            commitWork: commitWork,
            commitLifeCycles: commitLifeCycles,
            commitErrorLogging: commitErrorLogging,
            commitAttachRef: commitAttachRef,
            commitDetachRef: commitDetachRef
          };
        } else {
          invariant(false, "Mutating reconciler is disabled.");
        }
      };

      var NO_CONTEXT = {};

      var ReactFiberHostContext = function ReactFiberHostContext(config) {
        var getChildHostContext = config.getChildHostContext,
            getRootHostContext = config.getRootHostContext;
        var contextStackCursor = createCursor(NO_CONTEXT);
        var contextFiberStackCursor = createCursor(NO_CONTEXT);
        var rootInstanceStackCursor = createCursor(NO_CONTEXT);

        function requiredContext(c) {
          invariant(c !== NO_CONTEXT, "Expected host context to exist. This error is likely caused by a bug " + "in React. Please file an issue.");
          return c;
        }

        function getRootHostContainer() {
          var rootInstance = requiredContext(rootInstanceStackCursor.current);
          return rootInstance;
        }

        function pushHostContainer(fiber, nextRootInstance) {
          push(rootInstanceStackCursor, nextRootInstance, fiber);
          var nextRootContext = getRootHostContext(nextRootInstance);
          push(contextFiberStackCursor, fiber, fiber);
          push(contextStackCursor, nextRootContext, fiber);
        }

        function popHostContainer(fiber) {
          pop(contextStackCursor, fiber);
          pop(contextFiberStackCursor, fiber);
          pop(rootInstanceStackCursor, fiber);
        }

        function getHostContext() {
          var context = requiredContext(contextStackCursor.current);
          return context;
        }

        function pushHostContext(fiber) {
          var rootInstance = requiredContext(rootInstanceStackCursor.current);
          var context = requiredContext(contextStackCursor.current);
          var nextContext = getChildHostContext(context, fiber.type, rootInstance);

          if (context === nextContext) {
            return;
          }

          push(contextFiberStackCursor, fiber, fiber);
          push(contextStackCursor, nextContext, fiber);
        }

        function popHostContext(fiber) {
          if (contextFiberStackCursor.current !== fiber) {
            return;
          }

          pop(contextStackCursor, fiber);
          pop(contextFiberStackCursor, fiber);
        }

        function resetHostContainer() {
          contextStackCursor.current = NO_CONTEXT;
          rootInstanceStackCursor.current = NO_CONTEXT;
        }

        return {
          getHostContext: getHostContext,
          getRootHostContainer: getRootHostContainer,
          popHostContainer: popHostContainer,
          popHostContext: popHostContext,
          pushHostContainer: pushHostContainer,
          pushHostContext: pushHostContext,
          resetHostContainer: resetHostContainer
        };
      };

      var ReactFiberHydrationContext = function ReactFiberHydrationContext(config) {
        var shouldSetTextContent = config.shouldSetTextContent,
            hydration = config.hydration;

        if (!hydration) {
          return {
            enterHydrationState: function enterHydrationState() {
              return false;
            },
            resetHydrationState: function resetHydrationState() {},
            tryToClaimNextHydratableInstance: function tryToClaimNextHydratableInstance() {},
            prepareToHydrateHostInstance: function prepareToHydrateHostInstance() {
              invariant(false, "Expected prepareToHydrateHostInstance() to never be called. " + "This error is likely caused by a bug in React. Please file an issue.");
            },
            prepareToHydrateHostTextInstance: function prepareToHydrateHostTextInstance() {
              invariant(false, "Expected prepareToHydrateHostTextInstance() to never be called. " + "This error is likely caused by a bug in React. Please file an issue.");
            },
            popHydrationState: function popHydrationState(fiber) {
              return false;
            }
          };
        }

        var canHydrateInstance = hydration.canHydrateInstance,
            canHydrateTextInstance = hydration.canHydrateTextInstance,
            getNextHydratableSibling = hydration.getNextHydratableSibling,
            getFirstHydratableChild = hydration.getFirstHydratableChild,
            hydrateInstance = hydration.hydrateInstance,
            hydrateTextInstance = hydration.hydrateTextInstance,
            didNotMatchHydratedContainerTextInstance = hydration.didNotMatchHydratedContainerTextInstance,
            didNotMatchHydratedTextInstance = hydration.didNotMatchHydratedTextInstance,
            didNotHydrateContainerInstance = hydration.didNotHydrateContainerInstance,
            didNotHydrateInstance = hydration.didNotHydrateInstance,
            didNotFindHydratableContainerInstance = hydration.didNotFindHydratableContainerInstance,
            didNotFindHydratableContainerTextInstance = hydration.didNotFindHydratableContainerTextInstance,
            didNotFindHydratableInstance = hydration.didNotFindHydratableInstance,
            didNotFindHydratableTextInstance = hydration.didNotFindHydratableTextInstance;
        var hydrationParentFiber = null;
        var nextHydratableInstance = null;
        var isHydrating = false;

        function enterHydrationState(fiber) {
          var parentInstance = fiber.stateNode.containerInfo;
          nextHydratableInstance = getFirstHydratableChild(parentInstance);
          hydrationParentFiber = fiber;
          isHydrating = true;
          return true;
        }

        function deleteHydratableInstance(returnFiber, instance) {
          {
            switch (returnFiber.tag) {
              case HostRoot:
                didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
                break;

              case HostComponent:
                didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
                break;
            }
          }
          var childToDelete = createFiberFromHostInstanceForDeletion();
          childToDelete.stateNode = instance;
          childToDelete["return"] = returnFiber;
          childToDelete.effectTag = Deletion;

          if (returnFiber.lastEffect !== null) {
            returnFiber.lastEffect.nextEffect = childToDelete;
            returnFiber.lastEffect = childToDelete;
          } else {
            returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
          }
        }

        function insertNonHydratedInstance(returnFiber, fiber) {
          fiber.effectTag |= Placement;
          {
            switch (returnFiber.tag) {
              case HostRoot:
                {
                  var parentContainer = returnFiber.stateNode.containerInfo;

                  switch (fiber.tag) {
                    case HostComponent:
                      var type = fiber.type;
                      var props = fiber.pendingProps;
                      didNotFindHydratableContainerInstance(parentContainer, type, props);
                      break;

                    case HostText:
                      var text = fiber.pendingProps;
                      didNotFindHydratableContainerTextInstance(parentContainer, text);
                      break;
                  }

                  break;
                }

              case HostComponent:
                {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;

                  switch (fiber.tag) {
                    case HostComponent:
                      var _type = fiber.type;
                      var _props = fiber.pendingProps;
                      didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props);
                      break;

                    case HostText:
                      var _text = fiber.pendingProps;
                      didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
                      break;
                  }

                  break;
                }

              default:
                return;
            }
          }
        }

        function tryHydrate(fiber, nextInstance) {
          switch (fiber.tag) {
            case HostComponent:
              {
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type, props);

                if (instance !== null) {
                  fiber.stateNode = instance;
                  return true;
                }

                return false;
              }

            case HostText:
              {
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);

                if (textInstance !== null) {
                  fiber.stateNode = textInstance;
                  return true;
                }

                return false;
              }

            default:
              return false;
          }
        }

        function tryToClaimNextHydratableInstance(fiber) {
          if (!isHydrating) {
            return;
          }

          var nextInstance = nextHydratableInstance;

          if (!nextInstance) {
            insertNonHydratedInstance(hydrationParentFiber, fiber);
            isHydrating = false;
            hydrationParentFiber = fiber;
            return;
          }

          if (!tryHydrate(fiber, nextInstance)) {
            nextInstance = getNextHydratableSibling(nextInstance);

            if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }

            deleteHydratableInstance(hydrationParentFiber, nextHydratableInstance);
          }

          hydrationParentFiber = fiber;
          nextHydratableInstance = getFirstHydratableChild(nextInstance);
        }

        function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
          var instance = fiber.stateNode;
          var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber);
          fiber.updateQueue = updatePayload;

          if (updatePayload !== null) {
            return true;
          }

          return false;
        }

        function prepareToHydrateHostTextInstance(fiber) {
          var textInstance = fiber.stateNode;
          var textContent = fiber.memoizedProps;
          var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
          {
            if (shouldUpdate) {
              var returnFiber = hydrationParentFiber;

              if (returnFiber !== null) {
                switch (returnFiber.tag) {
                  case HostRoot:
                    {
                      var parentContainer = returnFiber.stateNode.containerInfo;
                      didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
                      break;
                    }

                  case HostComponent:
                    {
                      var parentType = returnFiber.type;
                      var parentProps = returnFiber.memoizedProps;
                      var parentInstance = returnFiber.stateNode;
                      didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
                      break;
                    }
                }
              }
            }
          }
          return shouldUpdate;
        }

        function popToNextHostParent(fiber) {
          var parent = fiber["return"];

          while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot) {
            parent = parent["return"];
          }

          hydrationParentFiber = parent;
        }

        function popHydrationState(fiber) {
          if (fiber !== hydrationParentFiber) {
            return false;
          }

          if (!isHydrating) {
            popToNextHostParent(fiber);
            isHydrating = true;
            return false;
          }

          var type = fiber.type;

          if (fiber.tag !== HostComponent || type !== "head" && type !== "body" && !shouldSetTextContent(type, fiber.memoizedProps)) {
            var nextInstance = nextHydratableInstance;

            while (nextInstance) {
              deleteHydratableInstance(fiber, nextInstance);
              nextInstance = getNextHydratableSibling(nextInstance);
            }
          }

          popToNextHostParent(fiber);
          nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
          return true;
        }

        function resetHydrationState() {
          hydrationParentFiber = null;
          nextHydratableInstance = null;
          isHydrating = false;
        }

        return {
          enterHydrationState: enterHydrationState,
          resetHydrationState: resetHydrationState,
          tryToClaimNextHydratableInstance: tryToClaimNextHydratableInstance,
          prepareToHydrateHostInstance: prepareToHydrateHostInstance,
          prepareToHydrateHostTextInstance: prepareToHydrateHostTextInstance,
          popHydrationState: popHydrationState
        };
      };

      var ReactFiberInstrumentation = {
        debugTool: null
      };
      var ReactFiberInstrumentation_1 = ReactFiberInstrumentation;
      var invokeGuardedCallback$2 = ReactErrorUtils.invokeGuardedCallback;
      var hasCaughtError = ReactErrorUtils.hasCaughtError;
      var clearCaughtError = ReactErrorUtils.clearCaughtError;
      var didWarnAboutStateTransition = void 0;
      var didWarnSetStateChildContext = void 0;
      var warnAboutUpdateOnUnmounted = void 0;
      var warnAboutInvalidUpdates = void 0;
      {
        didWarnAboutStateTransition = false;
        didWarnSetStateChildContext = false;
        var didWarnStateUpdateForUnmountedComponent = {};

        warnAboutUpdateOnUnmounted = function warnAboutUpdateOnUnmounted(fiber) {
          var componentName = getComponentName(fiber) || "ReactClass";

          if (didWarnStateUpdateForUnmountedComponent[componentName]) {
            return;
          }

          warning(false, "Can only update a mounted or mounting " + "component. This usually means you called setState, replaceState, " + "or forceUpdate on an unmounted component. This is a no-op.\n\nPlease " + "check the code for the %s component.", componentName);
          didWarnStateUpdateForUnmountedComponent[componentName] = true;
        };

        warnAboutInvalidUpdates = function warnAboutInvalidUpdates(instance) {
          switch (ReactDebugCurrentFiber.phase) {
            case "getChildContext":
              if (didWarnSetStateChildContext) {
                return;
              }

              warning(false, "setState(...): Cannot call setState() inside getChildContext()");
              didWarnSetStateChildContext = true;
              break;

            case "render":
              if (didWarnAboutStateTransition) {
                return;
              }

              warning(false, "Cannot update during an existing state transition (such as within " + "`render` or another component's constructor). Render methods should " + "be a pure function of props and state; constructor side-effects are " + "an anti-pattern, but can be moved to `componentWillMount`.");
              didWarnAboutStateTransition = true;
              break;
          }
        };
      }

      var ReactFiberScheduler = function ReactFiberScheduler(config) {
        var hostContext = ReactFiberHostContext(config);
        var popHostContext = hostContext.popHostContext,
            popHostContainer = hostContext.popHostContainer;
        var hydrationContext = ReactFiberHydrationContext(config);
        var resetHostContainer = hostContext.resetHostContainer;

        var _ReactFiberBeginWork = ReactFiberBeginWork(config, hostContext, hydrationContext, scheduleWork, computeExpirationForFiber),
            beginWork = _ReactFiberBeginWork.beginWork;

        var _ReactFiberCompleteWo = ReactFiberCompleteWork(config, hostContext, hydrationContext),
            completeWork = _ReactFiberCompleteWo.completeWork;

        var _ReactFiberUnwindWork = ReactFiberUnwindWork(hostContext, scheduleWork, isAlreadyFailedLegacyErrorBoundary),
            throwException = _ReactFiberUnwindWork.throwException,
            unwindWork = _ReactFiberUnwindWork.unwindWork;

        var _ReactFiberCommitWork = ReactFiberCommitWork(config, onCommitPhaseError, scheduleWork, computeExpirationForFiber, markLegacyErrorBoundaryAsFailed, recalculateCurrentTime),
            commitResetTextContent = _ReactFiberCommitWork.commitResetTextContent,
            commitPlacement = _ReactFiberCommitWork.commitPlacement,
            commitDeletion = _ReactFiberCommitWork.commitDeletion,
            commitWork = _ReactFiberCommitWork.commitWork,
            commitLifeCycles = _ReactFiberCommitWork.commitLifeCycles,
            commitErrorLogging = _ReactFiberCommitWork.commitErrorLogging,
            commitAttachRef = _ReactFiberCommitWork.commitAttachRef,
            commitDetachRef = _ReactFiberCommitWork.commitDetachRef;

        var now = config.now,
            scheduleDeferredCallback = config.scheduleDeferredCallback,
            cancelDeferredCallback = config.cancelDeferredCallback,
            prepareForCommit = config.prepareForCommit,
            resetAfterCommit = config.resetAfterCommit;
        var originalStartTimeMs = now();
        var mostRecentCurrentTime = msToExpirationTime(0);
        var mostRecentCurrentTimeMs = originalStartTimeMs;
        var lastUniqueAsyncExpiration = 0;
        var expirationContext = NoWork;
        var isWorking = false;
        var nextUnitOfWork = null;
        var nextRoot = null;
        var nextRenderExpirationTime = NoWork;
        var nextEffect = null;
        var isCommitting = false;
        var isRootReadyForCommit = false;
        var legacyErrorBoundariesThatAlreadyFailed = null;
        var interruptedBy = null;
        var stashedWorkInProgressProperties = void 0;
        var replayUnitOfWork = void 0;

        if (true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
          stashedWorkInProgressProperties = null;

          replayUnitOfWork = function replayUnitOfWork(failedUnitOfWork, isAsync) {
            babelHelpers.extends(failedUnitOfWork, stashedWorkInProgressProperties);

            switch (failedUnitOfWork.tag) {
              case HostRoot:
                popHostContainer(failedUnitOfWork);
                popTopLevelContextObject(failedUnitOfWork);
                break;

              case HostComponent:
                popHostContext(failedUnitOfWork);
                break;

              case ClassComponent:
                popContextProvider(failedUnitOfWork);
                break;

              case HostPortal:
                popHostContainer(failedUnitOfWork);
                break;

              case ContextProvider:
                popProvider(failedUnitOfWork);
                break;
            }

            invokeGuardedCallback$2(null, workLoop, null, isAsync);

            if (hasCaughtError()) {
              clearCaughtError();
            } else {}
          };
        }

        function resetContextStack() {
          reset();
          resetContext();
          resetHostContainer();
          resetProviderStack();
          {
            ReactStrictModeWarnings.discardPendingWarnings();
          }
          nextRoot = null;
          nextRenderExpirationTime = NoWork;
          nextUnitOfWork = null;
          isRootReadyForCommit = false;
        }

        function commitAllHostEffects() {
          while (nextEffect !== null) {
            {
              ReactDebugCurrentFiber.setCurrentFiber(nextEffect);
            }
            recordEffect();
            var effectTag = nextEffect.effectTag;

            if (effectTag & ContentReset) {
              commitResetTextContent(nextEffect);
            }

            if (effectTag & Ref) {
              var current = nextEffect.alternate;

              if (current !== null) {
                commitDetachRef(current);
              }
            }

            var primaryEffectTag = effectTag & (Placement | Update | Deletion);

            switch (primaryEffectTag) {
              case Placement:
                {
                  commitPlacement(nextEffect);
                  nextEffect.effectTag &= ~Placement;
                  break;
                }

              case PlacementAndUpdate:
                {
                  commitPlacement(nextEffect);
                  nextEffect.effectTag &= ~Placement;
                  var _current = nextEffect.alternate;
                  commitWork(_current, nextEffect);
                  break;
                }

              case Update:
                {
                  var _current2 = nextEffect.alternate;
                  commitWork(_current2, nextEffect);
                  break;
                }

              case Deletion:
                {
                  commitDeletion(nextEffect);
                  break;
                }
            }

            nextEffect = nextEffect.nextEffect;
          }

          {
            ReactDebugCurrentFiber.resetCurrentFiber();
          }
        }

        function commitAllLifeCycles(finishedRoot, currentTime, committedExpirationTime) {
          {
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();

            if (warnAboutDeprecatedLifecycles) {
              ReactStrictModeWarnings.flushPendingDeprecationWarnings();
            }
          }

          while (nextEffect !== null) {
            var effectTag = nextEffect.effectTag;

            if (effectTag & (Update | Callback)) {
              recordEffect();
              var current = nextEffect.alternate;
              commitLifeCycles(finishedRoot, current, nextEffect, currentTime, committedExpirationTime);
            }

            if (effectTag & ErrLog) {
              commitErrorLogging(nextEffect, onUncaughtError);
            }

            if (effectTag & Ref) {
              recordEffect();
              commitAttachRef(nextEffect);
            }

            var next = nextEffect.nextEffect;
            nextEffect.nextEffect = null;
            nextEffect = next;
          }
        }

        function isAlreadyFailedLegacyErrorBoundary(instance) {
          return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
        }

        function markLegacyErrorBoundaryAsFailed(instance) {
          if (legacyErrorBoundariesThatAlreadyFailed === null) {
            legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
          } else {
            legacyErrorBoundariesThatAlreadyFailed.add(instance);
          }
        }

        function commitRoot(finishedWork) {
          isWorking = true;
          isCommitting = true;
          startCommitTimer();
          var root = finishedWork.stateNode;
          invariant(root.current !== finishedWork, "Cannot commit the same tree as before. This is probably a bug " + "related to the return field. This error is likely caused by a bug " + "in React. Please file an issue.");
          var committedExpirationTime = root.pendingCommitExpirationTime;
          invariant(committedExpirationTime !== NoWork, "Cannot commit an incomplete root. This error is likely caused by a " + "bug in React. Please file an issue.");
          root.pendingCommitExpirationTime = NoWork;
          var currentTime = recalculateCurrentTime();
          ReactCurrentOwner.current = null;
          var firstEffect = void 0;

          if (finishedWork.effectTag > PerformedWork) {
            if (finishedWork.lastEffect !== null) {
              finishedWork.lastEffect.nextEffect = finishedWork;
              firstEffect = finishedWork.firstEffect;
            } else {
              firstEffect = finishedWork;
            }
          } else {
            firstEffect = finishedWork.firstEffect;
          }

          prepareForCommit(root.containerInfo);
          nextEffect = firstEffect;
          startCommitHostEffectsTimer();

          while (nextEffect !== null) {
            var didError = false;
            var error = void 0;
            {
              invokeGuardedCallback$2(null, commitAllHostEffects, null);

              if (hasCaughtError()) {
                didError = true;
                error = clearCaughtError();
              }
            }

            if (didError) {
              invariant(nextEffect !== null, "Should have next effect. This error is likely caused by a bug " + "in React. Please file an issue.");
              onCommitPhaseError(nextEffect, error);

              if (nextEffect !== null) {
                nextEffect = nextEffect.nextEffect;
              }
            }
          }

          stopCommitHostEffectsTimer();
          resetAfterCommit(root.containerInfo);
          root.current = finishedWork;
          nextEffect = firstEffect;
          startCommitLifeCyclesTimer();

          while (nextEffect !== null) {
            var _didError = false;

            var _error = void 0;

            {
              invokeGuardedCallback$2(null, commitAllLifeCycles, null, root, currentTime, committedExpirationTime);

              if (hasCaughtError()) {
                _didError = true;
                _error = clearCaughtError();
              }
            }

            if (_didError) {
              invariant(nextEffect !== null, "Should have next effect. This error is likely caused by a bug " + "in React. Please file an issue.");
              onCommitPhaseError(nextEffect, _error);

              if (nextEffect !== null) {
                nextEffect = nextEffect.nextEffect;
              }
            }
          }

          isCommitting = false;
          isWorking = false;
          stopCommitLifeCyclesTimer();
          stopCommitTimer();

          if (typeof onCommitRoot === "function") {
            onCommitRoot(finishedWork.stateNode);
          }

          if (true && ReactFiberInstrumentation_1.debugTool) {
            ReactFiberInstrumentation_1.debugTool.onCommitWork(finishedWork);
          }

          var remainingTime = root.current.expirationTime;

          if (remainingTime === NoWork) {
            legacyErrorBoundariesThatAlreadyFailed = null;
          }

          return remainingTime;
        }

        function resetExpirationTime(workInProgress, renderTime) {
          if (renderTime !== Never && workInProgress.expirationTime === Never) {
            return;
          }

          var newExpirationTime = getUpdateExpirationTime(workInProgress);
          var child = workInProgress.child;

          while (child !== null) {
            if (child.expirationTime !== NoWork && (newExpirationTime === NoWork || newExpirationTime > child.expirationTime)) {
              newExpirationTime = child.expirationTime;
            }

            child = child.sibling;
          }

          workInProgress.expirationTime = newExpirationTime;
        }

        function completeUnitOfWork(workInProgress) {
          while (true) {
            var current = workInProgress.alternate;
            {
              ReactDebugCurrentFiber.setCurrentFiber(workInProgress);
            }
            var returnFiber = workInProgress["return"];
            var siblingFiber = workInProgress.sibling;

            if ((workInProgress.effectTag & Incomplete) === NoEffect) {
              var next = completeWork(current, workInProgress, nextRenderExpirationTime);
              stopWorkTimer(workInProgress);
              resetExpirationTime(workInProgress, nextRenderExpirationTime);
              {
                ReactDebugCurrentFiber.resetCurrentFiber();
              }

              if (next !== null) {
                stopWorkTimer(workInProgress);

                if (true && ReactFiberInstrumentation_1.debugTool) {
                  ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);
                }

                return next;
              }

              if (returnFiber !== null && (returnFiber.effectTag & Incomplete) === NoEffect) {
                if (returnFiber.firstEffect === null) {
                  returnFiber.firstEffect = workInProgress.firstEffect;
                }

                if (workInProgress.lastEffect !== null) {
                  if (returnFiber.lastEffect !== null) {
                    returnFiber.lastEffect.nextEffect = workInProgress.firstEffect;
                  }

                  returnFiber.lastEffect = workInProgress.lastEffect;
                }

                var effectTag = workInProgress.effectTag;

                if (effectTag > PerformedWork) {
                  if (returnFiber.lastEffect !== null) {
                    returnFiber.lastEffect.nextEffect = workInProgress;
                  } else {
                    returnFiber.firstEffect = workInProgress;
                  }

                  returnFiber.lastEffect = workInProgress;
                }
              }

              if (true && ReactFiberInstrumentation_1.debugTool) {
                ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);
              }

              if (siblingFiber !== null) {
                return siblingFiber;
              } else if (returnFiber !== null) {
                workInProgress = returnFiber;
                continue;
              } else {
                isRootReadyForCommit = true;
                return null;
              }
            } else {
              var _next = unwindWork(workInProgress);

              if (workInProgress.effectTag & DidCapture) {
                stopFailedWorkTimer(workInProgress);
              } else {
                stopWorkTimer(workInProgress);
              }

              {
                ReactDebugCurrentFiber.resetCurrentFiber();
              }

              if (_next !== null) {
                stopWorkTimer(workInProgress);

                if (true && ReactFiberInstrumentation_1.debugTool) {
                  ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);
                }

                _next.effectTag &= HostEffectMask;
                return _next;
              }

              if (returnFiber !== null) {
                returnFiber.firstEffect = returnFiber.lastEffect = null;
                returnFiber.effectTag |= Incomplete;
              }

              if (true && ReactFiberInstrumentation_1.debugTool) {
                ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);
              }

              if (siblingFiber !== null) {
                return siblingFiber;
              } else if (returnFiber !== null) {
                workInProgress = returnFiber;
                continue;
              } else {
                return null;
              }
            }
          }

          return null;
        }

        function performUnitOfWork(workInProgress) {
          var current = workInProgress.alternate;
          startWorkTimer(workInProgress);
          {
            ReactDebugCurrentFiber.setCurrentFiber(workInProgress);
          }

          if (true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
            stashedWorkInProgressProperties = babelHelpers.extends({}, workInProgress);
          }

          var next = beginWork(current, workInProgress, nextRenderExpirationTime);
          {
            ReactDebugCurrentFiber.resetCurrentFiber();
          }

          if (true && ReactFiberInstrumentation_1.debugTool) {
            ReactFiberInstrumentation_1.debugTool.onBeginWork(workInProgress);
          }

          if (next === null) {
            next = completeUnitOfWork(workInProgress);
          }

          ReactCurrentOwner.current = null;
          return next;
        }

        function workLoop(isAsync) {
          if (!isAsync) {
            while (nextUnitOfWork !== null) {
              nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
            }
          } else {
            while (nextUnitOfWork !== null && !shouldYield()) {
              nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
            }
          }
        }

        function renderRoot(root, expirationTime, isAsync) {
          invariant(!isWorking, "renderRoot was called recursively. This error is likely caused " + "by a bug in React. Please file an issue.");
          isWorking = true;

          if (expirationTime !== nextRenderExpirationTime || root !== nextRoot || nextUnitOfWork === null) {
            resetContextStack();
            nextRoot = root;
            nextRenderExpirationTime = expirationTime;
            nextUnitOfWork = createWorkInProgress(nextRoot.current, null, nextRenderExpirationTime);
            root.pendingCommitExpirationTime = NoWork;
          }

          var didFatal = false;
          startWorkLoopTimer(nextUnitOfWork);

          do {
            try {
              workLoop(isAsync);
            } catch (thrownValue) {
              if (nextUnitOfWork === null) {
                didFatal = true;
                onUncaughtError(thrownValue);
                break;
              }

              if (true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
                var failedUnitOfWork = nextUnitOfWork;
                replayUnitOfWork(failedUnitOfWork, isAsync);
              }

              var sourceFiber = nextUnitOfWork;
              var returnFiber = sourceFiber["return"];

              if (returnFiber === null) {
                didFatal = true;
                onUncaughtError(thrownValue);
                break;
              }

              throwException(returnFiber, sourceFiber, thrownValue);
              nextUnitOfWork = completeUnitOfWork(sourceFiber);
            }

            break;
          } while (true);

          stopWorkLoopTimer(interruptedBy);
          interruptedBy = null;
          isWorking = false;

          if (didFatal) {
            return null;
          } else if (nextUnitOfWork === null) {
            if (isRootReadyForCommit) {
              root.pendingCommitExpirationTime = expirationTime;
              var finishedWork = root.current.alternate;
              return finishedWork;
            } else {
              invariant(false, "Expired work should have completed. This error is likely caused " + "by a bug in React. Please file an issue.");
            }
          } else {
            return null;
          }
        }

        function scheduleCapture(sourceFiber, boundaryFiber, value, expirationTime) {
          var capturedValue = createCapturedValue(value, sourceFiber);
          var update = {
            expirationTime: expirationTime,
            partialState: null,
            callback: null,
            isReplace: false,
            isForced: false,
            capturedValue: capturedValue,
            next: null
          };
          insertUpdateIntoFiber(boundaryFiber, update);
          scheduleWork(boundaryFiber, expirationTime);
        }

        function dispatch(sourceFiber, value, expirationTime) {
          invariant(!isWorking || isCommitting, "dispatch: Cannot dispatch during the render phase.");
          var fiber = sourceFiber["return"];

          while (fiber !== null) {
            switch (fiber.tag) {
              case ClassComponent:
                var ctor = fiber.type;
                var instance = fiber.stateNode;

                if (typeof ctor.getDerivedStateFromCatch === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                  scheduleCapture(sourceFiber, fiber, value, expirationTime);
                  return;
                }

                break;

              case HostRoot:
                scheduleCapture(sourceFiber, fiber, value, expirationTime);
                return;
            }

            fiber = fiber["return"];
          }

          if (sourceFiber.tag === HostRoot) {
            scheduleCapture(sourceFiber, sourceFiber, value, expirationTime);
          }
        }

        function onCommitPhaseError(fiber, error) {
          return dispatch(fiber, error, Sync);
        }

        function computeAsyncExpiration(currentTime) {
          var expirationMs = 5000;
          var bucketSizeMs = 250;
          return computeExpirationBucket(currentTime, expirationMs, bucketSizeMs);
        }

        function computeInteractiveExpiration(currentTime) {
          var expirationMs = 500;
          var bucketSizeMs = 100;
          return computeExpirationBucket(currentTime, expirationMs, bucketSizeMs);
        }

        function computeUniqueAsyncExpiration() {
          var currentTime = recalculateCurrentTime();
          var result = computeAsyncExpiration(currentTime);

          if (result <= lastUniqueAsyncExpiration) {
            result = lastUniqueAsyncExpiration + 1;
          }

          lastUniqueAsyncExpiration = result;
          return lastUniqueAsyncExpiration;
        }

        function computeExpirationForFiber(fiber) {
          var expirationTime = void 0;

          if (expirationContext !== NoWork) {
            expirationTime = expirationContext;
          } else if (isWorking) {
            if (isCommitting) {
              expirationTime = Sync;
            } else {
              expirationTime = nextRenderExpirationTime;
            }
          } else {
            if (fiber.mode & AsyncMode) {
              if (isBatchingInteractiveUpdates) {
                var currentTime = recalculateCurrentTime();
                expirationTime = computeInteractiveExpiration(currentTime);
              } else {
                var _currentTime = recalculateCurrentTime();

                expirationTime = computeAsyncExpiration(_currentTime);
              }
            } else {
              expirationTime = Sync;
            }
          }

          if (isBatchingInteractiveUpdates) {
            if (lowestPendingInteractiveExpirationTime === NoWork || expirationTime > lowestPendingInteractiveExpirationTime) {
              lowestPendingInteractiveExpirationTime = expirationTime;
            }
          }

          return expirationTime;
        }

        function scheduleWork(fiber, expirationTime) {
          return scheduleWorkImpl(fiber, expirationTime, false);
        }

        function scheduleWorkImpl(fiber, expirationTime, isErrorRecovery) {
          recordScheduleUpdate();
          {
            if (!isErrorRecovery && fiber.tag === ClassComponent) {
              var instance = fiber.stateNode;
              warnAboutInvalidUpdates(instance);
            }
          }
          var node = fiber;

          while (node !== null) {
            if (node.expirationTime === NoWork || node.expirationTime > expirationTime) {
              node.expirationTime = expirationTime;
            }

            if (node.alternate !== null) {
              if (node.alternate.expirationTime === NoWork || node.alternate.expirationTime > expirationTime) {
                node.alternate.expirationTime = expirationTime;
              }
            }

            if (node["return"] === null) {
              if (node.tag === HostRoot) {
                var root = node.stateNode;

                if (!isWorking && nextRenderExpirationTime !== NoWork && expirationTime < nextRenderExpirationTime) {
                  interruptedBy = fiber;
                  resetContextStack();
                }

                if (nextRoot !== root || !isWorking) {
                  requestWork(root, expirationTime);
                }

                if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
                  invariant(false, "Maximum update depth exceeded. This can happen when a " + "component repeatedly calls setState inside " + "componentWillUpdate or componentDidUpdate. React limits " + "the number of nested updates to prevent infinite loops.");
                }
              } else {
                {
                  if (!isErrorRecovery && fiber.tag === ClassComponent) {
                    warnAboutUpdateOnUnmounted(fiber);
                  }
                }
                return;
              }
            }

            node = node["return"];
          }
        }

        function recalculateCurrentTime() {
          mostRecentCurrentTimeMs = now() - originalStartTimeMs;
          mostRecentCurrentTime = msToExpirationTime(mostRecentCurrentTimeMs);
          return mostRecentCurrentTime;
        }

        function deferredUpdates(fn) {
          var previousExpirationContext = expirationContext;
          var currentTime = recalculateCurrentTime();
          expirationContext = computeAsyncExpiration(currentTime);

          try {
            return fn();
          } finally {
            expirationContext = previousExpirationContext;
          }
        }

        function syncUpdates(fn, a, b, c, d) {
          var previousExpirationContext = expirationContext;
          expirationContext = Sync;

          try {
            return fn(a, b, c, d);
          } finally {
            expirationContext = previousExpirationContext;
          }
        }

        var firstScheduledRoot = null;
        var lastScheduledRoot = null;
        var callbackExpirationTime = NoWork;
        var callbackID = -1;
        var isRendering = false;
        var nextFlushedRoot = null;
        var nextFlushedExpirationTime = NoWork;
        var lowestPendingInteractiveExpirationTime = NoWork;
        var deadlineDidExpire = false;
        var hasUnhandledError = false;
        var unhandledError = null;
        var deadline = null;
        var isBatchingUpdates = false;
        var isUnbatchingUpdates = false;
        var isBatchingInteractiveUpdates = false;
        var completedBatches = null;
        var NESTED_UPDATE_LIMIT = 1000;
        var nestedUpdateCount = 0;
        var timeHeuristicForUnitOfWork = 1;

        function scheduleCallbackWithExpiration(expirationTime) {
          if (callbackExpirationTime !== NoWork) {
            if (expirationTime > callbackExpirationTime) {
              return;
            } else {
              cancelDeferredCallback(callbackID);
            }
          } else {
            startRequestCallbackTimer();
          }

          var currentMs = now() - originalStartTimeMs;
          var expirationMs = expirationTimeToMs(expirationTime);
          var timeout = expirationMs - currentMs;
          callbackExpirationTime = expirationTime;
          callbackID = scheduleDeferredCallback(performAsyncWork, {
            timeout: timeout
          });
        }

        function requestWork(root, expirationTime) {
          addRootToSchedule(root, expirationTime);

          if (isRendering) {
            return;
          }

          if (isBatchingUpdates) {
            if (isUnbatchingUpdates) {
              nextFlushedRoot = root;
              nextFlushedExpirationTime = Sync;
              performWorkOnRoot(root, Sync, false);
            }

            return;
          }

          if (expirationTime === Sync) {
            performSyncWork();
          } else {
            scheduleCallbackWithExpiration(expirationTime);
          }
        }

        function addRootToSchedule(root, expirationTime) {
          if (root.nextScheduledRoot === null) {
            root.remainingExpirationTime = expirationTime;

            if (lastScheduledRoot === null) {
              firstScheduledRoot = lastScheduledRoot = root;
              root.nextScheduledRoot = root;
            } else {
              lastScheduledRoot.nextScheduledRoot = root;
              lastScheduledRoot = root;
              lastScheduledRoot.nextScheduledRoot = firstScheduledRoot;
            }
          } else {
            var remainingExpirationTime = root.remainingExpirationTime;

            if (remainingExpirationTime === NoWork || expirationTime < remainingExpirationTime) {
              root.remainingExpirationTime = expirationTime;
            }
          }
        }

        function findHighestPriorityRoot() {
          var highestPriorityWork = NoWork;
          var highestPriorityRoot = null;

          if (lastScheduledRoot !== null) {
            var previousScheduledRoot = lastScheduledRoot;
            var root = firstScheduledRoot;

            while (root !== null) {
              var remainingExpirationTime = root.remainingExpirationTime;

              if (remainingExpirationTime === NoWork) {
                invariant(previousScheduledRoot !== null && lastScheduledRoot !== null, "Should have a previous and last root. This error is likely " + "caused by a bug in React. Please file an issue.");

                if (root === root.nextScheduledRoot) {
                  root.nextScheduledRoot = null;
                  firstScheduledRoot = lastScheduledRoot = null;
                  break;
                } else if (root === firstScheduledRoot) {
                  var next = root.nextScheduledRoot;
                  firstScheduledRoot = next;
                  lastScheduledRoot.nextScheduledRoot = next;
                  root.nextScheduledRoot = null;
                } else if (root === lastScheduledRoot) {
                  lastScheduledRoot = previousScheduledRoot;
                  lastScheduledRoot.nextScheduledRoot = firstScheduledRoot;
                  root.nextScheduledRoot = null;
                  break;
                } else {
                  previousScheduledRoot.nextScheduledRoot = root.nextScheduledRoot;
                  root.nextScheduledRoot = null;
                }

                root = previousScheduledRoot.nextScheduledRoot;
              } else {
                if (highestPriorityWork === NoWork || remainingExpirationTime < highestPriorityWork) {
                  highestPriorityWork = remainingExpirationTime;
                  highestPriorityRoot = root;
                }

                if (root === lastScheduledRoot) {
                  break;
                }

                previousScheduledRoot = root;
                root = root.nextScheduledRoot;
              }
            }
          }

          var previousFlushedRoot = nextFlushedRoot;

          if (previousFlushedRoot !== null && previousFlushedRoot === highestPriorityRoot && highestPriorityWork === Sync) {
            nestedUpdateCount++;
          } else {
            nestedUpdateCount = 0;
          }

          nextFlushedRoot = highestPriorityRoot;
          nextFlushedExpirationTime = highestPriorityWork;
        }

        function performAsyncWork(dl) {
          performWork(NoWork, true, dl);
        }

        function performSyncWork() {
          performWork(Sync, false, null);
        }

        function performWork(minExpirationTime, isAsync, dl) {
          deadline = dl;
          findHighestPriorityRoot();

          if (enableUserTimingAPI && deadline !== null) {
            var didExpire = nextFlushedExpirationTime < recalculateCurrentTime();
            stopRequestCallbackTimer(didExpire);
          }

          if (isAsync) {
            while (nextFlushedRoot !== null && nextFlushedExpirationTime !== NoWork && (minExpirationTime === NoWork || minExpirationTime >= nextFlushedExpirationTime) && (!deadlineDidExpire || recalculateCurrentTime() >= nextFlushedExpirationTime)) {
              performWorkOnRoot(nextFlushedRoot, nextFlushedExpirationTime, !deadlineDidExpire);
              findHighestPriorityRoot();
            }
          } else {
            while (nextFlushedRoot !== null && nextFlushedExpirationTime !== NoWork && (minExpirationTime === NoWork || minExpirationTime >= nextFlushedExpirationTime)) {
              performWorkOnRoot(nextFlushedRoot, nextFlushedExpirationTime, false);
              findHighestPriorityRoot();
            }
          }

          if (deadline !== null) {
            callbackExpirationTime = NoWork;
            callbackID = -1;
          }

          if (nextFlushedExpirationTime !== NoWork) {
            scheduleCallbackWithExpiration(nextFlushedExpirationTime);
          }

          deadline = null;
          deadlineDidExpire = false;
          finishRendering();
        }

        function flushRoot(root, expirationTime) {
          invariant(!isRendering, "work.commit(): Cannot commit while already rendering. This likely " + "means you attempted to commit from inside a lifecycle method.");
          performWorkOnRoot(root, expirationTime, false);
          finishRendering();
        }

        function finishRendering() {
          nestedUpdateCount = 0;

          if (completedBatches !== null) {
            var batches = completedBatches;
            completedBatches = null;

            for (var i = 0; i < batches.length; i++) {
              var batch = batches[i];

              try {
                batch._onComplete();
              } catch (error) {
                if (!hasUnhandledError) {
                  hasUnhandledError = true;
                  unhandledError = error;
                }
              }
            }
          }

          if (hasUnhandledError) {
            var error = unhandledError;
            unhandledError = null;
            hasUnhandledError = false;
            throw error;
          }
        }

        function performWorkOnRoot(root, expirationTime, isAsync) {
          invariant(!isRendering, "performWorkOnRoot was called recursively. This error is likely caused " + "by a bug in React. Please file an issue.");
          isRendering = true;

          if (!isAsync) {
            var finishedWork = root.finishedWork;

            if (finishedWork !== null) {
              completeRoot(root, finishedWork, expirationTime);
            } else {
              root.finishedWork = null;
              finishedWork = renderRoot(root, expirationTime, false);

              if (finishedWork !== null) {
                completeRoot(root, finishedWork, expirationTime);
              }
            }
          } else {
            var _finishedWork = root.finishedWork;

            if (_finishedWork !== null) {
              completeRoot(root, _finishedWork, expirationTime);
            } else {
              root.finishedWork = null;
              _finishedWork = renderRoot(root, expirationTime, true);

              if (_finishedWork !== null) {
                if (!shouldYield()) {
                  completeRoot(root, _finishedWork, expirationTime);
                } else {
                  root.finishedWork = _finishedWork;
                }
              }
            }
          }

          isRendering = false;
        }

        function completeRoot(root, finishedWork, expirationTime) {
          var firstBatch = root.firstBatch;

          if (firstBatch !== null && firstBatch._expirationTime <= expirationTime) {
            if (completedBatches === null) {
              completedBatches = [firstBatch];
            } else {
              completedBatches.push(firstBatch);
            }

            if (firstBatch._defer) {
              root.finishedWork = finishedWork;
              root.remainingExpirationTime = NoWork;
              return;
            }
          }

          root.finishedWork = null;
          root.remainingExpirationTime = commitRoot(finishedWork);
        }

        function shouldYield() {
          if (deadline === null) {
            return false;
          }

          if (deadline.timeRemaining() > timeHeuristicForUnitOfWork) {
            return false;
          }

          deadlineDidExpire = true;
          return true;
        }

        function onUncaughtError(error) {
          invariant(nextFlushedRoot !== null, "Should be working on a root. This error is likely caused by a bug in " + "React. Please file an issue.");
          nextFlushedRoot.remainingExpirationTime = NoWork;

          if (!hasUnhandledError) {
            hasUnhandledError = true;
            unhandledError = error;
          }
        }

        function batchedUpdates(fn, a) {
          var previousIsBatchingUpdates = isBatchingUpdates;
          isBatchingUpdates = true;

          try {
            return fn(a);
          } finally {
            isBatchingUpdates = previousIsBatchingUpdates;

            if (!isBatchingUpdates && !isRendering) {
              performSyncWork();
            }
          }
        }

        function unbatchedUpdates(fn, a) {
          if (isBatchingUpdates && !isUnbatchingUpdates) {
            isUnbatchingUpdates = true;

            try {
              return fn(a);
            } finally {
              isUnbatchingUpdates = false;
            }
          }

          return fn(a);
        }

        function flushSync(fn, a) {
          invariant(!isRendering, "flushSync was called from inside a lifecycle method. It cannot be " + "called when React is already rendering.");
          var previousIsBatchingUpdates = isBatchingUpdates;
          isBatchingUpdates = true;

          try {
            return syncUpdates(fn, a);
          } finally {
            isBatchingUpdates = previousIsBatchingUpdates;
            performSyncWork();
          }
        }

        function interactiveUpdates(fn, a, b) {
          if (isBatchingInteractiveUpdates) {
            return fn(a, b);
          }

          if (!isBatchingUpdates && !isRendering && lowestPendingInteractiveExpirationTime !== NoWork) {
            performWork(lowestPendingInteractiveExpirationTime, false, null);
            lowestPendingInteractiveExpirationTime = NoWork;
          }

          var previousIsBatchingInteractiveUpdates = isBatchingInteractiveUpdates;
          var previousIsBatchingUpdates = isBatchingUpdates;
          isBatchingInteractiveUpdates = true;
          isBatchingUpdates = true;

          try {
            return fn(a, b);
          } finally {
            isBatchingInteractiveUpdates = previousIsBatchingInteractiveUpdates;
            isBatchingUpdates = previousIsBatchingUpdates;

            if (!isBatchingUpdates && !isRendering) {
              performSyncWork();
            }
          }
        }

        function flushInteractiveUpdates() {
          if (!isRendering && lowestPendingInteractiveExpirationTime !== NoWork) {
            performWork(lowestPendingInteractiveExpirationTime, false, null);
            lowestPendingInteractiveExpirationTime = NoWork;
          }
        }

        function flushControlled(fn) {
          var previousIsBatchingUpdates = isBatchingUpdates;
          isBatchingUpdates = true;

          try {
            syncUpdates(fn);
          } finally {
            isBatchingUpdates = previousIsBatchingUpdates;

            if (!isBatchingUpdates && !isRendering) {
              performWork(Sync, false, null);
            }
          }
        }

        return {
          recalculateCurrentTime: recalculateCurrentTime,
          computeExpirationForFiber: computeExpirationForFiber,
          scheduleWork: scheduleWork,
          requestWork: requestWork,
          flushRoot: flushRoot,
          batchedUpdates: batchedUpdates,
          unbatchedUpdates: unbatchedUpdates,
          flushSync: flushSync,
          flushControlled: flushControlled,
          deferredUpdates: deferredUpdates,
          syncUpdates: syncUpdates,
          interactiveUpdates: interactiveUpdates,
          flushInteractiveUpdates: flushInteractiveUpdates,
          computeUniqueAsyncExpiration: computeUniqueAsyncExpiration
        };
      };

      var didWarnAboutNestedUpdates = void 0;
      {
        didWarnAboutNestedUpdates = false;
      }

      function getContextForSubtree(parentComponent) {
        if (!parentComponent) {
          return emptyObject;
        }

        var fiber = get(parentComponent);
        var parentContext = findCurrentUnmaskedContext(fiber);
        return isContextProvider(fiber) ? processChildContext(fiber, parentContext) : parentContext;
      }

      var ReactFiberReconciler$1 = function ReactFiberReconciler$1(config) {
        var getPublicInstance = config.getPublicInstance;

        var _ReactFiberScheduler = ReactFiberScheduler(config),
            computeUniqueAsyncExpiration = _ReactFiberScheduler.computeUniqueAsyncExpiration,
            recalculateCurrentTime = _ReactFiberScheduler.recalculateCurrentTime,
            computeExpirationForFiber = _ReactFiberScheduler.computeExpirationForFiber,
            scheduleWork = _ReactFiberScheduler.scheduleWork,
            requestWork = _ReactFiberScheduler.requestWork,
            flushRoot = _ReactFiberScheduler.flushRoot,
            batchedUpdates = _ReactFiberScheduler.batchedUpdates,
            unbatchedUpdates = _ReactFiberScheduler.unbatchedUpdates,
            flushSync = _ReactFiberScheduler.flushSync,
            flushControlled = _ReactFiberScheduler.flushControlled,
            deferredUpdates = _ReactFiberScheduler.deferredUpdates,
            syncUpdates = _ReactFiberScheduler.syncUpdates,
            interactiveUpdates = _ReactFiberScheduler.interactiveUpdates,
            flushInteractiveUpdates = _ReactFiberScheduler.flushInteractiveUpdates;

        function scheduleRootUpdate(current, element, currentTime, expirationTime, callback) {
          {
            if (ReactDebugCurrentFiber.phase === "render" && ReactDebugCurrentFiber.current !== null && !didWarnAboutNestedUpdates) {
              didWarnAboutNestedUpdates = true;
              warning(false, "Render methods should be a pure function of props and state; " + "triggering nested component updates from render is not allowed. " + "If necessary, trigger nested updates in componentDidUpdate.\n\n" + "Check the render method of %s.", getComponentName(ReactDebugCurrentFiber.current) || "Unknown");
            }
          }
          callback = callback === undefined ? null : callback;
          {
            warning(callback === null || typeof callback === "function", "render(...): Expected the last optional `callback` argument to be a " + "function. Instead received: %s.", callback);
          }
          var update = {
            expirationTime: expirationTime,
            partialState: {
              element: element
            },
            callback: callback,
            isReplace: false,
            isForced: false,
            capturedValue: null,
            next: null
          };
          insertUpdateIntoFiber(current, update);
          scheduleWork(current, expirationTime);
          return expirationTime;
        }

        function _updateContainerAtExpirationTime(element, container, parentComponent, currentTime, expirationTime, callback) {
          var current = container.current;
          {
            if (ReactFiberInstrumentation_1.debugTool) {
              if (current.alternate === null) {
                ReactFiberInstrumentation_1.debugTool.onMountContainer(container);
              } else if (element === null) {
                ReactFiberInstrumentation_1.debugTool.onUnmountContainer(container);
              } else {
                ReactFiberInstrumentation_1.debugTool.onUpdateContainer(container);
              }
            }
          }
          var context = getContextForSubtree(parentComponent);

          if (container.context === null) {
            container.context = context;
          } else {
            container.pendingContext = context;
          }

          return scheduleRootUpdate(current, element, currentTime, expirationTime, callback);
        }

        function findHostInstance(fiber) {
          var hostFiber = findCurrentHostFiber(fiber);

          if (hostFiber === null) {
            return null;
          }

          return hostFiber.stateNode;
        }

        return {
          createContainer: function createContainer(containerInfo, isAsync, hydrate) {
            return createFiberRoot(containerInfo, isAsync, hydrate);
          },
          updateContainer: function updateContainer(element, container, parentComponent, callback) {
            var current = container.current;
            var currentTime = recalculateCurrentTime();
            var expirationTime = computeExpirationForFiber(current);
            return _updateContainerAtExpirationTime(element, container, parentComponent, currentTime, expirationTime, callback);
          },
          updateContainerAtExpirationTime: function updateContainerAtExpirationTime(element, container, parentComponent, expirationTime, callback) {
            var currentTime = recalculateCurrentTime();
            return _updateContainerAtExpirationTime(element, container, parentComponent, currentTime, expirationTime, callback);
          },
          flushRoot: flushRoot,
          requestWork: requestWork,
          computeUniqueAsyncExpiration: computeUniqueAsyncExpiration,
          batchedUpdates: batchedUpdates,
          unbatchedUpdates: unbatchedUpdates,
          deferredUpdates: deferredUpdates,
          syncUpdates: syncUpdates,
          interactiveUpdates: interactiveUpdates,
          flushInteractiveUpdates: flushInteractiveUpdates,
          flushControlled: flushControlled,
          flushSync: flushSync,
          getPublicRootInstance: function getPublicRootInstance(container) {
            var containerFiber = container.current;

            if (!containerFiber.child) {
              return null;
            }

            switch (containerFiber.child.tag) {
              case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);

              default:
                return containerFiber.child.stateNode;
            }
          },
          findHostInstance: findHostInstance,
          findHostInstanceWithNoPortals: function findHostInstanceWithNoPortals(fiber) {
            var hostFiber = findCurrentHostFiberWithNoPortals(fiber);

            if (hostFiber === null) {
              return null;
            }

            return hostFiber.stateNode;
          },
          injectIntoDevTools: function injectIntoDevTools(devToolsConfig) {
            var _findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
            return injectInternals(babelHelpers.extends({}, devToolsConfig, {
              findHostInstanceByFiber: function findHostInstanceByFiber(fiber) {
                return findHostInstance(fiber);
              },
              findFiberByHostInstance: function findFiberByHostInstance(instance) {
                if (!_findFiberByHostInstance) {
                  return null;
                }

                return _findFiberByHostInstance(instance);
              }
            }));
          }
        };
      };

      var ReactFiberReconciler$2 = Object.freeze({
        default: ReactFiberReconciler$1
      });
      var ReactFiberReconciler$3 = ReactFiberReconciler$2 && ReactFiberReconciler$1 || ReactFiberReconciler$2;
      var reactReconciler = ReactFiberReconciler$3["default"] ? ReactFiberReconciler$3["default"] : ReactFiberReconciler$3;
      var viewConfigCallbacks = new Map();
      var viewConfigs = new Map();

      function register(name, callback) {
        invariant(!viewConfigCallbacks.has(name), "Tried to register two views with the same name %s", name);
        viewConfigCallbacks.set(name, callback);
        return name;
      }

      function get$1(name) {
        var viewConfig = void 0;

        if (!viewConfigs.has(name)) {
          var callback = viewConfigCallbacks.get(name);
          invariant(typeof callback === "function", "View config not found for name %s", name);
          viewConfigCallbacks.set(name, null);
          viewConfig = callback();
          viewConfigs.set(name, viewConfig);
        } else {
          viewConfig = viewConfigs.get(name);
        }

        invariant(viewConfig, "View config not found for name %s", name);
        return viewConfig;
      }

      function _classCallCheck$2(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      var ReactNativeFiberHostComponent = function () {
        function ReactNativeFiberHostComponent(tag, viewConfig) {
          _classCallCheck$2(this, ReactNativeFiberHostComponent);

          this._nativeTag = tag;
          this._children = [];
          this.viewConfig = viewConfig;
        }

        ReactNativeFiberHostComponent.prototype.blur = function blur() {
          TextInputState.blurTextInput(this._nativeTag);
        };

        ReactNativeFiberHostComponent.prototype.focus = function focus() {
          TextInputState.focusTextInput(this._nativeTag);
        };

        ReactNativeFiberHostComponent.prototype.measure = function measure(callback) {
          UIManager.measure(this._nativeTag, mountSafeCallback(this, callback));
        };

        ReactNativeFiberHostComponent.prototype.measureInWindow = function measureInWindow(callback) {
          UIManager.measureInWindow(this._nativeTag, mountSafeCallback(this, callback));
        };

        ReactNativeFiberHostComponent.prototype.measureLayout = function measureLayout(relativeToNativeNode, onSuccess, onFail) {
          UIManager.measureLayout(this._nativeTag, relativeToNativeNode, mountSafeCallback(this, onFail), mountSafeCallback(this, onSuccess));
        };

        ReactNativeFiberHostComponent.prototype.setNativeProps = function setNativeProps(nativeProps) {
          {
            warnForStyleProps(nativeProps, this.viewConfig.validAttributes);
          }
          var updatePayload = create(nativeProps, this.viewConfig.validAttributes);

          if (updatePayload != null) {
            UIManager.updateView(this._nativeTag, this.viewConfig.uiViewClassName, updatePayload);
          }
        };

        return ReactNativeFiberHostComponent;
      }();

      var hasNativePerformanceNow = typeof performance === "object" && typeof performance.now === "function";
      var now = hasNativePerformanceNow ? function () {
        return performance.now();
      } : function () {
        return Date.now();
      };
      var scheduledCallback = null;
      var frameDeadline = 0;
      var frameDeadlineObject = {
        timeRemaining: function timeRemaining() {
          return frameDeadline - now();
        }
      };

      function setTimeoutCallback() {
        frameDeadline = now() + 5;
        var callback = scheduledCallback;
        scheduledCallback = null;

        if (callback !== null) {
          callback(frameDeadlineObject);
        }
      }

      function scheduleDeferredCallback(callback) {
        scheduledCallback = callback;
        return setTimeout(setTimeoutCallback, 1);
      }

      function cancelDeferredCallback(callbackID) {
        scheduledCallback = null;
        clearTimeout(callbackID);
      }

      function recursivelyUncacheFiberNode(node) {
        if (typeof node === "number") {
          uncacheFiberNode(node);
        } else {
          uncacheFiberNode(node._nativeTag);

          node._children.forEach(recursivelyUncacheFiberNode);
        }
      }

      var NativeRenderer = reactReconciler({
        appendInitialChild: function appendInitialChild(parentInstance, child) {
          parentInstance._children.push(child);
        },
        createInstance: function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
          var tag = ReactNativeTagHandles.allocateTag();
          var viewConfig = get$1(type);
          {
            for (var key in viewConfig.validAttributes) {
              if (props.hasOwnProperty(key)) {
                deepFreezeAndThrowOnMutationInDev(props[key]);
              }
            }
          }
          var updatePayload = create(props, viewConfig.validAttributes);
          UIManager.createView(tag, viewConfig.uiViewClassName, rootContainerInstance, updatePayload);
          var component = new ReactNativeFiberHostComponent(tag, viewConfig);
          precacheFiberNode(internalInstanceHandle, tag);
          updateFiberProps(tag, props);
          return component;
        },
        createTextInstance: function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
          var tag = ReactNativeTagHandles.allocateTag();
          UIManager.createView(tag, "RCTRawText", rootContainerInstance, {
            text: text
          });
          precacheFiberNode(internalInstanceHandle, tag);
          return tag;
        },
        finalizeInitialChildren: function finalizeInitialChildren(parentInstance, type, props, rootContainerInstance) {
          if (parentInstance._children.length === 0) {
            return false;
          }

          var nativeTags = parentInstance._children.map(function (child) {
            return typeof child === "number" ? child : child._nativeTag;
          });

          UIManager.setChildren(parentInstance._nativeTag, nativeTags);
          return false;
        },
        getRootHostContext: function getRootHostContext() {
          return emptyObject;
        },
        getChildHostContext: function getChildHostContext() {
          return emptyObject;
        },
        getPublicInstance: function getPublicInstance(instance) {
          return instance;
        },
        now: now,
        prepareForCommit: function prepareForCommit() {},
        prepareUpdate: function prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, hostContext) {
          return emptyObject;
        },
        resetAfterCommit: function resetAfterCommit() {},
        scheduleDeferredCallback: scheduleDeferredCallback,
        cancelDeferredCallback: cancelDeferredCallback,
        shouldDeprioritizeSubtree: function shouldDeprioritizeSubtree(type, props) {
          return false;
        },
        shouldSetTextContent: function shouldSetTextContent(type, props) {
          return false;
        },
        mutation: {
          appendChild: function appendChild(parentInstance, child) {
            var childTag = typeof child === "number" ? child : child._nativeTag;
            var children = parentInstance._children;
            var index = children.indexOf(child);

            if (index >= 0) {
              children.splice(index, 1);
              children.push(child);
              UIManager.manageChildren(parentInstance._nativeTag, [index], [children.length - 1], [], [], []);
            } else {
              children.push(child);
              UIManager.manageChildren(parentInstance._nativeTag, [], [], [childTag], [children.length - 1], []);
            }
          },
          appendChildToContainer: function appendChildToContainer(parentInstance, child) {
            var childTag = typeof child === "number" ? child : child._nativeTag;
            UIManager.setChildren(parentInstance, [childTag]);
          },
          commitTextUpdate: function commitTextUpdate(textInstance, oldText, newText) {
            UIManager.updateView(textInstance, "RCTRawText", {
              text: newText
            });
          },
          commitMount: function commitMount(instance, type, newProps, internalInstanceHandle) {},
          commitUpdate: function commitUpdate(instance, updatePayloadTODO, type, oldProps, newProps, internalInstanceHandle) {
            var viewConfig = instance.viewConfig;
            updateFiberProps(instance._nativeTag, newProps);
            var updatePayload = diff(oldProps, newProps, viewConfig.validAttributes);

            if (updatePayload != null) {
              UIManager.updateView(instance._nativeTag, viewConfig.uiViewClassName, updatePayload);
            }
          },
          insertBefore: function insertBefore(parentInstance, child, beforeChild) {
            var children = parentInstance._children;
            var index = children.indexOf(child);

            if (index >= 0) {
              children.splice(index, 1);
              var beforeChildIndex = children.indexOf(beforeChild);
              children.splice(beforeChildIndex, 0, child);
              UIManager.manageChildren(parentInstance._nativeTag, [index], [beforeChildIndex], [], [], []);
            } else {
              var _beforeChildIndex = children.indexOf(beforeChild);

              children.splice(_beforeChildIndex, 0, child);
              var childTag = typeof child === "number" ? child : child._nativeTag;
              UIManager.manageChildren(parentInstance._nativeTag, [], [], [childTag], [_beforeChildIndex], []);
            }
          },
          insertInContainerBefore: function insertInContainerBefore(parentInstance, child, beforeChild) {
            invariant(typeof parentInstance !== "number", "Container does not support insertBefore operation");
          },
          removeChild: function removeChild(parentInstance, child) {
            recursivelyUncacheFiberNode(child);
            var children = parentInstance._children;
            var index = children.indexOf(child);
            children.splice(index, 1);
            UIManager.manageChildren(parentInstance._nativeTag, [], [], [], [], [index]);
          },
          removeChildFromContainer: function removeChildFromContainer(parentInstance, child) {
            recursivelyUncacheFiberNode(child);
            UIManager.manageChildren(parentInstance, [], [], [], [], [0]);
          },
          resetTextContent: function resetTextContent(instance) {}
        }
      });
      var getInspectorDataForViewTag = void 0;
      {
        var traverseOwnerTreeUp = function traverseOwnerTreeUp(hierarchy, instance) {
          if (instance) {
            hierarchy.unshift(instance);
            traverseOwnerTreeUp(hierarchy, instance._debugOwner);
          }
        };

        var getOwnerHierarchy = function getOwnerHierarchy(instance) {
          var hierarchy = [];
          traverseOwnerTreeUp(hierarchy, instance);
          return hierarchy;
        };

        var lastNonHostInstance = function lastNonHostInstance(hierarchy) {
          for (var i = hierarchy.length - 1; i > 1; i--) {
            var instance = hierarchy[i];

            if (instance.tag !== HostComponent) {
              return instance;
            }
          }

          return hierarchy[0];
        };

        var getHostProps = function getHostProps(fiber) {
          var host = findCurrentHostFiber(fiber);

          if (host) {
            return host.memoizedProps || emptyObject;
          }

          return emptyObject;
        };

        var getHostNode = function getHostNode(fiber, findNodeHandle) {
          var hostNode = void 0;

          while (fiber) {
            if (fiber.stateNode !== null && fiber.tag === HostComponent) {
              hostNode = findNodeHandle(fiber.stateNode);
            }

            if (hostNode) {
              return hostNode;
            }

            fiber = fiber.child;
          }

          return null;
        };

        var createHierarchy = function createHierarchy(fiberHierarchy) {
          return fiberHierarchy.map(function (fiber) {
            return {
              name: getComponentName(fiber),
              getInspectorData: function getInspectorData(findNodeHandle) {
                return {
                  measure: function measure(callback) {
                    return UIManager.measure(getHostNode(fiber, findNodeHandle), callback);
                  },
                  props: getHostProps(fiber),
                  source: fiber._debugSource
                };
              }
            };
          });
        };

        getInspectorDataForViewTag = function getInspectorDataForViewTag(viewTag) {
          var closestInstance = getInstanceFromTag(viewTag);

          if (!closestInstance) {
            return {
              hierarchy: [],
              props: emptyObject,
              selection: null,
              source: null
            };
          }

          var fiber = findCurrentFiberUsingSlowPath(closestInstance);
          var fiberHierarchy = getOwnerHierarchy(fiber);
          var instance = lastNonHostInstance(fiberHierarchy);
          var hierarchy = createHierarchy(fiberHierarchy);
          var props = getHostProps(instance);
          var source = instance._debugSource;
          var selection = fiberHierarchy.indexOf(instance);
          return {
            hierarchy: hierarchy,
            props: props,
            selection: selection,
            source: source
          };
        };
      }

      var createReactNativeComponentClass = function createReactNativeComponentClass(name, callback) {
        return register(name, callback);
      };

      function takeSnapshot(view, options) {
        if (typeof view !== "number" && view !== "window") {
          view = findNumericNodeHandleFiber(view) || "window";
        }

        return UIManager.__takeSnapshot(view, options);
      }

      injectFindHostInstance(NativeRenderer.findHostInstance);
      injection$2.injectRenderer(NativeRenderer);
      var roots = new Map();
      var ReactNativeRenderer = {
        NativeComponent: ReactNativeComponent,
        findNodeHandle: findNumericNodeHandleFiber,
        render: function render(element, containerTag, callback) {
          var root = roots.get(containerTag);

          if (!root) {
            root = NativeRenderer.createContainer(containerTag, false, false);
            roots.set(containerTag, root);
          }

          NativeRenderer.updateContainer(element, root, null, callback);
          return NativeRenderer.getPublicRootInstance(root);
        },
        unmountComponentAtNode: function unmountComponentAtNode(containerTag) {
          var root = roots.get(containerTag);

          if (root) {
            NativeRenderer.updateContainer(null, root, null, function () {
              roots["delete"](containerTag);
            });
          }
        },
        unmountComponentAtNodeAndRemoveContainer: function unmountComponentAtNodeAndRemoveContainer(containerTag) {
          ReactNativeRenderer.unmountComponentAtNode(containerTag);
          UIManager.removeRootView(containerTag);
        },
        createPortal: function createPortal(children, containerTag) {
          var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
          return _createPortal(children, containerTag, null, key);
        },
        unstable_batchedUpdates: batchedUpdates,
        flushSync: NativeRenderer.flushSync,
        __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
          NativeMethodsMixin: NativeMethodsMixin,
          ReactNativeBridgeEventPlugin: ReactNativeBridgeEventPlugin,
          ReactNativeComponentTree: ReactNativeComponentTree,
          ReactNativePropRegistry: ReactNativePropRegistry,
          TouchHistoryMath: TouchHistoryMath,
          createReactNativeComponentClass: createReactNativeComponentClass,
          takeSnapshot: takeSnapshot
        }
      };
      {
        babelHelpers.extends(ReactNativeRenderer.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, {
          ReactDebugTool: {
            addHook: function addHook() {},
            removeHook: function removeHook() {}
          },
          ReactPerf: {
            start: function start() {},
            stop: function stop() {},
            printInclusive: function printInclusive() {},
            printWasted: function printWasted() {}
          }
        });
      }
      NativeRenderer.injectIntoDevTools({
        findFiberByHostInstance: getInstanceFromTag,
        getInspectorDataForViewTag: getInspectorDataForViewTag,
        bundleType: 1,
        version: ReactVersion,
        rendererPackageName: "react-native-renderer"
      });
      var ReactNativeRenderer$2 = Object.freeze({
        default: ReactNativeRenderer
      });
      var ReactNativeRenderer$3 = ReactNativeRenderer$2 && ReactNativeRenderer || ReactNativeRenderer$2;
      var reactNativeRenderer = ReactNativeRenderer$3["default"] ? ReactNativeRenderer$3["default"] : ReactNativeRenderer$3;
      module.exports = reactNativeRenderer;
    })();
  }
},22,[23,13,56,57,110,111,112,113,105,114,117,119,121,31,122,123],"ReactNativeRenderer-dev");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  if (global.GLOBAL === undefined) {
    global.GLOBAL = global;
  }

  if (global.window === undefined) {
    global.window = global;
  }

  var defineLazyObjectProperty = _require2(_dependencyMap[0], 'defineLazyObjectProperty');

  var _shouldPolyfillCollection = _require2(_dependencyMap[1], '_shouldPolyfillES6Collection');

  if (_shouldPolyfillCollection('Map')) {
    polyfillGlobal('Map', function () {
      return _require2(_dependencyMap[2], 'Map');
    });
  }

  if (_shouldPolyfillCollection('Set')) {
    polyfillGlobal('Set', function () {
      return _require2(_dependencyMap[3], 'Set');
    });
  }

  function defineLazyProperty(object, name, getValue) {
    var descriptor = Object.getOwnPropertyDescriptor(object, name);

    if (__DEV__ && descriptor) {
      var backupName = "original" + name[0].toUpperCase() + name.substr(1);
      Object.defineProperty(object, backupName, babelHelpers.extends({}, descriptor, {
        value: object[name]
      }));
    }

    var _ref = descriptor || {},
        enumerable = _ref.enumerable,
        writable = _ref.writable,
        configurable = _ref.configurable;

    if (descriptor && !configurable) {
      console.error('Failed to set polyfill. ' + name + ' is not configurable.');
      return;
    }

    defineLazyObjectProperty(object, name, {
      get: getValue,
      enumerable: enumerable !== false,
      writable: writable !== false
    });
  }

  function polyfillGlobal(name, getValue) {
    defineLazyProperty(global, name, getValue);
  }

  global.process = global.process || {};
  global.process.env = global.process.env || {};

  if (!global.process.env.NODE_ENV) {
    global.process.env.NODE_ENV = __DEV__ ? 'development' : 'production';
  }

  if (global.__RCTProfileIsProfiling) {
    var Systrace = _require2(_dependencyMap[4], 'Systrace');

    Systrace.installReactHook(true);
    Systrace.setEnabled(true);
  }

  var ExceptionsManager = _require2(_dependencyMap[5], 'ExceptionsManager');

  ExceptionsManager.installConsoleErrorReporter();

  if (!global.__fbDisableExceptionsManager) {
    var handleError = function handleError(e, isFatal) {
      try {
        ExceptionsManager.handleException(e, isFatal);
      } catch (ee) {
        console.log('Failed to print error: ', ee.message);
        throw e;
      }
    };

    var ErrorUtils = _require2(_dependencyMap[6], 'ErrorUtils');

    ErrorUtils.setGlobalHandler(handleError);
  }

  var ReactNativeVersionCheck = _require2(_dependencyMap[7], 'ReactNativeVersionCheck');

  ReactNativeVersionCheck.checkVersions();
  polyfillGlobal('Promise', function () {
    return _require2(_dependencyMap[8], 'Promise');
  });
  polyfillGlobal('regeneratorRuntime', function () {
    delete global.regeneratorRuntime;

    _require2(_dependencyMap[9], 'regenerator-runtime/runtime');

    return global.regeneratorRuntime;
  });

  var defineLazyTimer = function defineLazyTimer(name) {
    polyfillGlobal(name, function () {
      return _require2(_dependencyMap[10], 'JSTimers')[name];
    });
  };

  defineLazyTimer('setTimeout');
  defineLazyTimer('setInterval');
  defineLazyTimer('setImmediate');
  defineLazyTimer('clearTimeout');
  defineLazyTimer('clearInterval');
  defineLazyTimer('clearImmediate');
  defineLazyTimer('requestAnimationFrame');
  defineLazyTimer('cancelAnimationFrame');
  defineLazyTimer('requestIdleCallback');
  defineLazyTimer('cancelIdleCallback');
  polyfillGlobal('XMLHttpRequest', function () {
    return _require2(_dependencyMap[11], 'XMLHttpRequest');
  });
  polyfillGlobal('FormData', function () {
    return _require2(_dependencyMap[12], 'FormData');
  });
  polyfillGlobal('fetch', function () {
    return _require2(_dependencyMap[13], 'fetch').fetch;
  });
  polyfillGlobal('Headers', function () {
    return _require2(_dependencyMap[13], 'fetch').Headers;
  });
  polyfillGlobal('Request', function () {
    return _require2(_dependencyMap[13], 'fetch').Request;
  });
  polyfillGlobal('Response', function () {
    return _require2(_dependencyMap[13], 'fetch').Response;
  });
  polyfillGlobal('WebSocket', function () {
    return _require2(_dependencyMap[14], 'WebSocket');
  });
  polyfillGlobal('Blob', function () {
    return _require2(_dependencyMap[15], 'Blob');
  });
  polyfillGlobal('File', function () {
    return _require2(_dependencyMap[16], 'File');
  });
  polyfillGlobal('FileReader', function () {
    return _require2(_dependencyMap[17], 'FileReader');
  });
  polyfillGlobal('URL', function () {
    return _require2(_dependencyMap[18], 'URL');
  });

  if (!global.alert) {
    global.alert = function (text) {
      _require2(_dependencyMap[19], 'Alert').alert('Alert', '' + text);
    };
  }

  var navigator = global.navigator;

  if (navigator === undefined) {
    global.navigator = navigator = {};
  }

  defineLazyProperty(navigator, 'product', function () {
    return 'ReactNative';
  });
  defineLazyProperty(navigator, 'geolocation', function () {
    return _require2(_dependencyMap[20], 'Geolocation');
  });

  var BatchedBridge = _require2(_dependencyMap[21], 'BatchedBridge');

  BatchedBridge.registerLazyCallableModule('Systrace', function () {
    return _require2(_dependencyMap[4], 'Systrace');
  });
  BatchedBridge.registerLazyCallableModule('JSTimers', function () {
    return _require2(_dependencyMap[10], 'JSTimers');
  });
  BatchedBridge.registerLazyCallableModule('HeapCapture', function () {
    return _require2(_dependencyMap[22], 'HeapCapture');
  });
  BatchedBridge.registerLazyCallableModule('SamplingProfiler', function () {
    return _require2(_dependencyMap[23], 'SamplingProfiler');
  });
  BatchedBridge.registerLazyCallableModule('RCTLog', function () {
    return _require2(_dependencyMap[24], 'RCTLog');
  });
  BatchedBridge.registerLazyCallableModule('RCTDeviceEventEmitter', function () {
    return _require2(_dependencyMap[25], 'RCTDeviceEventEmitter');
  });
  BatchedBridge.registerLazyCallableModule('RCTNativeAppEventEmitter', function () {
    return _require2(_dependencyMap[26], 'RCTNativeAppEventEmitter');
  });
  BatchedBridge.registerLazyCallableModule('PerformanceLogger', function () {
    return _require2(_dependencyMap[27], 'PerformanceLogger');
  });
  BatchedBridge.registerLazyCallableModule('JSDevSupportModule', function () {
    return _require2(_dependencyMap[28], 'JSDevSupportModule');
  });

  global.fetchSegment = function (segmentId, callback) {
    var _require = _require2(_dependencyMap[29], 'NativeModules'),
        SegmentFetcher = _require.SegmentFetcher;

    if (!SegmentFetcher) {
      throw new Error('SegmentFetcher is missing. Please ensure that it is ' + 'included as a NativeModule.');
    }

    SegmentFetcher.fetchSegment(segmentId, function (errorObject) {
      if (errorObject) {
        var error = new Error(errorObject.message);
        error.code = errorObject.code;
        callback(error);
      }

      callback(null);
    });
  };

  if (__DEV__) {
    if (!global.__RCTProfileIsProfiling) {
      BatchedBridge.registerCallableModule('HMRClient', _require2(_dependencyMap[30], 'HMRClient'));

      if (!window.document) {
        _require2(_dependencyMap[31], 'setupDevtools');
      }

      var JSInspector = _require2(_dependencyMap[32], 'JSInspector');

      JSInspector.registerAgent(_require2(_dependencyMap[33], 'NetworkAgent'));
    }
  }
},23,[24,25,26,30,19,31,18,40,42,50,51,58,77,37,78,74,80,81,82,83,85,16,88,89,90,70,91,92,94,15,95,102,107,108],"InitializeCore");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  function defineLazyObjectProperty(object, name, descriptor) {
    var get = descriptor.get;
    var enumerable = descriptor.enumerable !== false;
    var writable = descriptor.writable !== false;
    var value = void 0;
    var valueSet = false;

    function getValue() {
      if (!valueSet) {
        valueSet = true;
        setValue(get());
      }

      return value;
    }

    function setValue(newValue) {
      value = newValue;
      valueSet = true;
      Object.defineProperty(object, name, {
        value: newValue,
        configurable: true,
        enumerable: enumerable,
        writable: writable
      });
    }

    Object.defineProperty(object, name, {
      get: getValue,
      set: setValue,
      configurable: true,
      enumerable: enumerable
    });
  }

  module.exports = defineLazyObjectProperty;
},24,[],"defineLazyObjectProperty");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  function _shouldActuallyPolyfillES6Collection(collectionName) {
    var Collection = global[collectionName];

    if (Collection == null) {
      return true;
    }

    if (typeof global.Symbol !== 'function') {
      return true;
    }

    var proto = Collection.prototype;
    return Collection == null || typeof Collection !== 'function' || typeof proto.clear !== 'function' || new Collection().size !== 0 || typeof proto.keys !== 'function' || typeof proto.forEach !== 'function';
  }

  var cache = {};

  function _shouldPolyfillES6Collection(collectionName) {
    var result = cache[collectionName];

    if (result !== undefined) {
      return result;
    }

    result = _shouldActuallyPolyfillES6Collection(collectionName);
    cache[collectionName] = result;
    return result;
  }

  module.exports = _shouldPolyfillES6Collection;
},25,[],"_shouldPolyfillES6Collection");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _shouldPolyfillES6Collection = _require(_dependencyMap[0], '_shouldPolyfillES6Collection');

  var guid = _require(_dependencyMap[1], 'guid');

  var isNode = _require(_dependencyMap[2], 'fbjs/lib/isNode');

  var toIterator = _require(_dependencyMap[3], 'toIterator');

  module.exports = function (global, undefined) {
    if (!_shouldPolyfillES6Collection('Map')) {
      return global.Map;
    }

    var KIND_KEY = 'key';
    var KIND_VALUE = 'value';
    var KIND_KEY_VALUE = 'key+value';
    var KEY_PREFIX = '$map_';
    var SECRET_SIZE_PROP;

    if (__DEV__) {
      SECRET_SIZE_PROP = '$size' + guid();
    }

    var OLD_IE_HASH_PREFIX = 'IE_HASH_';

    var Map = function () {
      function Map(iterable) {
        babelHelpers.classCallCheck(this, Map);

        if (!isObject(this)) {
          throw new TypeError('Wrong map object type.');
        }

        initMap(this);

        if (iterable != null) {
          var it = toIterator(iterable);
          var next;

          while (!(next = it.next()).done) {
            if (!isObject(next.value)) {
              throw new TypeError('Expected iterable items to be pair objects.');
            }

            this.set(next.value[0], next.value[1]);
          }
        }
      }

      babelHelpers.createClass(Map, [{
        key: "clear",
        value: function clear() {
          initMap(this);
        }
      }, {
        key: "has",
        value: function has(key) {
          var index = getIndex(this, key);
          return !!(index != null && this._mapData[index]);
        }
      }, {
        key: "set",
        value: function set(key, value) {
          var index = getIndex(this, key);

          if (index != null && this._mapData[index]) {
            this._mapData[index][1] = value;
          } else {
            index = this._mapData.push([key, value]) - 1;
            setIndex(this, key, index);

            if (__DEV__) {
              this[SECRET_SIZE_PROP] += 1;
            } else {
              this.size += 1;
            }
          }

          return this;
        }
      }, {
        key: "get",
        value: function get(key) {
          var index = getIndex(this, key);

          if (index == null) {
            return undefined;
          } else {
            return this._mapData[index][1];
          }
        }
      }, {
        key: "delete",
        value: function _delete(key) {
          var index = getIndex(this, key);

          if (index != null && this._mapData[index]) {
            setIndex(this, key, undefined);
            this._mapData[index] = undefined;

            if (__DEV__) {
              this[SECRET_SIZE_PROP] -= 1;
            } else {
              this.size -= 1;
            }

            return true;
          } else {
            return false;
          }
        }
      }, {
        key: "entries",
        value: function entries() {
          return new MapIterator(this, KIND_KEY_VALUE);
        }
      }, {
        key: "keys",
        value: function keys() {
          return new MapIterator(this, KIND_KEY);
        }
      }, {
        key: "values",
        value: function values() {
          return new MapIterator(this, KIND_VALUE);
        }
      }, {
        key: "forEach",
        value: function forEach(callback, thisArg) {
          if (typeof callback !== 'function') {
            throw new TypeError('Callback must be callable.');
          }

          var boundCallback = callback.bind(thisArg || undefined);
          var mapData = this._mapData;

          for (var i = 0; i < mapData.length; i++) {
            var entry = mapData[i];

            if (entry != null) {
              boundCallback(entry[1], entry[0], this);
            }
          }
        }
      }]);
      return Map;
    }();

    Map.prototype[toIterator.ITERATOR_SYMBOL] = Map.prototype.entries;

    var MapIterator = function () {
      function MapIterator(map, kind) {
        babelHelpers.classCallCheck(this, MapIterator);

        if (!(isObject(map) && map._mapData)) {
          throw new TypeError('Object is not a map.');
        }

        if ([KIND_KEY, KIND_KEY_VALUE, KIND_VALUE].indexOf(kind) === -1) {
          throw new Error('Invalid iteration kind.');
        }

        this._map = map;
        this._nextIndex = 0;
        this._kind = kind;
      }

      babelHelpers.createClass(MapIterator, [{
        key: "next",
        value: function next() {
          if (!this instanceof Map) {
            throw new TypeError('Expected to be called on a MapIterator.');
          }

          var map = this._map;
          var index = this._nextIndex;
          var kind = this._kind;

          if (map == null) {
            return createIterResultObject(undefined, true);
          }

          var entries = map._mapData;

          while (index < entries.length) {
            var record = entries[index];
            index += 1;
            this._nextIndex = index;

            if (record) {
              if (kind === KIND_KEY) {
                return createIterResultObject(record[0], false);
              } else if (kind === KIND_VALUE) {
                return createIterResultObject(record[1], false);
              } else if (kind) {
                return createIterResultObject(record, false);
              }
            }
          }

          this._map = undefined;
          return createIterResultObject(undefined, true);
        }
      }]);
      return MapIterator;
    }();

    MapIterator.prototype[toIterator.ITERATOR_SYMBOL] = function () {
      return this;
    };

    function getIndex(map, key) {
      if (isObject(key)) {
        var hash = getHash(key);
        return map._objectIndex[hash];
      } else {
        var prefixedKey = KEY_PREFIX + key;

        if (typeof key === 'string') {
          return map._stringIndex[prefixedKey];
        } else {
          return map._otherIndex[prefixedKey];
        }
      }
    }

    function setIndex(map, key, index) {
      var shouldDelete = index == null;

      if (isObject(key)) {
        var hash = getHash(key);

        if (shouldDelete) {
          delete map._objectIndex[hash];
        } else {
          map._objectIndex[hash] = index;
        }
      } else {
        var prefixedKey = KEY_PREFIX + key;

        if (typeof key === 'string') {
          if (shouldDelete) {
            delete map._stringIndex[prefixedKey];
          } else {
            map._stringIndex[prefixedKey] = index;
          }
        } else {
          if (shouldDelete) {
            delete map._otherIndex[prefixedKey];
          } else {
            map._otherIndex[prefixedKey] = index;
          }
        }
      }
    }

    function initMap(map) {
      map._mapData = [];
      map._objectIndex = {};
      map._stringIndex = {};
      map._otherIndex = {};

      if (__DEV__) {
        if (isES5) {
          if (map.hasOwnProperty(SECRET_SIZE_PROP)) {
            map[SECRET_SIZE_PROP] = 0;
          } else {
            Object.defineProperty(map, SECRET_SIZE_PROP, {
              value: 0,
              writable: true
            });
            Object.defineProperty(map, 'size', {
              set: function set(v) {
                console.error('PLEASE FIX ME: You are changing the map size property which ' + 'should not be writable and will break in production.');
                throw new Error('The map size property is not writable.');
              },
              get: function get() {
                return map[SECRET_SIZE_PROP];
              }
            });
          }

          return;
        }
      }

      map.size = 0;
    }

    function isObject(o) {
      return o != null && (typeof o === 'object' || typeof o === 'function');
    }

    function createIterResultObject(value, done) {
      return {
        value: value,
        done: done
      };
    }

    var isES5 = function () {
      try {
        Object.defineProperty({}, 'x', {});
        return true;
      } catch (e) {
        return false;
      }
    }();

    function isExtensible(o) {
      if (!isES5) {
        return true;
      } else {
        return Object.isExtensible(o);
      }
    }

    function getIENodeHash(node) {
      var uniqueID;

      switch (node.nodeType) {
        case 1:
          uniqueID = node.uniqueID;
          break;

        case 9:
          uniqueID = node.documentElement.uniqueID;
          break;

        default:
          return null;
      }

      if (uniqueID) {
        return OLD_IE_HASH_PREFIX + uniqueID;
      } else {
        return null;
      }
    }

    var getHash = function () {
      var propIsEnumerable = Object.prototype.propertyIsEnumerable;
      var hashProperty = guid();
      var hashCounter = 0;
      return function getHash(o) {
        if (o[hashProperty]) {
          return o[hashProperty];
        } else if (!isES5 && o.propertyIsEnumerable && o.propertyIsEnumerable[hashProperty]) {
          return o.propertyIsEnumerable[hashProperty];
        } else if (!isES5 && isNode(o) && getIENodeHash(o)) {
          return getIENodeHash(o);
        } else if (!isES5 && o[hashProperty]) {
          return o[hashProperty];
        }

        if (isExtensible(o)) {
          hashCounter += 1;

          if (isES5) {
            Object.defineProperty(o, hashProperty, {
              enumerable: false,
              writable: false,
              configurable: false,
              value: hashCounter
            });
          } else if (o.propertyIsEnumerable) {
            o.propertyIsEnumerable = function () {
              return propIsEnumerable.apply(this, arguments);
            };

            o.propertyIsEnumerable[hashProperty] = hashCounter;
          } else if (isNode(o)) {
            o[hashProperty] = hashCounter;
          } else {
            throw new Error('Unable to set a non-enumerable property on object.');
          }

          return hashCounter;
        } else {
          throw new Error('Non-extensible objects are not allowed as keys.');
        }
      };
    }();

    return Map;
  }(Function('return this')());
},26,[25,27,28,29],"Map");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  function guid() {
    return 'f' + (Math.random() * (1 << 30)).toString(16).replace('.', '');
  }

  module.exports = guid;
},27,[],"guid");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  function isNode(object) {
    var doc = object ? object.ownerDocument || object : document;
    var defaultView = doc.defaultView || window;
    return !!(object && (typeof defaultView.Node === 'function' ? object instanceof defaultView.Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
  }

  module.exports = isNode;
},28,[],"node_modules/fbjs/lib/isNode.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var KIND_KEY = 'key';
  var KIND_VALUE = 'value';
  var KIND_KEY_VAL = 'key+value';
  var ITERATOR_SYMBOL = typeof Symbol === 'function' ? typeof Symbol === "function" ? Symbol.iterator : "@@iterator" : '@@iterator';

  var toIterator = function () {
    if (!(Array.prototype[ITERATOR_SYMBOL] && String.prototype[ITERATOR_SYMBOL])) {
      return function () {
        var ArrayIterator = function () {
          function ArrayIterator(array, kind) {
            babelHelpers.classCallCheck(this, ArrayIterator);

            if (!Array.isArray(array)) {
              throw new TypeError('Object is not an Array');
            }

            this._iteratedObject = array;
            this._kind = kind;
            this._nextIndex = 0;
          }

          babelHelpers.createClass(ArrayIterator, [{
            key: "next",
            value: function next() {
              if (!this instanceof ArrayIterator) {
                throw new TypeError('Object is not an ArrayIterator');
              }

              if (this._iteratedObject == null) {
                return createIterResultObject(undefined, true);
              }

              var array = this._iteratedObject;
              var len = this._iteratedObject.length;
              var index = this._nextIndex;
              var kind = this._kind;

              if (index >= len) {
                this._iteratedObject = undefined;
                return createIterResultObject(undefined, true);
              }

              this._nextIndex = index + 1;

              if (kind === KIND_KEY) {
                return createIterResultObject(index, false);
              } else if (kind === KIND_VALUE) {
                return createIterResultObject(array[index], false);
              } else if (kind === KIND_KEY_VAL) {
                return createIterResultObject([index, array[index]], false);
              }
            }
          }, {
            key: '@@iterator',
            value: function iterator() {
              return this;
            }
          }]);
          return ArrayIterator;
        }();

        var StringIterator = function () {
          function StringIterator(string) {
            babelHelpers.classCallCheck(this, StringIterator);

            if (typeof string !== 'string') {
              throw new TypeError('Object is not a string');
            }

            this._iteratedString = string;
            this._nextIndex = 0;
          }

          babelHelpers.createClass(StringIterator, [{
            key: "next",
            value: function next() {
              if (!this instanceof StringIterator) {
                throw new TypeError('Object is not a StringIterator');
              }

              if (this._iteratedString == null) {
                return createIterResultObject(undefined, true);
              }

              var index = this._nextIndex;
              var s = this._iteratedString;
              var len = s.length;

              if (index >= len) {
                this._iteratedString = undefined;
                return createIterResultObject(undefined, true);
              }

              var ret;
              var first = s.charCodeAt(index);

              if (first < 0xD800 || first > 0xDBFF || index + 1 === len) {
                ret = s[index];
              } else {
                var second = s.charCodeAt(index + 1);

                if (second < 0xDC00 || second > 0xDFFF) {
                  ret = s[index];
                } else {
                  ret = s[index] + s[index + 1];
                }
              }

              this._nextIndex = index + ret.length;
              return createIterResultObject(ret, false);
            }
          }, {
            key: '@@iterator',
            value: function iterator() {
              return this;
            }
          }]);
          return StringIterator;
        }();

        function createIterResultObject(value, done) {
          return {
            value: value,
            done: done
          };
        }

        return function (object, kind) {
          if (typeof object === 'string') {
            return new StringIterator(object);
          } else if (Array.isArray(object)) {
            return new ArrayIterator(object, kind || KIND_VALUE);
          } else {
            return object[ITERATOR_SYMBOL]();
          }
        };
      }();
    } else {
      return function (object) {
        return object[ITERATOR_SYMBOL]();
      };
    }
  }();

  babelHelpers.extends(toIterator, {
    KIND_KEY: KIND_KEY,
    KIND_VALUE: KIND_VALUE,
    KIND_KEY_VAL: KIND_KEY_VAL,
    ITERATOR_SYMBOL: ITERATOR_SYMBOL
  });
  module.exports = toIterator;
},29,[],"toIterator");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var Map = _require(_dependencyMap[0], 'Map');

  var _shouldPolyfillES6Collection = _require(_dependencyMap[1], '_shouldPolyfillES6Collection');

  var toIterator = _require(_dependencyMap[2], 'toIterator');

  module.exports = function (global) {
    if (!_shouldPolyfillES6Collection('Set')) {
      return global.Set;
    }

    var Set = function () {
      function Set(iterable) {
        babelHelpers.classCallCheck(this, Set);

        if (this == null || typeof this !== 'object' && typeof this !== 'function') {
          throw new TypeError('Wrong set object type.');
        }

        initSet(this);

        if (iterable != null) {
          var it = toIterator(iterable);
          var next;

          while (!(next = it.next()).done) {
            this.add(next.value);
          }
        }
      }

      babelHelpers.createClass(Set, [{
        key: "add",
        value: function add(value) {
          this._map.set(value, value);

          this.size = this._map.size;
          return this;
        }
      }, {
        key: "clear",
        value: function clear() {
          initSet(this);
        }
      }, {
        key: "delete",
        value: function _delete(value) {
          var ret = this._map.delete(value);

          this.size = this._map.size;
          return ret;
        }
      }, {
        key: "entries",
        value: function entries() {
          return this._map.entries();
        }
      }, {
        key: "forEach",
        value: function forEach(callback) {
          var thisArg = arguments[1];

          var it = this._map.keys();

          var next;

          while (!(next = it.next()).done) {
            callback.call(thisArg, next.value, next.value, this);
          }
        }
      }, {
        key: "has",
        value: function has(value) {
          return this._map.has(value);
        }
      }, {
        key: "values",
        value: function values() {
          return this._map.values();
        }
      }]);
      return Set;
    }();

    Set.prototype[toIterator.ITERATOR_SYMBOL] = Set.prototype.values;
    Set.prototype.keys = Set.prototype.values;

    function initSet(set) {
      set._map = new Map();
      set.size = set._map.size;
    }

    return Set;
  }(Function('return this')());
},30,[26,25,29],"Set");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var exceptionID = 0;

  function reportException(e, isFatal) {
    var _require = _require2(_dependencyMap[0], 'NativeModules'),
        ExceptionsManager = _require.ExceptionsManager;

    if (ExceptionsManager) {
      var parseErrorStack = _require2(_dependencyMap[1], 'parseErrorStack');

      var stack = parseErrorStack(e);
      var currentExceptionID = ++exceptionID;

      if (isFatal) {
        ExceptionsManager.reportFatalException(e.message, stack, currentExceptionID);
      } else {
        ExceptionsManager.reportSoftException(e.message, stack, currentExceptionID);
      }

      if (__DEV__) {
        var symbolicateStackTrace = _require2(_dependencyMap[2], 'symbolicateStackTrace');

        symbolicateStackTrace(stack).then(function (prettyStack) {
          if (prettyStack) {
            ExceptionsManager.updateExceptionMessage(e.message, prettyStack, currentExceptionID);
          } else {
            throw new Error('The stack is null');
          }
        }).catch(function (error) {
          return console.warn('Unable to symbolicate stack trace: ' + error.message);
        });
      }
    }
  }

  function handleException(e, isFatal) {
    if (!e.message) {
      e = new Error(e);
    }

    if (console._errorOriginal) {
      console._errorOriginal(e.message);
    } else {
      console.error(e.message);
    }

    reportException(e, isFatal);
  }

  function reactConsoleErrorHandler() {
    console._errorOriginal.apply(console, arguments);

    if (!console.reportErrorsAsExceptions) {
      return;
    }

    if (arguments[0] && arguments[0].stack) {
      reportException(arguments[0], false);
    } else {
      var stringifySafe = _require2(_dependencyMap[3], 'stringifySafe');

      var str = Array.prototype.map.call(arguments, stringifySafe).join(', ');

      if (str.slice(0, 10) === '"Warning: ') {
        return;
      }

      var error = new Error('console.error: ' + str);
      error.framesToPop = 1;
      reportException(error, false);
    }
  }

  function installConsoleErrorReporter() {
    if (console._errorOriginal) {
      return;
    }

    console._errorOriginal = console.error.bind(console);
    console.error = reactConsoleErrorHandler;

    if (console.reportErrorsAsExceptions === undefined) {
      console.reportErrorsAsExceptions = true;
    }
  }

  module.exports = {
    handleException: handleException,
    installConsoleErrorReporter: installConsoleErrorReporter
  };
},31,[15,32,35,39],"ExceptionsManager");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  function parseErrorStack(e) {
    if (!e || !e.stack) {
      return [];
    }

    var stacktraceParser = _require(_dependencyMap[0], 'stacktrace-parser');

    var stack = Array.isArray(e.stack) ? e.stack : stacktraceParser.parse(e.stack);
    var framesToPop = typeof e.framesToPop === 'number' ? e.framesToPop : 0;

    while (framesToPop--) {
      stack.shift();
    }

    return stack;
  }

  module.exports = parseErrorStack;
},32,[33],"parseErrorStack");
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = _require(_dependencyMap[0], './lib/stacktrace-parser.js');
},33,[34],"node_modules/stacktrace-parser/index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    var UNKNOWN_FUNCTION = '<unknown>';
    var StackTraceParser = {
        parse: function parse(stackString) {
            var chrome = /^\s*at (?:(?:(?:Anonymous function)?|((?:\[object object\])?\S+(?: \[as \S+\])?)) )?\(?((?:file|http|https):.*?):(\d+)(?::(\d+))?\)?\s*$/i,
                gecko = /^(?:\s*([^@]*)(?:\((.*?)\))?@)?(\S.*?):(\d+)(?::(\d+))?\s*$/i,
                node = /^\s*at (?:((?:\[object object\])?\S+(?: \[as \S+\])?) )?\(?(.*?):(\d+)(?::(\d+))?\)?\s*$/i,
                lines = stackString.split('\n'),
                stack = [],
                parts,
                element;

            for (var i = 0, j = lines.length; i < j; ++i) {
                if (parts = gecko.exec(lines[i])) {
                    element = {
                        'file': parts[3],
                        'methodName': parts[1] || UNKNOWN_FUNCTION,
                        'lineNumber': +parts[4],
                        'column': parts[5] ? +parts[5] : null
                    };
                } else if (parts = chrome.exec(lines[i])) {
                    element = {
                        'file': parts[2],
                        'methodName': parts[1] || UNKNOWN_FUNCTION,
                        'lineNumber': +parts[3],
                        'column': parts[4] ? +parts[4] : null
                    };
                } else if (parts = node.exec(lines[i])) {
                    element = {
                        'file': parts[2],
                        'methodName': parts[1] || UNKNOWN_FUNCTION,
                        'lineNumber': +parts[3],
                        'column': parts[4] ? +parts[4] : null
                    };
                } else {
                    continue;
                }

                stack.push(element);
            }

            return stack;
        }
    };
    module.exports = StackTraceParser;
},34,[],"node_modules/stacktrace-parser/lib/stacktrace-parser.js");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var getDevServer = _require2(_dependencyMap[0], 'getDevServer');

  var _require = _require2(_dependencyMap[1], 'NativeModules'),
      SourceCode = _require.SourceCode;

  var fetch = void 0;

  function isSourcedFromDisk(sourcePath) {
    return !/^http/.test(sourcePath) && /[\\/]/.test(sourcePath);
  }

  function symbolicateStackTrace(stack) {
    var devServer, stackCopy, foundInternalSource, response, json;
    return regeneratorRuntime.async(function symbolicateStackTrace$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!fetch) {
              fetch = global.fetch || _require2(_dependencyMap[2], 'fetch').fetch;
            }

            devServer = getDevServer();

            if (devServer.bundleLoadedFromServer) {
              _context.next = 4;
              break;
            }

            throw new Error('Bundle was not loaded from the packager');

          case 4:
            stackCopy = stack;

            if (SourceCode.scriptURL) {
              foundInternalSource = false;
              stackCopy = stack.map(function (frame) {
                if (!foundInternalSource && isSourcedFromDisk(frame.file)) {
                  return babelHelpers.extends({}, frame, {
                    file: SourceCode.scriptURL
                  });
                }

                foundInternalSource = true;
                return frame;
              });
            }

            _context.next = 8;
            return regeneratorRuntime.awrap(fetch(devServer.url + 'symbolicate', {
              method: 'POST',
              body: JSON.stringify({
                stack: stackCopy
              })
            }));

          case 8:
            response = _context.sent;
            _context.next = 11;
            return regeneratorRuntime.awrap(response.json());

          case 11:
            json = _context.sent;
            return _context.abrupt("return", json.stack);

          case 13:
          case "end":
            return _context.stop();
        }
      }
    }, null, this);
  }

  module.exports = symbolicateStackTrace;
},35,[36,15,37],"symbolicateStackTrace");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _require = _require2(_dependencyMap[0], 'NativeModules'),
      SourceCode = _require.SourceCode;

  var _cachedDevServerURL = void 0;

  var FALLBACK = 'http://localhost:8081/';

  function getDevServer() {
    if (_cachedDevServerURL === undefined) {
      var match = SourceCode.scriptURL && SourceCode.scriptURL.match(/^https?:\/\/.*?\//);
      _cachedDevServerURL = match ? match[0] : null;
    }

    return {
      url: _cachedDevServerURL || FALLBACK,
      bundleLoadedFromServer: _cachedDevServerURL !== null
    };
  }

  module.exports = getDevServer;
},36,[15],"getDevServer");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _whatwgFetch = _require(_dependencyMap[0], "whatwg-fetch");

  var _whatwgFetch2 = babelHelpers.interopRequireDefault(_whatwgFetch);

  if (_whatwgFetch2.default && _whatwgFetch2.default.fetch) {
    module.exports = _whatwgFetch2.default;
  } else {
    module.exports = {
      fetch: fetch,
      Headers: Headers,
      Request: Request,
      Response: Response
    };
  }
},37,[38],"fetch");
__d(function (global, _require, module, exports, _dependencyMap) {
  (function (self) {
    'use strict';

    if (self.fetch) {
      return;
    }

    var support = {
      searchParams: 'URLSearchParams' in self,
      iterable: 'Symbol' in self && 'iterator' in Symbol,
      blob: 'FileReader' in self && 'Blob' in self && function () {
        try {
          new Blob();
          return true;
        } catch (e) {
          return false;
        }
      }(),
      formData: 'FormData' in self,
      arrayBuffer: 'ArrayBuffer' in self
    };

    if (support.arrayBuffer) {
      var viewClasses = ['[object Int8Array]', '[object Uint8Array]', '[object Uint8ClampedArray]', '[object Int16Array]', '[object Uint16Array]', '[object Int32Array]', '[object Uint32Array]', '[object Float32Array]', '[object Float64Array]'];

      var isDataView = function isDataView(obj) {
        return obj && DataView.prototype.isPrototypeOf(obj);
      };

      var isArrayBufferView = ArrayBuffer.isView || function (obj) {
        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
      };
    }

    function normalizeName(name) {
      if (typeof name !== 'string') {
        name = String(name);
      }

      if (/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(name)) {
        throw new TypeError('Invalid character in header field name');
      }

      return name.toLowerCase();
    }

    function normalizeValue(value) {
      if (typeof value !== 'string') {
        value = String(value);
      }

      return value;
    }

    function iteratorFor(items) {
      var iterator = {
        next: function next() {
          var value = items.shift();
          return {
            done: value === undefined,
            value: value
          };
        }
      };

      if (support.iterable) {
        iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"] = function () {
          return iterator;
        };
      }

      return iterator;
    }

    function Headers(headers) {
      this.map = {};

      if (headers instanceof Headers) {
        headers.forEach(function (value, name) {
          this.append(name, value);
        }, this);
      } else if (headers) {
        Object.getOwnPropertyNames(headers).forEach(function (name) {
          this.append(name, headers[name]);
        }, this);
      }
    }

    Headers.prototype.append = function (name, value) {
      name = normalizeName(name);
      value = normalizeValue(value);
      var list = this.map[name];

      if (!list) {
        list = [];
        this.map[name] = list;
      }

      list.push(value);
    };

    Headers.prototype['delete'] = function (name) {
      delete this.map[normalizeName(name)];
    };

    Headers.prototype.get = function (name) {
      var values = this.map[normalizeName(name)];
      return values ? values[0] : null;
    };

    Headers.prototype.getAll = function (name) {
      return this.map[normalizeName(name)] || [];
    };

    Headers.prototype.has = function (name) {
      return this.map.hasOwnProperty(normalizeName(name));
    };

    Headers.prototype.set = function (name, value) {
      this.map[normalizeName(name)] = [normalizeValue(value)];
    };

    Headers.prototype.forEach = function (callback, thisArg) {
      Object.getOwnPropertyNames(this.map).forEach(function (name) {
        this.map[name].forEach(function (value) {
          callback.call(thisArg, value, name, this);
        }, this);
      }, this);
    };

    Headers.prototype.keys = function () {
      var items = [];
      this.forEach(function (value, name) {
        items.push(name);
      });
      return iteratorFor(items);
    };

    Headers.prototype.values = function () {
      var items = [];
      this.forEach(function (value) {
        items.push(value);
      });
      return iteratorFor(items);
    };

    Headers.prototype.entries = function () {
      var items = [];
      this.forEach(function (value, name) {
        items.push([name, value]);
      });
      return iteratorFor(items);
    };

    if (support.iterable) {
      Headers.prototype[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"] = Headers.prototype.entries;
    }

    function consumed(body) {
      if (body.bodyUsed) {
        return Promise.reject(new TypeError('Already read'));
      }

      body.bodyUsed = true;
    }

    function fileReaderReady(reader) {
      return new Promise(function (resolve, reject) {
        reader.onload = function () {
          resolve(reader.result);
        };

        reader.onerror = function () {
          reject(reader.error);
        };
      });
    }

    function readBlobAsArrayBuffer(blob) {
      var reader = new FileReader();
      var promise = fileReaderReady(reader);
      reader.readAsArrayBuffer(blob);
      return promise;
    }

    function readBlobAsText(blob) {
      var reader = new FileReader();
      var promise = fileReaderReady(reader);
      reader.readAsText(blob);
      return promise;
    }

    function readArrayBufferAsText(buf) {
      var view = new Uint8Array(buf);
      var chars = new Array(view.length);

      for (var i = 0; i < view.length; i++) {
        chars[i] = String.fromCharCode(view[i]);
      }

      return chars.join('');
    }

    function bufferClone(buf) {
      if (buf.slice) {
        return buf.slice(0);
      } else {
        var view = new Uint8Array(buf.byteLength);
        view.set(new Uint8Array(buf));
        return view.buffer;
      }
    }

    function Body() {
      this.bodyUsed = false;

      this._initBody = function (body) {
        this._bodyInit = body;

        if (!body) {
          this._bodyText = '';
        } else if (typeof body === 'string') {
          this._bodyText = body;
        } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
          this._bodyBlob = body;
        } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
          this._bodyFormData = body;
        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
          this._bodyText = body.toString();
        } else if (support.arrayBuffer && support.blob && isDataView(body)) {
          this._bodyArrayBuffer = bufferClone(body.buffer);
          this._bodyInit = new Blob([this._bodyArrayBuffer]);
        } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
          this._bodyArrayBuffer = bufferClone(body);
        } else {
          throw new Error('unsupported BodyInit type');
        }

        if (!this.headers.get('content-type')) {
          if (typeof body === 'string') {
            this.headers.set('content-type', 'text/plain;charset=UTF-8');
          } else if (this._bodyBlob && this._bodyBlob.type) {
            this.headers.set('content-type', this._bodyBlob.type);
          } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
            this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
          }
        }
      };

      if (support.blob) {
        this.blob = function () {
          var rejected = consumed(this);

          if (rejected) {
            return rejected;
          }

          if (this._bodyBlob) {
            return Promise.resolve(this._bodyBlob);
          } else if (this._bodyArrayBuffer) {
            return Promise.resolve(new Blob([this._bodyArrayBuffer]));
          } else if (this._bodyFormData) {
            throw new Error('could not read FormData body as blob');
          } else {
            return Promise.resolve(new Blob([this._bodyText]));
          }
        };

        this.arrayBuffer = function () {
          if (this._bodyArrayBuffer) {
            return consumed(this) || Promise.resolve(this._bodyArrayBuffer);
          } else {
            return this.blob().then(readBlobAsArrayBuffer);
          }
        };
      }

      this.text = function () {
        var rejected = consumed(this);

        if (rejected) {
          return rejected;
        }

        if (this._bodyBlob) {
          return readBlobAsText(this._bodyBlob);
        } else if (this._bodyArrayBuffer) {
          return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
        } else if (this._bodyFormData) {
          throw new Error('could not read FormData body as text');
        } else {
          return Promise.resolve(this._bodyText);
        }
      };

      if (support.formData) {
        this.formData = function () {
          return this.text().then(decode);
        };
      }

      this.json = function () {
        return this.text().then(JSON.parse);
      };

      return this;
    }

    var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];

    function normalizeMethod(method) {
      var upcased = method.toUpperCase();
      return methods.indexOf(upcased) > -1 ? upcased : method;
    }

    function Request(input, options) {
      options = options || {};
      var body = options.body;

      if (typeof input === 'string') {
        this.url = input;
      } else {
        if (input.bodyUsed) {
          throw new TypeError('Already read');
        }

        this.url = input.url;
        this.credentials = input.credentials;

        if (!options.headers) {
          this.headers = new Headers(input.headers);
        }

        this.method = input.method;
        this.mode = input.mode;

        if (!body && input._bodyInit != null) {
          body = input._bodyInit;
          input.bodyUsed = true;
        }
      }

      this.credentials = options.credentials || this.credentials || 'omit';

      if (options.headers || !this.headers) {
        this.headers = new Headers(options.headers);
      }

      this.method = normalizeMethod(options.method || this.method || 'GET');
      this.mode = options.mode || this.mode || null;
      this.referrer = null;

      if ((this.method === 'GET' || this.method === 'HEAD') && body) {
        throw new TypeError('Body not allowed for GET or HEAD requests');
      }

      this._initBody(body);
    }

    Request.prototype.clone = function () {
      return new Request(this, {
        body: this._bodyInit
      });
    };

    function decode(body) {
      var form = new FormData();
      body.trim().split('&').forEach(function (bytes) {
        if (bytes) {
          var split = bytes.split('=');
          var name = split.shift().replace(/\+/g, ' ');
          var value = split.join('=').replace(/\+/g, ' ');
          form.append(decodeURIComponent(name), decodeURIComponent(value));
        }
      });
      return form;
    }

    function parseHeaders(rawHeaders) {
      var headers = new Headers();
      rawHeaders.split('\r\n').forEach(function (line) {
        var parts = line.split(':');
        var key = parts.shift().trim();

        if (key) {
          var value = parts.join(':').trim();
          headers.append(key, value);
        }
      });
      return headers;
    }

    Body.call(Request.prototype);

    function Response(bodyInit, options) {
      if (!options) {
        options = {};
      }

      this.type = 'default';
      this.status = 'status' in options ? options.status : 200;
      this.ok = this.status >= 200 && this.status < 300;
      this.statusText = 'statusText' in options ? options.statusText : 'OK';
      this.headers = new Headers(options.headers);
      this.url = options.url || '';

      this._initBody(bodyInit);
    }

    Body.call(Response.prototype);

    Response.prototype.clone = function () {
      return new Response(this._bodyInit, {
        status: this.status,
        statusText: this.statusText,
        headers: new Headers(this.headers),
        url: this.url
      });
    };

    Response.error = function () {
      var response = new Response(null, {
        status: 0,
        statusText: ''
      });
      response.type = 'error';
      return response;
    };

    var redirectStatuses = [301, 302, 303, 307, 308];

    Response.redirect = function (url, status) {
      if (redirectStatuses.indexOf(status) === -1) {
        throw new RangeError('Invalid status code');
      }

      return new Response(null, {
        status: status,
        headers: {
          location: url
        }
      });
    };

    self.Headers = Headers;
    self.Request = Request;
    self.Response = Response;

    self.fetch = function (input, init) {
      return new Promise(function (resolve, reject) {
        var request = new Request(input, init);
        var xhr = new XMLHttpRequest();

        xhr.onload = function () {
          var options = {
            status: xhr.status,
            statusText: xhr.statusText,
            headers: parseHeaders(xhr.getAllResponseHeaders() || '')
          };
          options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
          var body = 'response' in xhr ? xhr.response : xhr.responseText;
          resolve(new Response(body, options));
        };

        xhr.onerror = function () {
          reject(new TypeError('Network request failed'));
        };

        xhr.ontimeout = function () {
          reject(new TypeError('Network request failed'));
        };

        xhr.open(request.method, request.url, true);

        if (request.credentials === 'include') {
          xhr.withCredentials = true;
        }

        if ('responseType' in xhr && support.blob) {
          xhr.responseType = 'blob';
        }

        request.headers.forEach(function (value, name) {
          xhr.setRequestHeader(name, value);
        });
        xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
      });
    };

    self.fetch.polyfill = true;
  })(typeof self !== 'undefined' ? self : this);
},38,[],"node_modules/whatwg-fetch/fetch.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  function stringifySafe(arg) {
    var ret;
    var type = typeof arg;

    if (arg === undefined) {
      ret = 'undefined';
    } else if (arg === null) {
      ret = 'null';
    } else if (type === 'string') {
      ret = '"' + arg + '"';
    } else if (type === 'function') {
      try {
        ret = arg.toString();
      } catch (e) {
        ret = '[function unknown]';
      }
    } else {
      try {
        ret = JSON.stringify(arg);
      } catch (e) {
        if (typeof arg.toString === 'function') {
          try {
            ret = arg.toString();
          } catch (E) {}
        }
      }
    }

    return ret || '["' + type + '" failed to stringify]';
  }

  module.exports = stringifySafe;
},39,[],"stringifySafe");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _require = _require2(_dependencyMap[0], 'NativeModules'),
      PlatformConstants = _require.PlatformConstants;

  var ReactNativeVersion = _require2(_dependencyMap[1], 'ReactNativeVersion');

  exports.checkVersions = function checkVersions() {
    if (!PlatformConstants) {
      return;
    }

    var nativeVersion = PlatformConstants.reactNativeVersion;

    if (ReactNativeVersion.version.major !== nativeVersion.major || ReactNativeVersion.version.minor !== nativeVersion.minor) {
      console.error("React Native version mismatch.\n\nJavaScript version: " + _formatVersion(ReactNativeVersion.version) + "\n" + ("Native version: " + _formatVersion(nativeVersion) + "\n\n") + 'Make sure that you have rebuilt the native code. If the problem ' + 'persists try clearing the Watchman and packager caches with ' + '`watchman watch-del-all && react-native start --reset-cache`.');
    }
  };

  function _formatVersion(version) {
    return version.major + "." + version.minor + "." + version.patch + (version.prerelease !== null ? "-" + version.prerelease : '');
  }
},40,[15,41],"ReactNativeVersionCheck");
__d(function (global, _require, module, exports, _dependencyMap) {
  exports.version = {
    major: 0,
    minor: 54,
    patch: 4,
    prerelease: null
  };
},41,[],"ReactNativeVersion");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var Promise = _require(_dependencyMap[0], 'fbjs/lib/Promise.native');

  if (__DEV__) {
    _require(_dependencyMap[1], 'promise/setimmediate/rejection-tracking').enable({
      allRejections: true,
      onUnhandled: function onUnhandled(id) {
        var error = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var message = void 0;
        var stack = void 0;
        var stringValue = Object.prototype.toString.call(error);

        if (stringValue === '[object Error]') {
          message = Error.prototype.toString.call(error);
          stack = error.stack;
        } else {
          message = _require(_dependencyMap[2], 'pretty-format')(error);
        }

        var warning = "Possible Unhandled Promise Rejection (id: " + id + "):\n" + (message + "\n") + (stack == null ? '' : stack);
        console.warn(warning);
      },
      onHandled: function onHandled(id) {
        var warning = "Promise Rejection Handled (id: " + id + ")\n" + 'This means you can ignore any previous messages of the form ' + ("\"Possible Unhandled Promise Rejection (id: " + id + "):\"");
        console.warn(warning);
      }
    });
  }

  module.exports = Promise;
},42,[43,47,48],"Promise");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var Promise = _require(_dependencyMap[0], 'promise/setimmediate/es6-extensions');

  _require(_dependencyMap[1], 'promise/setimmediate/done');

  Promise.prototype['finally'] = function (onSettled) {
    return this.then(onSettled, onSettled);
  };

  module.exports = Promise;
},43,[44,46],"node_modules/fbjs/lib/Promise.native.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var Promise = _require(_dependencyMap[0], './core.js');

  module.exports = Promise;
  var TRUE = valuePromise(true);
  var FALSE = valuePromise(false);
  var NULL = valuePromise(null);
  var UNDEFINED = valuePromise(undefined);
  var ZERO = valuePromise(0);
  var EMPTYSTRING = valuePromise('');

  function valuePromise(value) {
    var p = new Promise(Promise._61);
    p._65 = 1;
    p._55 = value;
    return p;
  }

  Promise.resolve = function (value) {
    if (value instanceof Promise) return value;
    if (value === null) return NULL;
    if (value === undefined) return UNDEFINED;
    if (value === true) return TRUE;
    if (value === false) return FALSE;
    if (value === 0) return ZERO;
    if (value === '') return EMPTYSTRING;

    if (typeof value === 'object' || typeof value === 'function') {
      try {
        var then = value.then;

        if (typeof then === 'function') {
          return new Promise(then.bind(value));
        }
      } catch (ex) {
        return new Promise(function (resolve, reject) {
          reject(ex);
        });
      }
    }

    return valuePromise(value);
  };

  Promise.all = function (arr) {
    var args = Array.prototype.slice.call(arr);
    return new Promise(function (resolve, reject) {
      if (args.length === 0) return resolve([]);
      var remaining = args.length;

      function res(i, val) {
        if (val && (typeof val === 'object' || typeof val === 'function')) {
          if (val instanceof Promise && val.then === Promise.prototype.then) {
            while (val._65 === 3) {
              val = val._55;
            }

            if (val._65 === 1) return res(i, val._55);
            if (val._65 === 2) reject(val._55);
            val.then(function (val) {
              res(i, val);
            }, reject);
            return;
          } else {
            var then = val.then;

            if (typeof then === 'function') {
              var p = new Promise(then.bind(val));
              p.then(function (val) {
                res(i, val);
              }, reject);
              return;
            }
          }
        }

        args[i] = val;

        if (--remaining === 0) {
          resolve(args);
        }
      }

      for (var i = 0; i < args.length; i++) {
        res(i, args[i]);
      }
    });
  };

  Promise.reject = function (value) {
    return new Promise(function (resolve, reject) {
      reject(value);
    });
  };

  Promise.race = function (values) {
    return new Promise(function (resolve, reject) {
      values.forEach(function (value) {
        Promise.resolve(value).then(resolve, reject);
      });
    });
  };

  Promise.prototype['catch'] = function (onRejected) {
    return this.then(null, onRejected);
  };
},44,[45],"node_modules/promise/setimmediate/es6-extensions.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  function noop() {}

  var LAST_ERROR = null;
  var IS_ERROR = {};

  function getThen(obj) {
    try {
      return obj.then;
    } catch (ex) {
      LAST_ERROR = ex;
      return IS_ERROR;
    }
  }

  function tryCallOne(fn, a) {
    try {
      return fn(a);
    } catch (ex) {
      LAST_ERROR = ex;
      return IS_ERROR;
    }
  }

  function tryCallTwo(fn, a, b) {
    try {
      fn(a, b);
    } catch (ex) {
      LAST_ERROR = ex;
      return IS_ERROR;
    }
  }

  module.exports = Promise;

  function Promise(fn) {
    if (typeof this !== 'object') {
      throw new TypeError('Promises must be constructed via new');
    }

    if (typeof fn !== 'function') {
      throw new TypeError('Promise constructor\'s argument is not a function');
    }

    this._40 = 0;
    this._65 = 0;
    this._55 = null;
    this._72 = null;
    if (fn === noop) return;
    doResolve(fn, this);
  }

  Promise._37 = null;
  Promise._87 = null;
  Promise._61 = noop;

  Promise.prototype.then = function (onFulfilled, onRejected) {
    if (this.constructor !== Promise) {
      return safeThen(this, onFulfilled, onRejected);
    }

    var res = new Promise(noop);
    handle(this, new Handler(onFulfilled, onRejected, res));
    return res;
  };

  function safeThen(self, onFulfilled, onRejected) {
    return new self.constructor(function (resolve, reject) {
      var res = new Promise(noop);
      res.then(resolve, reject);
      handle(self, new Handler(onFulfilled, onRejected, res));
    });
  }

  function handle(self, deferred) {
    while (self._65 === 3) {
      self = self._55;
    }

    if (Promise._37) {
      Promise._37(self);
    }

    if (self._65 === 0) {
      if (self._40 === 0) {
        self._40 = 1;
        self._72 = deferred;
        return;
      }

      if (self._40 === 1) {
        self._40 = 2;
        self._72 = [self._72, deferred];
        return;
      }

      self._72.push(deferred);

      return;
    }

    handleResolved(self, deferred);
  }

  function handleResolved(self, deferred) {
    setImmediate(function () {
      var cb = self._65 === 1 ? deferred.onFulfilled : deferred.onRejected;

      if (cb === null) {
        if (self._65 === 1) {
          resolve(deferred.promise, self._55);
        } else {
          reject(deferred.promise, self._55);
        }

        return;
      }

      var ret = tryCallOne(cb, self._55);

      if (ret === IS_ERROR) {
        reject(deferred.promise, LAST_ERROR);
      } else {
        resolve(deferred.promise, ret);
      }
    });
  }

  function resolve(self, newValue) {
    if (newValue === self) {
      return reject(self, new TypeError('A promise cannot be resolved with itself.'));
    }

    if (newValue && (typeof newValue === 'object' || typeof newValue === 'function')) {
      var then = getThen(newValue);

      if (then === IS_ERROR) {
        return reject(self, LAST_ERROR);
      }

      if (then === self.then && newValue instanceof Promise) {
        self._65 = 3;
        self._55 = newValue;
        finale(self);
        return;
      } else if (typeof then === 'function') {
        doResolve(then.bind(newValue), self);
        return;
      }
    }

    self._65 = 1;
    self._55 = newValue;
    finale(self);
  }

  function reject(self, newValue) {
    self._65 = 2;
    self._55 = newValue;

    if (Promise._87) {
      Promise._87(self, newValue);
    }

    finale(self);
  }

  function finale(self) {
    if (self._40 === 1) {
      handle(self, self._72);
      self._72 = null;
    }

    if (self._40 === 2) {
      for (var i = 0; i < self._72.length; i++) {
        handle(self, self._72[i]);
      }

      self._72 = null;
    }
  }

  function Handler(onFulfilled, onRejected, promise) {
    this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;
    this.onRejected = typeof onRejected === 'function' ? onRejected : null;
    this.promise = promise;
  }

  function doResolve(fn, promise) {
    var done = false;
    var res = tryCallTwo(fn, function (value) {
      if (done) return;
      done = true;
      resolve(promise, value);
    }, function (reason) {
      if (done) return;
      done = true;
      reject(promise, reason);
    });

    if (!done && res === IS_ERROR) {
      done = true;
      reject(promise, LAST_ERROR);
    }
  }
},45,[],"node_modules/promise/setimmediate/core.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var Promise = _require(_dependencyMap[0], './core.js');

  module.exports = Promise;

  Promise.prototype.done = function (onFulfilled, onRejected) {
    var self = arguments.length ? this.then.apply(this, arguments) : this;
    self.then(null, function (err) {
      setTimeout(function () {
        throw err;
      }, 0);
    });
  };
},46,[45],"node_modules/promise/setimmediate/done.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var Promise = _require(_dependencyMap[0], './core');

  var DEFAULT_WHITELIST = [ReferenceError, TypeError, RangeError];
  var enabled = false;
  exports.disable = disable;

  function disable() {
    enabled = false;
    Promise._37 = null;
    Promise._87 = null;
  }

  exports.enable = enable;

  function enable(options) {
    options = options || {};
    if (enabled) disable();
    enabled = true;
    var id = 0;
    var displayId = 0;
    var rejections = {};

    Promise._37 = function (promise) {
      if (promise._65 === 2 && rejections[promise._51]) {
        if (rejections[promise._51].logged) {
          onHandled(promise._51);
        } else {
          clearTimeout(rejections[promise._51].timeout);
        }

        delete rejections[promise._51];
      }
    };

    Promise._87 = function (promise, err) {
      if (promise._40 === 0) {
        promise._51 = id++;
        rejections[promise._51] = {
          displayId: null,
          error: err,
          timeout: setTimeout(onUnhandled.bind(null, promise._51), matchWhitelist(err, DEFAULT_WHITELIST) ? 100 : 2000),
          logged: false
        };
      }
    };

    function onUnhandled(id) {
      if (options.allRejections || matchWhitelist(rejections[id].error, options.whitelist || DEFAULT_WHITELIST)) {
        rejections[id].displayId = displayId++;

        if (options.onUnhandled) {
          rejections[id].logged = true;
          options.onUnhandled(rejections[id].displayId, rejections[id].error);
        } else {
          rejections[id].logged = true;
          logError(rejections[id].displayId, rejections[id].error);
        }
      }
    }

    function onHandled(id) {
      if (rejections[id].logged) {
        if (options.onHandled) {
          options.onHandled(rejections[id].displayId, rejections[id].error);
        } else if (!rejections[id].onUnhandled) {
          console.warn('Promise Rejection Handled (id: ' + rejections[id].displayId + '):');
          console.warn('  This means you can ignore any previous messages of the form "Possible Unhandled Promise Rejection" with id ' + rejections[id].displayId + '.');
        }
      }
    }
  }

  function logError(id, error) {
    console.warn('Possible Unhandled Promise Rejection (id: ' + id + '):');
    var errStr = (error && (error.stack || error)) + '';
    errStr.split('\n').forEach(function (line) {
      console.warn('  ' + line);
    });
  }

  function matchWhitelist(error, list) {
    return list.some(function (cls) {
      return error instanceof cls;
    });
  }
},47,[45],"node_modules/promise/setimmediate/rejection-tracking.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var printString = _require(_dependencyMap[0], './printString');

  var toString = Object.prototype.toString;
  var toISOString = Date.prototype.toISOString;
  var errorToString = Error.prototype.toString;
  var regExpToString = RegExp.prototype.toString;
  var symbolToString = (typeof Symbol === "function" ? Symbol.prototype : "@@prototype").toString;
  var SYMBOL_REGEXP = /^Symbol\((.*)\)(.*)$/;
  var NEWLINE_REGEXP = /\n/ig;

  var getSymbols = Object.getOwnPropertySymbols || function (obj) {
    return [];
  };

  function isToStringedArrayType(toStringed) {
    return toStringed === '[object Array]' || toStringed === '[object ArrayBuffer]' || toStringed === '[object DataView]' || toStringed === '[object Float32Array]' || toStringed === '[object Float64Array]' || toStringed === '[object Int8Array]' || toStringed === '[object Int16Array]' || toStringed === '[object Int32Array]' || toStringed === '[object Uint8Array]' || toStringed === '[object Uint8ClampedArray]' || toStringed === '[object Uint16Array]' || toStringed === '[object Uint32Array]';
  }

  function printNumber(val) {
    if (val != +val) return 'NaN';
    var isNegativeZero = val === 0 && 1 / val < 0;
    return isNegativeZero ? '-0' : '' + val;
  }

  function printFunction(val, printFunctionName) {
    if (!printFunctionName) {
      return '[Function]';
    } else if (val.name === '') {
      return '[Function anonymous]';
    } else {
      return '[Function ' + val.name + ']';
    }
  }

  function printSymbol(val) {
    return symbolToString.call(val).replace(SYMBOL_REGEXP, 'Symbol($1)');
  }

  function printError(val) {
    return '[' + errorToString.call(val) + ']';
  }

  function printBasicValue(val, printFunctionName, escapeRegex) {
    if (val === true || val === false) return '' + val;
    if (val === undefined) return 'undefined';
    if (val === null) return 'null';
    var typeOf = typeof val;
    if (typeOf === 'number') return printNumber(val);
    if (typeOf === 'string') return '"' + printString(val) + '"';
    if (typeOf === 'function') return printFunction(val, printFunctionName);
    if (typeOf === 'symbol') return printSymbol(val);
    var toStringed = toString.call(val);
    if (toStringed === '[object WeakMap]') return 'WeakMap {}';
    if (toStringed === '[object WeakSet]') return 'WeakSet {}';
    if (toStringed === '[object Function]' || toStringed === '[object GeneratorFunction]') return printFunction(val, printFunctionName);
    if (toStringed === '[object Symbol]') return printSymbol(val);
    if (toStringed === '[object Date]') return toISOString.call(val);
    if (toStringed === '[object Error]') return printError(val);

    if (toStringed === '[object RegExp]') {
      if (escapeRegex) {
        return printString(regExpToString.call(val));
      }

      return regExpToString.call(val);
    }

    ;
    if (toStringed === '[object Arguments]' && val.length === 0) return 'Arguments []';
    if (isToStringedArrayType(toStringed) && val.length === 0) return val.constructor.name + ' []';
    if (val instanceof Error) return printError(val);
    return false;
  }

  function printList(list, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex) {
    var body = '';

    if (list.length) {
      body += edgeSpacing;
      var innerIndent = prevIndent + indent;

      for (var i = 0; i < list.length; i++) {
        body += innerIndent + print(list[i], indent, innerIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);

        if (i < list.length - 1) {
          body += ',' + spacing;
        }
      }

      body += (min ? '' : ',') + edgeSpacing + prevIndent;
    }

    return '[' + body + ']';
  }

  function printArguments(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex) {
    return (min ? '' : 'Arguments ') + printList(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
  }

  function printArray(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex) {
    return (min ? '' : val.constructor.name + ' ') + printList(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
  }

  function printMap(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex) {
    var result = 'Map {';
    var iterator = val.entries();
    var current = iterator.next();

    if (!current.done) {
      result += edgeSpacing;
      var innerIndent = prevIndent + indent;

      while (!current.done) {
        var key = print(current.value[0], indent, innerIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
        var value = print(current.value[1], indent, innerIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
        result += innerIndent + key + ' => ' + value;
        current = iterator.next();

        if (!current.done) {
          result += ',' + spacing;
        }
      }

      result += (min ? '' : ',') + edgeSpacing + prevIndent;
    }

    return result + '}';
  }

  function printObject(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex) {
    var constructor = min ? '' : val.constructor ? val.constructor.name + ' ' : 'Object ';
    var result = constructor + '{';
    var keys = Object.keys(val).sort();
    var symbols = getSymbols(val);

    if (symbols.length) {
      keys = keys.filter(function (key) {
        return !(typeof key === 'symbol' || toString.call(key) === '[object Symbol]');
      }).concat(symbols);
    }

    if (keys.length) {
      result += edgeSpacing;
      var innerIndent = prevIndent + indent;

      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        var name = print(key, indent, innerIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
        var value = print(val[key], indent, innerIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
        result += innerIndent + name + ': ' + value;

        if (i < keys.length - 1) {
          result += ',' + spacing;
        }
      }

      result += (min ? '' : ',') + edgeSpacing + prevIndent;
    }

    return result + '}';
  }

  function printSet(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex) {
    var result = 'Set {';
    var iterator = val.entries();
    var current = iterator.next();

    if (!current.done) {
      result += edgeSpacing;
      var innerIndent = prevIndent + indent;

      while (!current.done) {
        result += innerIndent + print(current.value[1], indent, innerIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
        current = iterator.next();

        if (!current.done) {
          result += ',' + spacing;
        }
      }

      result += (min ? '' : ',') + edgeSpacing + prevIndent;
    }

    return result + '}';
  }

  function printComplexValue(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex) {
    refs = refs.slice();

    if (refs.indexOf(val) > -1) {
      return '[Circular]';
    } else {
      refs.push(val);
    }

    currentDepth++;
    var hitMaxDepth = currentDepth > maxDepth;

    if (callToJSON && !hitMaxDepth && val.toJSON && typeof val.toJSON === 'function') {
      return print(val.toJSON(), indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
    }

    var toStringed = toString.call(val);

    if (toStringed === '[object Arguments]') {
      return hitMaxDepth ? '[Arguments]' : printArguments(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
    } else if (isToStringedArrayType(toStringed)) {
      return hitMaxDepth ? '[Array]' : printArray(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
    } else if (toStringed === '[object Map]') {
      return hitMaxDepth ? '[Map]' : printMap(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
    } else if (toStringed === '[object Set]') {
      return hitMaxDepth ? '[Set]' : printSet(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
    } else if (typeof val === 'object') {
      return hitMaxDepth ? '[Object]' : printObject(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
    }
  }

  function printPlugin(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex) {
    var match = false;
    var plugin = void 0;

    for (var p = 0; p < plugins.length; p++) {
      plugin = plugins[p];

      if (plugin.test(val)) {
        match = true;
        break;
      }
    }

    if (!match) {
      return false;
    }

    function boundPrint(val) {
      return print(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
    }

    function boundIndent(str) {
      var indentation = prevIndent + indent;
      return indentation + str.replace(NEWLINE_REGEXP, '\n' + indentation);
    }

    return plugin.print(val, boundPrint, boundIndent, {
      edgeSpacing: edgeSpacing,
      spacing: spacing
    });
  }

  function print(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex) {
    var basic = printBasicValue(val, printFunctionName, escapeRegex);
    if (basic) return basic;
    var plugin = printPlugin(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
    if (plugin) return plugin;
    return printComplexValue(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
  }

  var DEFAULTS = {
    callToJSON: true,
    indent: 2,
    maxDepth: Infinity,
    min: false,
    plugins: [],
    printFunctionName: true,
    escapeRegex: false
  };

  function validateOptions(opts) {
    Object.keys(opts).forEach(function (key) {
      if (!DEFAULTS.hasOwnProperty(key)) {
        throw new Error('prettyFormat: Invalid option: ' + key);
      }
    });

    if (opts.min && opts.indent !== undefined && opts.indent !== 0) {
      throw new Error('prettyFormat: Cannot run with min option and indent');
    }
  }

  function normalizeOptions(opts) {
    var result = {};
    Object.keys(DEFAULTS).forEach(function (key) {
      return result[key] = opts.hasOwnProperty(key) ? opts[key] : DEFAULTS[key];
    });

    if (result.min) {
      result.indent = 0;
    }

    return result;
  }

  function createIndent(indent) {
    return new Array(indent + 1).join(' ');
  }

  function prettyFormat(val, opts) {
    if (!opts) {
      opts = DEFAULTS;
    } else {
      validateOptions(opts);
      opts = normalizeOptions(opts);
    }

    var indent = void 0;
    var refs = void 0;
    var prevIndent = '';
    var currentDepth = 0;
    var spacing = opts.min ? ' ' : '\n';
    var edgeSpacing = opts.min ? '' : '\n';

    if (opts && opts.plugins.length) {
      indent = createIndent(opts.indent);
      refs = [];
      var pluginsResult = printPlugin(val, indent, prevIndent, spacing, edgeSpacing, refs, opts.maxDepth, currentDepth, opts.plugins, opts.min, opts.callToJSON, opts.printFunctionName, opts.escapeRegex);
      if (pluginsResult) return pluginsResult;
    }

    var basicResult = printBasicValue(val, opts.printFunctionName, opts.escapeRegex);
    if (basicResult) return basicResult;
    if (!indent) indent = createIndent(opts.indent);
    if (!refs) refs = [];
    return printComplexValue(val, indent, prevIndent, spacing, edgeSpacing, refs, opts.maxDepth, currentDepth, opts.plugins, opts.min, opts.callToJSON, opts.printFunctionName, opts.escapeRegex);
  }

  module.exports = prettyFormat;
},48,[49],"node_modules/react-native/node_modules/pretty-format/index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var ESCAPED_CHARACTERS = /(\\|\"|\')/g;

  module.exports = function printString(val) {
    return val.replace(ESCAPED_CHARACTERS, '\\$1');
  };
},49,[],"node_modules/react-native/node_modules/pretty-format/printString.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  !function (global) {
    "use strict";

    var Op = Object.prototype;
    var hasOwn = Op.hasOwnProperty;
    var undefined;
    var $Symbol = typeof Symbol === "function" ? Symbol : {};
    var iteratorSymbol = $Symbol.iterator || "@@iterator";
    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
    var inModule = typeof module === "object";
    var runtime = global.regeneratorRuntime;

    if (runtime) {
      if (inModule) {
        module.exports = runtime;
      }

      return;
    }

    runtime = global.regeneratorRuntime = inModule ? module.exports : {};

    function wrap(innerFn, outerFn, self, tryLocsList) {
      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
      var generator = Object.create(protoGenerator.prototype);
      var context = new Context(tryLocsList || []);
      generator._invoke = makeInvokeMethod(innerFn, self, context);
      return generator;
    }

    runtime.wrap = wrap;

    function tryCatch(fn, obj, arg) {
      try {
        return {
          type: "normal",
          arg: fn.call(obj, arg)
        };
      } catch (err) {
        return {
          type: "throw",
          arg: err
        };
      }
    }

    var GenStateSuspendedStart = "suspendedStart";
    var GenStateSuspendedYield = "suspendedYield";
    var GenStateExecuting = "executing";
    var GenStateCompleted = "completed";
    var ContinueSentinel = {};

    function Generator() {}

    function GeneratorFunction() {}

    function GeneratorFunctionPrototype() {}

    var IteratorPrototype = {};

    IteratorPrototype[iteratorSymbol] = function () {
      return this;
    };

    var getProto = Object.getPrototypeOf;
    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

    if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
      IteratorPrototype = NativeIteratorPrototype;
    }

    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
    GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
    GeneratorFunctionPrototype.constructor = GeneratorFunction;
    GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction";

    function defineIteratorMethods(prototype) {
      ["next", "throw", "return"].forEach(function (method) {
        prototype[method] = function (arg) {
          return this._invoke(method, arg);
        };
      });
    }

    runtime.isGeneratorFunction = function (genFun) {
      var ctor = typeof genFun === "function" && genFun.constructor;
      return ctor ? ctor === GeneratorFunction || (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
    };

    runtime.mark = function (genFun) {
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
      } else {
        genFun.__proto__ = GeneratorFunctionPrototype;

        if (!(toStringTagSymbol in genFun)) {
          genFun[toStringTagSymbol] = "GeneratorFunction";
        }
      }

      genFun.prototype = Object.create(Gp);
      return genFun;
    };

    runtime.awrap = function (arg) {
      return {
        __await: arg
      };
    };

    function AsyncIterator(generator) {
      function invoke(method, arg, resolve, reject) {
        var record = tryCatch(generator[method], generator, arg);

        if (record.type === "throw") {
          reject(record.arg);
        } else {
          var result = record.arg;
          var value = result.value;

          if (value && typeof value === "object" && hasOwn.call(value, "__await")) {
            return Promise.resolve(value.__await).then(function (value) {
              invoke("next", value, resolve, reject);
            }, function (err) {
              invoke("throw", err, resolve, reject);
            });
          }

          return Promise.resolve(value).then(function (unwrapped) {
            result.value = unwrapped;
            resolve(result);
          }, reject);
        }
      }

      var previousPromise;

      function enqueue(method, arg) {
        function callInvokeWithMethodAndArg() {
          return new Promise(function (resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }

        return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      }

      this._invoke = enqueue;
    }

    defineIteratorMethods(AsyncIterator.prototype);

    AsyncIterator.prototype[asyncIteratorSymbol] = function () {
      return this;
    };

    runtime.AsyncIterator = AsyncIterator;

    runtime.async = function (innerFn, outerFn, self, tryLocsList) {
      var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList));
      return runtime.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
        return result.done ? result.value : iter.next();
      });
    };

    function makeInvokeMethod(innerFn, self, context) {
      var state = GenStateSuspendedStart;
      return function invoke(method, arg) {
        if (state === GenStateExecuting) {
          throw new Error("Generator is already running");
        }

        if (state === GenStateCompleted) {
          if (method === "throw") {
            throw arg;
          }

          return doneResult();
        }

        context.method = method;
        context.arg = arg;

        while (true) {
          var delegate = context.delegate;

          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);

            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }

          if (context.method === "next") {
            context.sent = context._sent = context.arg;
          } else if (context.method === "throw") {
            if (state === GenStateSuspendedStart) {
              state = GenStateCompleted;
              throw context.arg;
            }

            context.dispatchException(context.arg);
          } else if (context.method === "return") {
            context.abrupt("return", context.arg);
          }

          state = GenStateExecuting;
          var record = tryCatch(innerFn, self, context);

          if (record.type === "normal") {
            state = context.done ? GenStateCompleted : GenStateSuspendedYield;

            if (record.arg === ContinueSentinel) {
              continue;
            }

            return {
              value: record.arg,
              done: context.done
            };
          } else if (record.type === "throw") {
            state = GenStateCompleted;
            context.method = "throw";
            context.arg = record.arg;
          }
        }
      };
    }

    function maybeInvokeDelegate(delegate, context) {
      var method = delegate.iterator[context.method];

      if (method === undefined) {
        context.delegate = null;

        if (context.method === "throw") {
          if (delegate.iterator.return) {
            context.method = "return";
            context.arg = undefined;
            maybeInvokeDelegate(delegate, context);

            if (context.method === "throw") {
              return ContinueSentinel;
            }
          }

          context.method = "throw";
          context.arg = new TypeError("The iterator does not provide a 'throw' method");
        }

        return ContinueSentinel;
      }

      var record = tryCatch(method, delegate.iterator, context.arg);

      if (record.type === "throw") {
        context.method = "throw";
        context.arg = record.arg;
        context.delegate = null;
        return ContinueSentinel;
      }

      var info = record.arg;

      if (!info) {
        context.method = "throw";
        context.arg = new TypeError("iterator result is not an object");
        context.delegate = null;
        return ContinueSentinel;
      }

      if (info.done) {
        context[delegate.resultName] = info.value;
        context.next = delegate.nextLoc;

        if (context.method !== "return") {
          context.method = "next";
          context.arg = undefined;
        }
      } else {
        return info;
      }

      context.delegate = null;
      return ContinueSentinel;
    }

    defineIteratorMethods(Gp);
    Gp[toStringTagSymbol] = "Generator";

    Gp[iteratorSymbol] = function () {
      return this;
    };

    Gp.toString = function () {
      return "[object Generator]";
    };

    function pushTryEntry(locs) {
      var entry = {
        tryLoc: locs[0]
      };

      if (1 in locs) {
        entry.catchLoc = locs[1];
      }

      if (2 in locs) {
        entry.finallyLoc = locs[2];
        entry.afterLoc = locs[3];
      }

      this.tryEntries.push(entry);
    }

    function resetTryEntry(entry) {
      var record = entry.completion || {};
      record.type = "normal";
      delete record.arg;
      entry.completion = record;
    }

    function Context(tryLocsList) {
      this.tryEntries = [{
        tryLoc: "root"
      }];
      tryLocsList.forEach(pushTryEntry, this);
      this.reset(true);
    }

    runtime.keys = function (object) {
      var keys = [];

      for (var key in object) {
        keys.push(key);
      }

      keys.reverse();
      return function next() {
        while (keys.length) {
          var key = keys.pop();

          if (key in object) {
            next.value = key;
            next.done = false;
            return next;
          }
        }

        next.done = true;
        return next;
      };
    };

    function values(iterable) {
      if (iterable) {
        var iteratorMethod = iterable[iteratorSymbol];

        if (iteratorMethod) {
          return iteratorMethod.call(iterable);
        }

        if (typeof iterable.next === "function") {
          return iterable;
        }

        if (!isNaN(iterable.length)) {
          var i = -1,
              next = function next() {
            while (++i < iterable.length) {
              if (hasOwn.call(iterable, i)) {
                next.value = iterable[i];
                next.done = false;
                return next;
              }
            }

            next.value = undefined;
            next.done = true;
            return next;
          };

          return next.next = next;
        }
      }

      return {
        next: doneResult
      };
    }

    runtime.values = values;

    function doneResult() {
      return {
        value: undefined,
        done: true
      };
    }

    Context.prototype = {
      constructor: Context,
      reset: function reset(skipTempReset) {
        this.prev = 0;
        this.next = 0;
        this.sent = this._sent = undefined;
        this.done = false;
        this.delegate = null;
        this.method = "next";
        this.arg = undefined;
        this.tryEntries.forEach(resetTryEntry);

        if (!skipTempReset) {
          for (var name in this) {
            if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
              this[name] = undefined;
            }
          }
        }
      },
      stop: function stop() {
        this.done = true;
        var rootEntry = this.tryEntries[0];
        var rootRecord = rootEntry.completion;

        if (rootRecord.type === "throw") {
          throw rootRecord.arg;
        }

        return this.rval;
      },
      dispatchException: function dispatchException(exception) {
        if (this.done) {
          throw exception;
        }

        var context = this;

        function handle(loc, caught) {
          record.type = "throw";
          record.arg = exception;
          context.next = loc;

          if (caught) {
            context.method = "next";
            context.arg = undefined;
          }

          return !!caught;
        }

        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          var record = entry.completion;

          if (entry.tryLoc === "root") {
            return handle("end");
          }

          if (entry.tryLoc <= this.prev) {
            var hasCatch = hasOwn.call(entry, "catchLoc");
            var hasFinally = hasOwn.call(entry, "finallyLoc");

            if (hasCatch && hasFinally) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              } else if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else if (hasCatch) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              }
            } else if (hasFinally) {
              if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else {
              throw new Error("try statement without catch or finally");
            }
          }
        }
      },
      abrupt: function abrupt(type, arg) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
            var finallyEntry = entry;
            break;
          }
        }

        if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
          finallyEntry = null;
        }

        var record = finallyEntry ? finallyEntry.completion : {};
        record.type = type;
        record.arg = arg;

        if (finallyEntry) {
          this.method = "next";
          this.next = finallyEntry.finallyLoc;
          return ContinueSentinel;
        }

        return this.complete(record);
      },
      complete: function complete(record, afterLoc) {
        if (record.type === "throw") {
          throw record.arg;
        }

        if (record.type === "break" || record.type === "continue") {
          this.next = record.arg;
        } else if (record.type === "return") {
          this.rval = this.arg = record.arg;
          this.method = "return";
          this.next = "end";
        } else if (record.type === "normal" && afterLoc) {
          this.next = afterLoc;
        }

        return ContinueSentinel;
      },
      finish: function finish(finallyLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.finallyLoc === finallyLoc) {
            this.complete(entry.completion, entry.afterLoc);
            resetTryEntry(entry);
            return ContinueSentinel;
          }
        }
      },
      "catch": function _catch(tryLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.tryLoc === tryLoc) {
            var record = entry.completion;

            if (record.type === "throw") {
              var thrown = record.arg;
              resetTryEntry(entry);
            }

            return thrown;
          }
        }

        throw new Error("illegal catch attempt");
      },
      delegateYield: function delegateYield(iterable, resultName, nextLoc) {
        this.delegate = {
          iterator: values(iterable),
          resultName: resultName,
          nextLoc: nextLoc
        };

        if (this.method === "next") {
          this.arg = undefined;
        }

        return ContinueSentinel;
      }
    };
  }(function () {
    return this;
  }() || Function("return this")());
},50,[],"node_modules/regenerator-runtime/runtime.js");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var Platform = _require2(_dependencyMap[0], 'Platform');

  var Systrace = _require2(_dependencyMap[1], 'Systrace');

  var invariant = _require2(_dependencyMap[2], 'fbjs/lib/invariant');

  var _require = _require2(_dependencyMap[3], 'NativeModules'),
      Timing = _require.Timing;

  var _performanceNow = null;

  function performanceNow() {
    if (!_performanceNow) {
      _performanceNow = _require2(_dependencyMap[4], 'fbjs/lib/performanceNow');
    }

    return _performanceNow();
  }

  var FRAME_DURATION = 1000 / 60;
  var IDLE_CALLBACK_FRAME_DEADLINE = 1;
  var MAX_TIMER_DURATION_MS = 60 * 1000;
  var IS_ANDROID = Platform.OS === 'android';
  var ANDROID_LONG_TIMER_MESSAGE = 'Setting a timer for a long period of time, i.e. multiple minutes, is a ' + 'performance and correctness issue on Android as it keeps the timer ' + 'module awake, and timers can only be called when the app is in the foreground. ' + 'See https://github.com/facebook/react-native/issues/12981 for more info.';
  var callbacks = [];
  var types = [];
  var timerIDs = [];
  var immediates = [];
  var requestIdleCallbacks = [];
  var requestIdleCallbackTimeouts = {};
  var identifiers = [];
  var GUID = 1;
  var errors = null;
  var hasEmittedTimeDriftWarning = false;

  function _getFreeIndex() {
    var freeIndex = timerIDs.indexOf(null);

    if (freeIndex === -1) {
      freeIndex = timerIDs.length;
    }

    return freeIndex;
  }

  function _allocateCallback(func, type) {
    var id = GUID++;

    var freeIndex = _getFreeIndex();

    timerIDs[freeIndex] = id;
    callbacks[freeIndex] = func;
    types[freeIndex] = type;

    if (__DEV__) {
      var parseErrorStack = _require2(_dependencyMap[5], 'parseErrorStack');

      var error = new Error();
      error.framesToPop = 1;
      var stack = parseErrorStack(error);

      if (stack) {
        identifiers[freeIndex] = stack.shift();
      }
    }

    return id;
  }

  function _callTimer(timerID, frameTime, didTimeout) {
    _require2(_dependencyMap[6], 'fbjs/lib/warning')(timerID <= GUID, 'Tried to call timer with ID %s but no such timer exists.', timerID);

    var timerIndex = timerIDs.indexOf(timerID);

    if (timerIndex === -1) {
      return;
    }

    var type = types[timerIndex];
    var callback = callbacks[timerIndex];

    if (!callback || !type) {
      console.error('No callback found for timerID ' + timerID);
      return;
    }

    if (__DEV__) {
      var identifier = identifiers[timerIndex] || {};
      Systrace.beginEvent('Systrace.callTimer: ' + identifier.methodName);
    }

    if (type === 'setTimeout' || type === 'setImmediate' || type === 'requestAnimationFrame' || type === 'requestIdleCallback') {
      _clearIndex(timerIndex);
    }

    try {
      if (type === 'setTimeout' || type === 'setInterval' || type === 'setImmediate') {
        callback();
      } else if (type === 'requestAnimationFrame') {
        callback(performanceNow());
      } else if (type === 'requestIdleCallback') {
        callback({
          timeRemaining: function timeRemaining() {
            return Math.max(0, FRAME_DURATION - (performanceNow() - frameTime));
          },
          didTimeout: !!didTimeout
        });
      } else {
        console.error('Tried to call a callback with invalid type: ' + type);
      }
    } catch (e) {
      if (!errors) {
        errors = [e];
      } else {
        errors.push(e);
      }
    }

    if (__DEV__) {
      Systrace.endEvent();
    }
  }

  function _callImmediatesPass() {
    if (__DEV__) {
      Systrace.beginEvent('callImmediatesPass()');
    }

    if (immediates.length > 0) {
      var passImmediates = immediates.slice();
      immediates = [];

      for (var i = 0; i < passImmediates.length; ++i) {
        _callTimer(passImmediates[i], 0);
      }
    }

    if (__DEV__) {
      Systrace.endEvent();
    }

    return immediates.length > 0;
  }

  function _clearIndex(i) {
    timerIDs[i] = null;
    callbacks[i] = null;
    types[i] = null;
    identifiers[i] = null;
  }

  function _freeCallback(timerID) {
    if (timerID == null) {
      return;
    }

    var index = timerIDs.indexOf(timerID);

    if (index !== -1) {
      _clearIndex(index);

      var type = types[index];

      if (type !== 'setImmediate' && type !== 'requestIdleCallback') {
        Timing.deleteTimer(timerID);
      }
    }
  }

  var JSTimers = {
    setTimeout: function setTimeout(func, duration) {
      for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        args[_key - 2] = arguments[_key];
      }

      if (__DEV__ && IS_ANDROID && duration > MAX_TIMER_DURATION_MS) {
        console.warn(ANDROID_LONG_TIMER_MESSAGE + '\n' + '(Saw setTimeout with duration ' + duration + 'ms)');
      }

      var id = _allocateCallback(function () {
        return func.apply(undefined, args);
      }, 'setTimeout');

      Timing.createTimer(id, duration || 0, Date.now(), false);
      return id;
    },
    setInterval: function setInterval(func, duration) {
      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      if (__DEV__ && IS_ANDROID && duration > MAX_TIMER_DURATION_MS) {
        console.warn(ANDROID_LONG_TIMER_MESSAGE + '\n' + '(Saw setInterval with duration ' + duration + 'ms)');
      }

      var id = _allocateCallback(function () {
        return func.apply(undefined, args);
      }, 'setInterval');

      Timing.createTimer(id, duration || 0, Date.now(), true);
      return id;
    },
    setImmediate: function setImmediate(func) {
      for (var _len3 = arguments.length, args = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
        args[_key3 - 1] = arguments[_key3];
      }

      var id = _allocateCallback(function () {
        return func.apply(undefined, args);
      }, 'setImmediate');

      immediates.push(id);
      return id;
    },
    requestAnimationFrame: function requestAnimationFrame(func) {
      var id = _allocateCallback(func, 'requestAnimationFrame');

      Timing.createTimer(id, 1, Date.now(), false);
      return id;
    },
    requestIdleCallback: function requestIdleCallback(func, options) {
      if (requestIdleCallbacks.length === 0) {
        Timing.setSendIdleEvents(true);
      }

      var timeout = options && options.timeout;

      var id = _allocateCallback(timeout != null ? function (deadline) {
        var timeoutId = requestIdleCallbackTimeouts[id];

        if (timeoutId) {
          JSTimers.clearTimeout(timeoutId);
          delete requestIdleCallbackTimeouts[id];
        }

        return func(deadline);
      } : func, 'requestIdleCallback');

      requestIdleCallbacks.push(id);

      if (timeout != null) {
        var timeoutId = JSTimers.setTimeout(function () {
          var index = requestIdleCallbacks.indexOf(id);

          if (index > -1) {
            requestIdleCallbacks.splice(index, 1);

            _callTimer(id, performanceNow(), true);
          }

          delete requestIdleCallbackTimeouts[id];

          if (requestIdleCallbacks.length === 0) {
            Timing.setSendIdleEvents(false);
          }
        }, timeout);
        requestIdleCallbackTimeouts[id] = timeoutId;
      }

      return id;
    },
    cancelIdleCallback: function cancelIdleCallback(timerID) {
      _freeCallback(timerID);

      var index = requestIdleCallbacks.indexOf(timerID);

      if (index !== -1) {
        requestIdleCallbacks.splice(index, 1);
      }

      var timeoutId = requestIdleCallbackTimeouts[timerID];

      if (timeoutId) {
        JSTimers.clearTimeout(timeoutId);
        delete requestIdleCallbackTimeouts[timerID];
      }

      if (requestIdleCallbacks.length === 0) {
        Timing.setSendIdleEvents(false);
      }
    },
    clearTimeout: function clearTimeout(timerID) {
      _freeCallback(timerID);
    },
    clearInterval: function clearInterval(timerID) {
      _freeCallback(timerID);
    },
    clearImmediate: function clearImmediate(timerID) {
      _freeCallback(timerID);

      var index = immediates.indexOf(timerID);

      if (index !== -1) {
        immediates.splice(index, 1);
      }
    },
    cancelAnimationFrame: function cancelAnimationFrame(timerID) {
      _freeCallback(timerID);
    },
    callTimers: function callTimers(timersToCall) {
      invariant(timersToCall.length !== 0, 'Cannot call `callTimers` with an empty list of IDs.');
      errors = null;

      for (var i = 0; i < timersToCall.length; i++) {
        _callTimer(timersToCall[i], 0);
      }

      if (errors) {
        var errorCount = errors.length;

        if (errorCount > 1) {
          for (var ii = 1; ii < errorCount; ii++) {
            JSTimers.setTimeout(function (error) {
              throw error;
            }.bind(null, errors[ii]), 0);
          }
        }

        throw errors[0];
      }
    },
    callIdleCallbacks: function callIdleCallbacks(frameTime) {
      if (FRAME_DURATION - (performanceNow() - frameTime) < IDLE_CALLBACK_FRAME_DEADLINE) {
        return;
      }

      errors = null;

      if (requestIdleCallbacks.length > 0) {
        var passIdleCallbacks = requestIdleCallbacks.slice();
        requestIdleCallbacks = [];

        for (var i = 0; i < passIdleCallbacks.length; ++i) {
          _callTimer(passIdleCallbacks[i], frameTime);
        }
      }

      if (requestIdleCallbacks.length === 0) {
        Timing.setSendIdleEvents(false);
      }

      if (errors) {
        errors.forEach(function (error) {
          return JSTimers.setTimeout(function () {
            throw error;
          }, 0);
        });
      }
    },
    callImmediates: function callImmediates() {
      errors = null;

      while (_callImmediatesPass()) {}

      if (errors) {
        errors.forEach(function (error) {
          return JSTimers.setTimeout(function () {
            throw error;
          }, 0);
        });
      }
    },
    emitTimeDriftWarning: function emitTimeDriftWarning(warningMessage) {
      if (hasEmittedTimeDriftWarning) {
        return;
      }

      hasEmittedTimeDriftWarning = true;
      console.warn(warningMessage);
    }
  };

  if (!Timing) {
    console.warn("Timing native module is not available, can't set timers.");
    module.exports = {
      callImmediates: JSTimers.callImmediates,
      setImmediate: JSTimers.setImmediate
    };
  } else {
    module.exports = JSTimers;
  }
},51,[52,19,13,15,53,32,56],"JSTimers");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var NativeModules = _require(_dependencyMap[0], 'NativeModules');

  var Platform = {
    OS: 'ios',

    get Version() {
      var constants = NativeModules.PlatformConstants;
      return constants && constants.osVersion;
    },

    get isPad() {
      var constants = NativeModules.PlatformConstants;
      return constants ? constants.interfaceIdiom === 'pad' : false;
    },

    get isTVOS() {
      var constants = NativeModules.PlatformConstants;
      return constants ? constants.interfaceIdiom === 'tv' : false;
    },

    get isTesting() {
      var constants = NativeModules.PlatformConstants;
      return constants && constants.isTesting;
    },

    select: function select(obj) {
      return 'ios' in obj ? obj.ios : obj.default;
    }
  };
  module.exports = Platform;
},52,[15],"Platform");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var performance = _require(_dependencyMap[0], './performance');

  var performanceNow;

  if (performance.now) {
    performanceNow = function performanceNow() {
      return performance.now();
    };
  } else {
    performanceNow = function performanceNow() {
      return Date.now();
    };
  }

  module.exports = performanceNow;
},53,[54],"node_modules/fbjs/lib/performanceNow.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var ExecutionEnvironment = _require(_dependencyMap[0], './ExecutionEnvironment');

  var performance;

  if (ExecutionEnvironment.canUseDOM) {
    performance = window.performance || window.msPerformance || window.webkitPerformance;
  }

  module.exports = performance || {};
},54,[55],"node_modules/fbjs/lib/performance.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
  var ExecutionEnvironment = {
    canUseDOM: canUseDOM,
    canUseWorkers: typeof Worker !== 'undefined',
    canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),
    canUseViewport: canUseDOM && !!window.screen,
    isInWorker: !canUseDOM
  };
  module.exports = ExecutionEnvironment;
},55,[],"node_modules/fbjs/lib/ExecutionEnvironment.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var emptyFunction = _require(_dependencyMap[0], './emptyFunction');

  var warning = emptyFunction;

  if (process.env.NODE_ENV !== 'production') {
    var printWarning = function printWarning(format) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      var argIndex = 0;
      var message = 'Warning: ' + format.replace(/%s/g, function () {
        return args[argIndex++];
      });

      if (typeof console !== 'undefined') {
        console.error(message);
      }

      try {
        throw new Error(message);
      } catch (x) {}
    };

    warning = function warning(condition, format) {
      if (format === undefined) {
        throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
      }

      if (format.indexOf('Failed Composite propType: ') === 0) {
        return;
      }

      if (!condition) {
        for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
          args[_key2 - 2] = arguments[_key2];
        }

        printWarning.apply(undefined, [format].concat(args));
      }
    };
  }

  module.exports = warning;
},56,[57],"node_modules/fbjs/lib/warning.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  function makeEmptyFunction(arg) {
    return function () {
      return arg;
    };
  }

  var emptyFunction = function emptyFunction() {};

  emptyFunction.thatReturns = makeEmptyFunction;
  emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
  emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
  emptyFunction.thatReturnsNull = makeEmptyFunction(null);

  emptyFunction.thatReturnsThis = function () {
    return this;
  };

  emptyFunction.thatReturnsArgument = function (arg) {
    return arg;
  };

  module.exports = emptyFunction;
},57,[],"node_modules/fbjs/lib/emptyFunction.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _class2, _temp;

  var EventTarget = _require(_dependencyMap[0], 'event-target-shim');

  var RCTNetworking = _require(_dependencyMap[1], 'RCTNetworking');

  var base64 = _require(_dependencyMap[2], 'base64-js');

  var invariant = _require(_dependencyMap[3], 'fbjs/lib/invariant');

  var warning = _require(_dependencyMap[4], 'fbjs/lib/warning');

  var BlobManager = _require(_dependencyMap[5], 'BlobManager');

  if (BlobManager.isAvailable) {
    BlobManager.addNetworkingHandler();
  }

  var UNSENT = 0;
  var OPENED = 1;
  var HEADERS_RECEIVED = 2;
  var LOADING = 3;
  var DONE = 4;
  var SUPPORTED_RESPONSE_TYPES = {
    arraybuffer: typeof global.ArrayBuffer === 'function',
    blob: typeof global.Blob === 'function',
    document: false,
    json: true,
    text: true,
    '': true
  };
  var REQUEST_EVENTS = ['abort', 'error', 'load', 'loadstart', 'progress', 'timeout', 'loadend'];
  var XHR_EVENTS = REQUEST_EVENTS.concat('readystatechange');

  var XMLHttpRequestEventTarget = function (_EventTarget) {
    babelHelpers.inherits(XMLHttpRequestEventTarget, _EventTarget);

    function XMLHttpRequestEventTarget() {
      babelHelpers.classCallCheck(this, XMLHttpRequestEventTarget);
      return babelHelpers.possibleConstructorReturn(this, (XMLHttpRequestEventTarget.__proto__ || Object.getPrototypeOf(XMLHttpRequestEventTarget)).apply(this, arguments));
    }

    return XMLHttpRequestEventTarget;
  }(EventTarget.apply(undefined, REQUEST_EVENTS));

  var XMLHttpRequest = (_temp = _class2 = function (_EventTarget2) {
    babelHelpers.inherits(XMLHttpRequest, _EventTarget2);
    babelHelpers.createClass(XMLHttpRequest, null, [{
      key: "setInterceptor",
      value: function setInterceptor(interceptor) {
        XMLHttpRequest._interceptor = interceptor;
      }
    }]);

    function XMLHttpRequest() {
      babelHelpers.classCallCheck(this, XMLHttpRequest);

      var _this2 = babelHelpers.possibleConstructorReturn(this, (XMLHttpRequest.__proto__ || Object.getPrototypeOf(XMLHttpRequest)).call(this));

      _this2.UNSENT = UNSENT;
      _this2.OPENED = OPENED;
      _this2.HEADERS_RECEIVED = HEADERS_RECEIVED;
      _this2.LOADING = LOADING;
      _this2.DONE = DONE;
      _this2.readyState = UNSENT;
      _this2.status = 0;
      _this2.timeout = 0;
      _this2.withCredentials = true;
      _this2.upload = new XMLHttpRequestEventTarget();
      _this2._aborted = false;
      _this2._hasError = false;
      _this2._method = null;
      _this2._response = '';
      _this2._url = null;
      _this2._timedOut = false;
      _this2._trackingName = 'unknown';
      _this2._incrementalEvents = false;

      _this2._reset();

      return _this2;
    }

    babelHelpers.createClass(XMLHttpRequest, [{
      key: "_reset",
      value: function _reset() {
        this.readyState = this.UNSENT;
        this.responseHeaders = undefined;
        this.status = 0;
        delete this.responseURL;
        this._requestId = null;
        this._cachedResponse = undefined;
        this._hasError = false;
        this._headers = {};
        this._response = '';
        this._responseType = '';
        this._sent = false;
        this._lowerCaseResponseHeaders = {};

        this._clearSubscriptions();

        this._timedOut = false;
      }
    }, {
      key: "__didCreateRequest",
      value: function __didCreateRequest(requestId) {
        this._requestId = requestId;
        XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.requestSent(requestId, this._url || '', this._method || 'GET', this._headers);
      }
    }, {
      key: "__didUploadProgress",
      value: function __didUploadProgress(requestId, progress, total) {
        if (requestId === this._requestId) {
          this.upload.dispatchEvent({
            type: 'progress',
            lengthComputable: true,
            loaded: progress,
            total: total
          });
        }
      }
    }, {
      key: "__didReceiveResponse",
      value: function __didReceiveResponse(requestId, status, responseHeaders, responseURL) {
        if (requestId === this._requestId) {
          this.status = status;
          this.setResponseHeaders(responseHeaders);
          this.setReadyState(this.HEADERS_RECEIVED);

          if (responseURL || responseURL === '') {
            this.responseURL = responseURL;
          } else {
            delete this.responseURL;
          }

          XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.responseReceived(requestId, responseURL || this._url || '', status, responseHeaders || {});
        }
      }
    }, {
      key: "__didReceiveData",
      value: function __didReceiveData(requestId, response) {
        if (requestId !== this._requestId) {
          return;
        }

        this._response = response;
        this._cachedResponse = undefined;
        this.setReadyState(this.LOADING);
        XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.dataReceived(requestId, response);
      }
    }, {
      key: "__didReceiveIncrementalData",
      value: function __didReceiveIncrementalData(requestId, responseText, progress, total) {
        if (requestId !== this._requestId) {
          return;
        }

        if (!this._response) {
          this._response = responseText;
        } else {
          this._response += responseText;
        }

        XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.dataReceived(requestId, responseText);
        this.setReadyState(this.LOADING);

        this.__didReceiveDataProgress(requestId, progress, total);
      }
    }, {
      key: "__didReceiveDataProgress",
      value: function __didReceiveDataProgress(requestId, loaded, total) {
        if (requestId !== this._requestId) {
          return;
        }

        this.dispatchEvent({
          type: 'progress',
          lengthComputable: total >= 0,
          loaded: loaded,
          total: total
        });
      }
    }, {
      key: "__didCompleteResponse",
      value: function __didCompleteResponse(requestId, error, timeOutError) {
        if (requestId === this._requestId) {
          if (error) {
            if (this._responseType === '' || this._responseType === 'text') {
              this._response = error;
            }

            this._hasError = true;

            if (timeOutError) {
              this._timedOut = true;
            }
          }

          this._clearSubscriptions();

          this._requestId = null;
          this.setReadyState(this.DONE);

          if (error) {
            XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.loadingFailed(requestId, error);
          } else {
            XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.loadingFinished(requestId, this._response.length);
          }
        }
      }
    }, {
      key: "_clearSubscriptions",
      value: function _clearSubscriptions() {
        (this._subscriptions || []).forEach(function (sub) {
          if (sub) {
            sub.remove();
          }
        });
        this._subscriptions = [];
      }
    }, {
      key: "getAllResponseHeaders",
      value: function getAllResponseHeaders() {
        if (!this.responseHeaders) {
          return null;
        }

        var headers = this.responseHeaders || {};
        return Object.keys(headers).map(function (headerName) {
          return headerName + ': ' + headers[headerName];
        }).join('\r\n');
      }
    }, {
      key: "getResponseHeader",
      value: function getResponseHeader(header) {
        var value = this._lowerCaseResponseHeaders[header.toLowerCase()];

        return value !== undefined ? value : null;
      }
    }, {
      key: "setRequestHeader",
      value: function setRequestHeader(header, value) {
        if (this.readyState !== this.OPENED) {
          throw new Error('Request has not been opened');
        }

        this._headers[header.toLowerCase()] = String(value);
      }
    }, {
      key: "setTrackingName",
      value: function setTrackingName(trackingName) {
        this._trackingName = trackingName;
        return this;
      }
    }, {
      key: "open",
      value: function open(method, url, async) {
        if (this.readyState !== this.UNSENT) {
          throw new Error('Cannot open, already sending');
        }

        if (async !== undefined && !async) {
          throw new Error('Synchronous http requests are not supported');
        }

        if (!url) {
          throw new Error('Cannot load an empty url');
        }

        this._method = method.toUpperCase();
        this._url = url;
        this._aborted = false;
        this.setReadyState(this.OPENED);
      }
    }, {
      key: "send",
      value: function send(data) {
        var _this3 = this;

        if (this.readyState !== this.OPENED) {
          throw new Error('Request has not been opened');
        }

        if (this._sent) {
          throw new Error('Request has already been sent');
        }

        this._sent = true;
        var incrementalEvents = this._incrementalEvents || !!this.onreadystatechange || !!this.onprogress;

        this._subscriptions.push(RCTNetworking.addListener('didSendNetworkData', function (args) {
          return _this3.__didUploadProgress.apply(_this3, babelHelpers.toConsumableArray(args));
        }));

        this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkResponse', function (args) {
          return _this3.__didReceiveResponse.apply(_this3, babelHelpers.toConsumableArray(args));
        }));

        this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkData', function (args) {
          return _this3.__didReceiveData.apply(_this3, babelHelpers.toConsumableArray(args));
        }));

        this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkIncrementalData', function (args) {
          return _this3.__didReceiveIncrementalData.apply(_this3, babelHelpers.toConsumableArray(args));
        }));

        this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkDataProgress', function (args) {
          return _this3.__didReceiveDataProgress.apply(_this3, babelHelpers.toConsumableArray(args));
        }));

        this._subscriptions.push(RCTNetworking.addListener('didCompleteNetworkResponse', function (args) {
          return _this3.__didCompleteResponse.apply(_this3, babelHelpers.toConsumableArray(args));
        }));

        var nativeResponseType = 'text';

        if (this._responseType === 'arraybuffer') {
          nativeResponseType = 'base64';
        }

        if (this._responseType === 'blob') {
          nativeResponseType = 'blob';
        }

        invariant(this._method, 'Request method needs to be defined.');
        invariant(this._url, 'Request URL needs to be defined.');
        RCTNetworking.sendRequest(this._method, this._trackingName, this._url, this._headers, data, nativeResponseType, incrementalEvents, this.timeout, this.__didCreateRequest.bind(this), this.withCredentials);
      }
    }, {
      key: "abort",
      value: function abort() {
        this._aborted = true;

        if (this._requestId) {
          RCTNetworking.abortRequest(this._requestId);
        }

        if (!(this.readyState === this.UNSENT || this.readyState === this.OPENED && !this._sent || this.readyState === this.DONE)) {
          this._reset();

          this.setReadyState(this.DONE);
        }

        this._reset();
      }
    }, {
      key: "setResponseHeaders",
      value: function setResponseHeaders(responseHeaders) {
        this.responseHeaders = responseHeaders || null;
        var headers = responseHeaders || {};
        this._lowerCaseResponseHeaders = Object.keys(headers).reduce(function (lcaseHeaders, headerName) {
          lcaseHeaders[headerName.toLowerCase()] = headers[headerName];
          return lcaseHeaders;
        }, {});
      }
    }, {
      key: "setReadyState",
      value: function setReadyState(newState) {
        this.readyState = newState;
        this.dispatchEvent({
          type: 'readystatechange'
        });

        if (newState === this.DONE) {
          if (this._aborted) {
            this.dispatchEvent({
              type: 'abort'
            });
          } else if (this._hasError) {
            if (this._timedOut) {
              this.dispatchEvent({
                type: 'timeout'
              });
            } else {
              this.dispatchEvent({
                type: 'error'
              });
            }
          } else {
            this.dispatchEvent({
              type: 'load'
            });
          }

          this.dispatchEvent({
            type: 'loadend'
          });
        }
      }
    }, {
      key: "addEventListener",
      value: function addEventListener(type, listener) {
        if (type === 'readystatechange' || type === 'progress') {
          this._incrementalEvents = true;
        }

        babelHelpers.get(XMLHttpRequest.prototype.__proto__ || Object.getPrototypeOf(XMLHttpRequest.prototype), "addEventListener", this).call(this, type, listener);
      }
    }, {
      key: "responseType",
      get: function get() {
        return this._responseType;
      },
      set: function set(responseType) {
        if (this._sent) {
          throw new Error('Failed to set the \'responseType\' property on \'XMLHttpRequest\': The ' + 'response type cannot be set after the request has been sent.');
        }

        if (!SUPPORTED_RESPONSE_TYPES.hasOwnProperty(responseType)) {
          warning(false, "The provided value '" + responseType + "' is not a valid 'responseType'.");
          return;
        }

        invariant(SUPPORTED_RESPONSE_TYPES[responseType] || responseType === 'document', "The provided value '" + responseType + "' is unsupported in this environment.");

        if (responseType === 'blob') {
          invariant(BlobManager.isAvailable, 'Native module BlobModule is required for blob support');
        }

        this._responseType = responseType;
      }
    }, {
      key: "responseText",
      get: function get() {
        if (this._responseType !== '' && this._responseType !== 'text') {
          throw new Error("The 'responseText' property is only available if 'responseType' " + ("is set to '' or 'text', but it is '" + this._responseType + "'."));
        }

        if (this.readyState < LOADING) {
          return '';
        }

        return this._response;
      }
    }, {
      key: "response",
      get: function get() {
        var responseType = this.responseType;

        if (responseType === '' || responseType === 'text') {
          return this.readyState < LOADING || this._hasError ? '' : this._response;
        }

        if (this.readyState !== DONE) {
          return null;
        }

        if (this._cachedResponse !== undefined) {
          return this._cachedResponse;
        }

        switch (responseType) {
          case 'document':
            this._cachedResponse = null;
            break;

          case 'arraybuffer':
            this._cachedResponse = base64.toByteArray(this._response).buffer;
            break;

          case 'blob':
            if (typeof this._response === 'object' && this._response) {
              this._cachedResponse = BlobManager.createFromOptions(this._response);
            } else {
              throw new Error("Invalid response for blob: " + this._response);
            }

            break;

          case 'json':
            try {
              this._cachedResponse = JSON.parse(this._response);
            } catch (_) {
              this._cachedResponse = null;
            }

            break;

          default:
            this._cachedResponse = null;
        }

        return this._cachedResponse;
      }
    }]);
    return XMLHttpRequest;
  }(EventTarget.apply(undefined, babelHelpers.toConsumableArray(XHR_EVENTS))), _class2.UNSENT = UNSENT, _class2.OPENED = OPENED, _class2.HEADERS_RECEIVED = HEADERS_RECEIVED, _class2.LOADING = LOADING, _class2.DONE = DONE, _class2._interceptor = null, _temp);
  module.exports = XMLHttpRequest;
},58,[59,63,73,13,56,75],"XMLHttpRequest");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    var Commons = _require(_dependencyMap[0], "./commons");

    var CustomEventTarget = _require(_dependencyMap[1], "./custom-event-target");

    var EventWrapper = _require(_dependencyMap[2], "./event-wrapper");

    var LISTENERS = Commons.LISTENERS;
    var CAPTURE = Commons.CAPTURE;
    var BUBBLE = Commons.BUBBLE;
    var ATTRIBUTE = Commons.ATTRIBUTE;
    var newNode = Commons.newNode;
    var defineCustomEventTarget = CustomEventTarget.defineCustomEventTarget;
    var createEventWrapper = EventWrapper.createEventWrapper;
    var STOP_IMMEDIATE_PROPAGATION_FLAG = EventWrapper.STOP_IMMEDIATE_PROPAGATION_FLAG;
    var HAS_EVENTTARGET_INTERFACE = typeof window !== "undefined" && typeof window.EventTarget !== "undefined";

    var EventTarget = module.exports = function EventTarget() {
        if (this instanceof EventTarget) {
            Object.defineProperty(this, LISTENERS, {
                value: Object.create(null)
            });
        } else if (arguments.length === 1 && Array.isArray(arguments[0])) {
            return defineCustomEventTarget(EventTarget, arguments[0]);
        } else if (arguments.length > 0) {
            var types = Array(arguments.length);

            for (var i = 0; i < arguments.length; ++i) {
                types[i] = arguments[i];
            }

            return defineCustomEventTarget(EventTarget, types);
        } else {
            throw new TypeError("Cannot call a class as a function");
        }
    };

    EventTarget.prototype = Object.create((HAS_EVENTTARGET_INTERFACE ? window.EventTarget : Object).prototype, {
        constructor: {
            value: EventTarget,
            writable: true,
            configurable: true
        },
        addEventListener: {
            value: function addEventListener(type, listener, capture) {
                if (listener == null) {
                    return false;
                }

                if (typeof listener !== "function" && typeof listener !== "object") {
                    throw new TypeError("\"listener\" is not an object.");
                }

                var kind = capture ? CAPTURE : BUBBLE;
                var node = this[LISTENERS][type];

                if (node == null) {
                    this[LISTENERS][type] = newNode(listener, kind);
                    return true;
                }

                var prev = null;

                while (node != null) {
                    if (node.listener === listener && node.kind === kind) {
                        return false;
                    }

                    prev = node;
                    node = node.next;
                }

                prev.next = newNode(listener, kind);
                return true;
            },
            configurable: true,
            writable: true
        },
        removeEventListener: {
            value: function removeEventListener(type, listener, capture) {
                if (listener == null) {
                    return false;
                }

                var kind = capture ? CAPTURE : BUBBLE;
                var prev = null;
                var node = this[LISTENERS][type];

                while (node != null) {
                    if (node.listener === listener && node.kind === kind) {
                        if (prev == null) {
                            this[LISTENERS][type] = node.next;
                        } else {
                            prev.next = node.next;
                        }

                        return true;
                    }

                    prev = node;
                    node = node.next;
                }

                return false;
            },
            configurable: true,
            writable: true
        },
        dispatchEvent: {
            value: function dispatchEvent(event) {
                var node = this[LISTENERS][event.type];

                if (node == null) {
                    return true;
                }

                var wrapped = createEventWrapper(event, this);

                while (node != null) {
                    if (typeof node.listener === "function") {
                        node.listener.call(this, wrapped);
                    } else if (node.kind !== ATTRIBUTE && typeof node.listener.handleEvent === "function") {
                        node.listener.handleEvent(wrapped);
                    }

                    if (wrapped[STOP_IMMEDIATE_PROPAGATION_FLAG]) {
                        break;
                    }

                    node = node.next;
                }

                return !wrapped.defaultPrevented;
            },
            configurable: true,
            writable: true
        }
    });
},59,[60,61,62],"node_modules/event-target-shim/lib/event-target.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var createUniqueKey = exports.createUniqueKey = typeof Symbol !== "undefined" ? Symbol : function createUniqueKey(name) {
    return "[[" + name + "_" + Math.random().toFixed(8).slice(2) + "]]";
  };
  exports.LISTENERS = createUniqueKey("listeners");
  exports.CAPTURE = 1;
  exports.BUBBLE = 2;
  exports.ATTRIBUTE = 3;

  exports.newNode = function newNode(listener, kind) {
    return {
      listener: listener,
      kind: kind,
      next: null
    };
  };
},60,[],"node_modules/event-target-shim/lib/commons.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    var Commons = _require(_dependencyMap[0], "./commons");

    var LISTENERS = Commons.LISTENERS;
    var ATTRIBUTE = Commons.ATTRIBUTE;
    var newNode = Commons.newNode;

    function getAttributeListener(eventTarget, type) {
        var node = eventTarget[LISTENERS][type];

        while (node != null) {
            if (node.kind === ATTRIBUTE) {
                return node.listener;
            }

            node = node.next;
        }

        return null;
    }

    function setAttributeListener(eventTarget, type, listener) {
        if (typeof listener !== "function" && typeof listener !== "object") {
            listener = null;
        }

        var prev = null;
        var node = eventTarget[LISTENERS][type];

        while (node != null) {
            if (node.kind === ATTRIBUTE) {
                if (prev == null) {
                    eventTarget[LISTENERS][type] = node.next;
                } else {
                    prev.next = node.next;
                }
            } else {
                prev = node;
            }

            node = node.next;
        }

        if (listener != null) {
            if (prev == null) {
                eventTarget[LISTENERS][type] = newNode(listener, ATTRIBUTE);
            } else {
                prev.next = newNode(listener, ATTRIBUTE);
            }
        }
    }

    exports.defineCustomEventTarget = function (EventTargetBase, types) {
        function EventTarget() {
            EventTargetBase.call(this);
        }

        var descripter = {
            constructor: {
                value: EventTarget,
                configurable: true,
                writable: true
            }
        };
        types.forEach(function (type) {
            descripter["on" + type] = {
                get: function get() {
                    return getAttributeListener(this, type);
                },
                set: function set(listener) {
                    setAttributeListener(this, type, listener);
                },
                configurable: true,
                enumerable: true
            };
        });
        EventTarget.prototype = Object.create(EventTargetBase.prototype, descripter);
        return EventTarget;
    };
},61,[60],"node_modules/event-target-shim/lib/custom-event-target.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    var createUniqueKey = _require(_dependencyMap[0], "./commons").createUniqueKey;

    var STOP_IMMEDIATE_PROPAGATION_FLAG = createUniqueKey("stop_immediate_propagation_flag");
    var CANCELED_FLAG = createUniqueKey("canceled_flag");
    var ORIGINAL_EVENT = createUniqueKey("original_event");
    var wrapperPrototypeDefinition = Object.freeze({
        stopPropagation: Object.freeze({
            value: function stopPropagation() {
                var e = this[ORIGINAL_EVENT];

                if (typeof e.stopPropagation === "function") {
                    e.stopPropagation();
                }
            },
            writable: true,
            configurable: true
        }),
        stopImmediatePropagation: Object.freeze({
            value: function stopImmediatePropagation() {
                this[STOP_IMMEDIATE_PROPAGATION_FLAG] = true;
                var e = this[ORIGINAL_EVENT];

                if (typeof e.stopImmediatePropagation === "function") {
                    e.stopImmediatePropagation();
                }
            },
            writable: true,
            configurable: true
        }),
        preventDefault: Object.freeze({
            value: function preventDefault() {
                if (this.cancelable === true) {
                    this[CANCELED_FLAG] = true;
                }

                var e = this[ORIGINAL_EVENT];

                if (typeof e.preventDefault === "function") {
                    e.preventDefault();
                }
            },
            writable: true,
            configurable: true
        }),
        defaultPrevented: Object.freeze({
            get: function defaultPrevented() {
                return this[CANCELED_FLAG];
            },
            enumerable: true,
            configurable: true
        })
    });
    exports.STOP_IMMEDIATE_PROPAGATION_FLAG = STOP_IMMEDIATE_PROPAGATION_FLAG;

    exports.createEventWrapper = function createEventWrapper(event, eventTarget) {
        var timeStamp = typeof event.timeStamp === "number" ? event.timeStamp : Date.now();
        var propertyDefinition = {
            type: {
                value: event.type,
                enumerable: true
            },
            target: {
                value: eventTarget,
                enumerable: true
            },
            currentTarget: {
                value: eventTarget,
                enumerable: true
            },
            eventPhase: {
                value: 2,
                enumerable: true
            },
            bubbles: {
                value: Boolean(event.bubbles),
                enumerable: true
            },
            cancelable: {
                value: Boolean(event.cancelable),
                enumerable: true
            },
            timeStamp: {
                value: timeStamp,
                enumerable: true
            },
            isTrusted: {
                value: false,
                enumerable: true
            }
        };
        propertyDefinition[STOP_IMMEDIATE_PROPAGATION_FLAG] = {
            value: false,
            writable: true
        };
        propertyDefinition[CANCELED_FLAG] = {
            value: false,
            writable: true
        };
        propertyDefinition[ORIGINAL_EVENT] = {
            value: event
        };

        if (typeof event.detail !== "undefined") {
            propertyDefinition.detail = {
                value: event.detail,
                enumerable: true
            };
        }

        return Object.create(Object.create(event, wrapperPrototypeDefinition), propertyDefinition);
    };
},62,[60],"node_modules/event-target-shim/lib/event-wrapper.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var MissingNativeEventEmitterShim = _require(_dependencyMap[0], 'MissingNativeEventEmitterShim');

  var NativeEventEmitter = _require(_dependencyMap[1], 'NativeEventEmitter');

  var RCTNetworkingNative = _require(_dependencyMap[2], 'NativeModules').Networking;

  var convertRequestBody = _require(_dependencyMap[3], 'convertRequestBody');

  var RCTNetworking = function (_NativeEventEmitter) {
    babelHelpers.inherits(RCTNetworking, _NativeEventEmitter);

    function RCTNetworking() {
      babelHelpers.classCallCheck(this, RCTNetworking);

      var _this = babelHelpers.possibleConstructorReturn(this, (RCTNetworking.__proto__ || Object.getPrototypeOf(RCTNetworking)).call(this, RCTNetworkingNative));

      _this.isAvailable = true;
      return _this;
    }

    babelHelpers.createClass(RCTNetworking, [{
      key: "sendRequest",
      value: function sendRequest(method, trackingName, url, headers, data, responseType, incrementalUpdates, timeout, callback, withCredentials) {
        var body = convertRequestBody(data);
        RCTNetworkingNative.sendRequest({
          method: method,
          url: url,
          data: babelHelpers.extends({}, body, {
            trackingName: trackingName
          }),
          headers: headers,
          responseType: responseType,
          incrementalUpdates: incrementalUpdates,
          timeout: timeout,
          withCredentials: withCredentials
        }, callback);
      }
    }, {
      key: "abortRequest",
      value: function abortRequest(requestId) {
        RCTNetworkingNative.abortRequest(requestId);
      }
    }, {
      key: "clearCookies",
      value: function clearCookies(callback) {
        RCTNetworkingNative.clearCookies(callback);
      }
    }]);
    return RCTNetworking;
  }(NativeEventEmitter);

  if (__DEV__ && !RCTNetworkingNative) {
    var MissingNativeRCTNetworkingShim = function (_MissingNativeEventEm) {
      babelHelpers.inherits(MissingNativeRCTNetworkingShim, _MissingNativeEventEm);

      function MissingNativeRCTNetworkingShim() {
        babelHelpers.classCallCheck(this, MissingNativeRCTNetworkingShim);
        return babelHelpers.possibleConstructorReturn(this, (MissingNativeRCTNetworkingShim.__proto__ || Object.getPrototypeOf(MissingNativeRCTNetworkingShim)).call(this, 'RCTNetworking', 'Networking'));
      }

      babelHelpers.createClass(MissingNativeRCTNetworkingShim, [{
        key: "sendRequest",
        value: function sendRequest() {
          this.throwMissingNativeModule();
        }
      }, {
        key: "abortRequest",
        value: function abortRequest() {
          this.throwMissingNativeModule();
        }
      }, {
        key: "clearCookies",
        value: function clearCookies() {
          this.throwMissingNativeModule();
        }
      }]);
      return MissingNativeRCTNetworkingShim;
    }(MissingNativeEventEmitterShim);

    RCTNetworking = new MissingNativeRCTNetworkingShim();
  } else {
    RCTNetworking = new RCTNetworking();
  }

  module.exports = RCTNetworking;
},63,[64,69,15,71],"RCTNetworking");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var EmitterSubscription = _require(_dependencyMap[0], 'EmitterSubscription');

  var EventEmitter = _require(_dependencyMap[1], 'EventEmitter');

  var invariant = _require(_dependencyMap[2], 'fbjs/lib/invariant');

  var MissingNativeEventEmitterShim = function (_EventEmitter) {
    babelHelpers.inherits(MissingNativeEventEmitterShim, _EventEmitter);

    function MissingNativeEventEmitterShim(nativeModuleName, nativeEventEmitterName) {
      babelHelpers.classCallCheck(this, MissingNativeEventEmitterShim);

      var _this = babelHelpers.possibleConstructorReturn(this, (MissingNativeEventEmitterShim.__proto__ || Object.getPrototypeOf(MissingNativeEventEmitterShim)).call(this, null));

      _this.isAvailable = false;
      _this._nativeModuleName = nativeModuleName;
      _this._nativeEventEmitterName = nativeEventEmitterName;
      return _this;
    }

    babelHelpers.createClass(MissingNativeEventEmitterShim, [{
      key: "throwMissingNativeModule",
      value: function throwMissingNativeModule() {
        invariant(false, "Cannot use '" + this._nativeEventEmitterName + "' module when " + ("native '" + this._nativeModuleName + "' is not included in the build. ") + ("Either include it, or check '" + this._nativeEventEmitterName + "'.isAvailable ") + 'before calling any methods.');
      }
    }, {
      key: "addListener",
      value: function addListener(eventType, listener, context) {
        this.throwMissingNativeModule();
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners(eventType) {
        this.throwMissingNativeModule();
      }
    }, {
      key: "removeSubscription",
      value: function removeSubscription(subscription) {
        this.throwMissingNativeModule();
      }
    }]);
    return MissingNativeEventEmitterShim;
  }(EventEmitter);

  module.exports = MissingNativeEventEmitterShim;
},64,[65,67,13],"MissingNativeEventEmitterShim");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var EventSubscription = _require(_dependencyMap[0], 'EventSubscription');

  var EmitterSubscription = function (_EventSubscription) {
    babelHelpers.inherits(EmitterSubscription, _EventSubscription);

    function EmitterSubscription(emitter, subscriber, listener, context) {
      babelHelpers.classCallCheck(this, EmitterSubscription);

      var _this = babelHelpers.possibleConstructorReturn(this, (EmitterSubscription.__proto__ || Object.getPrototypeOf(EmitterSubscription)).call(this, subscriber));

      _this.emitter = emitter;
      _this.listener = listener;
      _this.context = context;
      return _this;
    }

    babelHelpers.createClass(EmitterSubscription, [{
      key: "remove",
      value: function remove() {
        this.emitter.removeSubscription(this);
      }
    }]);
    return EmitterSubscription;
  }(EventSubscription);

  module.exports = EmitterSubscription;
},65,[66],"EmitterSubscription");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var EventSubscription = function () {
    function EventSubscription(subscriber) {
      babelHelpers.classCallCheck(this, EventSubscription);
      this.subscriber = subscriber;
    }

    babelHelpers.createClass(EventSubscription, [{
      key: "remove",
      value: function remove() {
        this.subscriber.removeSubscription(this);
      }
    }]);
    return EventSubscription;
  }();

  module.exports = EventSubscription;
},66,[],"EventSubscription");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var EmitterSubscription = _require(_dependencyMap[0], 'EmitterSubscription');

  var EventSubscriptionVendor = _require(_dependencyMap[1], 'EventSubscriptionVendor');

  var emptyFunction = _require(_dependencyMap[2], 'fbjs/lib/emptyFunction');

  var invariant = _require(_dependencyMap[3], 'fbjs/lib/invariant');

  var EventEmitter = function () {
    function EventEmitter(subscriber) {
      babelHelpers.classCallCheck(this, EventEmitter);
      this._subscriber = subscriber || new EventSubscriptionVendor();
    }

    babelHelpers.createClass(EventEmitter, [{
      key: "addListener",
      value: function addListener(eventType, listener, context) {
        return this._subscriber.addSubscription(eventType, new EmitterSubscription(this, this._subscriber, listener, context));
      }
    }, {
      key: "once",
      value: function once(eventType, listener, context) {
        var _this = this;

        return this.addListener(eventType, function () {
          for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this.removeCurrentListener();

          listener.apply(context, args);
        });
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners(eventType) {
        this._subscriber.removeAllSubscriptions(eventType);
      }
    }, {
      key: "removeCurrentListener",
      value: function removeCurrentListener() {
        invariant(!!this._currentSubscription, 'Not in an emitting cycle; there is no current subscription');
        this.removeSubscription(this._currentSubscription);
      }
    }, {
      key: "removeSubscription",
      value: function removeSubscription(subscription) {
        invariant(subscription.emitter === this, 'Subscription does not belong to this emitter.');

        this._subscriber.removeSubscription(subscription);
      }
    }, {
      key: "listeners",
      value: function listeners(eventType) {
        var subscriptions = this._subscriber.getSubscriptionsForType(eventType);

        return subscriptions ? subscriptions.filter(emptyFunction.thatReturnsTrue).map(function (subscription) {
          return subscription.listener;
        }) : [];
      }
    }, {
      key: "emit",
      value: function emit(eventType) {
        var subscriptions = this._subscriber.getSubscriptionsForType(eventType);

        if (subscriptions) {
          for (var i = 0, l = subscriptions.length; i < l; i++) {
            var subscription = subscriptions[i];

            if (subscription) {
              this._currentSubscription = subscription;
              subscription.listener.apply(subscription.context, Array.prototype.slice.call(arguments, 1));
            }
          }

          this._currentSubscription = null;
        }
      }
    }, {
      key: "removeListener",
      value: function removeListener(eventType, listener) {
        var subscriptions = this._subscriber.getSubscriptionsForType(eventType);

        if (subscriptions) {
          for (var i = 0, l = subscriptions.length; i < l; i++) {
            var subscription = subscriptions[i];

            if (subscription && subscription.listener === listener) {
              subscription.remove();
            }
          }
        }
      }
    }]);
    return EventEmitter;
  }();

  module.exports = EventEmitter;
},67,[65,68,57,13],"EventEmitter");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = _require(_dependencyMap[0], 'fbjs/lib/invariant');

  var EventSubscriptionVendor = function () {
    function EventSubscriptionVendor() {
      babelHelpers.classCallCheck(this, EventSubscriptionVendor);
      this._subscriptionsForType = {};
      this._currentSubscription = null;
    }

    babelHelpers.createClass(EventSubscriptionVendor, [{
      key: "addSubscription",
      value: function addSubscription(eventType, subscription) {
        invariant(subscription.subscriber === this, 'The subscriber of the subscription is incorrectly set.');

        if (!this._subscriptionsForType[eventType]) {
          this._subscriptionsForType[eventType] = [];
        }

        var key = this._subscriptionsForType[eventType].length;

        this._subscriptionsForType[eventType].push(subscription);

        subscription.eventType = eventType;
        subscription.key = key;
        return subscription;
      }
    }, {
      key: "removeAllSubscriptions",
      value: function removeAllSubscriptions(eventType) {
        if (eventType === undefined) {
          this._subscriptionsForType = {};
        } else {
          delete this._subscriptionsForType[eventType];
        }
      }
    }, {
      key: "removeSubscription",
      value: function removeSubscription(subscription) {
        var eventType = subscription.eventType;
        var key = subscription.key;
        var subscriptionsForType = this._subscriptionsForType[eventType];

        if (subscriptionsForType) {
          delete subscriptionsForType[key];
        }
      }
    }, {
      key: "getSubscriptionsForType",
      value: function getSubscriptionsForType(eventType) {
        return this._subscriptionsForType[eventType];
      }
    }]);
    return EventSubscriptionVendor;
  }();

  module.exports = EventSubscriptionVendor;
},68,[13],"EventSubscriptionVendor");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var EventEmitter = _require(_dependencyMap[0], 'EventEmitter');

  var Platform = _require(_dependencyMap[1], 'Platform');

  var RCTDeviceEventEmitter = _require(_dependencyMap[2], 'RCTDeviceEventEmitter');

  var invariant = _require(_dependencyMap[3], 'fbjs/lib/invariant');

  var NativeEventEmitter = function (_EventEmitter) {
    babelHelpers.inherits(NativeEventEmitter, _EventEmitter);

    function NativeEventEmitter(nativeModule) {
      babelHelpers.classCallCheck(this, NativeEventEmitter);

      var _this = babelHelpers.possibleConstructorReturn(this, (NativeEventEmitter.__proto__ || Object.getPrototypeOf(NativeEventEmitter)).call(this, RCTDeviceEventEmitter.sharedSubscriber));

      if (Platform.OS === 'ios') {
        invariant(nativeModule, 'Native module cannot be null.');
        _this._nativeModule = nativeModule;
      }

      return _this;
    }

    babelHelpers.createClass(NativeEventEmitter, [{
      key: "addListener",
      value: function addListener(eventType, listener, context) {
        if (this._nativeModule != null) {
          this._nativeModule.addListener(eventType);
        }

        return babelHelpers.get(NativeEventEmitter.prototype.__proto__ || Object.getPrototypeOf(NativeEventEmitter.prototype), "addListener", this).call(this, eventType, listener, context);
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners(eventType) {
        invariant(eventType, 'eventType argument is required.');
        var count = this.listeners(eventType).length;

        if (this._nativeModule != null) {
          this._nativeModule.removeListeners(count);
        }

        babelHelpers.get(NativeEventEmitter.prototype.__proto__ || Object.getPrototypeOf(NativeEventEmitter.prototype), "removeAllListeners", this).call(this, eventType);
      }
    }, {
      key: "removeSubscription",
      value: function removeSubscription(subscription) {
        if (this._nativeModule != null) {
          this._nativeModule.removeListeners(1);
        }

        babelHelpers.get(NativeEventEmitter.prototype.__proto__ || Object.getPrototypeOf(NativeEventEmitter.prototype), "removeSubscription", this).call(this, subscription);
      }
    }]);
    return NativeEventEmitter;
  }(EventEmitter);

  module.exports = NativeEventEmitter;
},69,[67,52,70,13],"NativeEventEmitter");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var EventEmitter = _require(_dependencyMap[0], 'EventEmitter');

  var EventSubscriptionVendor = _require(_dependencyMap[1], 'EventSubscriptionVendor');

  function checkNativeEventModule(eventType) {
    if (eventType) {
      if (eventType.lastIndexOf('statusBar', 0) === 0) {
        throw new Error('`' + eventType + '` event should be registered via the StatusBarIOS module');
      }

      if (eventType.lastIndexOf('keyboard', 0) === 0) {
        throw new Error('`' + eventType + '` event should be registered via the Keyboard module');
      }

      if (eventType === 'appStateDidChange' || eventType === 'memoryWarning') {
        throw new Error('`' + eventType + '` event should be registered via the AppState module');
      }
    }
  }

  var RCTDeviceEventEmitter = function (_EventEmitter) {
    babelHelpers.inherits(RCTDeviceEventEmitter, _EventEmitter);

    function RCTDeviceEventEmitter() {
      babelHelpers.classCallCheck(this, RCTDeviceEventEmitter);
      var sharedSubscriber = new EventSubscriptionVendor();

      var _this = babelHelpers.possibleConstructorReturn(this, (RCTDeviceEventEmitter.__proto__ || Object.getPrototypeOf(RCTDeviceEventEmitter)).call(this, sharedSubscriber));

      _this.sharedSubscriber = sharedSubscriber;
      return _this;
    }

    babelHelpers.createClass(RCTDeviceEventEmitter, [{
      key: "addListener",
      value: function addListener(eventType, listener, context) {
        if (__DEV__) {
          checkNativeEventModule(eventType);
        }

        return babelHelpers.get(RCTDeviceEventEmitter.prototype.__proto__ || Object.getPrototypeOf(RCTDeviceEventEmitter.prototype), "addListener", this).call(this, eventType, listener, context);
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners(eventType) {
        if (__DEV__) {
          checkNativeEventModule(eventType);
        }

        babelHelpers.get(RCTDeviceEventEmitter.prototype.__proto__ || Object.getPrototypeOf(RCTDeviceEventEmitter.prototype), "removeAllListeners", this).call(this, eventType);
      }
    }, {
      key: "removeSubscription",
      value: function removeSubscription(subscription) {
        if (subscription.emitter !== this) {
          subscription.emitter.removeSubscription(subscription);
        } else {
          babelHelpers.get(RCTDeviceEventEmitter.prototype.__proto__ || Object.getPrototypeOf(RCTDeviceEventEmitter.prototype), "removeSubscription", this).call(this, subscription);
        }
      }
    }]);
    return RCTDeviceEventEmitter;
  }(EventEmitter);

  module.exports = new RCTDeviceEventEmitter();
},70,[67,68],"RCTDeviceEventEmitter");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var binaryToBase64 = _require(_dependencyMap[0], 'binaryToBase64');

  var Blob = _require(_dependencyMap[1], 'Blob');

  var FormData = _require(_dependencyMap[2], 'FormData');

  function convertRequestBody(body) {
    if (typeof body === 'string') {
      return {
        string: body
      };
    }

    if (body instanceof Blob) {
      return {
        blob: body.data
      };
    }

    if (body instanceof FormData) {
      return {
        formData: body.getParts()
      };
    }

    if (body instanceof ArrayBuffer || ArrayBuffer.isView(body)) {
      return {
        base64: binaryToBase64(body)
      };
    }

    return body;
  }

  module.exports = convertRequestBody;
},71,[72,74,77],"convertRequestBody");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var base64 = _require(_dependencyMap[0], 'base64-js');

  function binaryToBase64(data) {
    if (data instanceof ArrayBuffer) {
      data = new Uint8Array(data);
    }

    if (data instanceof Uint8Array) {
      return base64.fromByteArray(data);
    }

    if (!ArrayBuffer.isView(data)) {
      throw new Error('data must be ArrayBuffer or typed array');
    }

    var _data = data,
        buffer = _data.buffer,
        byteOffset = _data.byteOffset,
        byteLength = _data.byteLength;
    return base64.fromByteArray(new Uint8Array(buffer, byteOffset, byteLength));
  }

  module.exports = binaryToBase64;
},72,[73],"binaryToBase64");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  exports.byteLength = byteLength;
  exports.toByteArray = toByteArray;
  exports.fromByteArray = fromByteArray;
  var lookup = [];
  var revLookup = [];
  var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

  for (var i = 0, len = code.length; i < len; ++i) {
    lookup[i] = code[i];
    revLookup[code.charCodeAt(i)] = i;
  }

  revLookup['-'.charCodeAt(0)] = 62;
  revLookup['_'.charCodeAt(0)] = 63;

  function placeHoldersCount(b64) {
    var len = b64.length;

    if (len % 4 > 0) {
      throw new Error('Invalid string. Length must be a multiple of 4');
    }

    return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;
  }

  function byteLength(b64) {
    return b64.length * 3 / 4 - placeHoldersCount(b64);
  }

  function toByteArray(b64) {
    var i, l, tmp, placeHolders, arr;
    var len = b64.length;
    placeHolders = placeHoldersCount(b64);
    arr = new Arr(len * 3 / 4 - placeHolders);
    l = placeHolders > 0 ? len - 4 : len;
    var L = 0;

    for (i = 0; i < l; i += 4) {
      tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
      arr[L++] = tmp >> 16 & 0xFF;
      arr[L++] = tmp >> 8 & 0xFF;
      arr[L++] = tmp & 0xFF;
    }

    if (placeHolders === 2) {
      tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
      arr[L++] = tmp & 0xFF;
    } else if (placeHolders === 1) {
      tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
      arr[L++] = tmp >> 8 & 0xFF;
      arr[L++] = tmp & 0xFF;
    }

    return arr;
  }

  function tripletToBase64(num) {
    return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
  }

  function encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];

    for (var i = start; i < end; i += 3) {
      tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
      output.push(tripletToBase64(tmp));
    }

    return output.join('');
  }

  function fromByteArray(uint8) {
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3;
    var output = '';
    var parts = [];
    var maxChunkLength = 16383;

    for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
      parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
    }

    if (extraBytes === 1) {
      tmp = uint8[len - 1];
      output += lookup[tmp >> 2];
      output += lookup[tmp << 4 & 0x3F];
      output += '==';
    } else if (extraBytes === 2) {
      tmp = (uint8[len - 2] << 8) + uint8[len - 1];
      output += lookup[tmp >> 10];
      output += lookup[tmp >> 4 & 0x3F];
      output += lookup[tmp << 2 & 0x3F];
      output += '=';
    }

    parts.push(output);
    return parts.join('');
  }
},73,[],"node_modules/base64-js/index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var Blob = function () {
    function Blob() {
      var parts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var options = arguments[1];
      babelHelpers.classCallCheck(this, Blob);

      var BlobManager = _require(_dependencyMap[0], 'BlobManager');

      this.data = BlobManager.createFromParts(parts, options).data;
    }

    babelHelpers.createClass(Blob, [{
      key: "slice",
      value: function slice(start, end) {
        var BlobManager = _require(_dependencyMap[0], 'BlobManager');

        var _data = this.data,
            offset = _data.offset,
            size = _data.size;

        if (typeof start === 'number') {
          if (start > size) {
            start = size;
          }

          offset += start;
          size -= start;

          if (typeof end === 'number') {
            if (end < 0) {
              end = this.size + end;
            }

            size = end - start;
          }
        }

        return BlobManager.createFromOptions({
          blobId: this.data.blobId,
          offset: offset,
          size: size
        });
      }
    }, {
      key: "close",
      value: function close() {
        var BlobManager = _require(_dependencyMap[0], 'BlobManager');

        BlobManager.release(this.data.blobId);
        this.data = null;
      }
    }, {
      key: "data",
      set: function set(data) {
        this._data = data;
      },
      get: function get() {
        if (!this._data) {
          throw new Error('Blob has been closed and is no longer available');
        }

        return this._data;
      }
    }, {
      key: "size",
      get: function get() {
        return this.data.size;
      }
    }, {
      key: "type",
      get: function get() {
        return this.data.type || '';
      }
    }]);
    return Blob;
  }();

  module.exports = Blob;
},74,[75],"Blob");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _class, _temp;

  var Blob = _require2(_dependencyMap[0], 'Blob');

  var BlobRegistry = _require2(_dependencyMap[1], 'BlobRegistry');

  var _require = _require2(_dependencyMap[2], 'NativeModules'),
      BlobModule = _require.BlobModule;

  function uuidv4() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
      var r = Math.random() * 16 | 0,
          v = c == 'x' ? r : r & 0x3 | 0x8;
      return v.toString(16);
    });
  }

  var BlobManager = (_temp = _class = function () {
    function BlobManager() {
      babelHelpers.classCallCheck(this, BlobManager);
    }

    babelHelpers.createClass(BlobManager, null, [{
      key: "createFromParts",
      value: function createFromParts(parts, options) {
        var blobId = uuidv4();
        var items = parts.map(function (part) {
          if (part instanceof ArrayBuffer || global.ArrayBufferView && part instanceof global.ArrayBufferView) {
            throw new Error("Creating blobs from 'ArrayBuffer' and 'ArrayBufferView' are not supported");
          }

          if (part instanceof Blob) {
            return {
              data: part.data,
              type: 'blob'
            };
          } else {
            return {
              data: String(part),
              type: 'string'
            };
          }
        });
        var size = items.reduce(function (acc, curr) {
          if (curr.type === 'string') {
            return acc + global.unescape(encodeURI(curr.data)).length;
          } else {
            return acc + curr.data.size;
          }
        }, 0);
        BlobModule.createFromParts(items, blobId);
        return BlobManager.createFromOptions({
          blobId: blobId,
          offset: 0,
          size: size,
          type: options ? options.type : '',
          lastModified: options ? options.lastModified : Date.now()
        });
      }
    }, {
      key: "createFromOptions",
      value: function createFromOptions(options) {
        BlobRegistry.register(options.blobId);
        return babelHelpers.extends(Object.create(Blob.prototype), {
          data: options
        });
      }
    }, {
      key: "release",
      value: function release(blobId) {
        BlobRegistry.unregister(blobId);

        if (BlobRegistry.has(blobId)) {
          return;
        }

        BlobModule.release(blobId);
      }
    }, {
      key: "addNetworkingHandler",
      value: function addNetworkingHandler() {
        BlobModule.addNetworkingHandler();
      }
    }, {
      key: "addWebSocketHandler",
      value: function addWebSocketHandler(socketId) {
        BlobModule.addWebSocketHandler(socketId);
      }
    }, {
      key: "removeWebSocketHandler",
      value: function removeWebSocketHandler(socketId) {
        BlobModule.removeWebSocketHandler(socketId);
      }
    }, {
      key: "sendOverSocket",
      value: function sendOverSocket(blob, socketId) {
        BlobModule.sendOverSocket(blob.data, socketId);
      }
    }]);
    return BlobManager;
  }(), _class.isAvailable = !!BlobModule, _temp);
  module.exports = BlobManager;
},75,[74,76,15],"BlobManager");
__d(function (global, _require, module, exports, _dependencyMap) {
  var registry = {};

  var register = function register(id) {
    if (registry[id]) {
      registry[id]++;
    } else {
      registry[id] = 1;
    }
  };

  var unregister = function unregister(id) {
    if (registry[id]) {
      registry[id]--;

      if (registry[id] <= 0) {
        delete registry[id];
      }
    }
  };

  var has = function has(id) {
    return registry[id] && registry[id] > 0;
  };

  module.exports = {
    register: register,
    unregister: unregister,
    has: has
  };
},76,[],"BlobRegistry");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var FormData = function () {
    function FormData() {
      babelHelpers.classCallCheck(this, FormData);
      this._parts = [];
    }

    babelHelpers.createClass(FormData, [{
      key: "append",
      value: function append(key, value) {
        this._parts.push([key, value]);
      }
    }, {
      key: "getParts",
      value: function getParts() {
        return this._parts.map(function (_ref) {
          var _ref2 = babelHelpers.slicedToArray(_ref, 2),
              name = _ref2[0],
              value = _ref2[1];

          var contentDisposition = 'form-data; name="' + name + '"';
          var headers = {
            'content-disposition': contentDisposition
          };

          if (typeof value === 'object' && value) {
            if (typeof value.name === 'string') {
              headers['content-disposition'] += '; filename="' + value.name + '"';
            }

            if (typeof value.type === 'string') {
              headers['content-type'] = value.type;
            }

            return babelHelpers.extends({}, value, {
              headers: headers,
              fieldName: name
            });
          }

          return {
            string: String(value),
            headers: headers,
            fieldName: name
          };
        });
      }
    }]);
    return FormData;
  }();

  module.exports = FormData;
},77,[],"FormData");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _class, _temp;

  var Blob = _require(_dependencyMap[0], 'Blob');

  var EventTarget = _require(_dependencyMap[1], 'event-target-shim');

  var NativeEventEmitter = _require(_dependencyMap[2], 'NativeEventEmitter');

  var BlobManager = _require(_dependencyMap[3], 'BlobManager');

  var NativeModules = _require(_dependencyMap[4], 'NativeModules');

  var Platform = _require(_dependencyMap[5], 'Platform');

  var WebSocketEvent = _require(_dependencyMap[6], 'WebSocketEvent');

  var base64 = _require(_dependencyMap[7], 'base64-js');

  var binaryToBase64 = _require(_dependencyMap[8], 'binaryToBase64');

  var invariant = _require(_dependencyMap[9], 'fbjs/lib/invariant');

  var WebSocketModule = NativeModules.WebSocketModule;
  var CONNECTING = 0;
  var OPEN = 1;
  var CLOSING = 2;
  var CLOSED = 3;
  var CLOSE_NORMAL = 1000;
  var WEBSOCKET_EVENTS = ['close', 'error', 'message', 'open'];
  var nextWebSocketId = 0;
  var WebSocket = (_temp = _class = function (_EventTarget) {
    babelHelpers.inherits(WebSocket, _EventTarget);

    function WebSocket(url, protocols, options) {
      babelHelpers.classCallCheck(this, WebSocket);

      var _this = babelHelpers.possibleConstructorReturn(this, (WebSocket.__proto__ || Object.getPrototypeOf(WebSocket)).call(this));

      _this.CONNECTING = CONNECTING;
      _this.OPEN = OPEN;
      _this.CLOSING = CLOSING;
      _this.CLOSED = CLOSED;
      _this.readyState = CONNECTING;

      if (typeof protocols === 'string') {
        protocols = [protocols];
      }

      var _ref = options || {},
          _ref$headers = _ref.headers,
          headers = _ref$headers === undefined ? {} : _ref$headers,
          unrecognized = babelHelpers.objectWithoutProperties(_ref, ["headers"]);

      if (unrecognized && typeof unrecognized.origin === 'string') {
        console.warn('Specifying `origin` as a WebSocket connection option is deprecated. Include it under `headers` instead.');
        headers.origin = unrecognized.origin;
        delete unrecognized.origin;
      }

      if (Object.keys(unrecognized).length > 0) {
        console.warn('Unrecognized WebSocket connection option(s) `' + Object.keys(unrecognized).join('`, `') + '`. ' + 'Did you mean to put these under `headers`?');
      }

      if (!Array.isArray(protocols)) {
        protocols = null;
      }

      if (!WebSocket.isAvailable) {
        throw new Error('Cannot initialize WebSocket module. ' + 'Native module WebSocketModule is missing.');
      }

      _this._eventEmitter = new NativeEventEmitter(WebSocketModule);
      _this._socketId = nextWebSocketId++;

      _this._registerEvents();

      WebSocketModule.connect(url, protocols, {
        headers: headers
      }, _this._socketId);
      return _this;
    }

    babelHelpers.createClass(WebSocket, [{
      key: "close",
      value: function close(code, reason) {
        if (this.readyState === this.CLOSING || this.readyState === this.CLOSED) {
          return;
        }

        this.readyState = this.CLOSING;

        this._close(code, reason);
      }
    }, {
      key: "send",
      value: function send(data) {
        if (this.readyState === this.CONNECTING) {
          throw new Error('INVALID_STATE_ERR');
        }

        if (data instanceof Blob) {
          invariant(BlobManager.isAvailable, 'Native module BlobModule is required for blob support');
          BlobManager.sendOverSocket(data, this._socketId);
          return;
        }

        if (typeof data === 'string') {
          WebSocketModule.send(data, this._socketId);
          return;
        }

        if (data instanceof ArrayBuffer || ArrayBuffer.isView(data)) {
          WebSocketModule.sendBinary(binaryToBase64(data), this._socketId);
          return;
        }

        throw new Error('Unsupported data type');
      }
    }, {
      key: "ping",
      value: function ping() {
        if (this.readyState === this.CONNECTING) {
          throw new Error('INVALID_STATE_ERR');
        }

        WebSocketModule.ping(this._socketId);
      }
    }, {
      key: "_close",
      value: function _close(code, reason) {
        if (Platform.OS === 'android') {
          var statusCode = typeof code === 'number' ? code : CLOSE_NORMAL;
          var closeReason = typeof reason === 'string' ? reason : '';
          WebSocketModule.close(statusCode, closeReason, this._socketId);
        } else {
          WebSocketModule.close(this._socketId);
        }

        if (BlobManager.isAvailable && this._binaryType === 'blob') {
          BlobManager.removeWebSocketHandler(this._socketId);
        }
      }
    }, {
      key: "_unregisterEvents",
      value: function _unregisterEvents() {
        this._subscriptions.forEach(function (e) {
          return e.remove();
        });

        this._subscriptions = [];
      }
    }, {
      key: "_registerEvents",
      value: function _registerEvents() {
        var _this2 = this;

        this._subscriptions = [this._eventEmitter.addListener('websocketMessage', function (ev) {
          if (ev.id !== _this2._socketId) {
            return;
          }

          var data = ev.data;

          switch (ev.type) {
            case 'binary':
              data = base64.toByteArray(ev.data).buffer;
              break;

            case 'blob':
              data = BlobManager.createFromOptions(ev.data);
              break;
          }

          _this2.dispatchEvent(new WebSocketEvent('message', {
            data: data
          }));
        }), this._eventEmitter.addListener('websocketOpen', function (ev) {
          if (ev.id !== _this2._socketId) {
            return;
          }

          _this2.readyState = _this2.OPEN;

          _this2.dispatchEvent(new WebSocketEvent('open'));
        }), this._eventEmitter.addListener('websocketClosed', function (ev) {
          if (ev.id !== _this2._socketId) {
            return;
          }

          _this2.readyState = _this2.CLOSED;

          _this2.dispatchEvent(new WebSocketEvent('close', {
            code: ev.code,
            reason: ev.reason
          }));

          _this2._unregisterEvents();

          _this2.close();
        }), this._eventEmitter.addListener('websocketFailed', function (ev) {
          if (ev.id !== _this2._socketId) {
            return;
          }

          _this2.readyState = _this2.CLOSED;

          _this2.dispatchEvent(new WebSocketEvent('error', {
            message: ev.message
          }));

          _this2.dispatchEvent(new WebSocketEvent('close', {
            message: ev.message
          }));

          _this2._unregisterEvents();

          _this2.close();
        })];
      }
    }, {
      key: "binaryType",
      get: function get() {
        return this._binaryType;
      },
      set: function set(binaryType) {
        if (binaryType !== 'blob' && binaryType !== 'arraybuffer') {
          throw new Error('binaryType must be either \'blob\' or \'arraybuffer\'');
        }

        if (this._binaryType === 'blob' || binaryType === 'blob') {
          invariant(BlobManager.isAvailable, 'Native module BlobModule is required for blob support');

          if (binaryType === 'blob') {
            BlobManager.addWebSocketHandler(this._socketId);
          } else {
            BlobManager.removeWebSocketHandler(this._socketId);
          }
        }

        this._binaryType = binaryType;
      }
    }]);
    return WebSocket;
  }(EventTarget.apply(undefined, WEBSOCKET_EVENTS)), _class.CONNECTING = CONNECTING, _class.OPEN = OPEN, _class.CLOSING = CLOSING, _class.CLOSED = CLOSED, _class.isAvailable = !!WebSocketModule, _temp);
  module.exports = WebSocket;
},78,[74,59,69,75,15,52,79,73,72,13],"WebSocket");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var WebSocketEvent = function WebSocketEvent(type, eventInitDict) {
    babelHelpers.classCallCheck(this, WebSocketEvent);
    this.type = type.toString();
    babelHelpers.extends(this, eventInitDict);
  };

  module.exports = WebSocketEvent;
},79,[],"WebSocketEvent");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var Blob = _require(_dependencyMap[0], 'Blob');

  var invariant = _require(_dependencyMap[1], 'fbjs/lib/invariant');

  var File = function (_Blob) {
    babelHelpers.inherits(File, _Blob);

    function File(parts, name, options) {
      babelHelpers.classCallCheck(this, File);
      invariant(parts != null && name != null, 'Failed to construct `File`: Must pass both `parts` and `name` arguments.');

      var _this = babelHelpers.possibleConstructorReturn(this, (File.__proto__ || Object.getPrototypeOf(File)).call(this, parts, options));

      _this.data.name = name;
      return _this;
    }

    babelHelpers.createClass(File, [{
      key: "name",
      get: function get() {
        invariant(this.data.name != null, 'Files must have a name set.');
        return this.data.name;
      }
    }, {
      key: "lastModified",
      get: function get() {
        return this.data.lastModified || 0;
      }
    }]);
    return File;
  }(Blob);

  module.exports = File;
},80,[74,13],"File");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _class, _temp;

  var EventTarget = _require2(_dependencyMap[0], 'event-target-shim');

  var Blob = _require2(_dependencyMap[1], 'Blob');

  var _require = _require2(_dependencyMap[2], 'NativeModules'),
      FileReaderModule = _require.FileReaderModule;

  var READER_EVENTS = ['abort', 'error', 'load', 'loadstart', 'loadend', 'progress'];
  var EMPTY = 0;
  var LOADING = 1;
  var DONE = 2;
  var FileReader = (_temp = _class = function (_EventTarget) {
    babelHelpers.inherits(FileReader, _EventTarget);

    function FileReader() {
      babelHelpers.classCallCheck(this, FileReader);

      var _this = babelHelpers.possibleConstructorReturn(this, (FileReader.__proto__ || Object.getPrototypeOf(FileReader)).call(this));

      _this.EMPTY = EMPTY;
      _this.LOADING = LOADING;
      _this.DONE = DONE;
      _this._aborted = false;
      _this._subscriptions = [];

      _this._reset();

      return _this;
    }

    babelHelpers.createClass(FileReader, [{
      key: "_reset",
      value: function _reset() {
        this._readyState = EMPTY;
        this._error = null;
        this._result = null;
      }
    }, {
      key: "_clearSubscriptions",
      value: function _clearSubscriptions() {
        this._subscriptions.forEach(function (sub) {
          return sub.remove();
        });

        this._subscriptions = [];
      }
    }, {
      key: "_setReadyState",
      value: function _setReadyState(newState) {
        this._readyState = newState;
        this.dispatchEvent({
          type: 'readystatechange'
        });

        if (newState === DONE) {
          if (this._aborted) {
            this.dispatchEvent({
              type: 'abort'
            });
          } else if (this._error) {
            this.dispatchEvent({
              type: 'error'
            });
          } else {
            this.dispatchEvent({
              type: 'load'
            });
          }

          this.dispatchEvent({
            type: 'loadend'
          });
        }
      }
    }, {
      key: "readAsArrayBuffer",
      value: function readAsArrayBuffer() {
        throw new Error('FileReader.readAsArrayBuffer is not implemented');
      }
    }, {
      key: "readAsDataURL",
      value: function readAsDataURL(blob) {
        var _this2 = this;

        this._aborted = false;
        FileReaderModule.readAsDataURL(blob.data).then(function (text) {
          if (_this2._aborted) {
            return;
          }

          _this2._result = text;

          _this2._setReadyState(DONE);
        }, function (error) {
          if (_this2._aborted) {
            return;
          }

          _this2._error = error;

          _this2._setReadyState(DONE);
        });
      }
    }, {
      key: "readAsText",
      value: function readAsText(blob) {
        var _this3 = this;

        var encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'UTF-8';
        this._aborted = false;
        FileReaderModule.readAsText(blob.data, encoding).then(function (text) {
          if (_this3._aborted) {
            return;
          }

          _this3._result = text;

          _this3._setReadyState(DONE);
        }, function (error) {
          if (_this3._aborted) {
            return;
          }

          _this3._error = error;

          _this3._setReadyState(DONE);
        });
      }
    }, {
      key: "abort",
      value: function abort() {
        this._aborted = true;

        if (this._readyState !== EMPTY && this._readyState !== DONE) {
          this._reset();

          this._setReadyState(DONE);
        }

        this._reset();
      }
    }, {
      key: "readyState",
      get: function get() {
        return this._readyState;
      }
    }, {
      key: "error",
      get: function get() {
        return this._error;
      }
    }, {
      key: "result",
      get: function get() {
        return this._result;
      }
    }]);
    return FileReader;
  }(EventTarget.apply(undefined, READER_EVENTS)), _class.EMPTY = EMPTY, _class.LOADING = LOADING, _class.DONE = DONE, _temp);
  module.exports = FileReader;
},81,[59,74,15],"FileReader");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var Blob = _require2(_dependencyMap[0], 'Blob');

  var _require = _require2(_dependencyMap[1], 'NativeModules'),
      BlobModule = _require.BlobModule;

  var BLOB_URL_PREFIX = null;

  if (BlobModule && typeof BlobModule.BLOB_URI_SCHEME === 'string') {
    BLOB_URL_PREFIX = BlobModule.BLOB_URI_SCHEME + ':';

    if (typeof BlobModule.BLOB_URI_HOST === 'string') {
      BLOB_URL_PREFIX += "//" + BlobModule.BLOB_URI_HOST + "/";
    }
  }

  var URL = function () {
    function URL() {
      babelHelpers.classCallCheck(this, URL);
      throw new Error('Creating URL objects is not supported yet.');
    }

    babelHelpers.createClass(URL, null, [{
      key: "createObjectURL",
      value: function createObjectURL(blob) {
        if (BLOB_URL_PREFIX === null) {
          throw new Error('Cannot create URL for blob!');
        }

        return "" + BLOB_URL_PREFIX + blob.data.blobId + "?offset=" + blob.data.offset + "&size=" + blob.size;
      }
    }, {
      key: "revokeObjectURL",
      value: function revokeObjectURL(url) {}
    }]);
    return URL;
  }();

  module.exports = URL;
},82,[74,15],"URL");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var AlertIOS = _require(_dependencyMap[0], 'AlertIOS');

  var NativeModules = _require(_dependencyMap[1], 'NativeModules');

  var Platform = _require(_dependencyMap[2], 'Platform');

  var Alert = function () {
    function Alert() {
      babelHelpers.classCallCheck(this, Alert);
    }

    babelHelpers.createClass(Alert, null, [{
      key: "alert",
      value: function alert(title, message, buttons, options, type) {
        if (Platform.OS === 'ios') {
          if (typeof type !== 'undefined') {
            console.warn('Alert.alert() with a 5th "type" parameter is deprecated and will be removed. Use AlertIOS.prompt() instead.');
            AlertIOS.alert(title, message, buttons, type);
            return;
          }

          AlertIOS.alert(title, message, buttons);
        } else if (Platform.OS === 'android') {
          AlertAndroid.alert(title, message, buttons, options);
        }
      }
    }]);
    return Alert;
  }();

  var AlertAndroid = function () {
    function AlertAndroid() {
      babelHelpers.classCallCheck(this, AlertAndroid);
    }

    babelHelpers.createClass(AlertAndroid, null, [{
      key: "alert",
      value: function alert(title, message, buttons, options) {
        var config = {
          title: title || '',
          message: message || ''
        };

        if (options) {
          config = babelHelpers.extends({}, config, {
            cancelable: options.cancelable
          });
        }

        var validButtons = buttons ? buttons.slice(0, 3) : [{
          text: 'OK'
        }];
        var buttonPositive = validButtons.pop();
        var buttonNegative = validButtons.pop();
        var buttonNeutral = validButtons.pop();

        if (buttonNeutral) {
          config = babelHelpers.extends({}, config, {
            buttonNeutral: buttonNeutral.text || ''
          });
        }

        if (buttonNegative) {
          config = babelHelpers.extends({}, config, {
            buttonNegative: buttonNegative.text || ''
          });
        }

        if (buttonPositive) {
          config = babelHelpers.extends({}, config, {
            buttonPositive: buttonPositive.text || ''
          });
        }

        NativeModules.DialogManagerAndroid.showAlert(config, function (errorMessage) {
          return console.warn(errorMessage);
        }, function (action, buttonKey) {
          if (action === NativeModules.DialogManagerAndroid.buttonClicked) {
            if (buttonKey === NativeModules.DialogManagerAndroid.buttonNeutral) {
              buttonNeutral.onPress && buttonNeutral.onPress();
            } else if (buttonKey === NativeModules.DialogManagerAndroid.buttonNegative) {
              buttonNegative.onPress && buttonNegative.onPress();
            } else if (buttonKey === NativeModules.DialogManagerAndroid.buttonPositive) {
              buttonPositive.onPress && buttonPositive.onPress();
            }
          } else if (action === NativeModules.DialogManagerAndroid.dismissed) {
            options && options.onDismiss && options.onDismiss();
          }
        });
      }
    }]);
    return AlertAndroid;
  }();

  module.exports = Alert;
},83,[84,15,52],"Alert");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var RCTAlertManager = _require(_dependencyMap[0], 'NativeModules').AlertManager;

  var AlertIOS = function () {
    function AlertIOS() {
      babelHelpers.classCallCheck(this, AlertIOS);
    }

    babelHelpers.createClass(AlertIOS, null, [{
      key: "alert",
      value: function alert(title, message, callbackOrButtons, type) {
        if (typeof type !== 'undefined') {
          console.warn('AlertIOS.alert() with a 4th "type" parameter is deprecated and will be removed. Use AlertIOS.prompt() instead.');
          this.prompt(title, message, callbackOrButtons, type);
          return;
        }

        this.prompt(title, message, callbackOrButtons, 'default');
      }
    }, {
      key: "prompt",
      value: function prompt(title, message, callbackOrButtons) {
        var type = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'plain-text';
        var defaultValue = arguments[4];
        var keyboardType = arguments[5];

        if (typeof type === 'function') {
          console.warn('You passed a callback function as the "type" argument to AlertIOS.prompt(). React Native is ' + 'assuming  you want to use the deprecated AlertIOS.prompt(title, defaultValue, buttons, callback) ' + 'signature. The current signature is AlertIOS.prompt(title, message, callbackOrButtons, type, defaultValue, ' + 'keyboardType) and the old syntax will be removed in a future version.');
          var callback = type;
          var defaultValue = message;
          RCTAlertManager.alertWithArgs({
            title: title || '',
            type: 'plain-text',
            defaultValue: defaultValue
          }, function (id, value) {
            callback(value);
          });
          return;
        }

        var callbacks = [];
        var buttons = [];
        var cancelButtonKey;
        var destructiveButtonKey;

        if (typeof callbackOrButtons === 'function') {
          callbacks = [callbackOrButtons];
        } else if (callbackOrButtons instanceof Array) {
          callbackOrButtons.forEach(function (btn, index) {
            callbacks[index] = btn.onPress;

            if (btn.style === 'cancel') {
              cancelButtonKey = String(index);
            } else if (btn.style === 'destructive') {
              destructiveButtonKey = String(index);
            }

            if (btn.text || index < (callbackOrButtons || []).length - 1) {
              var btnDef = {};
              btnDef[index] = btn.text || '';
              buttons.push(btnDef);
            }
          });
        }

        RCTAlertManager.alertWithArgs({
          title: title || '',
          message: message || undefined,
          buttons: buttons,
          type: type || undefined,
          defaultValue: defaultValue,
          cancelButtonKey: cancelButtonKey,
          destructiveButtonKey: destructiveButtonKey,
          keyboardType: keyboardType
        }, function (id, value) {
          var cb = callbacks[id];
          cb && cb(value);
        });
      }
    }]);
    return AlertIOS;
  }();

  module.exports = AlertIOS;
},84,[15],"AlertIOS");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var NativeEventEmitter = _require(_dependencyMap[0], 'NativeEventEmitter');

  var RCTLocationObserver = _require(_dependencyMap[1], 'NativeModules').LocationObserver;

  var invariant = _require(_dependencyMap[2], 'fbjs/lib/invariant');

  var logError = _require(_dependencyMap[3], 'logError');

  var warning = _require(_dependencyMap[4], 'fbjs/lib/warning');

  var LocationEventEmitter = new NativeEventEmitter(RCTLocationObserver);

  var Platform = _require(_dependencyMap[5], 'Platform');

  var PermissionsAndroid = _require(_dependencyMap[6], 'PermissionsAndroid');

  var subscriptions = [];
  var updatesEnabled = false;
  var Geolocation = {
    setRNConfiguration: function setRNConfiguration(config) {
      if (RCTLocationObserver.setConfiguration) {
        RCTLocationObserver.setConfiguration(config);
      }
    },
    requestAuthorization: function requestAuthorization() {
      RCTLocationObserver.requestAuthorization();
    },
    getCurrentPosition: function getCurrentPosition(geo_success, geo_error, geo_options) {
      var hasPermission, status;
      return regeneratorRuntime.async(function getCurrentPosition$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              invariant(typeof geo_success === 'function', 'Must provide a valid geo_success callback.');
              hasPermission = true;

              if (!(Platform.OS === 'android' && Platform.Version >= 23)) {
                _context.next = 11;
                break;
              }

              _context.next = 5;
              return regeneratorRuntime.awrap(PermissionsAndroid.check(PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION));

            case 5:
              hasPermission = _context.sent;

              if (hasPermission) {
                _context.next = 11;
                break;
              }

              _context.next = 9;
              return regeneratorRuntime.awrap(PermissionsAndroid.request(PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION));

            case 9:
              status = _context.sent;
              hasPermission = status === PermissionsAndroid.RESULTS.GRANTED;

            case 11:
              if (hasPermission) {
                RCTLocationObserver.getCurrentPosition(geo_options || {}, geo_success, geo_error || logError);
              }

            case 12:
            case "end":
              return _context.stop();
          }
        }
      }, null, this);
    },
    watchPosition: function watchPosition(success, error, options) {
      if (!updatesEnabled) {
        RCTLocationObserver.startObserving(options || {});
        updatesEnabled = true;
      }

      var watchID = subscriptions.length;
      subscriptions.push([LocationEventEmitter.addListener('geolocationDidChange', success), error ? LocationEventEmitter.addListener('geolocationError', error) : null]);
      return watchID;
    },
    clearWatch: function clearWatch(watchID) {
      var sub = subscriptions[watchID];

      if (!sub) {
        return;
      }

      sub[0].remove();
      var sub1 = sub[1];
      sub1 && sub1.remove();
      subscriptions[watchID] = undefined;
      var noWatchers = true;

      for (var ii = 0; ii < subscriptions.length; ii++) {
        if (subscriptions[ii]) {
          noWatchers = false;
        }
      }

      if (noWatchers) {
        Geolocation.stopObserving();
      }
    },
    stopObserving: function stopObserving() {
      if (updatesEnabled) {
        RCTLocationObserver.stopObserving();
        updatesEnabled = false;

        for (var ii = 0; ii < subscriptions.length; ii++) {
          var sub = subscriptions[ii];

          if (sub) {
            warning(false, 'Called stopObserving with existing subscriptions.');
            sub[0].remove();
            var sub1 = sub[1];
            sub1 && sub1.remove();
          }
        }

        subscriptions = [];
      }
    }
  };
  module.exports = Geolocation;
},85,[69,15,13,86,56,52,87],"Geolocation");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var logError = function logError() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    if (args.length === 1 && args[0] instanceof Error) {
      var err = args[0];
      console.error('Error: "' + err.message + '".  Stack:\n' + err.stack);
    } else {
      console.error.apply(console, args);
    }
  };

  module.exports = logError;
},86,[],"logError");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var NativeModules = _require(_dependencyMap[0], 'NativeModules');

  var PermissionsAndroid = function () {
    function PermissionsAndroid() {
      babelHelpers.classCallCheck(this, PermissionsAndroid);
      this.PERMISSIONS = {
        READ_CALENDAR: 'android.permission.READ_CALENDAR',
        WRITE_CALENDAR: 'android.permission.WRITE_CALENDAR',
        CAMERA: 'android.permission.CAMERA',
        READ_CONTACTS: 'android.permission.READ_CONTACTS',
        WRITE_CONTACTS: 'android.permission.WRITE_CONTACTS',
        GET_ACCOUNTS: 'android.permission.GET_ACCOUNTS',
        ACCESS_FINE_LOCATION: 'android.permission.ACCESS_FINE_LOCATION',
        ACCESS_COARSE_LOCATION: 'android.permission.ACCESS_COARSE_LOCATION',
        RECORD_AUDIO: 'android.permission.RECORD_AUDIO',
        READ_PHONE_STATE: 'android.permission.READ_PHONE_STATE',
        CALL_PHONE: 'android.permission.CALL_PHONE',
        READ_CALL_LOG: 'android.permission.READ_CALL_LOG',
        WRITE_CALL_LOG: 'android.permission.WRITE_CALL_LOG',
        ADD_VOICEMAIL: 'com.android.voicemail.permission.ADD_VOICEMAIL',
        USE_SIP: 'android.permission.USE_SIP',
        PROCESS_OUTGOING_CALLS: 'android.permission.PROCESS_OUTGOING_CALLS',
        BODY_SENSORS: 'android.permission.BODY_SENSORS',
        SEND_SMS: 'android.permission.SEND_SMS',
        RECEIVE_SMS: 'android.permission.RECEIVE_SMS',
        READ_SMS: 'android.permission.READ_SMS',
        RECEIVE_WAP_PUSH: 'android.permission.RECEIVE_WAP_PUSH',
        RECEIVE_MMS: 'android.permission.RECEIVE_MMS',
        READ_EXTERNAL_STORAGE: 'android.permission.READ_EXTERNAL_STORAGE',
        WRITE_EXTERNAL_STORAGE: 'android.permission.WRITE_EXTERNAL_STORAGE'
      };
      this.RESULTS = {
        GRANTED: 'granted',
        DENIED: 'denied',
        NEVER_ASK_AGAIN: 'never_ask_again'
      };
    }

    babelHelpers.createClass(PermissionsAndroid, [{
      key: "checkPermission",
      value: function checkPermission(permission) {
        console.warn('"PermissionsAndroid.checkPermission" is deprecated. Use "PermissionsAndroid.check" instead');
        return NativeModules.PermissionsAndroid.checkPermission(permission);
      }
    }, {
      key: "check",
      value: function check(permission) {
        return NativeModules.PermissionsAndroid.checkPermission(permission);
      }
    }, {
      key: "requestPermission",
      value: function requestPermission(permission, rationale) {
        var response;
        return regeneratorRuntime.async(function requestPermission$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                console.warn('"PermissionsAndroid.requestPermission" is deprecated. Use "PermissionsAndroid.request" instead');
                _context.next = 3;
                return regeneratorRuntime.awrap(this.request(permission, rationale));

              case 3:
                response = _context.sent;
                return _context.abrupt("return", response === this.RESULTS.GRANTED);

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "request",
      value: function request(permission, rationale) {
        var shouldShowRationale;
        return regeneratorRuntime.async(function request$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!rationale) {
                  _context2.next = 6;
                  break;
                }

                _context2.next = 3;
                return regeneratorRuntime.awrap(NativeModules.PermissionsAndroid.shouldShowRequestPermissionRationale(permission));

              case 3:
                shouldShowRationale = _context2.sent;

                if (!shouldShowRationale) {
                  _context2.next = 6;
                  break;
                }

                return _context2.abrupt("return", new Promise(function (resolve, reject) {
                  NativeModules.DialogManagerAndroid.showAlert(rationale, function () {
                    return reject(new Error('Error showing rationale'));
                  }, function () {
                    return resolve(NativeModules.PermissionsAndroid.requestPermission(permission));
                  });
                }));

              case 6:
                return _context2.abrupt("return", NativeModules.PermissionsAndroid.requestPermission(permission));

              case 7:
              case "end":
                return _context2.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "requestMultiple",
      value: function requestMultiple(permissions) {
        return NativeModules.PermissionsAndroid.requestMultiplePermissions(permissions);
      }
    }]);
    return PermissionsAndroid;
  }();

  PermissionsAndroid = new PermissionsAndroid();
  module.exports = PermissionsAndroid;
},87,[15],"PermissionsAndroid");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var HeapCapture = {
    captureHeap: function captureHeap(path) {
      var error = null;

      try {
        global.nativeCaptureHeap(path);
        console.log('HeapCapture.captureHeap succeeded: ' + path);
      } catch (e) {
        console.log('HeapCapture.captureHeap error: ' + e.toString());
        error = e.toString();
      }

      _require(_dependencyMap[0], 'NativeModules').JSCHeapCapture.captureComplete(path, error);
    }
  };
  module.exports = HeapCapture;
},88,[15],"HeapCapture");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var SamplingProfiler = {
    poke: function poke(token) {
      var error = null;
      var result = null;

      try {
        result = global.pokeSamplingProfiler();

        if (result === null) {
          console.log('The JSC Sampling Profiler has started');
        } else {
          console.log('The JSC Sampling Profiler has stopped');
        }
      } catch (e) {
        console.log('Error occurred when restarting Sampling Profiler: ' + e.toString());
        error = e.toString();
      }

      var _require = _require2(_dependencyMap[0], 'NativeModules'),
          JSCSamplingProfiler = _require.JSCSamplingProfiler;

      JSCSamplingProfiler.operationComplete(token, result, error);
    }
  };
  module.exports = SamplingProfiler;
},89,[15],"SamplingProfiler");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = _require(_dependencyMap[0], 'fbjs/lib/invariant');

  var levelsMap = {
    log: 'log',
    info: 'info',
    warn: 'warn',
    error: 'error',
    fatal: 'error'
  };
  var warningHandler = null;
  var RCTLog = {
    logIfNoNativeHook: function logIfNoNativeHook(level) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      if (typeof global.nativeLoggingHook === 'undefined') {
        RCTLog.logToConsole.apply(RCTLog, [level].concat(babelHelpers.toConsumableArray(args)));
      } else {
        if (warningHandler && level === 'warn') {
          warningHandler.apply(undefined, babelHelpers.toConsumableArray(args));
        }
      }
    },
    logToConsole: function logToConsole(level) {
      var _console;

      var logFn = levelsMap[level];
      invariant(logFn, 'Level "' + level + '" not one of ' + Object.keys(levelsMap).toString());

      for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }

      (_console = console)[logFn].apply(_console, babelHelpers.toConsumableArray(args));
    },
    setWarningHandler: function setWarningHandler(handler) {
      warningHandler = handler;
    }
  };
  module.exports = RCTLog;
},90,[13],"RCTLog");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var RCTDeviceEventEmitter = _require(_dependencyMap[0], 'RCTDeviceEventEmitter');

  var RCTNativeAppEventEmitter = RCTDeviceEventEmitter;
  module.exports = RCTNativeAppEventEmitter;
},91,[70],"RCTNativeAppEventEmitter");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var Systrace = _require(_dependencyMap[0], 'Systrace');

  var infoLog = _require(_dependencyMap[1], 'infoLog');

  var performanceNow = global.nativePerformanceNow || _require(_dependencyMap[2], 'fbjs/lib/performanceNow');

  var timespans = {};
  var extras = {};
  var cookies = {};
  var PRINT_TO_CONSOLE = false;
  var PerformanceLogger = {
    addTimespan: function addTimespan(key, lengthInMs, description) {
      if (timespans[key]) {
        if (__DEV__) {
          infoLog('PerformanceLogger: Attempting to add a timespan that already exists ', key);
        }

        return;
      }

      timespans[key] = {
        description: description,
        totalTime: lengthInMs
      };
    },
    startTimespan: function startTimespan(key, description) {
      if (timespans[key]) {
        if (__DEV__) {
          infoLog('PerformanceLogger: Attempting to start a timespan that already exists ', key);
        }

        return;
      }

      timespans[key] = {
        description: description,
        startTime: performanceNow()
      };
      cookies[key] = Systrace.beginAsyncEvent(key);

      if (__DEV__ && PRINT_TO_CONSOLE) {
        infoLog('PerformanceLogger.js', 'start: ' + key);
      }
    },
    stopTimespan: function stopTimespan(key) {
      var timespan = timespans[key];

      if (!timespan || !timespan.startTime) {
        if (__DEV__) {
          infoLog('PerformanceLogger: Attempting to end a timespan that has not started ', key);
        }

        return;
      }

      if (timespan.endTime) {
        if (__DEV__) {
          infoLog('PerformanceLogger: Attempting to end a timespan that has already ended ', key);
        }

        return;
      }

      timespan.endTime = performanceNow();
      timespan.totalTime = timespan.endTime - (timespan.startTime || 0);

      if (__DEV__ && PRINT_TO_CONSOLE) {
        infoLog('PerformanceLogger.js', 'end: ' + key);
      }

      Systrace.endAsyncEvent(key, cookies[key]);
      delete cookies[key];
    },
    clear: function clear() {
      timespans = {};
      extras = {};
    },
    clearCompleted: function clearCompleted() {
      for (var _key in timespans) {
        if (timespans[_key].totalTime) {
          delete timespans[_key];
        }
      }

      extras = {};
    },
    clearExceptTimespans: function clearExceptTimespans(keys) {
      timespans = Object.keys(timespans).reduce(function (previous, key) {
        if (keys.indexOf(key) !== -1) {
          previous[key] = timespans[key];
        }

        return previous;
      }, {});
      extras = {};
    },
    currentTimestamp: function currentTimestamp() {
      return performanceNow();
    },
    getTimespans: function getTimespans() {
      return timespans;
    },
    hasTimespan: function hasTimespan(key) {
      return !!timespans[key];
    },
    logTimespans: function logTimespans() {
      for (var _key2 in timespans) {
        if (timespans[_key2].totalTime) {
          infoLog(_key2 + ': ' + timespans[_key2].totalTime + 'ms');
        }
      }
    },
    addTimespans: function addTimespans(newTimespans, labels) {
      for (var ii = 0, l = newTimespans.length; ii < l; ii += 2) {
        var label = labels[ii / 2];
        PerformanceLogger.addTimespan(label, newTimespans[ii + 1] - newTimespans[ii], label);
      }
    },
    setExtra: function setExtra(key, value) {
      if (extras[key]) {
        if (__DEV__) {
          infoLog('PerformanceLogger: Attempting to set an extra that already exists ', {
            key: key,
            currentValue: extras[key],
            attemptedValue: value
          });
        }

        return;
      }

      extras[key] = value;
    },
    getExtras: function getExtras() {
      return extras;
    }
  };
  module.exports = PerformanceLogger;
},92,[19,93,53],"PerformanceLogger");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  function infoLog() {
    var _console;

    return (_console = console).log.apply(_console, arguments);
  }

  module.exports = infoLog;
},93,[],"infoLog");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var JSDevSupportModule = {
    getJSHierarchy: function getJSHierarchy(tag) {
      var hook = window.__REACT_DEVTOOLS_GLOBAL_HOOK__;
      var renderers = hook._renderers;
      var keys = Object.keys(renderers);
      var renderer = renderers[keys[0]];
      var result = renderer.getInspectorDataForViewTag(tag);
      var path = result.hierarchy.map(function (item) {
        return item.name;
      }).join(' -> ');
      console.error('StackOverflowException rendering JSComponent: ' + path);

      _require(_dependencyMap[0], 'NativeModules').JSDevSupport.setResult(path, null);
    }
  };
  module.exports = JSDevSupportModule;
},94,[15],"JSDevSupportModule");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var Platform = _require(_dependencyMap[0], 'Platform');

  var invariant = _require(_dependencyMap[1], 'fbjs/lib/invariant');

  var MetroHMRClient = _require(_dependencyMap[2], 'metro/src/lib/bundle-modules/HMRClient');

  var HMRClient = {
    enable: function enable(platform, bundleEntry, host, port) {
      invariant(platform, 'Missing required parameter `platform`');
      invariant(bundleEntry, 'Missing required paramenter `bundleEntry`');
      invariant(host, 'Missing required paramenter `host`');

      var HMRLoadingView = _require(_dependencyMap[3], 'HMRLoadingView');

      var wsHostPort = port !== null && port !== '' ? host + ":" + port : host;
      bundleEntry = bundleEntry.replace(/\.(bundle|delta)/, '.js');
      var wsUrl = "ws://" + wsHostPort + "/hot?" + ("platform=" + platform + "&") + ("bundleEntry=" + bundleEntry);
      var hmrClient = new MetroHMRClient(wsUrl);
      hmrClient.on('connection-error', function (e) {
        var error = "Hot loading isn't working because it cannot connect to the development server.\n\nTry the following to fix the issue:\n- Ensure that the packager server is running and available on the same network";

        if (Platform.OS === 'ios') {
          error += "\n- Ensure that the Packager server URL is correctly set in AppDelegate";
        } else {
          error += "\n- Ensure that your device/emulator is connected to your machine and has USB debugging enabled - run 'adb devices' to see a list of connected devices\n- If you're on a physical device connected to the same machine, run 'adb reverse tcp:8081 tcp:8081' to forward requests from your device\n- If your device is on the same Wi-Fi network, set 'Debug server host & port for device' in 'Dev settings' to your machine's IP address and the port of the local dev server - e.g. 10.0.1.1:8081";
        }

        error += "\n\nURL: " + host + ":" + port + "\n\nError: " + e.message;
        throw new Error(error);
      });
      hmrClient.on('update-start', function () {
        HMRLoadingView.showMessage('Hot Loading...');
      });
      hmrClient.on('update', function () {
        if (Platform.OS === 'ios') {
          var RCTRedBox = _require(_dependencyMap[4], 'NativeModules').RedBox;

          RCTRedBox && RCTRedBox.dismiss && RCTRedBox.dismiss();
        } else {
          var RCTExceptionsManager = _require(_dependencyMap[4], 'NativeModules').ExceptionsManager;

          RCTExceptionsManager && RCTExceptionsManager.dismissRedbox && RCTExceptionsManager.dismissRedbox();
        }
      });
      hmrClient.on('update-done', function () {
        HMRLoadingView.hide();
      });
      hmrClient.on('error', function (data) {
        HMRLoadingView.hide();
        throw new Error(data.type + " " + data.message);
      });
      hmrClient.enable();
    }
  };
  module.exports = HMRClient;
},95,[52,13,96,99,15],"HMRClient");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  module.exports = _require(_dependencyMap[0], './MetroClient');
},96,[97],"node_modules/metro/src/lib/bundle-modules/HMRClient.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var EventEmitter = _require(_dependencyMap[0], 'eventemitter3');

  var MetroClient = function (_EventEmitter) {
    babelHelpers.inherits(MetroClient, _EventEmitter);

    function MetroClient(url) {
      babelHelpers.classCallCheck(this, MetroClient);

      var _this = babelHelpers.possibleConstructorReturn(this, (MetroClient.__proto__ || Object.getPrototypeOf(MetroClient)).call(this));

      _this._url = url;
      return _this;
    }

    babelHelpers.createClass(MetroClient, [{
      key: "enable",
      value: function enable() {
        var _this2 = this;

        if (this._ws) {
          this.disable();
        }

        this._ws = new global.WebSocket(this._url);

        this._ws.onerror = function (error) {
          _this2.emit('connection-error', error);
        };

        this._ws.onclose = function () {
          _this2.emit('close');
        };

        this._ws.onmessage = function (message) {
          var data = JSON.parse(message.data);

          switch (data.type) {
            case 'update-start':
              _this2.emit('update-start');

              break;

            case 'update':
              var _data$body = data.body;
              var modules = _data$body.modules,
                  sourceMappingURLs = _data$body.sourceMappingURLs,
                  sourceURLs = _data$body.sourceURLs;

              _this2.emit('update');

              modules.forEach(function (_ref, i) {
                var id = _ref.id,
                    code = _ref.code;
                code += '\n\n' + sourceMappingURLs[i];
                var injectFunction = typeof global.nativeInjectHMRUpdate === 'function' ? global.nativeInjectHMRUpdate : eval;
                injectFunction(code, sourceURLs[i]);
              });
              break;

            case 'update-done':
              _this2.emit('update-done');

              break;

            case 'error':
              _this2.emit('error', {
                type: data.body.type,
                message: data.body.message
              });

              break;

            default:
              _this2.emit('error', {
                type: 'unknown-message',
                message: data
              });

          }
        };
      }
    }, {
      key: "disable",
      value: function disable() {
        if (this._ws) {
          this._ws.close();

          this._ws = undefined;
        }
      }
    }]);
    return MetroClient;
  }(EventEmitter);

  module.exports = MetroClient;
},97,[98],"node_modules/metro/src/lib/bundle-modules/MetroClient.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var has = Object.prototype.hasOwnProperty,
      prefix = '~';

  function Events() {}

  if (Object.create) {
    Events.prototype = Object.create(null);
    if (!new Events().__proto__) prefix = false;
  }

  function EE(fn, context, once) {
    this.fn = fn;
    this.context = context;
    this.once = once || false;
  }

  function addListener(emitter, event, fn, context, once) {
    if (typeof fn !== 'function') {
      throw new TypeError('The listener must be a function');
    }

    var listener = new EE(fn, context || emitter, once),
        evt = prefix ? prefix + event : event;
    if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);else emitter._events[evt] = [emitter._events[evt], listener];
    return emitter;
  }

  function clearEvent(emitter, evt) {
    if (--emitter._eventsCount === 0) emitter._events = new Events();else delete emitter._events[evt];
  }

  function EventEmitter() {
    this._events = new Events();
    this._eventsCount = 0;
  }

  EventEmitter.prototype.eventNames = function eventNames() {
    var names = [],
        events,
        name;
    if (this._eventsCount === 0) return names;

    for (name in events = this._events) {
      if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
    }

    if (Object.getOwnPropertySymbols) {
      return names.concat(Object.getOwnPropertySymbols(events));
    }

    return names;
  };

  EventEmitter.prototype.listeners = function listeners(event) {
    var evt = prefix ? prefix + event : event,
        handlers = this._events[evt];
    if (!handlers) return [];
    if (handlers.fn) return [handlers.fn];

    for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
      ee[i] = handlers[i].fn;
    }

    return ee;
  };

  EventEmitter.prototype.listenerCount = function listenerCount(event) {
    var evt = prefix ? prefix + event : event,
        listeners = this._events[evt];
    if (!listeners) return 0;
    if (listeners.fn) return 1;
    return listeners.length;
  };

  EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
    var evt = prefix ? prefix + event : event;
    if (!this._events[evt]) return false;
    var listeners = this._events[evt],
        len = arguments.length,
        args,
        i;

    if (listeners.fn) {
      if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

      switch (len) {
        case 1:
          return listeners.fn.call(listeners.context), true;

        case 2:
          return listeners.fn.call(listeners.context, a1), true;

        case 3:
          return listeners.fn.call(listeners.context, a1, a2), true;

        case 4:
          return listeners.fn.call(listeners.context, a1, a2, a3), true;

        case 5:
          return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;

        case 6:
          return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
      }

      for (i = 1, args = new Array(len - 1); i < len; i++) {
        args[i - 1] = arguments[i];
      }

      listeners.fn.apply(listeners.context, args);
    } else {
      var length = listeners.length,
          j;

      for (i = 0; i < length; i++) {
        if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

        switch (len) {
          case 1:
            listeners[i].fn.call(listeners[i].context);
            break;

          case 2:
            listeners[i].fn.call(listeners[i].context, a1);
            break;

          case 3:
            listeners[i].fn.call(listeners[i].context, a1, a2);
            break;

          case 4:
            listeners[i].fn.call(listeners[i].context, a1, a2, a3);
            break;

          default:
            if (!args) for (j = 1, args = new Array(len - 1); j < len; j++) {
              args[j - 1] = arguments[j];
            }
            listeners[i].fn.apply(listeners[i].context, args);
        }
      }
    }

    return true;
  };

  EventEmitter.prototype.on = function on(event, fn, context) {
    return addListener(this, event, fn, context, false);
  };

  EventEmitter.prototype.once = function once(event, fn, context) {
    return addListener(this, event, fn, context, true);
  };

  EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
    var evt = prefix ? prefix + event : event;
    if (!this._events[evt]) return this;

    if (!fn) {
      clearEvent(this, evt);
      return this;
    }

    var listeners = this._events[evt];

    if (listeners.fn) {
      if (listeners.fn === fn && (!once || listeners.once) && (!context || listeners.context === context)) {
        clearEvent(this, evt);
      }
    } else {
      for (var i = 0, events = [], length = listeners.length; i < length; i++) {
        if (listeners[i].fn !== fn || once && !listeners[i].once || context && listeners[i].context !== context) {
          events.push(listeners[i]);
        }
      }

      if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;else clearEvent(this, evt);
    }

    return this;
  };

  EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
    var evt;

    if (event) {
      evt = prefix ? prefix + event : event;
      if (this._events[evt]) clearEvent(this, evt);
    } else {
      this._events = new Events();
      this._eventsCount = 0;
    }

    return this;
  };

  EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
  EventEmitter.prototype.addListener = EventEmitter.prototype.on;
  EventEmitter.prefixed = prefix;
  EventEmitter.EventEmitter = EventEmitter;

  if ('undefined' !== typeof module) {
    module.exports = EventEmitter;
  }
},98,[],"node_modules/eventemitter3/index.js");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var processColor = _require2(_dependencyMap[0], 'processColor');

  var _require = _require2(_dependencyMap[1], 'NativeModules'),
      DevLoadingView = _require.DevLoadingView;

  var HMRLoadingView = function () {
    function HMRLoadingView() {
      babelHelpers.classCallCheck(this, HMRLoadingView);
    }

    babelHelpers.createClass(HMRLoadingView, null, [{
      key: "showMessage",
      value: function showMessage(message) {
        DevLoadingView.showMessage(message, processColor('#000000'), processColor('#aaaaaa'));
      }
    }, {
      key: "hide",
      value: function hide() {
        DevLoadingView.hide();
      }
    }]);
    return HMRLoadingView;
  }();

  module.exports = HMRLoadingView;
},99,[100,15],"HMRLoadingView");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var Platform = _require(_dependencyMap[0], 'Platform');

  var normalizeColor = _require(_dependencyMap[1], 'normalizeColor');

  function processColor(color) {
    if (color === undefined || color === null) {
      return color;
    }

    var int32Color = normalizeColor(color);

    if (int32Color === null || int32Color === undefined) {
      return undefined;
    }

    int32Color = (int32Color << 24 | int32Color >>> 8) >>> 0;

    if (Platform.OS === 'android') {
      int32Color = int32Color | 0x0;
    }

    return int32Color;
  }

  module.exports = processColor;
},100,[52,101],"processColor");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  function normalizeColor(color) {
    var match;

    if (typeof color === 'number') {
      if (color >>> 0 === color && color >= 0 && color <= 0xffffffff) {
        return color;
      }

      return null;
    }

    if (match = matchers.hex6.exec(color)) {
      return parseInt(match[1] + 'ff', 16) >>> 0;
    }

    if (names.hasOwnProperty(color)) {
      return names[color];
    }

    if (match = matchers.rgb.exec(color)) {
      return (parse255(match[1]) << 24 | parse255(match[2]) << 16 | parse255(match[3]) << 8 | 0x000000ff) >>> 0;
    }

    if (match = matchers.rgba.exec(color)) {
      return (parse255(match[1]) << 24 | parse255(match[2]) << 16 | parse255(match[3]) << 8 | parse1(match[4])) >>> 0;
    }

    if (match = matchers.hex3.exec(color)) {
      return parseInt(match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + 'ff', 16) >>> 0;
    }

    if (match = matchers.hex8.exec(color)) {
      return parseInt(match[1], 16) >>> 0;
    }

    if (match = matchers.hex4.exec(color)) {
      return parseInt(match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + match[4] + match[4], 16) >>> 0;
    }

    if (match = matchers.hsl.exec(color)) {
      return (hslToRgb(parse360(match[1]), parsePercentage(match[2]), parsePercentage(match[3])) | 0x000000ff) >>> 0;
    }

    if (match = matchers.hsla.exec(color)) {
      return (hslToRgb(parse360(match[1]), parsePercentage(match[2]), parsePercentage(match[3])) | parse1(match[4])) >>> 0;
    }

    return null;
  }

  function hue2rgb(p, q, t) {
    if (t < 0) {
      t += 1;
    }

    if (t > 1) {
      t -= 1;
    }

    if (t < 1 / 6) {
      return p + (q - p) * 6 * t;
    }

    if (t < 1 / 2) {
      return q;
    }

    if (t < 2 / 3) {
      return p + (q - p) * (2 / 3 - t) * 6;
    }

    return p;
  }

  function hslToRgb(h, s, l) {
    var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
    var p = 2 * l - q;
    var r = hue2rgb(p, q, h + 1 / 3);
    var g = hue2rgb(p, q, h);
    var b = hue2rgb(p, q, h - 1 / 3);
    return Math.round(r * 255) << 24 | Math.round(g * 255) << 16 | Math.round(b * 255) << 8;
  }

  var NUMBER = '[-+]?\\d*\\.?\\d+';
  var PERCENTAGE = NUMBER + '%';

  function call() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return '\\(\\s*(' + args.join(')\\s*,\\s*(') + ')\\s*\\)';
  }

  var matchers = {
    rgb: new RegExp('rgb' + call(NUMBER, NUMBER, NUMBER)),
    rgba: new RegExp('rgba' + call(NUMBER, NUMBER, NUMBER, NUMBER)),
    hsl: new RegExp('hsl' + call(NUMBER, PERCENTAGE, PERCENTAGE)),
    hsla: new RegExp('hsla' + call(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER)),
    hex3: /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
    hex4: /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
    hex6: /^#([0-9a-fA-F]{6})$/,
    hex8: /^#([0-9a-fA-F]{8})$/
  };

  function parse255(str) {
    var int = parseInt(str, 10);

    if (int < 0) {
      return 0;
    }

    if (int > 255) {
      return 255;
    }

    return int;
  }

  function parse360(str) {
    var int = parseFloat(str);
    return (int % 360 + 360) % 360 / 360;
  }

  function parse1(str) {
    var num = parseFloat(str);

    if (num < 0) {
      return 0;
    }

    if (num > 1) {
      return 255;
    }

    return Math.round(num * 255);
  }

  function parsePercentage(str) {
    var int = parseFloat(str);

    if (int < 0) {
      return 0;
    }

    if (int > 100) {
      return 1;
    }

    return int / 100;
  }

  var names = {
    transparent: 0x00000000,
    aliceblue: 0xf0f8ffff,
    antiquewhite: 0xfaebd7ff,
    aqua: 0x00ffffff,
    aquamarine: 0x7fffd4ff,
    azure: 0xf0ffffff,
    beige: 0xf5f5dcff,
    bisque: 0xffe4c4ff,
    black: 0x000000ff,
    blanchedalmond: 0xffebcdff,
    blue: 0x0000ffff,
    blueviolet: 0x8a2be2ff,
    brown: 0xa52a2aff,
    burlywood: 0xdeb887ff,
    burntsienna: 0xea7e5dff,
    cadetblue: 0x5f9ea0ff,
    chartreuse: 0x7fff00ff,
    chocolate: 0xd2691eff,
    coral: 0xff7f50ff,
    cornflowerblue: 0x6495edff,
    cornsilk: 0xfff8dcff,
    crimson: 0xdc143cff,
    cyan: 0x00ffffff,
    darkblue: 0x00008bff,
    darkcyan: 0x008b8bff,
    darkgoldenrod: 0xb8860bff,
    darkgray: 0xa9a9a9ff,
    darkgreen: 0x006400ff,
    darkgrey: 0xa9a9a9ff,
    darkkhaki: 0xbdb76bff,
    darkmagenta: 0x8b008bff,
    darkolivegreen: 0x556b2fff,
    darkorange: 0xff8c00ff,
    darkorchid: 0x9932ccff,
    darkred: 0x8b0000ff,
    darksalmon: 0xe9967aff,
    darkseagreen: 0x8fbc8fff,
    darkslateblue: 0x483d8bff,
    darkslategray: 0x2f4f4fff,
    darkslategrey: 0x2f4f4fff,
    darkturquoise: 0x00ced1ff,
    darkviolet: 0x9400d3ff,
    deeppink: 0xff1493ff,
    deepskyblue: 0x00bfffff,
    dimgray: 0x696969ff,
    dimgrey: 0x696969ff,
    dodgerblue: 0x1e90ffff,
    firebrick: 0xb22222ff,
    floralwhite: 0xfffaf0ff,
    forestgreen: 0x228b22ff,
    fuchsia: 0xff00ffff,
    gainsboro: 0xdcdcdcff,
    ghostwhite: 0xf8f8ffff,
    gold: 0xffd700ff,
    goldenrod: 0xdaa520ff,
    gray: 0x808080ff,
    green: 0x008000ff,
    greenyellow: 0xadff2fff,
    grey: 0x808080ff,
    honeydew: 0xf0fff0ff,
    hotpink: 0xff69b4ff,
    indianred: 0xcd5c5cff,
    indigo: 0x4b0082ff,
    ivory: 0xfffff0ff,
    khaki: 0xf0e68cff,
    lavender: 0xe6e6faff,
    lavenderblush: 0xfff0f5ff,
    lawngreen: 0x7cfc00ff,
    lemonchiffon: 0xfffacdff,
    lightblue: 0xadd8e6ff,
    lightcoral: 0xf08080ff,
    lightcyan: 0xe0ffffff,
    lightgoldenrodyellow: 0xfafad2ff,
    lightgray: 0xd3d3d3ff,
    lightgreen: 0x90ee90ff,
    lightgrey: 0xd3d3d3ff,
    lightpink: 0xffb6c1ff,
    lightsalmon: 0xffa07aff,
    lightseagreen: 0x20b2aaff,
    lightskyblue: 0x87cefaff,
    lightslategray: 0x778899ff,
    lightslategrey: 0x778899ff,
    lightsteelblue: 0xb0c4deff,
    lightyellow: 0xffffe0ff,
    lime: 0x00ff00ff,
    limegreen: 0x32cd32ff,
    linen: 0xfaf0e6ff,
    magenta: 0xff00ffff,
    maroon: 0x800000ff,
    mediumaquamarine: 0x66cdaaff,
    mediumblue: 0x0000cdff,
    mediumorchid: 0xba55d3ff,
    mediumpurple: 0x9370dbff,
    mediumseagreen: 0x3cb371ff,
    mediumslateblue: 0x7b68eeff,
    mediumspringgreen: 0x00fa9aff,
    mediumturquoise: 0x48d1ccff,
    mediumvioletred: 0xc71585ff,
    midnightblue: 0x191970ff,
    mintcream: 0xf5fffaff,
    mistyrose: 0xffe4e1ff,
    moccasin: 0xffe4b5ff,
    navajowhite: 0xffdeadff,
    navy: 0x000080ff,
    oldlace: 0xfdf5e6ff,
    olive: 0x808000ff,
    olivedrab: 0x6b8e23ff,
    orange: 0xffa500ff,
    orangered: 0xff4500ff,
    orchid: 0xda70d6ff,
    palegoldenrod: 0xeee8aaff,
    palegreen: 0x98fb98ff,
    paleturquoise: 0xafeeeeff,
    palevioletred: 0xdb7093ff,
    papayawhip: 0xffefd5ff,
    peachpuff: 0xffdab9ff,
    peru: 0xcd853fff,
    pink: 0xffc0cbff,
    plum: 0xdda0ddff,
    powderblue: 0xb0e0e6ff,
    purple: 0x800080ff,
    rebeccapurple: 0x663399ff,
    red: 0xff0000ff,
    rosybrown: 0xbc8f8fff,
    royalblue: 0x4169e1ff,
    saddlebrown: 0x8b4513ff,
    salmon: 0xfa8072ff,
    sandybrown: 0xf4a460ff,
    seagreen: 0x2e8b57ff,
    seashell: 0xfff5eeff,
    sienna: 0xa0522dff,
    silver: 0xc0c0c0ff,
    skyblue: 0x87ceebff,
    slateblue: 0x6a5acdff,
    slategray: 0x708090ff,
    slategrey: 0x708090ff,
    snow: 0xfffafaff,
    springgreen: 0x00ff7fff,
    steelblue: 0x4682b4ff,
    tan: 0xd2b48cff,
    teal: 0x008080ff,
    thistle: 0xd8bfd8ff,
    tomato: 0xff6347ff,
    turquoise: 0x40e0d0ff,
    violet: 0xee82eeff,
    wheat: 0xf5deb3ff,
    white: 0xffffffff,
    whitesmoke: 0xf5f5f5ff,
    yellow: 0xffff00ff,
    yellowgreen: 0x9acd32ff
  };
  module.exports = normalizeColor;
},101,[],"normalizeColor");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var register = function register() {};

  if (__DEV__) {
    var AppState = _require(_dependencyMap[0], 'AppState');

    var WebSocket = _require(_dependencyMap[1], 'WebSocket');

    var reactDevTools = _require(_dependencyMap[2], 'react-devtools-core');

    var getDevServer = _require(_dependencyMap[3], 'getDevServer');

    if (WebSocket.isAvailable) {
      var _isAppActive = function _isAppActive() {
        return AppState.currentState !== 'background';
      };

      var devServer = getDevServer();

      var _host = devServer.bundleLoadedFromServer ? devServer.url.replace(/https?:\/\//, '').split(':')[0] : 'localhost';

      reactDevTools.connectToDevTools({
        isAppActive: _isAppActive,
        host: _host,
        port: window.__REACT_DEVTOOLS_PORT__,
        resolveRNStyle: _require(_dependencyMap[4], 'flattenStyle')
      });
    }
  }

  module.exports = {
    register: register
  };
},102,[103,78,104,36,105],"setupDevtools");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var MissingNativeEventEmitterShim = _require(_dependencyMap[0], 'MissingNativeEventEmitterShim');

  var NativeEventEmitter = _require(_dependencyMap[1], 'NativeEventEmitter');

  var NativeModules = _require(_dependencyMap[2], 'NativeModules');

  var RCTAppState = NativeModules.AppState;

  var logError = _require(_dependencyMap[3], 'logError');

  var invariant = _require(_dependencyMap[4], 'fbjs/lib/invariant');

  var AppState = function (_NativeEventEmitter) {
    babelHelpers.inherits(AppState, _NativeEventEmitter);

    function AppState() {
      babelHelpers.classCallCheck(this, AppState);

      var _this = babelHelpers.possibleConstructorReturn(this, (AppState.__proto__ || Object.getPrototypeOf(AppState)).call(this, RCTAppState));

      _this.isAvailable = true;
      _this.isAvailable = true;
      _this._eventHandlers = {
        change: new Map(),
        memoryWarning: new Map()
      };
      _this.currentState = RCTAppState.initialAppState || 'active';
      var eventUpdated = false;

      _this.addListener('appStateDidChange', function (appStateData) {
        eventUpdated = true;
        _this.currentState = appStateData.app_state;
      });

      RCTAppState.getCurrentAppState(function (appStateData) {
        if (!eventUpdated) {
          _this.currentState = appStateData.app_state;
        }
      }, logError);
      return _this;
    }

    babelHelpers.createClass(AppState, [{
      key: "addEventListener",
      value: function addEventListener(type, handler) {
        invariant(['change', 'memoryWarning'].indexOf(type) !== -1, 'Trying to subscribe to unknown event: "%s"', type);

        if (type === 'change') {
          this._eventHandlers[type].set(handler, this.addListener('appStateDidChange', function (appStateData) {
            handler(appStateData.app_state);
          }));
        } else if (type === 'memoryWarning') {
          this._eventHandlers[type].set(handler, this.addListener('memoryWarning', handler));
        }
      }
    }, {
      key: "removeEventListener",
      value: function removeEventListener(type, handler) {
        invariant(['change', 'memoryWarning'].indexOf(type) !== -1, 'Trying to remove listener for unknown event: "%s"', type);

        if (!this._eventHandlers[type].has(handler)) {
          return;
        }

        this._eventHandlers[type].get(handler).remove();

        this._eventHandlers[type].delete(handler);
      }
    }]);
    return AppState;
  }(NativeEventEmitter);

  if (__DEV__ && !RCTAppState) {
    var MissingNativeAppStateShim = function (_MissingNativeEventEm) {
      babelHelpers.inherits(MissingNativeAppStateShim, _MissingNativeEventEm);

      function MissingNativeAppStateShim() {
        babelHelpers.classCallCheck(this, MissingNativeAppStateShim);
        return babelHelpers.possibleConstructorReturn(this, (MissingNativeAppStateShim.__proto__ || Object.getPrototypeOf(MissingNativeAppStateShim)).call(this, 'RCTAppState', 'AppState'));
      }

      babelHelpers.createClass(MissingNativeAppStateShim, [{
        key: "addEventListener",
        value: function addEventListener() {
          this.throwMissingNativeModule();
        }
      }, {
        key: "removeEventListener",
        value: function removeEventListener() {
          this.throwMissingNativeModule();
        }
      }, {
        key: "currentState",
        get: function get() {
          this.throwMissingNativeModule();
        }
      }]);
      return MissingNativeAppStateShim;
    }(MissingNativeEventEmitterShim);

    AppState = new MissingNativeAppStateShim();
  } else {
    AppState = new AppState();
  }

  module.exports = AppState;
},103,[64,69,15,86,13],"AppState");
__d(function (global, _require3, module, exports, _dependencyMap) {
    !function (root, factory) {
        "object" == typeof exports && "object" == typeof module ? module.exports = factory() : "function" == typeof define && define.amd ? define([], factory) : "object" == typeof exports ? exports.ReactDevToolsBackend = factory() : root.ReactDevToolsBackend = factory();
    }(this, function () {
        return function (modules) {
            function __webpack_require__(moduleId) {
                if (installedModules[moduleId]) return installedModules[moduleId].exports;
                var module = installedModules[moduleId] = {
                    exports: {},
                    id: moduleId,
                    loaded: !1
                };
                return modules[moduleId].call(module.exports, module, module.exports, __webpack_require__), module.loaded = !0, module.exports;
            }

            var installedModules = {};
            return __webpack_require__.m = modules, __webpack_require__.c = installedModules, __webpack_require__.p = "", __webpack_require__(0);
        }([function (module, exports, __webpack_require__) {
            "use strict";

            function connectToDevTools(options) {
                function scheduleRetry() {
                    setTimeout(function () {
                        return connectToDevTools(options);
                    }, 2e3);
                }

                function handleClose() {
                    hasClosed || (hasClosed = !0, scheduleRetry(), closeListeners.forEach(function (fn) {
                        return fn();
                    }));
                }

                function handleMessage(evt) {
                    var data;

                    try {
                        data = JSON.parse(evt.data);
                    } catch (e) {
                        return void console.error("failed to parse json: " + evt.data);
                    }

                    messageListeners.forEach(function (fn) {
                        try {
                            fn(data);
                        } catch (e) {
                            throw console.log(data), e;
                        }
                    });
                }

                var _ref = options || {},
                    _ref$host = _ref.host,
                    host = void 0 === _ref$host ? "localhost" : _ref$host,
                    _ref$port = _ref.port,
                    port = void 0 === _ref$port ? 8097 : _ref$port,
                    websocket = _ref.websocket,
                    _ref$resolveRNStyle = _ref.resolveRNStyle,
                    resolveRNStyle = void 0 === _ref$resolveRNStyle ? null : _ref$resolveRNStyle,
                    _ref$isAppActive = _ref.isAppActive,
                    isAppActive = void 0 === _ref$isAppActive ? function () {
                    return !0;
                } : _ref$isAppActive;

                if (!isAppActive()) return void scheduleRetry();
                var messageListeners = [],
                    closeListeners = [],
                    uri = "ws://" + host + ":" + port,
                    ws = websocket ? websocket : new window.WebSocket(uri);
                ws.onclose = handleClose, ws.onerror = handleClose, ws.onmessage = handleMessage, ws.onopen = function () {
                    var wall = {
                        listen: function listen(fn) {
                            messageListeners.push(fn);
                        },
                        onClose: function onClose(fn) {
                            closeListeners.push(fn);
                        },
                        send: function send(data) {
                            ws.send(JSON.stringify(data));
                        }
                    };
                    setupBackend(wall, resolveRNStyle);
                };
                var hasClosed = !1;
            }

            function setupBackend(wall, resolveRNStyle) {
                wall.onClose(function () {
                    agent && agent.emit("shutdown"), window.__REACT_DEVTOOLS_GLOBAL_HOOK__.emit("shutdown"), bridge = null, agent = null, console.log("closing devtools");
                });
                var bridge = new Bridge(wall),
                    agent = new Agent(window, {
                    rnStyle: !!resolveRNStyle,
                    rnStyleMeasure: !!resolveRNStyle
                });
                agent.addBridge(bridge), resolveRNStyle && setupRNStyle(bridge, agent, resolveRNStyle), setupRelay(bridge, agent, window.__REACT_DEVTOOLS_GLOBAL_HOOK__);

                var _connectTimeout = setTimeout(function () {
                    console.warn("react-devtools agent got no connection");
                }, 2e4);

                agent.once("connected", function () {
                    agent && (inject(window.__REACT_DEVTOOLS_GLOBAL_HOOK__, agent), clearTimeout(_connectTimeout));
                });
            }

            var Agent = __webpack_require__(1),
                Bridge = __webpack_require__(6),
                installGlobalHook = __webpack_require__(31),
                installRelayHook = __webpack_require__(32),
                inject = __webpack_require__(33),
                setupRNStyle = __webpack_require__(46),
                setupRelay = __webpack_require__(48);

            installGlobalHook(window), installRelayHook(window), window.document && window.__REACT_DEVTOOLS_GLOBAL_HOOK__.on("react-devtools", function (agent) {
                var setupHighlighter = __webpack_require__(49);

                setupHighlighter(agent);
            }), module.exports = {
                connectToDevTools: connectToDevTools
            };
        }, function (module, exports, __webpack_require__) {
            "use strict";

            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
            }

            function _possibleConstructorReturn(self, call) {
                if (!self) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                return !call || "object" != typeof call && "function" != typeof call ? self : call;
            }

            function _inherits(subClass, superClass) {
                if ("function" != typeof superClass && null !== superClass) throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: !1,
                        writable: !0,
                        configurable: !0
                    }
                }), superClass && (Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass);
            }

            var _typeof = "function" == typeof Symbol && "symbol" == typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj;
            },
                _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), Constructor;
                };
            }(),
                _require = __webpack_require__(2),
                EventEmitter = _require.EventEmitter,
                assign = __webpack_require__(3),
                guid = __webpack_require__(4),
                getIn = __webpack_require__(5),
                Agent = function (_EventEmitter) {
                function Agent(global, capabilities) {
                    _classCallCheck(this, Agent);

                    var _this = _possibleConstructorReturn(this, (Agent.__proto__ || Object.getPrototypeOf(Agent)).call(this));

                    _this.global = global, _this.internalInstancesById = new Map(), _this.idsByInternalInstances = new WeakMap(), _this.renderers = new Map(), _this.elementData = new Map(), _this.roots = new Set(), _this.reactInternals = {};
                    var lastSelected;
                    _this.on("selected", function (id) {
                        var data = _this.elementData.get(id);

                        data && data.publicInstance && _this.global.$r === lastSelected && (_this.global.$r = data.publicInstance, lastSelected = data.publicInstance);
                    }), _this._prevSelected = null, _this._scrollUpdate = !1;
                    var isReactDOM = window.document && "function" == typeof window.document.createElement;
                    return _this.capabilities = assign({
                        scroll: isReactDOM && "function" == typeof window.document.body.scrollIntoView,
                        dom: isReactDOM,
                        editTextContent: !1
                    }, capabilities), isReactDOM && (_this._updateScroll = _this._updateScroll.bind(_this), window.addEventListener("scroll", _this._onScroll.bind(_this), !0), window.addEventListener("click", _this._onClick.bind(_this), !0), window.addEventListener("mouseover", _this._onMouseOver.bind(_this), !0), window.addEventListener("resize", _this._onResize.bind(_this), !0)), _this;
                }

                return _inherits(Agent, _EventEmitter), _createClass(Agent, [{
                    key: "sub",
                    value: function value(ev, fn) {
                        var _this2 = this;

                        return this.on(ev, fn), function () {
                            _this2.removeListener(ev, fn);
                        };
                    }
                }, {
                    key: "setReactInternals",
                    value: function value(renderer, reactInternals) {
                        this.reactInternals[renderer] = reactInternals;
                    }
                }, {
                    key: "addBridge",
                    value: function value(bridge) {
                        var _this3 = this;

                        bridge.on("requestCapabilities", function () {
                            bridge.send("capabilities", _this3.capabilities), _this3.emit("connected");
                        }), bridge.on("setState", this._setState.bind(this)), bridge.on("setProps", this._setProps.bind(this)), bridge.on("setContext", this._setContext.bind(this)), bridge.on("makeGlobal", this._makeGlobal.bind(this)), bridge.on("highlight", function (id) {
                            return _this3.highlight(id);
                        }), bridge.on("highlightMany", function (id) {
                            return _this3.highlightMany(id);
                        }), bridge.on("hideHighlight", function () {
                            return _this3.emit("hideHighlight");
                        }), bridge.on("startInspecting", function () {
                            return _this3.emit("startInspecting");
                        }), bridge.on("stopInspecting", function () {
                            return _this3.emit("stopInspecting");
                        }), bridge.on("selected", function (id) {
                            return _this3.emit("selected", id);
                        }), bridge.on("setInspectEnabled", function (enabled) {
                            _this3._inspectEnabled = enabled, _this3.emit("stopInspecting");
                        }), bridge.on("shutdown", function () {
                            return _this3.emit("shutdown");
                        }), bridge.on("changeTextContent", function (_ref) {
                            var id = _ref.id,
                                text = _ref.text,
                                node = _this3.getNodeForID(id);

                            node && (node.textContent = text);
                        }), bridge.on("putSelectedNode", function (id) {
                            window.__REACT_DEVTOOLS_GLOBAL_HOOK__.$node = _this3.getNodeForID(id);
                        }), bridge.on("putSelectedInstance", function (id) {
                            var node = _this3.elementData.get(id);

                            node ? window.__REACT_DEVTOOLS_GLOBAL_HOOK__.$type = node.type : window.__REACT_DEVTOOLS_GLOBAL_HOOK__.$type = null, node && node.publicInstance ? window.__REACT_DEVTOOLS_GLOBAL_HOOK__.$inst = node.publicInstance : window.__REACT_DEVTOOLS_GLOBAL_HOOK__.$inst = null;
                        }), bridge.on("checkSelection", function () {
                            var newSelected = window.__REACT_DEVTOOLS_GLOBAL_HOOK__.$0;

                            if (newSelected !== _this3._prevSelected) {
                                _this3._prevSelected = newSelected;
                                var sentSelected = window.__REACT_DEVTOOLS_GLOBAL_HOOK__.$node;
                                newSelected !== sentSelected && _this3.selectFromDOMNode(newSelected, !0);
                            }
                        }), bridge.on("scrollToNode", function (id) {
                            return _this3.scrollToNode(id);
                        }), bridge.on("traceupdatesstatechange", function (value) {
                            return _this3.emit("traceupdatesstatechange", value);
                        }), bridge.on("colorizerchange", function (value) {
                            return _this3.emit("colorizerchange", value);
                        }), this.on("root", function (id) {
                            return bridge.send("root", id);
                        }), this.on("mount", function (data) {
                            return bridge.send("mount", data);
                        }), this.on("update", function (data) {
                            return bridge.send("update", data);
                        }), this.on("unmount", function (id) {
                            bridge.send("unmount", id), bridge.forget(id);
                        }), this.on("setSelection", function (data) {
                            return bridge.send("select", data);
                        }), this.on("setInspectEnabled", function (data) {
                            return bridge.send("setInspectEnabled", data);
                        });
                    }
                }, {
                    key: "scrollToNode",
                    value: function value(id) {
                        var node = this.getNodeForID(id);
                        if (!node) return void console.warn("unable to get the node for scrolling");
                        var domElement = node.nodeType === Node.ELEMENT_NODE ? node : node.parentElement;
                        return domElement ? ("function" == typeof domElement.scrollIntoViewIfNeeded ? domElement.scrollIntoViewIfNeeded() : "function" == typeof domElement.scrollIntoView && domElement.scrollIntoView(), void this.highlight(id)) : void console.warn("unable to get the domElement for scrolling");
                    }
                }, {
                    key: "highlight",
                    value: function value(id) {
                        var data = this.elementData.get(id),
                            node = this.getNodeForID(id);
                        data && node && this.emit("highlight", {
                            node: node,
                            name: data.name,
                            props: data.props
                        });
                    }
                }, {
                    key: "highlightMany",
                    value: function value(ids) {
                        var _this4 = this,
                            nodes = [];

                        ids.forEach(function (id) {
                            var node = _this4.getNodeForID(id);

                            node && nodes.push(node);
                        }), nodes.length && this.emit("highlightMany", nodes);
                    }
                }, {
                    key: "getNodeForID",
                    value: function value(id) {
                        var component = this.internalInstancesById.get(id);
                        if (!component) return null;
                        var renderer = this.renderers.get(id);
                        return renderer && this.reactInternals[renderer].getNativeFromReactElement ? this.reactInternals[renderer].getNativeFromReactElement(component) : null;
                    }
                }, {
                    key: "selectFromDOMNode",
                    value: function value(node, quiet) {
                        var offsetFromLeaf = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0,
                            id = this.getIDForNode(node);
                        id && this.emit("setSelection", {
                            id: id,
                            quiet: quiet,
                            offsetFromLeaf: offsetFromLeaf
                        });
                    }
                }, {
                    key: "selectFromReactInstance",
                    value: function value(instance, quiet) {
                        var id = this.getId(instance);
                        return id ? void this.emit("setSelection", {
                            id: id,
                            quiet: quiet
                        }) : void console.log("no instance id", instance);
                    }
                }, {
                    key: "getIDForNode",
                    value: function value(node) {
                        if (!this.reactInternals) return null;
                        var component;

                        for (var renderer in this.reactInternals) {
                            try {
                                component = this.reactInternals[renderer].getReactElementFromNative(node);
                            } catch (e) {}

                            if (component) return this.getId(component);
                        }

                        return null;
                    }
                }, {
                    key: "_setProps",
                    value: function value(_ref2) {
                        var id = _ref2.id,
                            path = _ref2.path,
                            value = _ref2.value,
                            data = this.elementData.get(id);
                        data && data.updater && data.updater.setInProps ? data.updater.setInProps(path, value) : console.warn("trying to set props on a component that doesn't support it");
                    }
                }, {
                    key: "_setState",
                    value: function value(_ref3) {
                        var id = _ref3.id,
                            path = _ref3.path,
                            value = _ref3.value,
                            data = this.elementData.get(id);
                        data && data.updater && data.updater.setInState ? data.updater.setInState(path, value) : console.warn("trying to set state on a component that doesn't support it");
                    }
                }, {
                    key: "_setContext",
                    value: function value(_ref4) {
                        var id = _ref4.id,
                            path = _ref4.path,
                            value = _ref4.value,
                            data = this.elementData.get(id);
                        data && data.updater && data.updater.setInContext ? data.updater.setInContext(path, value) : console.warn("trying to set context on a component that doesn't support it");
                    }
                }, {
                    key: "_makeGlobal",
                    value: function value(_ref5) {
                        var id = _ref5.id,
                            path = _ref5.path,
                            data = this.elementData.get(id);

                        if (data) {
                            var value;
                            value = "instance" === path ? data.publicInstance : getIn(data, path), this.global.$tmp = value, console.log("$tmp =", value);
                        }
                    }
                }, {
                    key: "getId",
                    value: function value(internalInstance) {
                        return "object" === ("undefined" == typeof internalInstance ? "undefined" : _typeof(internalInstance)) && internalInstance ? (this.idsByInternalInstances.has(internalInstance) || (this.idsByInternalInstances.set(internalInstance, guid()), this.internalInstancesById.set(this.idsByInternalInstances.get(internalInstance), internalInstance)), this.idsByInternalInstances.get(internalInstance)) : internalInstance;
                    }
                }, {
                    key: "addRoot",
                    value: function value(renderer, internalInstance) {
                        var id = this.getId(internalInstance);
                        this.roots.add(id), this.emit("root", id);
                    }
                }, {
                    key: "onMounted",
                    value: function value(renderer, component, data) {
                        var _this5 = this,
                            id = this.getId(component);

                        this.renderers.set(id, renderer), this.elementData.set(id, data);
                        var send = assign({}, data);
                        send.children && send.children.map && (send.children = send.children.map(function (c) {
                            return _this5.getId(c);
                        })), send.id = id, send.canUpdate = send.updater && !!send.updater.forceUpdate, delete send.type, delete send.updater, this.emit("mount", send);
                    }
                }, {
                    key: "onUpdated",
                    value: function value(component, data) {
                        var _this6 = this,
                            id = this.getId(component);

                        this.elementData.set(id, data);
                        var send = assign({}, data);
                        send.children && send.children.map && (send.children = send.children.map(function (c) {
                            return _this6.getId(c);
                        })), send.id = id, send.canUpdate = send.updater && !!send.updater.forceUpdate, delete send.type, delete send.updater, this.emit("update", send);
                    }
                }, {
                    key: "onUnmounted",
                    value: function value(component) {
                        var id = this.getId(component);
                        this.elementData["delete"](id), this.roots["delete"](id), this.renderers["delete"](id), this.emit("unmount", id), this.idsByInternalInstances["delete"](component);
                    }
                }, {
                    key: "_onScroll",
                    value: function value() {
                        this._scrollUpdate || (this._scrollUpdate = !0, window.requestAnimationFrame(this._updateScroll));
                    }
                }, {
                    key: "_updateScroll",
                    value: function value() {
                        this.emit("refreshMultiOverlay"), this.emit("stopInspecting"), this._scrollUpdate = !1;
                    }
                }, {
                    key: "_onClick",
                    value: function value(event) {
                        if (this._inspectEnabled) {
                            var id = this.getIDForNode(event.target);
                            id && (event.stopPropagation(), event.preventDefault(), this.emit("setSelection", {
                                id: id
                            }), this.emit("setInspectEnabled", !1));
                        }
                    }
                }, {
                    key: "_onMouseOver",
                    value: function value(event) {
                        if (this._inspectEnabled) {
                            var id = this.getIDForNode(event.target);
                            if (!id) return;
                            this.highlight(id);
                        }
                    }
                }, {
                    key: "_onResize",
                    value: function value(event) {
                        this.emit("stopInspecting");
                    }
                }]), Agent;
            }(EventEmitter);

            module.exports = Agent;
        }, function (module, exports) {
            function EventEmitter() {
                this._events = this._events || {}, this._maxListeners = this._maxListeners || void 0;
            }

            function isFunction(arg) {
                return "function" == typeof arg;
            }

            function isNumber(arg) {
                return "number" == typeof arg;
            }

            function isObject(arg) {
                return "object" == typeof arg && null !== arg;
            }

            function isUndefined(arg) {
                return void 0 === arg;
            }

            module.exports = EventEmitter, EventEmitter.EventEmitter = EventEmitter, EventEmitter.prototype._events = void 0, EventEmitter.prototype._maxListeners = void 0, EventEmitter.defaultMaxListeners = 10, EventEmitter.prototype.setMaxListeners = function (n) {
                if (!isNumber(n) || n < 0 || isNaN(n)) throw TypeError("n must be a positive number");
                return this._maxListeners = n, this;
            }, EventEmitter.prototype.emit = function (type) {
                var er, handler, len, args, i, listeners;

                if (this._events || (this._events = {}), "error" === type && (!this._events.error || isObject(this._events.error) && !this._events.error.length)) {
                    if (er = arguments[1], er instanceof Error) throw er;
                    var err = new Error('Uncaught, unspecified "error" event. (' + er + ")");
                    throw err.context = er, err;
                }

                if (handler = this._events[type], isUndefined(handler)) return !1;
                if (isFunction(handler)) switch (arguments.length) {
                    case 1:
                        handler.call(this);
                        break;

                    case 2:
                        handler.call(this, arguments[1]);
                        break;

                    case 3:
                        handler.call(this, arguments[1], arguments[2]);
                        break;

                    default:
                        args = Array.prototype.slice.call(arguments, 1), handler.apply(this, args);
                } else if (isObject(handler)) for (args = Array.prototype.slice.call(arguments, 1), listeners = handler.slice(), len = listeners.length, i = 0; i < len; i++) {
                    listeners[i].apply(this, args);
                }
                return !0;
            }, EventEmitter.prototype.addListener = function (type, listener) {
                var m;
                if (!isFunction(listener)) throw TypeError("listener must be a function");
                return this._events || (this._events = {}), this._events.newListener && this.emit("newListener", type, isFunction(listener.listener) ? listener.listener : listener), this._events[type] ? isObject(this._events[type]) ? this._events[type].push(listener) : this._events[type] = [this._events[type], listener] : this._events[type] = listener, isObject(this._events[type]) && !this._events[type].warned && (m = isUndefined(this._maxListeners) ? EventEmitter.defaultMaxListeners : this._maxListeners, m && m > 0 && this._events[type].length > m && (this._events[type].warned = !0, console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.", this._events[type].length), "function" == typeof console.trace && console.trace())), this;
            }, EventEmitter.prototype.on = EventEmitter.prototype.addListener, EventEmitter.prototype.once = function (type, listener) {
                function g() {
                    this.removeListener(type, g), fired || (fired = !0, listener.apply(this, arguments));
                }

                if (!isFunction(listener)) throw TypeError("listener must be a function");
                var fired = !1;
                return g.listener = listener, this.on(type, g), this;
            }, EventEmitter.prototype.removeListener = function (type, listener) {
                var list, position, length, i;
                if (!isFunction(listener)) throw TypeError("listener must be a function");
                if (!this._events || !this._events[type]) return this;
                if (list = this._events[type], length = list.length, position = -1, list === listener || isFunction(list.listener) && list.listener === listener) delete this._events[type], this._events.removeListener && this.emit("removeListener", type, listener);else if (isObject(list)) {
                    for (i = length; i-- > 0;) {
                        if (list[i] === listener || list[i].listener && list[i].listener === listener) {
                            position = i;
                            break;
                        }
                    }

                    if (position < 0) return this;
                    1 === list.length ? (list.length = 0, delete this._events[type]) : list.splice(position, 1), this._events.removeListener && this.emit("removeListener", type, listener);
                }
                return this;
            }, EventEmitter.prototype.removeAllListeners = function (type) {
                var key, listeners;
                if (!this._events) return this;
                if (!this._events.removeListener) return 0 === arguments.length ? this._events = {} : this._events[type] && delete this._events[type], this;

                if (0 === arguments.length) {
                    for (key in this._events) {
                        "removeListener" !== key && this.removeAllListeners(key);
                    }

                    return this.removeAllListeners("removeListener"), this._events = {}, this;
                }

                if (listeners = this._events[type], isFunction(listeners)) this.removeListener(type, listeners);else if (listeners) for (; listeners.length;) {
                    this.removeListener(type, listeners[listeners.length - 1]);
                }
                return delete this._events[type], this;
            }, EventEmitter.prototype.listeners = function (type) {
                var ret;
                return ret = this._events && this._events[type] ? isFunction(this._events[type]) ? [this._events[type]] : this._events[type].slice() : [];
            }, EventEmitter.prototype.listenerCount = function (type) {
                if (this._events) {
                    var evlistener = this._events[type];
                    if (isFunction(evlistener)) return 1;
                    if (evlistener) return evlistener.length;
                }

                return 0;
            }, EventEmitter.listenerCount = function (emitter, type) {
                return emitter.listenerCount(type);
            };
        }, function (module, exports) {
            "use strict";

            function toObject(val) {
                if (null === val || void 0 === val) throw new TypeError("Object.assign cannot be called with null or undefined");
                return Object(val);
            }

            var hasOwnProperty = Object.prototype.hasOwnProperty,
                propIsEnumerable = Object.prototype.propertyIsEnumerable;

            module.exports = Object.assign || function (target, source) {
                for (var from, symbols, to = toObject(target), s = 1; s < arguments.length; s++) {
                    from = Object(arguments[s]);

                    for (var key in from) {
                        hasOwnProperty.call(from, key) && (to[key] = from[key]);
                    }

                    if (Object.getOwnPropertySymbols) {
                        symbols = Object.getOwnPropertySymbols(from);

                        for (var i = 0; i < symbols.length; i++) {
                            propIsEnumerable.call(from, symbols[i]) && (to[symbols[i]] = from[symbols[i]]);
                        }
                    }
                }

                return to;
            };
        }, function (module, exports) {
            "use strict";

            function guid() {
                return "g" + Math.random().toString(16).substr(2);
            }

            module.exports = guid;
        }, function (module, exports) {
            "use strict";

            function _toConsumableArray(arr) {
                if (Array.isArray(arr)) {
                    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                        arr2[i] = arr[i];
                    }

                    return arr2;
                }

                return Array.from(arr);
            }

            function getIn(base, path) {
                return path.reduce(function (obj, attr) {
                    if (obj) {
                        if (obj.hasOwnProperty(attr)) return obj[attr];
                        if ("function" == typeof obj[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]) return [].concat(_toConsumableArray(obj))[attr];
                    }

                    return null;
                }, base);
            }

            module.exports = getIn;
        }, function (module, exports, __webpack_require__) {
            "use strict";

            function _toConsumableArray(arr) {
                if (Array.isArray(arr)) {
                    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                        arr2[i] = arr[i];
                    }

                    return arr2;
                }

                return Array.from(arr);
            }

            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
            }

            function getWindowFunction(name, polyfill) {
                return String(window[name]).indexOf("[native code]") === -1 ? polyfill : window[name];
            }

            var _extends = Object.assign || function (target) {
                for (var i = 1; i < arguments.length; i++) {
                    var source = arguments[i];

                    for (var key in source) {
                        Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
                    }
                }

                return target;
            },
                _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), Constructor;
                };
            }(),
                consts = __webpack_require__(7),
                hydrate = __webpack_require__(26),
                dehydrate = __webpack_require__(27),
                getIn = __webpack_require__(5),
                performanceNow = __webpack_require__(28),
                lastRunTimeMS = 5,
                cancelIdleCallback = getWindowFunction("cancelIdleCallback", clearTimeout),
                requestIdleCallback = getWindowFunction("requestIdleCallback", function (cb, options) {
                var delayMS = 3e3 * lastRunTimeMS;
                return delayMS > 500 && (delayMS = 500), setTimeout(function () {
                    var startTime = performanceNow();
                    cb({
                        didTimeout: !1,
                        timeRemaining: function timeRemaining() {
                            return 1 / 0;
                        }
                    });
                    var endTime = performanceNow();
                    lastRunTimeMS = (endTime - startTime) / 1e3;
                }, delayMS);
            }),
                Bridge = function () {
                function Bridge(wall) {
                    _classCallCheck(this, Bridge), this._cbs = new Map(), this._inspectables = new Map(), this._cid = 0, this._listeners = {}, this._buffer = [], this._flushHandle = null, this._callers = {}, this._paused = !1, this._wall = wall, wall.listen(this._handleMessage.bind(this));
                }

                return _createClass(Bridge, [{
                    key: "inspect",
                    value: function value(id, path, cb) {
                        var _cid = this._cid++;

                        this._cbs.set(_cid, function (data, cleaned, proto, protoclean) {
                            cleaned.length && hydrate(data, cleaned), proto && protoclean.length && hydrate(proto, protoclean), proto && (data[consts.proto] = proto), cb(data);
                        }), this._wall.send({
                            type: "inspect",
                            callback: _cid,
                            path: path,
                            id: id
                        });
                    }
                }, {
                    key: "call",
                    value: function value(name, args, cb) {
                        var _cid = this._cid++;

                        this._cbs.set(_cid, cb), this._wall.send({
                            type: "call",
                            callback: _cid,
                            args: args,
                            name: name
                        });
                    }
                }, {
                    key: "onCall",
                    value: function value(name, handler) {
                        if (this._callers[name]) throw new Error("only one call handler per call name allowed");
                        this._callers[name] = handler;
                    }
                }, {
                    key: "pause",
                    value: function value() {
                        this._wall.send({
                            type: "pause"
                        });
                    }
                }, {
                    key: "resume",
                    value: function value() {
                        this._wall.send({
                            type: "resume"
                        });
                    }
                }, {
                    key: "setInspectable",
                    value: function value(id, data) {
                        var prev = this._inspectables.get(id);

                        return prev ? void this._inspectables.set(id, _extends({}, prev, data)) : void this._inspectables.set(id, data);
                    }
                }, {
                    key: "send",
                    value: function value(evt, data) {
                        this._buffer.push({
                            evt: evt,
                            data: data
                        }), this.scheduleFlush();
                    }
                }, {
                    key: "scheduleFlush",
                    value: function value() {
                        if (!this._flushHandle && this._buffer.length) {
                            var timeout = this._paused ? 5e3 : 500;
                            this._flushHandle = requestIdleCallback(this.flushBufferWhileIdle.bind(this), {
                                timeout: timeout
                            });
                        }
                    }
                }, {
                    key: "cancelFlush",
                    value: function value() {
                        this._flushHandle && (cancelIdleCallback(this._flushHandle), this._flushHandle = null);
                    }
                }, {
                    key: "flushBufferWhileIdle",
                    value: function value(deadline) {
                        this._flushHandle = null;

                        for (var chunkCount = this._paused ? 20 : 10, chunkSize = Math.round(this._buffer.length / chunkCount), minChunkSize = this._paused ? 50 : 100; this._buffer.length && (deadline.timeRemaining() > 0 || deadline.didTimeout);) {
                            var take = Math.min(this._buffer.length, Math.max(minChunkSize, chunkSize)),
                                currentBuffer = this._buffer.splice(0, take);

                            this.flushBufferSlice(currentBuffer);
                        }

                        this._buffer.length && this.scheduleFlush();
                    }
                }, {
                    key: "flushBufferSlice",
                    value: function value(bufferSlice) {
                        var _this = this,
                            events = bufferSlice.map(function (_ref) {
                            var evt = _ref.evt,
                                data = _ref.data,
                                cleaned = [],
                                san = dehydrate(data, cleaned);
                            return cleaned.length && _this.setInspectable(data.id, data), {
                                type: "event",
                                evt: evt,
                                data: san,
                                cleaned: cleaned
                            };
                        });

                        this._wall.send({
                            type: "many-events",
                            events: events
                        });
                    }
                }, {
                    key: "forget",
                    value: function value(id) {
                        this._inspectables["delete"](id);
                    }
                }, {
                    key: "on",
                    value: function value(evt, fn) {
                        this._listeners[evt] ? this._listeners[evt].push(fn) : this._listeners[evt] = [fn];
                    }
                }, {
                    key: "off",
                    value: function value(evt, fn) {
                        if (this._listeners[evt]) {
                            var ix = this._listeners[evt].indexOf(fn);

                            ix !== -1 && this._listeners[evt].splice(ix, 1);
                        }
                    }
                }, {
                    key: "once",
                    value: function value(evt, fn) {
                        var self = this,
                            listener = function listener() {
                            fn.apply(this, arguments), self.off(evt, listener);
                        };

                        this.on(evt, listener);
                    }
                }, {
                    key: "_handleMessage",
                    value: function value(payload) {
                        var _this2 = this;

                        if ("resume" === payload.type) return this._paused = !1, void this.scheduleFlush();
                        if ("pause" === payload.type) return this._paused = !0, void this.cancelFlush();

                        if ("callback" === payload.type) {
                            var callback = this._cbs.get(payload.id);

                            return void (callback && (callback.apply(void 0, _toConsumableArray(payload.args)), this._cbs["delete"](payload.id)));
                        }

                        if ("call" === payload.type) return void this._handleCall(payload.name, payload.args, payload.callback);
                        if ("inspect" === payload.type) return void this._inspectResponse(payload.id, payload.path, payload.callback);

                        if ("event" === payload.type) {
                            payload.cleaned && hydrate(payload.data, payload.cleaned);
                            var fns = this._listeners[payload.evt],
                                data = payload.data;
                            fns && fns.forEach(function (fn) {
                                return fn(data);
                            });
                        }

                        "many-events" === payload.type && payload.events.forEach(function (event) {
                            event.cleaned && hydrate(event.data, event.cleaned);
                            var handlers = _this2._listeners[event.evt];
                            handlers && handlers.forEach(function (fn) {
                                return fn(event.data);
                            });
                        });
                    }
                }, {
                    key: "_handleCall",
                    value: function value(name, args, callback) {
                        if (!this._callers[name]) return void console.warn('unknown call: "' + name + '"');
                        args = Array.isArray(args) ? args : [args];
                        var result;

                        try {
                            result = this._callers[name].apply(null, args);
                        } catch (e) {
                            return void console.error("Failed to call", e);
                        }

                        this._wall.send({
                            type: "callback",
                            id: callback,
                            args: [result]
                        });
                    }
                }, {
                    key: "_inspectResponse",
                    value: function value(id, path, callback) {
                        var inspectable = this._inspectables.get(id),
                            result = {},
                            cleaned = [],
                            proto = null,
                            protoclean = [];

                        if (inspectable) {
                            var val = getIn(inspectable, path),
                                protod = !1,
                                isFn = "function" == typeof val;

                            if (val && "function" == typeof val[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]) {
                                var iterVal = Object.create({}),
                                    count = 0,
                                    _iteratorNormalCompletion = !0,
                                    _didIteratorError = !1,
                                    _iteratorError = void 0;

                                try {
                                    for (var _step, _iterator = val[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = !0) {
                                        var entry = _step.value;
                                        if (count > 100) break;
                                        iterVal[count] = entry, count++;
                                    }
                                } catch (err) {
                                    _didIteratorError = !0, _iteratorError = err;
                                } finally {
                                    try {
                                        !_iteratorNormalCompletion && _iterator["return"] && _iterator["return"]();
                                    } finally {
                                        if (_didIteratorError) throw _iteratorError;
                                    }
                                }

                                val = iterVal;
                            }

                            if (Object.getOwnPropertyNames(val).forEach(function (name) {
                                "__proto__" === name && (protod = !0), (!isFn || "arguments" !== name && "callee" !== name && "caller" !== name) && (result[name] = dehydrate(val[name], cleaned, [name]));
                            }), !protod && val.__proto__ && "Object" !== val.constructor.name) {
                                var newProto = {},
                                    pIsFn = "function" == typeof val.__proto__;
                                Object.getOwnPropertyNames(val.__proto__).forEach(function (name) {
                                    (!pIsFn || "arguments" !== name && "callee" !== name && "caller" !== name) && (newProto[name] = dehydrate(val.__proto__[name], protoclean, [name]));
                                }), proto = newProto;
                            }
                        }

                        this._wall.send({
                            type: "callback",
                            id: callback,
                            args: [result, cleaned, proto, protoclean]
                        });
                    }
                }]), Bridge;
            }();

            module.exports = Bridge;
        }, function (module, exports, __webpack_require__) {
            "use strict";

            var _Symbol = __webpack_require__(8);

            module.exports = {
                name: _Symbol("name"),
                type: _Symbol("type"),
                inspected: _Symbol("inspected"),
                meta: _Symbol("meta"),
                proto: _Symbol("proto")
            };
        }, function (module, exports, __webpack_require__) {
            "use strict";

            module.exports = __webpack_require__(9)() ? Symbol : __webpack_require__(10);
        }, function (module, exports) {
            "use strict";

            module.exports = function () {
                var symbol;
                if ("function" != typeof Symbol) return !1;
                symbol = Symbol("test symbol");

                try {
                    String(symbol);
                } catch (e) {
                    return !1;
                }

                return "symbol" == typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") || "object" == typeof (typeof Symbol === "function" ? Symbol.isConcatSpreadable : "@@isConcatSpreadable") && "object" == typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") && "object" == typeof (typeof Symbol === "function" ? Symbol.toPrimitive : "@@toPrimitive") && "object" == typeof (typeof Symbol === "function" ? Symbol.toStringTag : "@@toStringTag") && "object" == typeof (typeof Symbol === "function" ? Symbol.unscopables : "@@unscopables");
            };
        }, function (module, exports, __webpack_require__) {
            "use strict";

            var NativeSymbol,
                SymbolPolyfill,
                _HiddenSymbol,
                d = __webpack_require__(11),
                validateSymbol = __webpack_require__(24),
                create = Object.create,
                defineProperties = Object.defineProperties,
                defineProperty = Object.defineProperty,
                objPrototype = Object.prototype,
                globalSymbols = create(null);

            "function" == typeof Symbol && (NativeSymbol = Symbol);

            var generateName = function () {
                var created = create(null);
                return function (desc) {
                    for (var name, ie11BugWorkaround, postfix = 0; created[desc + (postfix || "")];) {
                        ++postfix;
                    }

                    return desc += postfix || "", created[desc] = !0, name = "@@" + desc, defineProperty(objPrototype, name, d.gs(null, function (value) {
                        ie11BugWorkaround || (ie11BugWorkaround = !0, defineProperty(this, name, d(value)), ie11BugWorkaround = !1);
                    })), name;
                };
            }();

            _HiddenSymbol = function HiddenSymbol(description) {
                if (this instanceof _HiddenSymbol) throw new TypeError("TypeError: Symbol is not a constructor");
                return SymbolPolyfill(description);
            }, module.exports = SymbolPolyfill = function Symbol(description) {
                var symbol;
                if (this instanceof Symbol) throw new TypeError("TypeError: Symbol is not a constructor");
                return symbol = create(_HiddenSymbol.prototype), description = void 0 === description ? "" : String(description), defineProperties(symbol, {
                    __description__: d("", description),
                    __name__: d("", generateName(description))
                });
            }, defineProperties(SymbolPolyfill, {
                "for": d(function (key) {
                    return globalSymbols[key] ? globalSymbols[key] : globalSymbols[key] = SymbolPolyfill(String(key));
                }),
                keyFor: d(function (s) {
                    var key;
                    validateSymbol(s);

                    for (key in globalSymbols) {
                        if (globalSymbols[key] === s) return key;
                    }
                }),
                hasInstance: d("", NativeSymbol && NativeSymbol.hasInstance || SymbolPolyfill("hasInstance")),
                isConcatSpreadable: d("", NativeSymbol && NativeSymbol.isConcatSpreadable || SymbolPolyfill("isConcatSpreadable")),
                iterator: d("", NativeSymbol && NativeSymbol.iterator || SymbolPolyfill("iterator")),
                match: d("", NativeSymbol && NativeSymbol.match || SymbolPolyfill("match")),
                replace: d("", NativeSymbol && NativeSymbol.replace || SymbolPolyfill("replace")),
                search: d("", NativeSymbol && NativeSymbol.search || SymbolPolyfill("search")),
                species: d("", NativeSymbol && NativeSymbol.species || SymbolPolyfill("species")),
                split: d("", NativeSymbol && NativeSymbol.split || SymbolPolyfill("split")),
                toPrimitive: d("", NativeSymbol && NativeSymbol.toPrimitive || SymbolPolyfill("toPrimitive")),
                toStringTag: d("", NativeSymbol && NativeSymbol.toStringTag || SymbolPolyfill("toStringTag")),
                unscopables: d("", NativeSymbol && NativeSymbol.unscopables || SymbolPolyfill("unscopables"))
            }), defineProperties(_HiddenSymbol.prototype, {
                constructor: d(SymbolPolyfill),
                toString: d("", function () {
                    return this.__name__;
                })
            }), defineProperties(SymbolPolyfill.prototype, {
                toString: d(function () {
                    return "Symbol (" + validateSymbol(this).__description__ + ")";
                }),
                valueOf: d(function () {
                    return validateSymbol(this);
                })
            }), defineProperty(SymbolPolyfill.prototype, SymbolPolyfill.toPrimitive, d("", function () {
                return validateSymbol(this);
            })), defineProperty(SymbolPolyfill.prototype, SymbolPolyfill.toStringTag, d("c", "Symbol")), defineProperty(_HiddenSymbol.prototype, SymbolPolyfill.toStringTag, d("c", SymbolPolyfill.prototype[SymbolPolyfill.toStringTag])), defineProperty(_HiddenSymbol.prototype, SymbolPolyfill.toPrimitive, d("c", SymbolPolyfill.prototype[SymbolPolyfill.toPrimitive]));
        }, function (module, exports, __webpack_require__) {
            "use strict";

            var d,
                assign = __webpack_require__(12),
                normalizeOpts = __webpack_require__(19),
                isCallable = __webpack_require__(20),
                contains = __webpack_require__(21);

            d = module.exports = function (dscr, value) {
                var c, e, w, options, desc;
                return arguments.length < 2 || "string" != typeof dscr ? (options = value, value = dscr, dscr = null) : options = arguments[2], null == dscr ? (c = w = !0, e = !1) : (c = contains.call(dscr, "c"), e = contains.call(dscr, "e"), w = contains.call(dscr, "w")), desc = {
                    value: value,
                    configurable: c,
                    enumerable: e,
                    writable: w
                }, options ? assign(normalizeOpts(options), desc) : desc;
            }, d.gs = function (dscr, get, set) {
                var c, e, options, desc;
                return "string" != typeof dscr ? (options = set, set = get, get = dscr, dscr = null) : options = arguments[3], null == get ? get = void 0 : isCallable(get) ? null == set ? set = void 0 : isCallable(set) || (options = set, set = void 0) : (options = get, get = set = void 0), null == dscr ? (c = !0, e = !1) : (c = contains.call(dscr, "c"), e = contains.call(dscr, "e")), desc = {
                    get: get,
                    set: set,
                    configurable: c,
                    enumerable: e
                }, options ? assign(normalizeOpts(options), desc) : desc;
            };
        }, function (module, exports, __webpack_require__) {
            "use strict";

            module.exports = __webpack_require__(13)() ? Object.assign : __webpack_require__(14);
        }, function (module, exports) {
            "use strict";

            module.exports = function () {
                var obj,
                    assign = Object.assign;
                return "function" == typeof assign && (obj = {
                    foo: "raz"
                }, assign(obj, {
                    bar: "dwa"
                }, {
                    trzy: "trzy"
                }), obj.foo + obj.bar + obj.trzy === "razdwatrzy");
            };
        }, function (module, exports, __webpack_require__) {
            "use strict";

            var keys = __webpack_require__(15),
                value = __webpack_require__(18),
                max = Math.max;

            module.exports = function (dest, src) {
                var error,
                    i,
                    assign,
                    l = max(arguments.length, 2);

                for (dest = Object(value(dest)), assign = function assign(key) {
                    try {
                        dest[key] = src[key];
                    } catch (e) {
                        error || (error = e);
                    }
                }, i = 1; i < l; ++i) {
                    src = arguments[i], keys(src).forEach(assign);
                }

                if (void 0 !== error) throw error;
                return dest;
            };
        }, function (module, exports, __webpack_require__) {
            "use strict";

            module.exports = __webpack_require__(16)() ? Object.keys : __webpack_require__(17);
        }, function (module, exports) {
            "use strict";

            module.exports = function () {
                try {
                    return Object.keys("primitive"), !0;
                } catch (e) {
                    return !1;
                }
            };
        }, function (module, exports) {
            "use strict";

            var keys = Object.keys;

            module.exports = function (object) {
                return keys(null == object ? object : Object(object));
            };
        }, function (module, exports) {
            "use strict";

            module.exports = function (value) {
                if (null == value) throw new TypeError("Cannot use null or undefined");
                return value;
            };
        }, function (module, exports) {
            "use strict";

            var forEach = Array.prototype.forEach,
                create = Object.create,
                process = function process(src, obj) {
                var key;

                for (key in src) {
                    obj[key] = src[key];
                }
            };

            module.exports = function (options) {
                var result = create(null);
                return forEach.call(arguments, function (options) {
                    null != options && process(Object(options), result);
                }), result;
            };
        }, function (module, exports) {
            "use strict";

            module.exports = function (obj) {
                return "function" == typeof obj;
            };
        }, function (module, exports, __webpack_require__) {
            "use strict";

            module.exports = __webpack_require__(22)() ? String.prototype.contains : __webpack_require__(23);
        }, function (module, exports) {
            "use strict";

            var str = "razdwatrzy";

            module.exports = function () {
                return "function" == typeof str.contains && str.contains("dwa") === !0 && str.contains("foo") === !1;
            };
        }, function (module, exports) {
            "use strict";

            var indexOf = String.prototype.indexOf;

            module.exports = function (searchString) {
                return indexOf.call(this, searchString, arguments[1]) > -1;
            };
        }, function (module, exports, __webpack_require__) {
            "use strict";

            var isSymbol = __webpack_require__(25);

            module.exports = function (value) {
                if (!isSymbol(value)) throw new TypeError(value + " is not a symbol");
                return value;
            };
        }, function (module, exports) {
            "use strict";

            module.exports = function (x) {
                return x && ("symbol" == typeof x || "Symbol" === x["@@toStringTag"]) || !1;
            };
        }, function (module, exports, __webpack_require__) {
            "use strict";

            function hydrate(data, cleaned) {
                cleaned.forEach(function (path) {
                    var last = path.pop(),
                        obj = path.reduce(function (obj_, attr) {
                        return obj_ ? obj_[attr] : null;
                    }, data);

                    if (obj && obj[last]) {
                        var replace = {};
                        replace[consts.name] = obj[last].name, replace[consts.type] = obj[last].type, replace[consts.meta] = obj[last].meta, replace[consts.inspected] = !1, obj[last] = replace;
                    }
                });
            }

            var consts = __webpack_require__(7);

            module.exports = hydrate;
        }, function (module, exports) {
            "use strict";

            function getPropType(data) {
                if (!data) return null;
                var type = "undefined" == typeof data ? "undefined" : _typeof(data);

                if ("object" === type) {
                    if (data._reactFragment) return "react_fragment";
                    if (Array.isArray(data)) return "array";
                    if (ArrayBuffer.isView(data)) return data instanceof DataView ? "data_view" : "typed_array";
                    if (data instanceof ArrayBuffer) return "array_buffer";
                    if ("function" == typeof data[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]) return "iterator";
                    if ("[object Date]" === Object.prototype.toString.call(data)) return "date";
                }

                return type;
            }

            function createDehydrated(type, data, cleaned, path) {
                var meta = {};
                return "array" !== type && "typed_array" !== type || (meta.length = data.length), "iterator" !== type && "typed_array" !== type || (meta.readOnly = !0), cleaned.push(path), {
                    type: type,
                    meta: meta,
                    name: data.constructor && "Object" !== data.constructor.name ? data.constructor.name : ""
                };
            }

            function dehydrate(data, cleaned) {
                var path = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : [],
                    level = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0,
                    type = getPropType(data);

                switch (type) {
                    case "function":
                        return cleaned.push(path), {
                            name: data.name,
                            type: "function"
                        };

                    case "string":
                        return data.length <= 500 ? data : data.slice(0, 500) + "...";

                    case "symbol":
                        return cleaned.push(path), {
                            type: "symbol",
                            name: data.toString()
                        };

                    case "react_fragment":
                        return "A React Fragment";

                    case "array_buffer":
                    case "data_view":
                        return cleaned.push(path), {
                            type: type,
                            name: "data_view" === type ? "DataView" : "ArrayBuffer",
                            meta: {
                                length: data.byteLength,
                                uninspectable: !0
                            }
                        };

                    case "array":
                        return level > 2 ? createDehydrated(type, data, cleaned, path) : data.map(function (item, i) {
                            return dehydrate(item, cleaned, path.concat([i]), level + 1);
                        });

                    case "typed_array":
                    case "iterator":
                        return createDehydrated(type, data, cleaned, path);

                    case "date":
                        return cleaned.push(path), {
                            name: data.toString(),
                            type: "date",
                            meta: {
                                uninspectable: !0
                            }
                        };

                    case "object":
                        if (level > 2 || data.constructor && "function" == typeof data.constructor && "Object" !== data.constructor.name) return createDehydrated(type, data, cleaned, path);
                        var res = {};

                        for (var name in data) {
                            res[name] = dehydrate(data[name], cleaned, path.concat([name]), level + 1);
                        }

                        return res;

                    default:
                        return data;
                }
            }

            var _typeof = "function" == typeof Symbol && "symbol" == typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj;
            };

            module.exports = dehydrate;
        }, function (module, exports, __webpack_require__) {
            "use strict";

            var performanceNow,
                performance = __webpack_require__(29);

            performanceNow = performance.now ? function () {
                return performance.now();
            } : function () {
                return Date.now();
            }, module.exports = performanceNow;
        }, function (module, exports, __webpack_require__) {
            "use strict";

            var performance,
                ExecutionEnvironment = __webpack_require__(30);

            ExecutionEnvironment.canUseDOM && (performance = window.performance || window.msPerformance || window.webkitPerformance), module.exports = performance || {};
        }, function (module, exports) {
            "use strict";

            var canUseDOM = !("undefined" == typeof window || !window.document || !window.document.createElement),
                ExecutionEnvironment = {
                canUseDOM: canUseDOM,
                canUseWorkers: "undefined" != typeof Worker,
                canUseEventListeners: canUseDOM && !(!window.addEventListener && !window.attachEvent),
                canUseViewport: canUseDOM && !!window.screen,
                isInWorker: !canUseDOM
            };
            module.exports = ExecutionEnvironment;
        }, function (module, exports) {
            "use strict";

            function installGlobalHook(window) {
                function detectReactBuildType(renderer) {
                    try {
                        if ("string" == typeof renderer.version) return renderer.bundleType > 0 ? "development" : "production";
                        var toString = Function.prototype.toString;

                        if (renderer.Mount && renderer.Mount._renderNewRootComponent) {
                            var renderRootCode = toString.call(renderer.Mount._renderNewRootComponent);
                            return 0 !== renderRootCode.indexOf("function") ? "production" : renderRootCode.indexOf("storedMeasure") !== -1 ? "development" : renderRootCode.indexOf("should be a pure function") !== -1 ? renderRootCode.indexOf("NODE_ENV") !== -1 ? "development" : renderRootCode.indexOf("development") !== -1 ? "development" : renderRootCode.indexOf("true") !== -1 ? "development" : renderRootCode.indexOf("nextElement") !== -1 || renderRootCode.indexOf("nextComponent") !== -1 ? "unminified" : "development" : renderRootCode.indexOf("nextElement") !== -1 || renderRootCode.indexOf("nextComponent") !== -1 ? "unminified" : renderRootCode.indexOf("._registerComponent") !== -1 ? "outdated" : "production";
                        }
                    } catch (err) {}

                    return "production";
                }

                if (!window.__REACT_DEVTOOLS_GLOBAL_HOOK__) {
                    var hasDetectedBadDCE = !1,
                        hook = {
                        _renderers: {},
                        helpers: {},
                        checkDCE: function checkDCE(fn) {
                            try {
                                var toString = Function.prototype.toString,
                                    code = toString.call(fn);
                                code.indexOf("^_^") > -1 && (hasDetectedBadDCE = !0, setTimeout(function () {
                                    throw new Error("React is running in production mode, but dead code elimination has not been applied. Read how to correctly configure React for production: https://fb.me/react-perf-use-the-production-build");
                                }));
                            } catch (err) {}
                        },
                        inject: function inject(renderer) {
                            var id = Math.random().toString(16).slice(2);
                            hook._renderers[id] = renderer;
                            var reactBuildType = hasDetectedBadDCE ? "deadcode" : detectReactBuildType(renderer);
                            return hook.emit("renderer", {
                                id: id,
                                renderer: renderer,
                                reactBuildType: reactBuildType
                            }), id;
                        },
                        _listeners: {},
                        sub: function sub(evt, fn) {
                            return hook.on(evt, fn), function () {
                                return hook.off(evt, fn);
                            };
                        },
                        on: function on(evt, fn) {
                            hook._listeners[evt] || (hook._listeners[evt] = []), hook._listeners[evt].push(fn);
                        },
                        off: function off(evt, fn) {
                            if (hook._listeners[evt]) {
                                var ix = hook._listeners[evt].indexOf(fn);

                                ix !== -1 && hook._listeners[evt].splice(ix, 1), hook._listeners[evt].length || (hook._listeners[evt] = null);
                            }
                        },
                        emit: function emit(evt, data) {
                            hook._listeners[evt] && hook._listeners[evt].map(function (fn) {
                                return fn(data);
                            });
                        },
                        supportsFiber: !0,
                        _fiberRoots: {},
                        getFiberRoots: function getFiberRoots(rendererID) {
                            var roots = hook._fiberRoots;
                            return roots[rendererID] || (roots[rendererID] = new Set()), roots[rendererID];
                        },
                        onCommitFiberUnmount: function onCommitFiberUnmount(rendererID, fiber) {
                            hook.helpers[rendererID] && hook.helpers[rendererID].handleCommitFiberUnmount(fiber);
                        },
                        onCommitFiberRoot: function onCommitFiberRoot(rendererID, root) {
                            var mountedRoots = hook.getFiberRoots(rendererID),
                                current = root.current,
                                isKnownRoot = mountedRoots.has(root),
                                isUnmounting = null == current.memoizedState || null == current.memoizedState.element;
                            isKnownRoot || isUnmounting ? isKnownRoot && isUnmounting && mountedRoots["delete"](root) : mountedRoots.add(root), hook.helpers[rendererID] && hook.helpers[rendererID].handleCommitFiberRoot(root);
                        }
                    };
                    Object.defineProperty(window, "__REACT_DEVTOOLS_GLOBAL_HOOK__", {
                        value: hook
                    });
                }
            }

            module.exports = installGlobalHook;
        }, function (module, exports) {
            "use strict";

            function installRelayHook(window) {
                function decorate(obj, attr, fn) {
                    var old = obj[attr];

                    obj[attr] = function () {
                        var res = old.apply(this, arguments);
                        return fn.apply(this, arguments), res;
                    };
                }

                function emit(name, data) {
                    _eventQueue.push({
                        name: name,
                        data: data
                    }), _listener && _listener(name, data);
                }

                function setRequestListener(listener) {
                    if (_listener) throw new Error("Relay Devtools: Called only call setRequestListener once.");
                    return _listener = listener, _eventQueue.forEach(function (_ref) {
                        var name = _ref.name,
                            data = _ref.data;
                        listener(name, data);
                    }), function () {
                        _listener = null;
                    };
                }

                function recordRequest(type, start, request, requestNumber) {
                    var id = Math.random().toString(16).substr(2);
                    request.then(function (response) {
                        emit("relay:success", {
                            id: id,
                            end: performanceNow(),
                            response: response.response
                        });
                    }, function (error) {
                        emit("relay:failure", {
                            id: id,
                            end: performanceNow(),
                            error: error
                        });
                    });

                    for (var textChunks = [], text = request.getQueryString(); text.length > 0;) {
                        textChunks.push(text.substr(0, TEXT_CHUNK_LENGTH)), text = text.substr(TEXT_CHUNK_LENGTH);
                    }

                    return {
                        id: id,
                        name: request.getDebugName(),
                        requestNumber: requestNumber,
                        start: start,
                        text: textChunks,
                        type: type,
                        variables: request.getVariables()
                    };
                }

                function instrumentRelayRequests(relayInternals) {
                    var NetworkLayer = relayInternals.NetworkLayer;
                    decorate(NetworkLayer, "sendMutation", function (mutation) {
                        requestNumber++, emit("relay:pending", [recordRequest("mutation", performanceNow(), mutation, requestNumber)]);
                    }), decorate(NetworkLayer, "sendQueries", function (queries) {
                        requestNumber++;
                        var start = performanceNow();
                        emit("relay:pending", queries.map(function (query) {
                            return recordRequest("query", start, query, requestNumber);
                        }));
                    });
                    var instrumented = {};

                    for (var key in relayInternals) {
                        relayInternals.hasOwnProperty(key) && (instrumented[key] = relayInternals[key]);
                    }

                    return instrumented.setRequestListener = setRequestListener, instrumented;
                }

                var performanceNow,
                    performance = window.performance;
                performanceNow = performance && "function" == typeof performance.now ? function () {
                    return performance.now();
                } : function () {
                    return Date.now();
                };
                var TEXT_CHUNK_LENGTH = 500,
                    hook = window.__REACT_DEVTOOLS_GLOBAL_HOOK__;

                if (hook) {
                    var _eventQueue = [],
                        _listener = null,
                        requestNumber = 0,
                        _relayInternals = null;
                    Object.defineProperty(hook, "_relayInternals", {
                        configurable: !0,
                        set: function set(relayInternals) {
                            _relayInternals = instrumentRelayRequests(relayInternals);
                        },
                        get: function get() {
                            return _relayInternals;
                        }
                    });
                }
            }

            module.exports = installRelayHook;
        }, function (module, exports, __webpack_require__) {
            "use strict";

            var setupBackend = __webpack_require__(34);

            module.exports = function (hook, agent) {
                var subs = [hook.sub("renderer-attached", function (_ref) {
                    var id = _ref.id,
                        helpers = (_ref.renderer, _ref.helpers);
                    agent.setReactInternals(id, helpers), helpers.walkTree(agent.onMounted.bind(agent, id), agent.addRoot.bind(agent, id));
                }), hook.sub("root", function (_ref2) {
                    var renderer = _ref2.renderer,
                        internalInstance = _ref2.internalInstance;
                    return agent.addRoot(renderer, internalInstance);
                }), hook.sub("mount", function (_ref3) {
                    var renderer = _ref3.renderer,
                        internalInstance = _ref3.internalInstance,
                        data = _ref3.data;
                    return agent.onMounted(renderer, internalInstance, data);
                }), hook.sub("update", function (_ref4) {
                    var internalInstance = (_ref4.renderer, _ref4.internalInstance),
                        data = _ref4.data;
                    return agent.onUpdated(internalInstance, data);
                }), hook.sub("unmount", function (_ref5) {
                    var internalInstance = (_ref5.renderer, _ref5.internalInstance);
                    return agent.onUnmounted(internalInstance);
                })],
                    success = setupBackend(hook);
                success && (hook.emit("react-devtools", agent), hook.reactDevtoolsAgent = agent, agent.on("shutdown", function () {
                    subs.forEach(function (fn) {
                        return fn();
                    }), hook.reactDevtoolsAgent = null;
                }));
            };
        }, function (module, exports, __webpack_require__) {
            "use strict";

            var attachRenderer = __webpack_require__(35);

            module.exports = function (hook) {
                var oldReact = window.React && window.React.__internals;
                oldReact && 0 === Object.keys(hook._renderers).length && hook.inject(oldReact);

                for (var rid in hook._renderers) {
                    hook.helpers[rid] = attachRenderer(hook, rid, hook._renderers[rid]), hook.emit("renderer-attached", {
                        id: rid,
                        renderer: hook._renderers[rid],
                        helpers: hook.helpers[rid]
                    });
                }

                hook.on("renderer", function (_ref) {
                    var id = _ref.id,
                        renderer = _ref.renderer;
                    hook.helpers[id] = attachRenderer(hook, id, renderer), hook.emit("renderer-attached", {
                        id: id,
                        renderer: renderer,
                        helpers: hook.helpers[id]
                    });
                });

                var shutdown = function shutdown() {
                    for (var id in hook.helpers) {
                        hook.helpers[id].cleanup();
                    }

                    hook.off("shutdown", shutdown);
                };

                return hook.on("shutdown", shutdown), !0;
            };
        }, function (module, exports, __webpack_require__) {
            "use strict";

            function attachRenderer(hook, rid, renderer) {
                var rootNodeIDMap = new Map(),
                    extras = {},
                    isPre013 = !renderer.Reconciler;
                if ("function" == typeof renderer.findFiberByHostInstance) return attachRendererFiber(hook, rid, renderer);
                renderer.Mount.findNodeHandle && renderer.Mount.nativeTagToRootNodeID ? (extras.getNativeFromReactElement = function (component) {
                    return renderer.Mount.findNodeHandle(component);
                }, extras.getReactElementFromNative = function (nativeTag) {
                    var id = renderer.Mount.nativeTagToRootNodeID(nativeTag);
                    return rootNodeIDMap.get(id);
                }) : renderer.ComponentTree ? (extras.getNativeFromReactElement = function (component) {
                    return renderer.ComponentTree.getNodeFromInstance(component);
                }, extras.getReactElementFromNative = function (node) {
                    return renderer.ComponentTree.getClosestInstanceFromNode(node);
                }) : renderer.Mount.getID && renderer.Mount.getNode ? (extras.getNativeFromReactElement = function (component) {
                    try {
                        return renderer.Mount.getNode(component._rootNodeID);
                    } catch (e) {
                        return;
                    }
                }, extras.getReactElementFromNative = function (node) {
                    for (var id = renderer.Mount.getID(node); node && node.parentNode && !id;) {
                        node = node.parentNode, id = renderer.Mount.getID(node);
                    }

                    return rootNodeIDMap.get(id);
                }) : console.warn("Unknown react version (does not have getID), probably an unshimmed React Native");
                var oldMethods, oldRenderComponent, oldRenderRoot;
                return renderer.Mount._renderNewRootComponent ? oldRenderRoot = decorateResult(renderer.Mount, "_renderNewRootComponent", function (internalInstance) {
                    hook.emit("root", {
                        renderer: rid,
                        internalInstance: internalInstance
                    });
                }) : renderer.Mount.renderComponent && (oldRenderComponent = decorateResult(renderer.Mount, "renderComponent", function (internalInstance) {
                    hook.emit("root", {
                        renderer: rid,
                        internalInstance: internalInstance._reactInternalInstance
                    });
                })), renderer.Component ? (console.error("You are using a version of React with limited support in this version of the devtools.\nPlease upgrade to use at least 0.13, or you can downgrade to use the old version of the devtools:\ninstructions here https://github.com/facebook/react-devtools/tree/devtools-next#how-do-i-use-this-for-react--013"), oldMethods = decorateMany(renderer.Component.Mixin, {
                    mountComponent: function mountComponent() {
                        var _this = this;

                        rootNodeIDMap.set(this._rootNodeID, this), setTimeout(function () {
                            hook.emit("mount", {
                                internalInstance: _this,
                                data: getData012(_this),
                                renderer: rid
                            });
                        }, 0);
                    },
                    updateComponent: function updateComponent() {
                        var _this2 = this;

                        setTimeout(function () {
                            hook.emit("update", {
                                internalInstance: _this2,
                                data: getData012(_this2),
                                renderer: rid
                            });
                        }, 0);
                    },
                    unmountComponent: function unmountComponent() {
                        hook.emit("unmount", {
                            internalInstance: this,
                            renderer: rid
                        }), rootNodeIDMap["delete"](this._rootNodeID, this);
                    }
                })) : renderer.Reconciler && (oldMethods = decorateMany(renderer.Reconciler, {
                    mountComponent: function mountComponent(internalInstance, rootID, transaction, context) {
                        var data = getData(internalInstance);
                        rootNodeIDMap.set(internalInstance._rootNodeID, internalInstance), hook.emit("mount", {
                            internalInstance: internalInstance,
                            data: data,
                            renderer: rid
                        });
                    },
                    performUpdateIfNecessary: function performUpdateIfNecessary(internalInstance, nextChild, transaction, context) {
                        hook.emit("update", {
                            internalInstance: internalInstance,
                            data: getData(internalInstance),
                            renderer: rid
                        });
                    },
                    receiveComponent: function receiveComponent(internalInstance, nextChild, transaction, context) {
                        hook.emit("update", {
                            internalInstance: internalInstance,
                            data: getData(internalInstance),
                            renderer: rid
                        });
                    },
                    unmountComponent: function unmountComponent(internalInstance) {
                        hook.emit("unmount", {
                            internalInstance: internalInstance,
                            renderer: rid
                        }), rootNodeIDMap["delete"](internalInstance._rootNodeID, internalInstance);
                    }
                })), extras.walkTree = function (visit, visitRoot) {
                    var onMount = function onMount(component, data) {
                        rootNodeIDMap.set(component._rootNodeID, component), visit(component, data);
                    };

                    walkRoots(renderer.Mount._instancesByReactRootID || renderer.Mount._instancesByContainerID, onMount, visitRoot, isPre013);
                }, extras.cleanup = function () {
                    oldMethods && (renderer.Component ? restoreMany(renderer.Component.Mixin, oldMethods) : restoreMany(renderer.Reconciler, oldMethods)), oldRenderRoot && (renderer.Mount._renderNewRootComponent = oldRenderRoot), oldRenderComponent && (renderer.Mount.renderComponent = oldRenderComponent), oldMethods = null, oldRenderRoot = null, oldRenderComponent = null;
                }, extras;
            }

            function walkRoots(roots, onMount, onRoot, isPre013) {
                for (var name in roots) {
                    walkNode(roots[name], onMount, isPre013), onRoot(roots[name]);
                }
            }

            function walkNode(internalInstance, onMount, isPre013) {
                var data = isPre013 ? getData012(internalInstance) : getData(internalInstance);
                data.children && Array.isArray(data.children) && data.children.forEach(function (child) {
                    return walkNode(child, onMount, isPre013);
                }), onMount(internalInstance, data);
            }

            function decorateResult(obj, attr, fn) {
                var old = obj[attr];
                return obj[attr] = function (instance) {
                    var res = old.apply(this, arguments);
                    return fn(res), res;
                }, old;
            }

            function decorate(obj, attr, fn) {
                var old = obj[attr];
                return obj[attr] = function (instance) {
                    var res = old.apply(this, arguments);
                    return fn.apply(this, arguments), res;
                }, old;
            }

            function decorateMany(source, fns) {
                var olds = {};

                for (var name in fns) {
                    olds[name] = decorate(source, name, fns[name]);
                }

                return olds;
            }

            function restoreMany(source, olds) {
                for (var name in olds) {
                    source[name] = olds[name];
                }
            }

            var getData = __webpack_require__(36),
                getData012 = __webpack_require__(41),
                attachRendererFiber = __webpack_require__(42);

            module.exports = attachRenderer;
        }, function (module, exports, __webpack_require__) {
            "use strict";

            function getData(internalInstance) {
                var children = null,
                    props = null,
                    state = null,
                    context = null,
                    updater = null,
                    name = null,
                    type = null,
                    key = null,
                    ref = null,
                    source = null,
                    text = null,
                    publicInstance = null,
                    nodeType = "Native";
                if ("object" !== ("undefined" == typeof internalInstance ? "undefined" : _typeof(internalInstance))) nodeType = "Text", text = internalInstance + "";else if (null === internalInstance._currentElement || internalInstance._currentElement === !1) nodeType = "Empty";else if (internalInstance._renderedComponent) nodeType = "NativeWrapper", children = [internalInstance._renderedComponent], props = internalInstance._instance.props, state = internalInstance._instance.state, context = internalInstance._instance.context, context && 0 === Object.keys(context).length && (context = null);else if (internalInstance._renderedChildren) children = childrenList(internalInstance._renderedChildren);else if (internalInstance._currentElement && internalInstance._currentElement.props) {
                    var unfilteredChildren = internalInstance._currentElement.props.children,
                        filteredChildren = [];
                    traverseAllChildrenImpl(unfilteredChildren, "", function (_traverseContext, child) {
                        var childType = "undefined" == typeof child ? "undefined" : _typeof(child);
                        "string" !== childType && "number" !== childType || filteredChildren.push(child);
                    }), children = filteredChildren.length <= 1 ? filteredChildren.length ? String(filteredChildren[0]) : void 0 : filteredChildren;
                }

                if (!props && internalInstance._currentElement && internalInstance._currentElement.props && (props = internalInstance._currentElement.props), null != internalInstance._currentElement && (type = internalInstance._currentElement.type, internalInstance._currentElement.key && (key = String(internalInstance._currentElement.key)), source = internalInstance._currentElement._source, ref = internalInstance._currentElement.ref, "string" == typeof type ? (name = type, null != internalInstance._nativeNode && (publicInstance = internalInstance._nativeNode), null != internalInstance._hostNode && (publicInstance = internalInstance._hostNode)) : "function" == typeof type ? (nodeType = "Composite", name = getDisplayName(type), internalInstance._renderedComponent && (internalInstance._currentElement.props === internalInstance._renderedComponent._currentElement || internalInstance._currentElement.type.isReactTopLevelWrapper) && (nodeType = "Wrapper"), null === name && (name = "No display name")) : "string" == typeof internalInstance._stringText ? (nodeType = "Text", text = internalInstance._stringText) : name = getDisplayName(type)), internalInstance._instance) {
                    var inst = internalInstance._instance,
                        forceUpdate = inst.forceUpdate || inst.updater && inst.updater.enqueueForceUpdate && function (cb) {
                        inst.updater.enqueueForceUpdate(this, cb, "forceUpdate");
                    };

                    updater = {
                        setState: inst.setState && inst.setState.bind(inst),
                        forceUpdate: forceUpdate && forceUpdate.bind(inst),
                        setInProps: forceUpdate && setInProps.bind(null, internalInstance, forceUpdate),
                        setInState: inst.forceUpdate && setInState.bind(null, inst),
                        setInContext: forceUpdate && setInContext.bind(null, inst, forceUpdate)
                    }, "function" == typeof type && (publicInstance = inst), inst._renderedChildren && (children = childrenList(inst._renderedChildren));
                }

                return "function" == typeof internalInstance.setNativeProps && (updater = {
                    setNativeProps: function setNativeProps(nativeProps) {
                        internalInstance.setNativeProps(nativeProps);
                    }
                }), {
                    nodeType: nodeType,
                    type: type,
                    key: key,
                    ref: ref,
                    source: source,
                    name: name,
                    props: props,
                    state: state,
                    context: context,
                    children: children,
                    text: text,
                    updater: updater,
                    publicInstance: publicInstance
                };
            }

            function setInProps(internalInst, forceUpdate, path, value) {
                var element = internalInst._currentElement;
                internalInst._currentElement = _extends({}, element, {
                    props: copyWithSet(element.props, path, value)
                }), forceUpdate.call(internalInst._instance);
            }

            function setInState(inst, path, value) {
                setIn(inst.state, path, value), inst.forceUpdate();
            }

            function setInContext(inst, forceUpdate, path, value) {
                setIn(inst.context, path, value), forceUpdate.call(inst);
            }

            function setIn(obj, path, value) {
                var last = path.pop(),
                    parent = path.reduce(function (obj_, attr) {
                    return obj_ ? obj_[attr] : null;
                }, obj);
                parent && (parent[last] = value);
            }

            function childrenList(children) {
                var res = [];

                for (var name in children) {
                    res.push(children[name]);
                }

                return res;
            }

            var _extends = Object.assign || function (target) {
                for (var i = 1; i < arguments.length; i++) {
                    var source = arguments[i];

                    for (var key in source) {
                        Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
                    }
                }

                return target;
            },
                _typeof = "function" == typeof Symbol && "symbol" == typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj;
            },
                copyWithSet = __webpack_require__(37),
                getDisplayName = __webpack_require__(38),
                traverseAllChildrenImpl = __webpack_require__(39);

            module.exports = getData;
        }, function (module, exports) {
            "use strict";

            function copyWithSetImpl(obj, path, idx, value) {
                if (idx >= path.length) return value;
                var key = path[idx],
                    updated = Array.isArray(obj) ? obj.slice() : _extends({}, obj);
                return updated[key] = copyWithSetImpl(obj[key], path, idx + 1, value), updated;
            }

            function copyWithSet(obj, path, value) {
                return copyWithSetImpl(obj, path, 0, value);
            }

            var _extends = Object.assign || function (target) {
                for (var i = 1; i < arguments.length; i++) {
                    var source = arguments[i];

                    for (var key in source) {
                        Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
                    }
                }

                return target;
            };

            module.exports = copyWithSet;
        }, function (module, exports) {
            "use strict";

            function getDisplayName(type) {
                if (cachedDisplayNames.has(type)) return cachedDisplayNames.get(type);
                var displayName = void 0;
                "string" == typeof type.displayName && (displayName = type.displayName), displayName || (displayName = type.name || "Unknown");
                var match = displayName.match(FB_MODULE_RE);

                if (match) {
                    var componentName = match[1],
                        moduleName = match[2];
                    componentName && moduleName && (moduleName === componentName || moduleName.startsWith(componentName + ".")) && (displayName = componentName);
                }

                return cachedDisplayNames.set(type, displayName), displayName;
            }

            var FB_MODULE_RE = /^(.*) \[from (.*)\]$/,
                cachedDisplayNames = new WeakMap();
            module.exports = getDisplayName;
        }, function (module, exports, __webpack_require__) {
            "use strict";

            function escape(key) {
                var escapeRegex = /[=:]/g,
                    escaperLookup = {
                    "=": "=0",
                    ":": "=2"
                },
                    escapedString = ("" + key).replace(escapeRegex, function (match) {
                    return escaperLookup[match];
                });
                return "$" + escapedString;
            }

            function getComponentKey(component, index) {
                return "object" === ("undefined" == typeof component ? "undefined" : _typeof(component)) && null !== component && null != component.key ? escape(component.key) : index.toString(36);
            }

            function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
                var type = "undefined" == typeof children ? "undefined" : _typeof(children);
                if ("undefined" !== type && "boolean" !== type || (children = null), null === children || "string" === type || "number" === type || "object" === type && children.$$typeof === REACT_ELEMENT_TYPE) return callback(traverseContext, children, "" === nameSoFar ? SEPARATOR + getComponentKey(children, 0) : nameSoFar), 1;
                var child,
                    nextName,
                    subtreeCount = 0,
                    nextNamePrefix = "" === nameSoFar ? SEPARATOR : nameSoFar + SUBSEPARATOR;
                if (Array.isArray(children)) for (var i = 0; i < children.length; i++) {
                    child = children[i], nextName = nextNamePrefix + getComponentKey(child, i), subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
                } else {
                    var iteratorFn = ITERATOR_SYMBOL && children[ITERATOR_SYMBOL] || children[FAUX_ITERATOR_SYMBOL];
                    if ("function" == typeof iteratorFn) for (var step, iterator = iteratorFn.call(children), ii = 0; !(step = iterator.next()).done;) {
                        child = step.value, nextName = nextNamePrefix + getComponentKey(child, ii++), subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
                    } else if ("object" === type) {
                        var addendum = " If you meant to render a collection of children, use an array instead.",
                            childrenString = "" + children;
                        invariant(!1, "The React Devtools cannot render an object as a child. (found: %s).%s", "[object Object]" === childrenString ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString, addendum);
                    }
                }
                return subtreeCount;
            }

            var _typeof = "function" == typeof Symbol && "symbol" == typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj;
            },
                invariant = __webpack_require__(40),
                SEPARATOR = ".",
                SUBSEPARATOR = ":",
                FAUX_ITERATOR_SYMBOL = "@@iterator",
                ITERATOR_SYMBOL = "function" == typeof Symbol && (typeof Symbol === "function" ? Symbol.iterator : "@@iterator"),
                REACT_ELEMENT_TYPE = "function" == typeof Symbol && Symbol["for"] && Symbol["for"]("react.element") || 60103;

            module.exports = traverseAllChildrenImpl;
        }, function (module, exports, __webpack_require__) {
            "use strict";

            function invariant(condition, format, a, b, c, d, e, f) {
                if (!condition) {
                    var error;
                    if (void 0 === format) error = new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else {
                        var args = [a, b, c, d, e, f],
                            argIndex = 0;
                        error = new Error(format.replace(/%s/g, function () {
                            return args[argIndex++];
                        })), error.name = "Invariant Violation";
                    }
                    throw error.framesToPop = 1, error;
                }
            }

            module.exports = invariant;
        }, function (module, exports, __webpack_require__) {
            "use strict";

            function getData012(internalInstance) {
                var children = null,
                    props = internalInstance.props,
                    state = internalInstance.state,
                    context = internalInstance.context,
                    updater = null,
                    name = null,
                    type = null,
                    key = null,
                    ref = null,
                    text = null,
                    publicInstance = null,
                    nodeType = "Native";
                return internalInstance._renderedComponent ? (nodeType = "Wrapper", children = [internalInstance._renderedComponent], context && 0 === Object.keys(context).length && (context = null)) : internalInstance._renderedChildren ? (name = internalInstance.constructor.displayName, children = childrenList(internalInstance._renderedChildren)) : "string" == typeof props.children && (name = internalInstance.constructor.displayName, children = props.children, nodeType = "Native"), !props && internalInstance._currentElement && internalInstance._currentElement.props && (props = internalInstance._currentElement.props), internalInstance._currentElement && (type = internalInstance._currentElement.type, internalInstance._currentElement.key && (key = String(internalInstance._currentElement.key)), ref = internalInstance._currentElement.ref, "string" == typeof type ? name = type : (nodeType = "Composite", name = type.displayName, name || (name = "No display name"))), name || (name = internalInstance.constructor.displayName || "No display name", nodeType = "Composite"), "string" == typeof props && (nodeType = "Text", text = props, props = null, name = null), internalInstance.forceUpdate && (updater = {
                    setState: internalInstance.setState.bind(internalInstance),
                    forceUpdate: internalInstance.forceUpdate.bind(internalInstance),
                    setInProps: internalInstance.forceUpdate && setInProps.bind(null, internalInstance),
                    setInState: internalInstance.forceUpdate && setInState.bind(null, internalInstance),
                    setInContext: internalInstance.forceUpdate && setInContext.bind(null, internalInstance)
                }, publicInstance = internalInstance), {
                    nodeType: nodeType,
                    type: type,
                    key: key,
                    ref: ref,
                    source: null,
                    name: name,
                    props: props,
                    state: state,
                    context: context,
                    children: children,
                    text: text,
                    updater: updater,
                    publicInstance: publicInstance
                };
            }

            function setInProps(inst, path, value) {
                inst.props = copyWithSet(inst.props, path, value), inst.forceUpdate();
            }

            function setInState(inst, path, value) {
                setIn(inst.state, path, value), inst.forceUpdate();
            }

            function setInContext(inst, path, value) {
                setIn(inst.context, path, value), inst.forceUpdate();
            }

            function setIn(obj, path, value) {
                var last = path.pop(),
                    parent = path.reduce(function (obj_, attr) {
                    return obj_ ? obj_[attr] : null;
                }, obj);
                parent && (parent[last] = value);
            }

            function childrenList(children) {
                var res = [];

                for (var name in children) {
                    res.push(children[name]);
                }

                return res;
            }

            var copyWithSet = __webpack_require__(37);

            module.exports = getData012;
        }, function (module, exports, __webpack_require__) {
            "use strict";

            function attachRendererFiber(hook, rid, renderer) {
                function getOpaqueNode(fiber) {
                    if (opaqueNodes.has(fiber)) return fiber;
                    var alternate = fiber.alternate;
                    return null != alternate && opaqueNodes.has(alternate) ? alternate : (opaqueNodes.add(fiber), fiber);
                }

                function hasDataChanged(prevFiber, nextFiber) {
                    if (prevFiber.tag === ClassComponent) {
                        if ((nextFiber.effectTag & PerformedWork) !== PerformedWork) return !1;
                        if (prevFiber.stateNode.context !== nextFiber.stateNode.context) return !0;
                        if (null != nextFiber.updateQueue && nextFiber.updateQueue.hasForceUpdate) return !0;
                    }

                    return prevFiber.memoizedProps !== nextFiber.memoizedProps || prevFiber.memoizedState !== nextFiber.memoizedState || prevFiber.ref !== nextFiber.ref || prevFiber._debugSource !== nextFiber._debugSource;
                }

                function flushPendingEvents() {
                    var events = pendingEvents;
                    pendingEvents = [];

                    for (var i = 0; i < events.length; i++) {
                        var event = events[i];
                        hook.emit(event.type, event);
                    }
                }

                function enqueueMount(fiber) {
                    pendingEvents.push({
                        internalInstance: getOpaqueNode(fiber),
                        data: getDataFiber(fiber, getOpaqueNode),
                        renderer: rid,
                        type: "mount"
                    });
                    var isRoot = fiber.tag === HostRoot;
                    isRoot && pendingEvents.push({
                        internalInstance: getOpaqueNode(fiber),
                        renderer: rid,
                        type: "root"
                    });
                }

                function enqueueUpdateIfNecessary(fiber, hasChildOrderChanged) {
                    (hasChildOrderChanged || hasDataChanged(fiber.alternate, fiber)) && pendingEvents.push({
                        internalInstance: getOpaqueNode(fiber),
                        data: getDataFiber(fiber, getOpaqueNode),
                        renderer: rid,
                        type: "update"
                    });
                }

                function enqueueUnmount(fiber) {
                    var isRoot = fiber.tag === HostRoot,
                        opaqueNode = getOpaqueNode(fiber),
                        event = {
                        internalInstance: opaqueNode,
                        renderer: rid,
                        type: "unmount"
                    };
                    isRoot ? pendingEvents.push(event) : pendingEvents.unshift(event), opaqueNodes["delete"](opaqueNode);
                }

                function mountFiber(fiber) {
                    var node = fiber;

                    outer: for (;;) {
                        if (node.child) node.child["return"] = node, node = node.child;else {
                            if (enqueueMount(node), node == fiber) return;

                            if (!node.sibling) {
                                for (; node["return"];) {
                                    if (node = node["return"], enqueueMount(node), node == fiber) return;

                                    if (node.sibling) {
                                        node.sibling["return"] = node["return"], node = node.sibling;
                                        continue outer;
                                    }
                                }

                                return;
                            }

                            node.sibling["return"] = node["return"], node = node.sibling;
                        }
                    }
                }

                function updateFiber(nextFiber, prevFiber) {
                    var hasChildOrderChanged = !1;

                    if (nextFiber.child !== prevFiber.child) {
                        for (var nextChild = nextFiber.child, prevChildAtSameIndex = prevFiber.child; nextChild;) {
                            if (nextChild.alternate) {
                                var prevChild = nextChild.alternate;
                                updateFiber(nextChild, prevChild), hasChildOrderChanged || prevChild === prevChildAtSameIndex || (hasChildOrderChanged = !0);
                            } else mountFiber(nextChild), hasChildOrderChanged || (hasChildOrderChanged = !0);

                            nextChild = nextChild.sibling, hasChildOrderChanged || null == prevChildAtSameIndex || (prevChildAtSameIndex = prevChildAtSameIndex.sibling);
                        }

                        hasChildOrderChanged || null == prevChildAtSameIndex || (hasChildOrderChanged = !0);
                    }

                    enqueueUpdateIfNecessary(nextFiber, hasChildOrderChanged);
                }

                function walkTree() {
                    hook.getFiberRoots(rid).forEach(function (root) {
                        mountFiber(root.current);
                    }), flushPendingEvents();
                }

                function cleanup() {}

                function handleCommitFiberUnmount(fiber) {
                    enqueueUnmount(fiber);
                }

                function handleCommitFiberRoot(root) {
                    var current = root.current,
                        alternate = current.alternate;

                    if (alternate) {
                        var wasMounted = null != alternate.memoizedState && null != alternate.memoizedState.element,
                            isMounted = null != current.memoizedState && null != current.memoizedState.element;
                        !wasMounted && isMounted ? mountFiber(current) : wasMounted && isMounted ? updateFiber(current, alternate) : wasMounted && !isMounted && enqueueUnmount(current);
                    } else mountFiber(current);

                    flushPendingEvents();
                }

                function getNativeFromReactElement(fiber) {
                    try {
                        var opaqueNode = fiber,
                            hostInstance = renderer.findHostInstanceByFiber(opaqueNode);
                        return hostInstance;
                    } catch (err) {
                        return null;
                    }
                }

                function getReactElementFromNative(hostInstance) {
                    var fiber = renderer.findFiberByHostInstance(hostInstance);

                    if (null != fiber) {
                        var opaqueNode = getOpaqueNode(fiber);
                        return opaqueNode;
                    }

                    return null;
                }

                var opaqueNodes = new Set(),
                    pendingEvents = [];
                return {
                    getNativeFromReactElement: getNativeFromReactElement,
                    getReactElementFromNative: getReactElementFromNative,
                    handleCommitFiberRoot: handleCommitFiberRoot,
                    handleCommitFiberUnmount: handleCommitFiberUnmount,
                    cleanup: cleanup,
                    walkTree: walkTree
                };
            }

            var getDataFiber = __webpack_require__(43),
                _require = __webpack_require__(44),
                ClassComponent = _require.ClassComponent,
                HostRoot = _require.HostRoot,
                PerformedWork = 1;

            module.exports = attachRendererFiber;
        }, function (module, exports, __webpack_require__) {
            "use strict";

            function getDataFiber(fiber, getOpaqueNode) {
                var type = fiber.type,
                    key = fiber.key,
                    ref = fiber.ref,
                    source = fiber._debugSource,
                    publicInstance = null,
                    props = null,
                    state = null,
                    children = null,
                    context = null,
                    updater = null,
                    nodeType = null,
                    name = null,
                    text = null;

                switch (fiber.tag) {
                    case FunctionalComponent:
                    case ClassComponent:
                        nodeType = "Composite", name = getDisplayName(fiber.type), publicInstance = fiber.stateNode, props = fiber.memoizedProps, state = fiber.memoizedState, null != publicInstance && (context = publicInstance.context, context && 0 === Object.keys(context).length && (context = null));
                        var inst = publicInstance;
                        inst && (updater = {
                            setState: inst.setState && inst.setState.bind(inst),
                            forceUpdate: inst.forceUpdate && inst.forceUpdate.bind(inst),
                            setInProps: inst.forceUpdate && setInProps.bind(null, fiber),
                            setInState: inst.forceUpdate && setInState.bind(null, inst),
                            setInContext: inst.forceUpdate && setInContext.bind(null, inst)
                        }), children = [];
                        break;

                    case HostRoot:
                        nodeType = "Wrapper", children = [];
                        break;

                    case HostPortal:
                        nodeType = "Portal", name = "ReactPortal", props = {
                            target: fiber.stateNode.containerInfo
                        }, children = [];
                        break;

                    case HostComponent:
                        nodeType = "Native", name = fiber.type, name = name.replace("topsecret-", ""), publicInstance = fiber.stateNode, props = fiber.memoizedProps, children = "string" == typeof props.children || "number" == typeof props.children ? props.children.toString() : [], "function" == typeof fiber.stateNode.setNativeProps && (updater = {
                            setNativeProps: function setNativeProps(nativeProps) {
                                fiber.stateNode.setNativeProps(nativeProps);
                            }
                        });
                        break;

                    case HostText:
                        nodeType = "Text", text = fiber.memoizedProps;
                        break;

                    case Fragment:
                        nodeType = "Wrapper", children = [];
                        break;

                    default:
                        var symbolOrNumber = "object" === ("undefined" == typeof type ? "undefined" : _typeof(type)) && null !== type ? type.$$typeof : type,
                            switchValue = "symbol" === ("undefined" == typeof symbolOrNumber ? "undefined" : _typeof(symbolOrNumber)) ? symbolOrNumber.toString() : symbolOrNumber;

                        switch (switchValue) {
                            case ASYNC_MODE_NUMBER:
                            case ASYNC_MODE_SYMBOL_STRING:
                                nodeType = "Composite", name = "AsyncMode", children = [];
                                break;

                            case CONTEXT_PROVIDER_NUMBER:
                            case CONTEXT_PROVIDER_SYMBOL_STRING:
                                nodeType = "Composite", props = fiber.memoizedProps, name = "Context.Provider", children = [];
                                break;

                            case CONTEXT_CONSUMER_NUMBER:
                            case CONTEXT_CONSUMER_SYMBOL_STRING:
                                nodeType = "Composite", props = fiber.memoizedProps, name = "Context.Consumer", children = [];
                                break;

                            case STRICT_MODE_NUMBER:
                            case STRICT_MODE_SYMBOL_STRING:
                                nodeType = "Composite", name = "StrictMode", children = [];
                                break;

                            default:
                                nodeType = "Native", props = fiber.memoizedProps, name = "TODO_NOT_IMPLEMENTED_YET", children = [];
                        }

                }

                if (Array.isArray(children)) for (var child = fiber.child; child;) {
                    children.push(getOpaqueNode(child)), child = child.sibling;
                }
                return {
                    nodeType: nodeType,
                    type: type,
                    key: key,
                    ref: ref,
                    source: source,
                    name: name,
                    props: props,
                    state: state,
                    context: context,
                    children: children,
                    text: text,
                    updater: updater,
                    publicInstance: publicInstance
                };
            }

            function setInProps(fiber, path, value) {
                var inst = fiber.stateNode;
                fiber.pendingProps = copyWithSet(inst.props, path, value), fiber.alternate && (fiber.alternate.pendingProps = fiber.pendingProps), fiber.stateNode.forceUpdate();
            }

            function setInState(inst, path, value) {
                setIn(inst.state, path, value), inst.forceUpdate();
            }

            function setInContext(inst, path, value) {
                setIn(inst.context, path, value), inst.forceUpdate();
            }

            function setIn(obj, path, value) {
                var last = path.pop(),
                    parent = path.reduce(function (obj_, attr) {
                    return obj_ ? obj_[attr] : null;
                }, obj);
                parent && (parent[last] = value);
            }

            var _typeof = "function" == typeof Symbol && "symbol" == typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj;
            },
                copyWithSet = __webpack_require__(37),
                getDisplayName = __webpack_require__(38),
                _require = __webpack_require__(44),
                FunctionalComponent = _require.FunctionalComponent,
                ClassComponent = _require.ClassComponent,
                HostRoot = _require.HostRoot,
                HostPortal = _require.HostPortal,
                HostComponent = _require.HostComponent,
                HostText = _require.HostText,
                Fragment = _require.Fragment,
                _require2 = __webpack_require__(45),
                ASYNC_MODE_NUMBER = _require2.ASYNC_MODE_NUMBER,
                ASYNC_MODE_SYMBOL_STRING = _require2.ASYNC_MODE_SYMBOL_STRING,
                CONTEXT_CONSUMER_NUMBER = _require2.CONTEXT_CONSUMER_NUMBER,
                CONTEXT_CONSUMER_SYMBOL_STRING = _require2.CONTEXT_CONSUMER_SYMBOL_STRING,
                CONTEXT_PROVIDER_NUMBER = _require2.CONTEXT_PROVIDER_NUMBER,
                CONTEXT_PROVIDER_SYMBOL_STRING = _require2.CONTEXT_PROVIDER_SYMBOL_STRING,
                STRICT_MODE_NUMBER = _require2.STRICT_MODE_NUMBER,
                STRICT_MODE_SYMBOL_STRING = _require2.STRICT_MODE_SYMBOL_STRING;

            module.exports = getDataFiber;
        }, function (module, exports) {
            "use strict";

            module.exports = {
                IndeterminateComponent: 0,
                FunctionalComponent: 1,
                ClassComponent: 2,
                HostRoot: 3,
                HostPortal: 4,
                HostComponent: 5,
                HostText: 6,
                CoroutineComponent: 7,
                CoroutineHandlerPhase: 8,
                YieldComponent: 9,
                Fragment: 10
            };
        }, function (module, exports) {
            "use strict";

            module.exports = {
                ASYNC_MODE_NUMBER: 60111,
                ASYNC_MODE_SYMBOL_STRING: "Symbol(react.async_mode)",
                CONTEXT_CONSUMER_NUMBER: 60110,
                CONTEXT_CONSUMER_SYMBOL_STRING: "Symbol(react.context)",
                CONTEXT_PROVIDER_NUMBER: 60109,
                CONTEXT_PROVIDER_SYMBOL_STRING: "Symbol(react.provider)",
                STRICT_MODE_NUMBER: 60108,
                STRICT_MODE_SYMBOL_STRING: "Symbol(react.strict_mode)"
            };
        }, function (module, exports, __webpack_require__) {
            "use strict";

            function _defineProperty(obj, key, value) {
                return key in obj ? Object.defineProperty(obj, key, {
                    value: value,
                    enumerable: !0,
                    configurable: !0,
                    writable: !0
                }) : obj[key] = value, obj;
            }

            function measureStyle(agent, bridge, resolveRNStyle, id) {
                var node = agent.elementData.get(id);
                if (!node || !node.props) return void bridge.send("rn-style:measure", {});
                var style = resolveRNStyle(node.props.style);
                styleOverridesByHostComponentId[id] && (style = babelHelpers.extends({}, style, styleOverridesByHostComponentId[id]));
                var instance = node.publicInstance;
                return instance && instance.measure ? void instance.measure(function (x, y, width, height, left, top) {
                    if ("number" != typeof x) return void bridge.send("rn-style:measure", {
                        style: style
                    });
                    var margin = style && resolveBoxStyle("margin", style) || blank,
                        padding = style && resolveBoxStyle("padding", style) || blank;
                    bridge.send("rn-style:measure", {
                        style: style,
                        measuredLayout: {
                            x: x,
                            y: y,
                            width: width,
                            height: height,
                            left: left,
                            top: top,
                            margin: margin,
                            padding: padding
                        }
                    });
                }) : void bridge.send("rn-style:measure", {
                    style: style
                });
            }

            function shallowClone(obj) {
                var nobj = {};

                for (var n in obj) {
                    nobj[n] = obj[n];
                }

                return nobj;
            }

            function renameStyle(agent, id, oldName, newName, val) {
                var _ref3,
                    data = agent.elementData.get(id),
                    newStyle = newName ? (_ref3 = {}, _defineProperty(_ref3, oldName, void 0), _defineProperty(_ref3, newName, val), _ref3) : _defineProperty({}, oldName, void 0);

                if (data && data.updater && data.updater.setInProps) {
                    var customStyle,
                        style = data && data.props && data.props.style;

                    if (Array.isArray(style)) {
                        var lastLength = style.length - 1;
                        "object" !== _typeof(style[lastLength]) || Array.isArray(style[lastLength]) ? (style = style.concat([newStyle]), data.updater.setInProps(["style"], style)) : (customStyle = shallowClone(style[lastLength]), delete customStyle[oldName], newName ? customStyle[newName] = val : customStyle[oldName] = void 0, data.updater.setInProps(["style", lastLength], customStyle));
                    } else "object" === ("undefined" == typeof style ? "undefined" : _typeof(style)) ? (customStyle = shallowClone(style), delete customStyle[oldName], newName ? customStyle[newName] = val : customStyle[oldName] = void 0, data.updater.setInProps(["style"], customStyle)) : (style = [style, newStyle], data.updater.setInProps(["style"], style));
                } else {
                    if (!(data && data.updater && data.updater.setNativeProps)) return;
                    styleOverridesByHostComponentId[id] ? babelHelpers.extends(styleOverridesByHostComponentId[id], newStyle) : styleOverridesByHostComponentId[id] = newStyle, data.updater.setNativeProps({
                        style: newStyle
                    });
                }

                agent.emit("hideHighlight");
            }

            function setStyle(agent, id, attr, val) {
                var data = agent.elementData.get(id),
                    newStyle = _defineProperty({}, attr, val);

                if (data && data.updater && data.updater.setInProps) {
                    var style = data.props && data.props.style;

                    if (Array.isArray(style)) {
                        var lastLength = style.length - 1;
                        "object" !== _typeof(style[lastLength]) || Array.isArray(style[lastLength]) ? (style = style.concat([newStyle]), data.updater.setInProps(["style"], style)) : data.updater.setInProps(["style", lastLength, attr], val);
                    } else style = [style, newStyle], data.updater.setInProps(["style"], style);
                } else {
                    if (!(data && data.updater && data.updater.setNativeProps)) return;
                    styleOverridesByHostComponentId[id] ? babelHelpers.extends(styleOverridesByHostComponentId[id], newStyle) : styleOverridesByHostComponentId[id] = newStyle, data.updater.setNativeProps({
                        style: newStyle
                    });
                }

                agent.emit("hideHighlight");
            }

            var _typeof = "function" == typeof Symbol && "symbol" == typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj;
            },
                resolveBoxStyle = __webpack_require__(47),
                styleOverridesByHostComponentId = {};

            module.exports = function (bridge, agent, resolveRNStyle) {
                bridge.onCall("rn-style:get", function (id) {
                    var node = agent.elementData.get(id);
                    return node && node.props ? resolveRNStyle(node.props.style) : null;
                }), bridge.on("rn-style:measure", function (id) {
                    measureStyle(agent, bridge, resolveRNStyle, id);
                }), bridge.on("rn-style:rename", function (_ref) {
                    var id = _ref.id,
                        oldName = _ref.oldName,
                        newName = _ref.newName,
                        val = _ref.val;
                    renameStyle(agent, id, oldName, newName, val), setTimeout(function () {
                        return measureStyle(agent, bridge, resolveRNStyle, id);
                    });
                }), bridge.on("rn-style:set", function (_ref2) {
                    var id = _ref2.id,
                        attr = _ref2.attr,
                        val = _ref2.val;
                    setStyle(agent, id, attr, val), setTimeout(function () {
                        return measureStyle(agent, bridge, resolveRNStyle, id);
                    });
                });
            };

            var blank = {
                top: 0,
                left: 0,
                right: 0,
                bottom: 0
            };
        }, function (module, exports) {
            "use strict";

            function resolveBoxStyle(prefix, style) {
                var res = {},
                    subs = ["top", "left", "bottom", "right"],
                    set = !1;
                return subs.forEach(function (sub) {
                    res[sub] = style[prefix] || 0;
                }), style[prefix] && (set = !0), style[prefix + "Vertical"] && (res.top = res.bottom = style[prefix + "Vertical"], set = !0), style[prefix + "Horizontal"] && (res.left = res.right = style[prefix + "Horizontal"], set = !0), subs.forEach(function (sub) {
                    var val = style[prefix + capFirst(sub)];
                    val && (res[sub] = val, set = !0);
                }), set ? res : null;
            }

            function capFirst(text) {
                return text[0].toUpperCase() + text.slice(1);
            }

            module.exports = resolveBoxStyle;
        }, function (module, exports) {
            "use strict";

            function decorate(obj, attr, fn) {
                var old = obj[attr];
                return obj[attr] = function () {
                    var res = old.apply(this, arguments);
                    return fn.apply(this, arguments), res;
                }, function () {
                    obj[attr] = old;
                };
            }

            var subscriptionEnabled = !1;

            module.exports = function (bridge, agent, hook) {
                function sendStoreData() {
                    subscriptionEnabled && bridge.send("relay:store", {
                        id: "relay:store",
                        nodes: DefaultStoreData.getNodeData()
                    });
                }

                var shouldEnable = !!hook._relayInternals;

                if (bridge.onCall("relay:check", function () {
                    return shouldEnable;
                }), shouldEnable) {
                    var _hook$_relayInternals = hook._relayInternals,
                        DefaultStoreData = _hook$_relayInternals.DefaultStoreData,
                        setRequestListener = _hook$_relayInternals.setRequestListener;
                    bridge.onCall("relay:store:enable", function () {
                        subscriptionEnabled = !0, sendStoreData();
                    }), bridge.onCall("relay:store:disable", function () {
                        subscriptionEnabled = !1;
                    }), sendStoreData(), decorate(DefaultStoreData, "handleUpdatePayload", sendStoreData), decorate(DefaultStoreData, "handleQueryPayload", sendStoreData);
                    var removeListener = setRequestListener(function (event, data) {
                        bridge.send(event, data);
                    });
                    hook.on("shutdown", removeListener);
                }
            };
        }, function (module, exports, __webpack_require__) {
            "use strict";

            var Highlighter = __webpack_require__(50);

            module.exports = function (agent) {
                var hl = new Highlighter(window, function (node) {
                    agent.selectFromDOMNode(node);
                });
                agent.on("highlight", function (data) {
                    return hl.highlight(data.node, data.name);
                }), agent.on("highlightMany", function (nodes) {
                    return hl.highlightMany(nodes);
                }), agent.on("hideHighlight", function () {
                    return hl.hideHighlight();
                }), agent.on("refreshMultiOverlay", function () {
                    return hl.refreshMultiOverlay();
                }), agent.on("startInspecting", function () {
                    return hl.startInspecting();
                }), agent.on("stopInspecting", function () {
                    return hl.stopInspecting();
                }), agent.on("shutdown", function () {
                    hl.remove();
                });
            };
        }, function (module, exports, __webpack_require__) {
            "use strict";

            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
            }

            function captureSubscription(obj, evt, cb) {
                return obj.addEventListener(evt, cb, !0), function () {
                    return obj.removeEventListener(evt, cb, !0);
                };
            }

            function makeMagnifier() {
                var button = window.document.createElement("button");
                return button.innerHTML = "&#128269;", button.style.backgroundColor = "transparent", button.style.border = "none", button.style.outline = "none", button.style.cursor = "pointer", button.style.position = "fixed", button.style.bottom = "10px", button.style.right = "10px", button.style.fontSize = "30px", button.style.zIndex = 1e7, button;
            }

            var _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), Constructor;
                };
            }(),
                Overlay = __webpack_require__(51),
                MultiOverlay = __webpack_require__(53),
                Highlighter = function () {
                function Highlighter(win, onSelect) {
                    _classCallCheck(this, Highlighter), this._win = win, this._onSelect = onSelect, this._overlay = null, this._multiOverlay = null, this._subs = [];
                }

                return _createClass(Highlighter, [{
                    key: "startInspecting",
                    value: function value() {
                        this._inspecting = !0, this._subs = [captureSubscription(this._win, "mouseover", this.onHover.bind(this)), captureSubscription(this._win, "mousedown", this.onMouseDown.bind(this)), captureSubscription(this._win, "click", this.onClick.bind(this))];
                    }
                }, {
                    key: "stopInspecting",
                    value: function value() {
                        this._subs.forEach(function (unsub) {
                            return unsub();
                        }), this.hideHighlight();
                    }
                }, {
                    key: "remove",
                    value: function value() {
                        this.stopInspecting(), this._button && this._button.parentNode && this._button.parentNode.removeChild(this._button);
                    }
                }, {
                    key: "highlight",
                    value: function value(node, name) {
                        this.removeMultiOverlay(), node.nodeType !== Node.COMMENT_NODE && (this._overlay || (this._overlay = new Overlay(this._win)), this._overlay.inspect(node, name));
                    }
                }, {
                    key: "highlightMany",
                    value: function value(nodes) {
                        this.removeOverlay(), this._multiOverlay || (this._multiOverlay = new MultiOverlay(this._win)), this._multiOverlay.highlightMany(nodes);
                    }
                }, {
                    key: "hideHighlight",
                    value: function value() {
                        this._inspecting = !1, this.removeOverlay(), this.removeMultiOverlay();
                    }
                }, {
                    key: "refreshMultiOverlay",
                    value: function value() {
                        this._multiOverlay && this._multiOverlay.refresh();
                    }
                }, {
                    key: "removeOverlay",
                    value: function value() {
                        this._overlay && (this._overlay.remove(), this._overlay = null);
                    }
                }, {
                    key: "removeMultiOverlay",
                    value: function value() {
                        this._multiOverlay && (this._multiOverlay.remove(), this._multiOverlay = null);
                    }
                }, {
                    key: "onMouseDown",
                    value: function value(evt) {
                        this._inspecting && (evt.preventDefault(), evt.stopPropagation(), evt.cancelBubble = !0, this._onSelect(evt.target));
                    }
                }, {
                    key: "onClick",
                    value: function value(evt) {
                        this._inspecting && (this._subs.forEach(function (unsub) {
                            return unsub();
                        }), evt.preventDefault(), evt.stopPropagation(), evt.cancelBubble = !0, this.hideHighlight());
                    }
                }, {
                    key: "onHover",
                    value: function value(evt) {
                        this._inspecting && (evt.preventDefault(), evt.stopPropagation(), evt.cancelBubble = !0, this.highlight(evt.target));
                    }
                }, {
                    key: "injectButton",
                    value: function value() {
                        this._button = makeMagnifier(), this._button.onclick = this.startInspecting.bind(this), this._win.document.body.appendChild(this._button);
                    }
                }]), Highlighter;
            }();

            module.exports = Highlighter;
        }, function (module, exports, __webpack_require__) {
            "use strict";

            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
            }

            function findTipPos(dims, win) {
                var top,
                    tipHeight = 20,
                    margin = 5;
                return top = dims.top + dims.height + tipHeight <= win.innerHeight ? dims.top + dims.height < 0 ? margin : dims.top + dims.height + margin : dims.top - tipHeight <= win.innerHeight ? dims.top - tipHeight - margin < margin ? margin : dims.top - tipHeight - margin : win.innerHeight - tipHeight - margin, top += "px", dims.left < 0 ? {
                    top: top,
                    left: margin
                } : dims.left + 200 > win.innerWidth ? {
                    top: top,
                    right: margin
                } : {
                    top: top,
                    left: dims.left + margin + "px"
                };
            }

            function getElementDimensions(domElement) {
                var calculatedStyle = window.getComputedStyle(domElement);
                return {
                    borderLeft: +calculatedStyle.borderLeftWidth.match(/[0-9]*/)[0],
                    borderRight: +calculatedStyle.borderRightWidth.match(/[0-9]*/)[0],
                    borderTop: +calculatedStyle.borderTopWidth.match(/[0-9]*/)[0],
                    borderBottom: +calculatedStyle.borderBottomWidth.match(/[0-9]*/)[0],
                    marginLeft: +calculatedStyle.marginLeft.match(/[0-9]*/)[0],
                    marginRight: +calculatedStyle.marginRight.match(/[0-9]*/)[0],
                    marginTop: +calculatedStyle.marginTop.match(/[0-9]*/)[0],
                    marginBottom: +calculatedStyle.marginBottom.match(/[0-9]*/)[0],
                    paddingLeft: +calculatedStyle.paddingLeft.match(/[0-9]*/)[0],
                    paddingRight: +calculatedStyle.paddingRight.match(/[0-9]*/)[0],
                    paddingTop: +calculatedStyle.paddingTop.match(/[0-9]*/)[0],
                    paddingBottom: +calculatedStyle.paddingBottom.match(/[0-9]*/)[0]
                };
            }

            function getOwnerWindow(node) {
                return node.ownerDocument ? node.ownerDocument.defaultView : null;
            }

            function getOwnerIframe(node) {
                var nodeWindow = getOwnerWindow(node);
                return nodeWindow ? nodeWindow.frameElement : null;
            }

            function getBoundingClientRectWithBorderOffset(node) {
                var dimensions = getElementDimensions(node);
                return mergeRectOffsets([node.getBoundingClientRect(), {
                    top: dimensions.borderTop,
                    left: dimensions.borderLeft,
                    bottom: dimensions.borderBottom,
                    right: dimensions.borderRight,
                    width: 0,
                    height: 0
                }]);
            }

            function mergeRectOffsets(rects) {
                return rects.reduce(function (previousRect, rect) {
                    return null == previousRect ? rect : {
                        top: previousRect.top + rect.top,
                        left: previousRect.left + rect.left,
                        width: previousRect.width,
                        height: previousRect.height,
                        bottom: previousRect.bottom + rect.bottom,
                        right: previousRect.right + rect.right
                    };
                });
            }

            function getNestedBoundingClientRect(node, boundaryWindow) {
                var ownerIframe = getOwnerIframe(node);

                if (ownerIframe && ownerIframe !== boundaryWindow) {
                    for (var rects = [node.getBoundingClientRect()], currentIframe = ownerIframe, onlyOneMore = !1; currentIframe;) {
                        var rect = getBoundingClientRectWithBorderOffset(currentIframe);
                        if (rects.push(rect), currentIframe = getOwnerIframe(currentIframe), onlyOneMore) break;
                        currentIframe && getOwnerWindow(currentIframe) === boundaryWindow && (onlyOneMore = !0);
                    }

                    return mergeRectOffsets(rects);
                }

                return node.getBoundingClientRect();
            }

            function boxWrap(dims, what, node) {
                assign(node.style, {
                    borderTopWidth: dims[what + "Top"] + "px",
                    borderLeftWidth: dims[what + "Left"] + "px",
                    borderRightWidth: dims[what + "Right"] + "px",
                    borderBottomWidth: dims[what + "Bottom"] + "px",
                    borderStyle: "solid"
                });
            }

            var _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), Constructor;
                };
            }(),
                assign = __webpack_require__(3),
                _require = __webpack_require__(52),
                monospace = _require.monospace,
                Overlay = function () {
                function Overlay(window) {
                    _classCallCheck(this, Overlay);

                    var doc = window.document;
                    this.win = window, this.container = doc.createElement("div"), this.node = doc.createElement("div"), this.border = doc.createElement("div"), this.padding = doc.createElement("div"), this.content = doc.createElement("div"), this.border.style.borderColor = overlayStyles.border, this.padding.style.borderColor = overlayStyles.padding, this.content.style.backgroundColor = overlayStyles.background, assign(this.node.style, {
                        borderColor: overlayStyles.margin,
                        pointerEvents: "none",
                        position: "fixed"
                    }), this.tip = doc.createElement("div"), assign(this.tip.style, {
                        backgroundColor: "#333740",
                        borderRadius: "2px",
                        fontFamily: monospace.family,
                        fontWeight: "bold",
                        padding: "3px 5px",
                        position: "fixed",
                        fontSize: monospace.sizes.normal
                    }), this.nameSpan = doc.createElement("span"), this.tip.appendChild(this.nameSpan), assign(this.nameSpan.style, {
                        color: "#ee78e6",
                        borderRight: "1px solid #aaaaaa",
                        paddingRight: "0.5rem",
                        marginRight: "0.5rem"
                    }), this.dimSpan = doc.createElement("span"), this.tip.appendChild(this.dimSpan), assign(this.dimSpan.style, {
                        color: "#d7d7d7"
                    }), this.container.style.zIndex = 1e7, this.node.style.zIndex = 1e7, this.tip.style.zIndex = 1e7, this.container.appendChild(this.node), this.container.appendChild(this.tip), this.node.appendChild(this.border), this.border.appendChild(this.padding), this.padding.appendChild(this.content), doc.body.appendChild(this.container);
                }

                return _createClass(Overlay, [{
                    key: "remove",
                    value: function value() {
                        this.container.parentNode && this.container.parentNode.removeChild(this.container);
                    }
                }, {
                    key: "inspect",
                    value: function value(node, name) {
                        if (node.nodeType === Node.ELEMENT_NODE) {
                            var box = getNestedBoundingClientRect(node, this.win),
                                dims = getElementDimensions(node);
                            boxWrap(dims, "margin", this.node), boxWrap(dims, "border", this.border), boxWrap(dims, "padding", this.padding), assign(this.content.style, {
                                height: box.height - dims.borderTop - dims.borderBottom - dims.paddingTop - dims.paddingBottom + "px",
                                width: box.width - dims.borderLeft - dims.borderRight - dims.paddingLeft - dims.paddingRight + "px"
                            }), assign(this.node.style, {
                                top: box.top - dims.marginTop + "px",
                                left: box.left - dims.marginLeft + "px"
                            }), this.nameSpan.textContent = name || node.nodeName.toLowerCase(), this.dimSpan.textContent = box.width + "px × " + box.height + "px";
                            var tipPos = findTipPos({
                                top: box.top - dims.marginTop,
                                left: box.left - dims.marginLeft,
                                height: box.height + dims.marginTop + dims.marginBottom,
                                width: box.width + dims.marginLeft + dims.marginRight
                            }, this.win);
                            assign(this.tip.style, tipPos);
                        }
                    }
                }]), Overlay;
            }(),
                overlayStyles = {
                background: "rgba(120, 170, 210, 0.7)",
                padding: "rgba(77, 200, 0, 0.3)",
                margin: "rgba(255, 155, 0, 0.3)",
                border: "rgba(255, 200, 50, 0.3)"
            };

            module.exports = Overlay;
        }, function (module, exports) {
            "use strict";

            module.exports = {
                monospace: {
                    family: "Menlo, Consolas, monospace",
                    sizes: {
                        normal: 11,
                        large: 14
                    }
                },
                sansSerif: {
                    family: '"Helvetica Neue", "Lucida Grande", -apple-system, BlinkMacSystemFont, "Segoe UI", Ubuntu, sans-serif',
                    sizes: {
                        small: 10,
                        normal: 12,
                        large: 14
                    }
                }
            };
        }, function (module, exports, __webpack_require__) {
            "use strict";

            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
            }

            var _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), Constructor;
                };
            }(),
                assign = __webpack_require__(3),
                MultiOverlay = function () {
                function MultiOverlay(window) {
                    _classCallCheck(this, MultiOverlay), this.win = window;
                    var doc = window.document;
                    this.container = doc.createElement("div"), doc.body.appendChild(this.container), this._currentNodes = null;
                }

                return _createClass(MultiOverlay, [{
                    key: "highlightMany",
                    value: function value(nodes) {
                        var _this = this;

                        this._currentNodes = nodes, this.container.innerHTML = "", nodes.forEach(function (node) {
                            var div = _this.win.document.createElement("div");

                            if ("function" == typeof node.getBoundingClientRect) {
                                var box = node.getBoundingClientRect();
                                box.bottom < 0 || box.top > window.innerHeight || (assign(div.style, {
                                    top: box.top + "px",
                                    left: box.left + "px",
                                    width: box.width + "px",
                                    height: box.height + "px",
                                    border: "2px dotted rgba(200, 100, 100, .8)",
                                    boxSizing: "border-box",
                                    backgroundColor: "rgba(200, 100, 100, .2)",
                                    position: "fixed",
                                    zIndex: 1e7,
                                    pointerEvents: "none"
                                }), _this.container.appendChild(div));
                            }
                        });
                    }
                }, {
                    key: "refresh",
                    value: function value() {
                        this._currentNodes && this.highlightMany(this._currentNodes);
                    }
                }, {
                    key: "remove",
                    value: function value() {
                        this.container.parentNode && (this.container.parentNode.removeChild(this.container), this._currentNodes = null);
                    }
                }]), MultiOverlay;
            }();

            module.exports = MultiOverlay;
        }]);
    });
},104,[],"node_modules/react-devtools-core/build/backend.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = _require(_dependencyMap[0], 'fbjs/lib/invariant');

  var ReactNativePropRegistry;

  function getStyle(style) {
    if (ReactNativePropRegistry === undefined) {
      ReactNativePropRegistry = _require(_dependencyMap[1], 'ReactNativePropRegistry');
    }

    if (typeof style === 'number') {
      return ReactNativePropRegistry.getByID(style);
    }

    return style;
  }

  function flattenStyle(style) {
    if (!style) {
      return undefined;
    }

    invariant(style !== true, 'style may be false but not true');

    if (!Array.isArray(style)) {
      return getStyle(style);
    }

    var result = {};

    for (var i = 0, styleLength = style.length; i < styleLength; ++i) {
      var computedStyle = flattenStyle(style[i]);

      if (computedStyle) {
        for (var key in computedStyle) {
          result[key] = computedStyle[key];
        }
      }
    }

    return result;
  }

  module.exports = flattenStyle;
},105,[13,106],"flattenStyle");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _require = _require2(_dependencyMap[0], 'ReactNative'),
      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = _require.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

  module.exports = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactNativePropRegistry;
},106,[21],"ReactNativePropRegistry");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var JSInspector = {
    registerAgent: function registerAgent(type) {
      if (global.__registerInspectorAgent) {
        global.__registerInspectorAgent(type);
      }
    },
    getTimestamp: function getTimestamp() {
      return global.__inspectorTimestamp();
    }
  };
  module.exports = JSInspector;
},107,[],"JSInspector");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _class2, _temp;

  var InspectorAgent = _require(_dependencyMap[0], 'InspectorAgent');

  var JSInspector = _require(_dependencyMap[1], 'JSInspector');

  var Map = _require(_dependencyMap[2], 'Map');

  var XMLHttpRequest = _require(_dependencyMap[3], 'XMLHttpRequest');

  var Interceptor = function () {
    function Interceptor(agent) {
      babelHelpers.classCallCheck(this, Interceptor);
      this._agent = agent;
      this._requests = new Map();
    }

    babelHelpers.createClass(Interceptor, [{
      key: "getData",
      value: function getData(requestId) {
        return this._requests.get(requestId);
      }
    }, {
      key: "requestSent",
      value: function requestSent(id, url, method, headers) {
        var requestId = String(id);

        this._requests.set(requestId, '');

        var request = {
          url: url,
          method: method,
          headers: headers,
          initialPriority: 'Medium'
        };
        var event = {
          requestId: requestId,
          documentURL: '',
          frameId: '1',
          loaderId: '1',
          request: request,
          timestamp: JSInspector.getTimestamp(),
          initiator: {
            type: 'other'
          },
          type: 'Other'
        };

        this._agent.sendEvent('requestWillBeSent', event);
      }
    }, {
      key: "responseReceived",
      value: function responseReceived(id, url, status, headers) {
        var requestId = String(id);
        var response = {
          url: url,
          status: status,
          statusText: String(status),
          headers: headers,
          requestHeaders: {},
          mimeType: this._getMimeType(headers),
          connectionReused: false,
          connectionId: -1,
          encodedDataLength: 0,
          securityState: 'unknown'
        };
        var event = {
          requestId: requestId,
          frameId: '1',
          loaderId: '1',
          timestamp: JSInspector.getTimestamp(),
          type: 'Other',
          response: response
        };

        this._agent.sendEvent('responseReceived', event);
      }
    }, {
      key: "dataReceived",
      value: function dataReceived(id, data) {
        var requestId = String(id);
        var existingData = this._requests.get(requestId) || '';

        this._requests.set(requestId, existingData.concat(data));

        var event = {
          requestId: requestId,
          timestamp: JSInspector.getTimestamp(),
          dataLength: data.length,
          encodedDataLength: data.length
        };

        this._agent.sendEvent('dataReceived', event);
      }
    }, {
      key: "loadingFinished",
      value: function loadingFinished(id, encodedDataLength) {
        var event = {
          requestId: String(id),
          timestamp: JSInspector.getTimestamp(),
          encodedDataLength: encodedDataLength
        };

        this._agent.sendEvent('loadingFinished', event);
      }
    }, {
      key: "loadingFailed",
      value: function loadingFailed(id, error) {
        var event = {
          requestId: String(id),
          timestamp: JSInspector.getTimestamp(),
          type: 'Other',
          errorText: error
        };

        this._agent.sendEvent('loadingFailed', event);
      }
    }, {
      key: "_getMimeType",
      value: function _getMimeType(headers) {
        var contentType = headers['Content-Type'] || '';
        return contentType.split(';')[0];
      }
    }]);
    return Interceptor;
  }();

  var NetworkAgent = (_temp = _class2 = function (_InspectorAgent) {
    babelHelpers.inherits(NetworkAgent, _InspectorAgent);

    function NetworkAgent() {
      babelHelpers.classCallCheck(this, NetworkAgent);
      return babelHelpers.possibleConstructorReturn(this, (NetworkAgent.__proto__ || Object.getPrototypeOf(NetworkAgent)).apply(this, arguments));
    }

    babelHelpers.createClass(NetworkAgent, [{
      key: "enable",
      value: function enable(_ref) {
        var maxResourceBufferSize = _ref.maxResourceBufferSize,
            maxTotalBufferSize = _ref.maxTotalBufferSize;
        this._interceptor = new Interceptor(this);
        XMLHttpRequest.setInterceptor(this._interceptor);
      }
    }, {
      key: "disable",
      value: function disable() {
        XMLHttpRequest.setInterceptor(null);
        this._interceptor = null;
      }
    }, {
      key: "getResponseBody",
      value: function getResponseBody(_ref2) {
        var requestId = _ref2.requestId;
        return {
          body: this.interceptor().getData(requestId),
          base64Encoded: false
        };
      }
    }, {
      key: "interceptor",
      value: function interceptor() {
        if (this._interceptor) {
          return this._interceptor;
        } else {
          throw Error('_interceptor can not be null');
        }
      }
    }]);
    return NetworkAgent;
  }(InspectorAgent), _class2.DOMAIN = 'Network', _temp);
  module.exports = NetworkAgent;
},108,[109,107,26,58],"NetworkAgent");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var InspectorAgent = function () {
    function InspectorAgent(eventSender) {
      babelHelpers.classCallCheck(this, InspectorAgent);
      this._eventSender = eventSender;
    }

    babelHelpers.createClass(InspectorAgent, [{
      key: "sendEvent",
      value: function sendEvent(name, params) {
        this._eventSender(name, params);
      }
    }]);
    return InspectorAgent;
  }();

  module.exports = InspectorAgent;
},109,[],"InspectorAgent");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var NativeModules = _require(_dependencyMap[0], 'NativeModules');

  var Platform = _require(_dependencyMap[1], 'Platform');

  var defineLazyObjectProperty = _require(_dependencyMap[2], 'defineLazyObjectProperty');

  var invariant = _require(_dependencyMap[3], 'fbjs/lib/invariant');

  var UIManager = NativeModules.UIManager;
  invariant(UIManager, 'UIManager is undefined. The native module config is probably incorrect.');
  UIManager.__takeSnapshot = UIManager.takeSnapshot;

  UIManager.takeSnapshot = function () {
    invariant(false, 'UIManager.takeSnapshot should not be called directly. ' + 'Use ReactNative.takeSnapshot instead.');
  };

  if (Platform.OS === 'ios') {
    Object.keys(UIManager).forEach(function (viewName) {
      var viewConfig = UIManager[viewName];

      if (viewConfig.Manager) {
        defineLazyObjectProperty(viewConfig, 'Constants', {
          get: function get() {
            var viewManager = NativeModules[viewConfig.Manager];
            var constants = {};
            viewManager && Object.keys(viewManager).forEach(function (key) {
              var value = viewManager[key];

              if (typeof value !== 'function') {
                constants[key] = value;
              }
            });
            return constants;
          }
        });
        defineLazyObjectProperty(viewConfig, 'Commands', {
          get: function get() {
            var viewManager = NativeModules[viewConfig.Manager];
            var commands = {};
            var index = 0;
            viewManager && Object.keys(viewManager).forEach(function (key) {
              var value = viewManager[key];

              if (typeof value === 'function') {
                commands[key] = index++;
              }
            });
            return commands;
          }
        });
      }
    });
  } else if (Platform.OS === 'android' && UIManager.ViewManagerNames) {
    UIManager.ViewManagerNames.forEach(function (viewManagerName) {
      defineLazyObjectProperty(UIManager, viewManagerName, {
        get: function get() {
          return UIManager.getConstantsForViewManager(viewManagerName);
        }
      });
    });
  }

  module.exports = UIManager;
},110,[15,52,24,13],"UIManager");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var BatchedBridge = _require(_dependencyMap[0], 'BatchedBridge');

  var RCTEventEmitter = {
    register: function register(eventEmitter) {
      BatchedBridge.registerCallableModule('RCTEventEmitter', eventEmitter);
    }
  };
  module.exports = RCTEventEmitter;
},111,[16],"RCTEventEmitter");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var Platform = _require(_dependencyMap[0], 'Platform');

  var UIManager = _require(_dependencyMap[1], 'UIManager');

  var TextInputState = {
    _currentlyFocusedID: null,
    currentlyFocusedField: function currentlyFocusedField() {
      return this._currentlyFocusedID;
    },
    focusTextInput: function focusTextInput(textFieldID) {
      if (this._currentlyFocusedID !== textFieldID && textFieldID !== null) {
        this._currentlyFocusedID = textFieldID;

        if (Platform.OS === 'ios') {
          UIManager.focus(textFieldID);
        } else if (Platform.OS === 'android') {
          UIManager.dispatchViewManagerCommand(textFieldID, UIManager.AndroidTextInput.Commands.focusTextInput, null);
        }
      }
    },
    blurTextInput: function blurTextInput(textFieldID) {
      if (this._currentlyFocusedID === textFieldID && textFieldID !== null) {
        this._currentlyFocusedID = null;

        if (Platform.OS === 'ios') {
          UIManager.blur(textFieldID);
        } else if (Platform.OS === 'android') {
          UIManager.dispatchViewManagerCommand(textFieldID, UIManager.AndroidTextInput.Commands.blurTextInput, null);
        }
      }
    }
  };
  module.exports = TextInputState;
},112,[52,110],"TextInputState");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var deepDiffer = function deepDiffer(one, two) {
    if (one === two) {
      return false;
    }

    if (typeof one === 'function' && typeof two === 'function') {
      return false;
    }

    if (typeof one !== 'object' || one === null) {
      return one !== two;
    }

    if (typeof two !== 'object' || two === null) {
      return true;
    }

    if (one.constructor !== two.constructor) {
      return true;
    }

    if (Array.isArray(one)) {
      var len = one.length;

      if (two.length !== len) {
        return true;
      }

      for (var ii = 0; ii < len; ii++) {
        if (deepDiffer(one[ii], two[ii])) {
          return true;
        }
      }
    } else {
      for (var key in one) {
        if (deepDiffer(one[key], two[key])) {
          return true;
        }
      }

      for (var twoKey in two) {
        if (one[twoKey] === undefined && two[twoKey] !== undefined) {
          return true;
        }
      }
    }

    return false;
  };

  module.exports = deepDiffer;
},113,[],"deepDiffer");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  if (process.env.NODE_ENV === 'production') {
    module.exports = _require(_dependencyMap[0], './cjs/react.production.min.js');
  } else {
    module.exports = _require(_dependencyMap[1], './cjs/react.development.js');
  }
},114,[115,118],"node_modules/react/index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  /** @license React v16.3.0
   * react.production.min.js
   *
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */'use strict';

  var m = _require(_dependencyMap[0], "object-assign"),
      n = _require(_dependencyMap[1], "fbjs/lib/emptyObject"),
      p = _require(_dependencyMap[2], "fbjs/lib/emptyFunction"),
      q = "function" === typeof Symbol && Symbol["for"],
      r = q ? Symbol["for"]("react.element") : 60103,
      t = q ? Symbol["for"]("react.portal") : 60106,
      u = q ? Symbol["for"]("react.fragment") : 60107,
      v = q ? Symbol["for"]("react.strict_mode") : 60108,
      w = q ? Symbol["for"]("react.provider") : 60109,
      x = q ? Symbol["for"]("react.context") : 60110,
      y = q ? Symbol["for"]("react.async_mode") : 60111,
      z = q ? Symbol["for"]("react.forward_ref") : 60112,
      A = "function" === typeof Symbol && (typeof Symbol === "function" ? Symbol.iterator : "@@iterator");

  function B(a) {
    for (var b = arguments.length - 1, e = "Minified React error #" + a + "; visit http://facebook.github.io/react/docs/error-decoder.html?invariant\x3d" + a, c = 0; c < b; c++) {
      e += "\x26args[]\x3d" + encodeURIComponent(arguments[c + 1]);
    }

    b = Error(e + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.");
    b.name = "Invariant Violation";
    b.framesToPop = 1;
    throw b;
  }

  var C = {
    isMounted: function isMounted() {
      return !1;
    },
    enqueueForceUpdate: function enqueueForceUpdate() {},
    enqueueReplaceState: function enqueueReplaceState() {},
    enqueueSetState: function enqueueSetState() {}
  };

  function D(a, b, e) {
    this.props = a;
    this.context = b;
    this.refs = n;
    this.updater = e || C;
  }

  D.prototype.isReactComponent = {};

  D.prototype.setState = function (a, b) {
    "object" !== typeof a && "function" !== typeof a && null != a ? B("85") : void 0;
    this.updater.enqueueSetState(this, a, b, "setState");
  };

  D.prototype.forceUpdate = function (a) {
    this.updater.enqueueForceUpdate(this, a, "forceUpdate");
  };

  function E() {}

  E.prototype = D.prototype;

  function F(a, b, e) {
    this.props = a;
    this.context = b;
    this.refs = n;
    this.updater = e || C;
  }

  var G = F.prototype = new E();
  G.constructor = F;
  m(G, D.prototype);
  G.isPureReactComponent = !0;
  var H = {
    current: null
  },
      I = Object.prototype.hasOwnProperty,
      J = {
    key: !0,
    ref: !0,
    __self: !0,
    __source: !0
  };

  function K(a, b, e) {
    var c = void 0,
        d = {},
        g = null,
        h = null;
    if (null != b) for (c in void 0 !== b.ref && (h = b.ref), void 0 !== b.key && (g = "" + b.key), b) {
      I.call(b, c) && !J.hasOwnProperty(c) && (d[c] = b[c]);
    }
    var f = arguments.length - 2;
    if (1 === f) d.children = e;else if (1 < f) {
      for (var k = Array(f), l = 0; l < f; l++) {
        k[l] = arguments[l + 2];
      }

      d.children = k;
    }
    if (a && a.defaultProps) for (c in f = a.defaultProps, f) {
      void 0 === d[c] && (d[c] = f[c]);
    }
    return {
      $$typeof: r,
      type: a,
      key: g,
      ref: h,
      props: d,
      _owner: H.current
    };
  }

  function L(a) {
    return "object" === typeof a && null !== a && a.$$typeof === r;
  }

  function escape(a) {
    var b = {
      "\x3d": "\x3d0",
      ":": "\x3d2"
    };
    return "$" + ("" + a).replace(/[=:]/g, function (a) {
      return b[a];
    });
  }

  var M = /\/+/g,
      N = [];

  function O(a, b, e, c) {
    if (N.length) {
      var d = N.pop();
      d.result = a;
      d.keyPrefix = b;
      d.func = e;
      d.context = c;
      d.count = 0;
      return d;
    }

    return {
      result: a,
      keyPrefix: b,
      func: e,
      context: c,
      count: 0
    };
  }

  function P(a) {
    a.result = null;
    a.keyPrefix = null;
    a.func = null;
    a.context = null;
    a.count = 0;
    10 > N.length && N.push(a);
  }

  function Q(a, b, e, c) {
    var d = typeof a;
    if ("undefined" === d || "boolean" === d) a = null;
    var g = !1;
    if (null === a) g = !0;else switch (d) {
      case "string":
      case "number":
        g = !0;
        break;

      case "object":
        switch (a.$$typeof) {
          case r:
          case t:
            g = !0;
        }

    }
    if (g) return e(c, a, "" === b ? "." + R(a, 0) : b), 1;
    g = 0;
    b = "" === b ? "." : b + ":";
    if (Array.isArray(a)) for (var h = 0; h < a.length; h++) {
      d = a[h];
      var f = b + R(d, h);
      g += Q(d, f, e, c);
    } else if (null === a || "undefined" === typeof a ? f = null : (f = A && a[A] || a["@@iterator"], f = "function" === typeof f ? f : null), "function" === typeof f) for (a = f.call(a), h = 0; !(d = a.next()).done;) {
      d = d.value, f = b + R(d, h++), g += Q(d, f, e, c);
    } else "object" === d && (e = "" + a, B("31", "[object Object]" === e ? "object with keys {" + Object.keys(a).join(", ") + "}" : e, ""));
    return g;
  }

  function R(a, b) {
    return "object" === typeof a && null !== a && null != a.key ? escape(a.key) : b.toString(36);
  }

  function S(a, b) {
    a.func.call(a.context, b, a.count++);
  }

  function T(a, b, e) {
    var c = a.result,
        d = a.keyPrefix;
    a = a.func.call(a.context, b, a.count++);
    Array.isArray(a) ? U(a, c, e, p.thatReturnsArgument) : null != a && (L(a) && (b = d + (!a.key || b && b.key === a.key ? "" : ("" + a.key).replace(M, "$\x26/") + "/") + e, a = {
      $$typeof: r,
      type: a.type,
      key: b,
      ref: a.ref,
      props: a.props,
      _owner: a._owner
    }), c.push(a));
  }

  function U(a, b, e, c, d) {
    var g = "";
    null != e && (g = ("" + e).replace(M, "$\x26/") + "/");
    b = O(b, g, c, d);
    null == a || Q(a, "", T, b);
    P(b);
  }

  var V = {
    Children: {
      map: function map(a, b, e) {
        if (null == a) return a;
        var c = [];
        U(a, c, null, b, e);
        return c;
      },
      forEach: function forEach(a, b, e) {
        if (null == a) return a;
        b = O(null, null, b, e);
        null == a || Q(a, "", S, b);
        P(b);
      },
      count: function count(a) {
        return null == a ? 0 : Q(a, "", p.thatReturnsNull, null);
      },
      toArray: function toArray(a) {
        var b = [];
        U(a, b, null, p.thatReturnsArgument);
        return b;
      },
      only: function only(a) {
        L(a) ? void 0 : B("143");
        return a;
      }
    },
    createRef: function createRef() {
      return {
        current: null
      };
    },
    Component: D,
    PureComponent: F,
    createContext: function createContext(a, b) {
      void 0 === b && (b = null);
      a = {
        $$typeof: x,
        _calculateChangedBits: b,
        _defaultValue: a,
        _currentValue: a,
        _changedBits: 0,
        Provider: null,
        Consumer: null
      };
      a.Provider = {
        $$typeof: w,
        context: a
      };
      return a.Consumer = a;
    },
    forwardRef: function forwardRef(a) {
      return {
        $$typeof: z,
        render: a
      };
    },
    Fragment: u,
    StrictMode: v,
    unstable_AsyncMode: y,
    createElement: K,
    cloneElement: function cloneElement(a, b, e) {
      var c = void 0,
          d = m({}, a.props),
          g = a.key,
          h = a.ref,
          f = a._owner;

      if (null != b) {
        void 0 !== b.ref && (h = b.ref, f = H.current);
        void 0 !== b.key && (g = "" + b.key);
        var k = void 0;
        a.type && a.type.defaultProps && (k = a.type.defaultProps);

        for (c in b) {
          I.call(b, c) && !J.hasOwnProperty(c) && (d[c] = void 0 === b[c] && void 0 !== k ? k[c] : b[c]);
        }
      }

      c = arguments.length - 2;
      if (1 === c) d.children = e;else if (1 < c) {
        k = Array(c);

        for (var l = 0; l < c; l++) {
          k[l] = arguments[l + 2];
        }

        d.children = k;
      }
      return {
        $$typeof: r,
        type: a.type,
        key: g,
        ref: h,
        props: d,
        _owner: f
      };
    },
    createFactory: function createFactory(a) {
      var b = K.bind(null, a);
      b.type = a;
      return b;
    },
    isValidElement: L,
    version: "16.3.0",
    __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
      ReactCurrentOwner: H,
      assign: m
    }
  },
      W = Object.freeze({
    default: V
  }),
      X = W && V || W;
  module.exports = X["default"] ? X["default"] : X;
},115,[116,117,57],"node_modules/react/cjs/react.production.min.js");
__d(function (global, _require, module, exports, _dependencyMap) {
	/*
 object-assign
 (c) Sindre Sorhus
 @license MIT
 */'use strict';

	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;

	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}

			var test1 = new String('abc');
			test1[5] = 'de';

			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}

			var test2 = {};

			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}

			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});

			if (order2.join('') !== '0123456789') {
				return false;
			}

			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});

			if (Object.keys(babelHelpers.extends({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
				return false;
			}

			return true;
		} catch (err) {
			return false;
		}
	}

	module.exports = shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;

		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);

			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}

			if (getOwnPropertySymbols) {
				symbols = getOwnPropertySymbols(from);

				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}

		return to;
	};
},116,[],"node_modules/object-assign/index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var emptyObject = {};

  if (process.env.NODE_ENV !== 'production') {
    Object.freeze(emptyObject);
  }

  module.exports = emptyObject;
},117,[],"node_modules/fbjs/lib/emptyObject.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  /** @license React v16.3.0
   * react.development.js
   *
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */'use strict';

  if (process.env.NODE_ENV !== "production") {
    (function () {
      'use strict';

      var _assign = _require(_dependencyMap[0], 'object-assign');

      var emptyObject = _require(_dependencyMap[1], 'fbjs/lib/emptyObject');

      var invariant = _require(_dependencyMap[2], 'fbjs/lib/invariant');

      var warning = _require(_dependencyMap[3], 'fbjs/lib/warning');

      var emptyFunction = _require(_dependencyMap[4], 'fbjs/lib/emptyFunction');

      var checkPropTypes = _require(_dependencyMap[5], 'prop-types/checkPropTypes');

      var ReactVersion = '16.3.0';
      var hasSymbol = typeof Symbol === 'function' && Symbol['for'];
      var REACT_ELEMENT_TYPE = hasSymbol ? Symbol['for']('react.element') : 0xeac7;
      var REACT_CALL_TYPE = hasSymbol ? Symbol['for']('react.call') : 0xeac8;
      var REACT_RETURN_TYPE = hasSymbol ? Symbol['for']('react.return') : 0xeac9;
      var REACT_PORTAL_TYPE = hasSymbol ? Symbol['for']('react.portal') : 0xeaca;
      var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol['for']('react.fragment') : 0xeacb;
      var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol['for']('react.strict_mode') : 0xeacc;
      var REACT_PROVIDER_TYPE = hasSymbol ? Symbol['for']('react.provider') : 0xeacd;
      var REACT_CONTEXT_TYPE = hasSymbol ? Symbol['for']('react.context') : 0xeace;
      var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol['for']('react.async_mode') : 0xeacf;
      var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol['for']('react.forward_ref') : 0xead0;
      var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && (typeof Symbol === "function" ? Symbol.iterator : "@@iterator");
      var FAUX_ITERATOR_SYMBOL = '@@iterator';

      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable === 'undefined') {
          return null;
        }

        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

        if (typeof maybeIterator === 'function') {
          return maybeIterator;
        }

        return null;
      }

      var lowPriorityWarning = function lowPriorityWarning() {};

      {
        var printWarning = function printWarning(format) {
          for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }

          var argIndex = 0;
          var message = 'Warning: ' + format.replace(/%s/g, function () {
            return args[argIndex++];
          });

          if (typeof console !== 'undefined') {
            console.warn(message);
          }

          try {
            throw new Error(message);
          } catch (x) {}
        };

        lowPriorityWarning = function lowPriorityWarning(condition, format) {
          if (format === undefined) {
            throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
          }

          if (!condition) {
            for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
              args[_key2 - 2] = arguments[_key2];
            }

            printWarning.apply(undefined, [format].concat(args));
          }
        };
      }
      var lowPriorityWarning$1 = lowPriorityWarning;
      var didWarnStateUpdateForUnmountedComponent = {};

      function warnNoop(publicInstance, callerName) {
        {
          var _constructor = publicInstance.constructor;
          var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
          var warningKey = componentName + '.' + callerName;

          if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
            return;
          }

          warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op.\n\nPlease check the code for the %s component.', callerName, callerName, componentName);
          didWarnStateUpdateForUnmountedComponent[warningKey] = true;
        }
      }

      var ReactNoopUpdateQueue = {
        isMounted: function isMounted(publicInstance) {
          return false;
        },
        enqueueForceUpdate: function enqueueForceUpdate(publicInstance, callback, callerName) {
          warnNoop(publicInstance, 'forceUpdate');
        },
        enqueueReplaceState: function enqueueReplaceState(publicInstance, completeState, callback, callerName) {
          warnNoop(publicInstance, 'replaceState');
        },
        enqueueSetState: function enqueueSetState(publicInstance, partialState, callback, callerName) {
          warnNoop(publicInstance, 'setState');
        }
      };

      function Component(props, context, updater) {
        this.props = props;
        this.context = context;
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
      }

      Component.prototype.isReactComponent = {};

      Component.prototype.setState = function (partialState, callback) {
        !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : void 0;
        this.updater.enqueueSetState(this, partialState, callback, 'setState');
      };

      Component.prototype.forceUpdate = function (callback) {
        this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
      };

      {
        var deprecatedAPIs = {
          isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
          replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
        };

        var defineDeprecationWarning = function defineDeprecationWarning(methodName, info) {
          Object.defineProperty(Component.prototype, methodName, {
            get: function get() {
              lowPriorityWarning$1(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
              return undefined;
            }
          });
        };

        for (var fnName in deprecatedAPIs) {
          if (deprecatedAPIs.hasOwnProperty(fnName)) {
            defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
          }
        }
      }

      function ComponentDummy() {}

      ComponentDummy.prototype = Component.prototype;

      function PureComponent(props, context, updater) {
        this.props = props;
        this.context = context;
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
      }

      var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
      pureComponentPrototype.constructor = PureComponent;

      _assign(pureComponentPrototype, Component.prototype);

      pureComponentPrototype.isPureReactComponent = true;

      function createRef() {
        var refObject = {
          current: null
        };
        {
          Object.seal(refObject);
        }
        return refObject;
      }

      var ReactCurrentOwner = {
        current: null
      };
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      var RESERVED_PROPS = {
        key: true,
        ref: true,
        __self: true,
        __source: true
      };
      var specialPropKeyWarningShown = void 0;
      var specialPropRefWarningShown = void 0;

      function hasValidRef(config) {
        {
          if (hasOwnProperty.call(config, 'ref')) {
            var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;

            if (getter && getter.isReactWarning) {
              return false;
            }
          }
        }
        return config.ref !== undefined;
      }

      function hasValidKey(config) {
        {
          if (hasOwnProperty.call(config, 'key')) {
            var getter = Object.getOwnPropertyDescriptor(config, 'key').get;

            if (getter && getter.isReactWarning) {
              return false;
            }
          }
        }
        return config.key !== undefined;
      }

      function defineKeyPropWarningGetter(props, displayName) {
        var warnAboutAccessingKey = function warnAboutAccessingKey() {
          if (!specialPropKeyWarningShown) {
            specialPropKeyWarningShown = true;
            warning(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
          }
        };

        warnAboutAccessingKey.isReactWarning = true;
        Object.defineProperty(props, 'key', {
          get: warnAboutAccessingKey,
          configurable: true
        });
      }

      function defineRefPropWarningGetter(props, displayName) {
        var warnAboutAccessingRef = function warnAboutAccessingRef() {
          if (!specialPropRefWarningShown) {
            specialPropRefWarningShown = true;
            warning(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
          }
        };

        warnAboutAccessingRef.isReactWarning = true;
        Object.defineProperty(props, 'ref', {
          get: warnAboutAccessingRef,
          configurable: true
        });
      }

      var ReactElement = function ReactElement(type, key, ref, self, source, owner, props) {
        var element = {
          $$typeof: REACT_ELEMENT_TYPE,
          type: type,
          key: key,
          ref: ref,
          props: props,
          _owner: owner
        };
        {
          element._store = {};
          Object.defineProperty(element._store, 'validated', {
            configurable: false,
            enumerable: false,
            writable: true,
            value: false
          });
          Object.defineProperty(element, '_self', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: self
          });
          Object.defineProperty(element, '_source', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: source
          });

          if (Object.freeze) {
            Object.freeze(element.props);
            Object.freeze(element);
          }
        }
        return element;
      };

      function createElement(type, config, children) {
        var propName = void 0;
        var props = {};
        var key = null;
        var ref = null;
        var self = null;
        var source = null;

        if (config != null) {
          if (hasValidRef(config)) {
            ref = config.ref;
          }

          if (hasValidKey(config)) {
            key = '' + config.key;
          }

          self = config.__self === undefined ? null : config.__self;
          source = config.__source === undefined ? null : config.__source;

          for (propName in config) {
            if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
              props[propName] = config[propName];
            }
          }
        }

        var childrenLength = arguments.length - 2;

        if (childrenLength === 1) {
          props.children = children;
        } else if (childrenLength > 1) {
          var childArray = Array(childrenLength);

          for (var i = 0; i < childrenLength; i++) {
            childArray[i] = arguments[i + 2];
          }

          {
            if (Object.freeze) {
              Object.freeze(childArray);
            }
          }
          props.children = childArray;
        }

        if (type && type.defaultProps) {
          var defaultProps = type.defaultProps;

          for (propName in defaultProps) {
            if (props[propName] === undefined) {
              props[propName] = defaultProps[propName];
            }
          }
        }

        {
          if (key || ref) {
            if (typeof props.$$typeof === 'undefined' || props.$$typeof !== REACT_ELEMENT_TYPE) {
              var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;

              if (key) {
                defineKeyPropWarningGetter(props, displayName);
              }

              if (ref) {
                defineRefPropWarningGetter(props, displayName);
              }
            }
          }
        }
        return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
      }

      function cloneAndReplaceKey(oldElement, newKey) {
        var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
        return newElement;
      }

      function cloneElement(element, config, children) {
        var propName = void 0;

        var props = _assign({}, element.props);

        var key = element.key;
        var ref = element.ref;
        var self = element._self;
        var source = element._source;
        var owner = element._owner;

        if (config != null) {
          if (hasValidRef(config)) {
            ref = config.ref;
            owner = ReactCurrentOwner.current;
          }

          if (hasValidKey(config)) {
            key = '' + config.key;
          }

          var defaultProps = void 0;

          if (element.type && element.type.defaultProps) {
            defaultProps = element.type.defaultProps;
          }

          for (propName in config) {
            if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
              if (config[propName] === undefined && defaultProps !== undefined) {
                props[propName] = defaultProps[propName];
              } else {
                props[propName] = config[propName];
              }
            }
          }
        }

        var childrenLength = arguments.length - 2;

        if (childrenLength === 1) {
          props.children = children;
        } else if (childrenLength > 1) {
          var childArray = Array(childrenLength);

          for (var i = 0; i < childrenLength; i++) {
            childArray[i] = arguments[i + 2];
          }

          props.children = childArray;
        }

        return ReactElement(element.type, key, ref, self, source, owner, props);
      }

      function isValidElement(object) {
        return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
      }

      var ReactDebugCurrentFrame = {};
      {
        ReactDebugCurrentFrame.getCurrentStack = null;

        ReactDebugCurrentFrame.getStackAddendum = function () {
          var impl = ReactDebugCurrentFrame.getCurrentStack;

          if (impl) {
            return impl();
          }

          return null;
        };
      }
      var SEPARATOR = '.';
      var SUBSEPARATOR = ':';

      function escape(key) {
        var escapeRegex = /[=:]/g;
        var escaperLookup = {
          '=': '=0',
          ':': '=2'
        };
        var escapedString = ('' + key).replace(escapeRegex, function (match) {
          return escaperLookup[match];
        });
        return '$' + escapedString;
      }

      var didWarnAboutMaps = false;
      var userProvidedKeyEscapeRegex = /\/+/g;

      function escapeUserProvidedKey(text) {
        return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
      }

      var POOL_SIZE = 10;
      var traverseContextPool = [];

      function getPooledTraverseContext(mapResult, keyPrefix, mapFunction, mapContext) {
        if (traverseContextPool.length) {
          var traverseContext = traverseContextPool.pop();
          traverseContext.result = mapResult;
          traverseContext.keyPrefix = keyPrefix;
          traverseContext.func = mapFunction;
          traverseContext.context = mapContext;
          traverseContext.count = 0;
          return traverseContext;
        } else {
          return {
            result: mapResult,
            keyPrefix: keyPrefix,
            func: mapFunction,
            context: mapContext,
            count: 0
          };
        }
      }

      function releaseTraverseContext(traverseContext) {
        traverseContext.result = null;
        traverseContext.keyPrefix = null;
        traverseContext.func = null;
        traverseContext.context = null;
        traverseContext.count = 0;

        if (traverseContextPool.length < POOL_SIZE) {
          traverseContextPool.push(traverseContext);
        }
      }

      function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
        var type = typeof children;

        if (type === 'undefined' || type === 'boolean') {
          children = null;
        }

        var invokeCallback = false;

        if (children === null) {
          invokeCallback = true;
        } else {
          switch (type) {
            case 'string':
            case 'number':
              invokeCallback = true;
              break;

            case 'object':
              switch (children.$$typeof) {
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                  invokeCallback = true;
              }

          }
        }

        if (invokeCallback) {
          callback(traverseContext, children, nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
          return 1;
        }

        var child = void 0;
        var nextName = void 0;
        var subtreeCount = 0;
        var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

        if (Array.isArray(children)) {
          for (var i = 0; i < children.length; i++) {
            child = children[i];
            nextName = nextNamePrefix + getComponentKey(child, i);
            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
          }
        } else {
          var iteratorFn = getIteratorFn(children);

          if (typeof iteratorFn === 'function') {
            {
              if (iteratorFn === children.entries) {
                warning(didWarnAboutMaps, 'Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.%s', ReactDebugCurrentFrame.getStackAddendum());
                didWarnAboutMaps = true;
              }
            }
            var iterator = iteratorFn.call(children);
            var step = void 0;
            var ii = 0;

            while (!(step = iterator.next()).done) {
              child = step.value;
              nextName = nextNamePrefix + getComponentKey(child, ii++);
              subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
            }
          } else if (type === 'object') {
            var addendum = '';
            {
              addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + ReactDebugCurrentFrame.getStackAddendum();
            }
            var childrenString = '' + children;
            invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum);
          }
        }

        return subtreeCount;
      }

      function traverseAllChildren(children, callback, traverseContext) {
        if (children == null) {
          return 0;
        }

        return traverseAllChildrenImpl(children, '', callback, traverseContext);
      }

      function getComponentKey(component, index) {
        if (typeof component === 'object' && component !== null && component.key != null) {
          return escape(component.key);
        }

        return index.toString(36);
      }

      function forEachSingleChild(bookKeeping, child, name) {
        var func = bookKeeping.func,
            context = bookKeeping.context;
        func.call(context, child, bookKeeping.count++);
      }

      function forEachChildren(children, forEachFunc, forEachContext) {
        if (children == null) {
          return children;
        }

        var traverseContext = getPooledTraverseContext(null, null, forEachFunc, forEachContext);
        traverseAllChildren(children, forEachSingleChild, traverseContext);
        releaseTraverseContext(traverseContext);
      }

      function mapSingleChildIntoContext(bookKeeping, child, childKey) {
        var result = bookKeeping.result,
            keyPrefix = bookKeeping.keyPrefix,
            func = bookKeeping.func,
            context = bookKeeping.context;
        var mappedChild = func.call(context, child, bookKeeping.count++);

        if (Array.isArray(mappedChild)) {
          mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
        } else if (mappedChild != null) {
          if (isValidElement(mappedChild)) {
            mappedChild = cloneAndReplaceKey(mappedChild, keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
          }

          result.push(mappedChild);
        }
      }

      function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
        var escapedPrefix = '';

        if (prefix != null) {
          escapedPrefix = escapeUserProvidedKey(prefix) + '/';
        }

        var traverseContext = getPooledTraverseContext(array, escapedPrefix, func, context);
        traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
        releaseTraverseContext(traverseContext);
      }

      function mapChildren(children, func, context) {
        if (children == null) {
          return children;
        }

        var result = [];
        mapIntoWithKeyPrefixInternal(children, result, null, func, context);
        return result;
      }

      function countChildren(children, context) {
        return traverseAllChildren(children, emptyFunction.thatReturnsNull, null);
      }

      function toArray(children) {
        var result = [];
        mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
        return result;
      }

      function onlyChild(children) {
        !isValidElement(children) ? invariant(false, 'React.Children.only expected to receive a single React element child.') : void 0;
        return children;
      }

      function createContext(defaultValue, calculateChangedBits) {
        if (calculateChangedBits === undefined) {
          calculateChangedBits = null;
        } else {
          {
            warning(calculateChangedBits === null || typeof calculateChangedBits === 'function', 'createContext: Expected the optional second argument to be a ' + 'function. Instead received: %s', calculateChangedBits);
          }
        }

        var context = {
          $$typeof: REACT_CONTEXT_TYPE,
          _calculateChangedBits: calculateChangedBits,
          _defaultValue: defaultValue,
          _currentValue: defaultValue,
          _changedBits: 0,
          Provider: null,
          Consumer: null
        };
        context.Provider = {
          $$typeof: REACT_PROVIDER_TYPE,
          context: context
        };
        context.Consumer = context;
        {
          context._currentRenderer = null;
        }
        return context;
      }

      function forwardRef(render) {
        {
          warning(typeof render === 'function', 'forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);
        }
        return {
          $$typeof: REACT_FORWARD_REF_TYPE,
          render: render
        };
      }

      var describeComponentFrame = function describeComponentFrame(name, source, ownerName) {
        return '\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');
      };

      function isValidElementType(type) {
        return typeof type === 'string' || typeof type === 'function' || type === REACT_FRAGMENT_TYPE || type === REACT_ASYNC_MODE_TYPE || type === REACT_STRICT_MODE_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE);
      }

      function getComponentName(fiber) {
        var type = fiber.type;

        if (typeof type === 'function') {
          return type.displayName || type.name;
        }

        if (typeof type === 'string') {
          return type;
        }

        switch (type) {
          case REACT_FRAGMENT_TYPE:
            return 'ReactFragment';

          case REACT_PORTAL_TYPE:
            return 'ReactPortal';

          case REACT_CALL_TYPE:
            return 'ReactCall';

          case REACT_RETURN_TYPE:
            return 'ReactReturn';
        }

        return null;
      }

      var currentlyValidatingElement = void 0;
      var propTypesMisspellWarningShown = void 0;

      var getDisplayName = function getDisplayName() {};

      var getStackAddendum = function getStackAddendum() {};

      var VALID_FRAGMENT_PROPS = void 0;
      {
        currentlyValidatingElement = null;
        propTypesMisspellWarningShown = false;

        getDisplayName = function getDisplayName(element) {
          if (element == null) {
            return '#empty';
          } else if (typeof element === 'string' || typeof element === 'number') {
            return '#text';
          } else if (typeof element.type === 'string') {
            return element.type;
          } else if (element.type === REACT_FRAGMENT_TYPE) {
            return 'React.Fragment';
          } else {
            return element.type.displayName || element.type.name || 'Unknown';
          }
        };

        getStackAddendum = function getStackAddendum() {
          var stack = '';

          if (currentlyValidatingElement) {
            var name = getDisplayName(currentlyValidatingElement);
            var owner = currentlyValidatingElement._owner;
            stack += describeComponentFrame(name, currentlyValidatingElement._source, owner && getComponentName(owner));
          }

          stack += ReactDebugCurrentFrame.getStackAddendum() || '';
          return stack;
        };

        VALID_FRAGMENT_PROPS = new Map([['children', true], ['key', true]]);
      }

      function getDeclarationErrorAddendum() {
        if (ReactCurrentOwner.current) {
          var name = getComponentName(ReactCurrentOwner.current);

          if (name) {
            return '\n\nCheck the render method of `' + name + '`.';
          }
        }

        return '';
      }

      function getSourceInfoErrorAddendum(elementProps) {
        if (elementProps !== null && elementProps !== undefined && elementProps.__source !== undefined) {
          var source = elementProps.__source;
          var fileName = source.fileName.replace(/^.*[\\\/]/, '');
          var lineNumber = source.lineNumber;
          return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
        }

        return '';
      }

      var ownerHasKeyUseWarning = {};

      function getCurrentComponentErrorInfo(parentType) {
        var info = getDeclarationErrorAddendum();

        if (!info) {
          var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;

          if (parentName) {
            info = '\n\nCheck the top-level render call using <' + parentName + '>.';
          }
        }

        return info;
      }

      function validateExplicitKey(element, parentType) {
        if (!element._store || element._store.validated || element.key != null) {
          return;
        }

        element._store.validated = true;
        var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);

        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
          return;
        }

        ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
        var childOwner = '';

        if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
          childOwner = ' It was passed a child from ' + getComponentName(element._owner) + '.';
        }

        currentlyValidatingElement = element;
        {
          warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.%s', currentComponentErrorInfo, childOwner, getStackAddendum());
        }
        currentlyValidatingElement = null;
      }

      function validateChildKeys(node, parentType) {
        if (typeof node !== 'object') {
          return;
        }

        if (Array.isArray(node)) {
          for (var i = 0; i < node.length; i++) {
            var child = node[i];

            if (isValidElement(child)) {
              validateExplicitKey(child, parentType);
            }
          }
        } else if (isValidElement(node)) {
          if (node._store) {
            node._store.validated = true;
          }
        } else if (node) {
          var iteratorFn = getIteratorFn(node);

          if (typeof iteratorFn === 'function') {
            if (iteratorFn !== node.entries) {
              var iterator = iteratorFn.call(node);
              var step = void 0;

              while (!(step = iterator.next()).done) {
                if (isValidElement(step.value)) {
                  validateExplicitKey(step.value, parentType);
                }
              }
            }
          }
        }
      }

      function validatePropTypes(element) {
        var componentClass = element.type;

        if (typeof componentClass !== 'function') {
          return;
        }

        var name = componentClass.displayName || componentClass.name;
        var propTypes = componentClass.propTypes;

        if (propTypes) {
          currentlyValidatingElement = element;
          checkPropTypes(propTypes, element.props, 'prop', name, getStackAddendum);
          currentlyValidatingElement = null;
        } else if (componentClass.PropTypes !== undefined && !propTypesMisspellWarningShown) {
          propTypesMisspellWarningShown = true;
          warning(false, 'Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', name || 'Unknown');
        }

        if (typeof componentClass.getDefaultProps === 'function') {
          warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');
        }
      }

      function validateFragmentProps(fragment) {
        currentlyValidatingElement = fragment;
        var keys = Object.keys(fragment.props);

        for (var i = 0; i < keys.length; i++) {
          var key = keys[i];

          if (!VALID_FRAGMENT_PROPS.has(key)) {
            warning(false, 'Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.%s', key, getStackAddendum());
            break;
          }
        }

        if (fragment.ref !== null) {
          warning(false, 'Invalid attribute `ref` supplied to `React.Fragment`.%s', getStackAddendum());
        }

        currentlyValidatingElement = null;
      }

      function createElementWithValidation(type, props, children) {
        var validType = isValidElementType(type);

        if (!validType) {
          var info = '';

          if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
            info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
          }

          var sourceInfo = getSourceInfoErrorAddendum(props);

          if (sourceInfo) {
            info += sourceInfo;
          } else {
            info += getDeclarationErrorAddendum();
          }

          info += getStackAddendum() || '';
          var typeString = void 0;

          if (type === null) {
            typeString = 'null';
          } else if (Array.isArray(type)) {
            typeString = 'array';
          } else {
            typeString = typeof type;
          }

          warning(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
        }

        var element = createElement.apply(this, arguments);

        if (element == null) {
          return element;
        }

        if (validType) {
          for (var i = 2; i < arguments.length; i++) {
            validateChildKeys(arguments[i], type);
          }
        }

        if (type === REACT_FRAGMENT_TYPE) {
          validateFragmentProps(element);
        } else {
          validatePropTypes(element);
        }

        return element;
      }

      function createFactoryWithValidation(type) {
        var validatedFactory = createElementWithValidation.bind(null, type);
        validatedFactory.type = type;
        {
          Object.defineProperty(validatedFactory, 'type', {
            enumerable: false,
            get: function get() {
              lowPriorityWarning$1(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');
              Object.defineProperty(this, 'type', {
                value: type
              });
              return type;
            }
          });
        }
        return validatedFactory;
      }

      function cloneElementWithValidation(element, props, children) {
        var newElement = cloneElement.apply(this, arguments);

        for (var i = 2; i < arguments.length; i++) {
          validateChildKeys(arguments[i], newElement.type);
        }

        validatePropTypes(newElement);
        return newElement;
      }

      var React = {
        Children: {
          map: mapChildren,
          forEach: forEachChildren,
          count: countChildren,
          toArray: toArray,
          only: onlyChild
        },
        createRef: createRef,
        Component: Component,
        PureComponent: PureComponent,
        createContext: createContext,
        forwardRef: forwardRef,
        Fragment: REACT_FRAGMENT_TYPE,
        StrictMode: REACT_STRICT_MODE_TYPE,
        unstable_AsyncMode: REACT_ASYNC_MODE_TYPE,
        createElement: createElementWithValidation,
        cloneElement: cloneElementWithValidation,
        createFactory: createFactoryWithValidation,
        isValidElement: isValidElement,
        version: ReactVersion,
        __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
          ReactCurrentOwner: ReactCurrentOwner,
          assign: _assign
        }
      };
      {
        _assign(React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, {
          ReactDebugCurrentFrame: ReactDebugCurrentFrame,
          ReactComponentTreeHook: {}
        });
      }
      var React$2 = Object.freeze({
        default: React
      });
      var React$3 = React$2 && React || React$2;
      var react = React$3['default'] ? React$3['default'] : React$3;
      module.exports = react;
    })();
  }
},118,[116,117,13,56,57,119],"node_modules/react/cjs/react.development.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var printWarning = function printWarning() {};

  if (process.env.NODE_ENV !== 'production') {
    var ReactPropTypesSecret = _require(_dependencyMap[0], './lib/ReactPropTypesSecret');

    var loggedTypeFailures = {};

    printWarning = function printWarning(text) {
      var message = 'Warning: ' + text;

      if (typeof console !== 'undefined') {
        console.error(message);
      }

      try {
        throw new Error(message);
      } catch (x) {}
    };
  }

  function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
    if (process.env.NODE_ENV !== 'production') {
      for (var typeSpecName in typeSpecs) {
        if (typeSpecs.hasOwnProperty(typeSpecName)) {
          var error;

          try {
            if (typeof typeSpecs[typeSpecName] !== 'function') {
              var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.');
              err.name = 'Invariant Violation';
              throw err;
            }

            error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
          } catch (ex) {
            error = ex;
          }

          if (error && !(error instanceof Error)) {
            printWarning((componentName || 'React class') + ': type specification of ' + location + ' `' + typeSpecName + '` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a ' + typeof error + '. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).');
          }

          if (error instanceof Error && !(error.message in loggedTypeFailures)) {
            loggedTypeFailures[error.message] = true;
            var stack = getStack ? getStack() : '';
            printWarning('Failed ' + location + ' type: ' + error.message + (stack != null ? stack : ''));
          }
        }
      }
    }
  }

  module.exports = checkPropTypes;
},119,[120],"node_modules/prop-types/checkPropTypes.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
  module.exports = ReactPropTypesSecret;
},120,[],"node_modules/prop-types/lib/ReactPropTypesSecret.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var hasOwnProperty = Object.prototype.hasOwnProperty;

  function is(x, y) {
    if (x === y) {
      return x !== 0 || y !== 0 || 1 / x === 1 / y;
    } else {
      return x !== x && y !== y;
    }
  }

  function shallowEqual(objA, objB) {
    if (is(objA, objB)) {
      return true;
    }

    if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
      return false;
    }

    var keysA = Object.keys(objA);
    var keysB = Object.keys(objB);

    if (keysA.length !== keysB.length) {
      return false;
    }

    for (var i = 0; i < keysA.length; i++) {
      if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
        return false;
      }
    }

    return true;
  }

  module.exports = shallowEqual;
},121,[],"node_modules/fbjs/lib/shallowEqual.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  function deepFreezeAndThrowOnMutationInDev(object) {
    if (__DEV__) {
      if (typeof object !== 'object' || object === null || Object.isFrozen(object) || Object.isSealed(object)) {
        return;
      }

      var keys = Object.keys(object);

      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];

        if (object.hasOwnProperty(key)) {
          object.__defineGetter__(key, identity.bind(null, object[key]));

          object.__defineSetter__(key, throwOnImmutableMutation.bind(null, key));
        }
      }

      Object.freeze(object);
      Object.seal(object);

      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];

        if (object.hasOwnProperty(key)) {
          deepFreezeAndThrowOnMutationInDev(object[key]);
        }
      }
    }
  }

  function throwOnImmutableMutation(key, value) {
    throw Error('You attempted to set the key `' + key + '` with the value `' + JSON.stringify(value) + '` on an object that is meant to be immutable ' + 'and has been frozen.');
  }

  function identity(value) {
    return value;
  }

  module.exports = deepFreezeAndThrowOnMutationInDev;
},122,[],"deepFreezeAndThrowOnMutationInDev");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var ReactFeatureFlags = {
    debugRenderPhaseSideEffects: false,
    debugRenderPhaseSideEffectsForStrictMode: false,
    warnAboutDeprecatedLifecycles: false
  };
  module.exports = ReactFeatureFlags;
},123,[],"ReactFeatureFlags");
__d(function (global, _require2, module, exports, _dependencyMap) {
  "use strict";

  _require2(_dependencyMap[0], "InitializeCore");

  var invariant = _require2(_dependencyMap[1], "fbjs/lib/invariant"),
      emptyFunction = _require2(_dependencyMap[2], "fbjs/lib/emptyFunction"),
      UIManager = _require2(_dependencyMap[3], "UIManager"),
      RCTEventEmitter = _require2(_dependencyMap[4], "RCTEventEmitter"),
      TextInputState = _require2(_dependencyMap[5], "TextInputState"),
      deepDiffer = _require2(_dependencyMap[6], "deepDiffer"),
      flattenStyle = _require2(_dependencyMap[7], "flattenStyle"),
      React = _require2(_dependencyMap[8], "react"),
      emptyObject = _require2(_dependencyMap[9], "fbjs/lib/emptyObject"),
      shallowEqual = _require2(_dependencyMap[10], "fbjs/lib/shallowEqual"),
      ExceptionsManager = _require2(_dependencyMap[11], "ExceptionsManager");

  function _invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
    this._hasCaughtError = !1;
    this._caughtError = null;
    var funcArgs = Array.prototype.slice.call(arguments, 3);

    try {
      func.apply(context, funcArgs);
    } catch (error) {
      this._caughtError = error, this._hasCaughtError = !0;
    }
  }

  var ReactErrorUtils = {
    _caughtError: null,
    _hasCaughtError: !1,
    _rethrowError: null,
    _hasRethrowError: !1,
    invokeGuardedCallback: function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
      _invokeGuardedCallback.apply(ReactErrorUtils, arguments);
    },
    invokeGuardedCallbackAndCatchFirstError: function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
      ReactErrorUtils.invokeGuardedCallback.apply(this, arguments);

      if (ReactErrorUtils.hasCaughtError()) {
        var error = ReactErrorUtils.clearCaughtError();
        ReactErrorUtils._hasRethrowError || (ReactErrorUtils._hasRethrowError = !0, ReactErrorUtils._rethrowError = error);
      }
    },
    rethrowCaughtError: function rethrowCaughtError() {
      return _rethrowCaughtError.apply(ReactErrorUtils, arguments);
    },
    hasCaughtError: function hasCaughtError() {
      return ReactErrorUtils._hasCaughtError;
    },
    clearCaughtError: function clearCaughtError() {
      if (ReactErrorUtils._hasCaughtError) {
        var error = ReactErrorUtils._caughtError;
        ReactErrorUtils._caughtError = null;
        ReactErrorUtils._hasCaughtError = !1;
        return error;
      }

      invariant(!1, "clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
    }
  };

  function _rethrowCaughtError() {
    if (ReactErrorUtils._hasRethrowError) {
      var error = ReactErrorUtils._rethrowError;
      ReactErrorUtils._rethrowError = null;
      ReactErrorUtils._hasRethrowError = !1;
      throw error;
    }
  }

  var eventPluginOrder = null,
      namesToPlugins = {};

  function recomputePluginOrdering() {
    if (eventPluginOrder) for (var pluginName in namesToPlugins) {
      var pluginModule = namesToPlugins[pluginName],
          pluginIndex = eventPluginOrder.indexOf(pluginName);
      invariant(-1 < pluginIndex, "EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.", pluginName);

      if (!plugins[pluginIndex]) {
        invariant(pluginModule.extractEvents, "EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.", pluginName);
        plugins[pluginIndex] = pluginModule;
        pluginIndex = pluginModule.eventTypes;

        for (var eventName in pluginIndex) {
          var JSCompiler_inline_result = void 0;
          var dispatchConfig = pluginIndex[eventName],
              pluginModule$jscomp$0 = pluginModule,
              eventName$jscomp$0 = eventName;
          invariant(!eventNameDispatchConfigs.hasOwnProperty(eventName$jscomp$0), "EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.", eventName$jscomp$0);
          eventNameDispatchConfigs[eventName$jscomp$0] = dispatchConfig;
          var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;

          if (phasedRegistrationNames) {
            for (JSCompiler_inline_result in phasedRegistrationNames) {
              phasedRegistrationNames.hasOwnProperty(JSCompiler_inline_result) && publishRegistrationName(phasedRegistrationNames[JSCompiler_inline_result], pluginModule$jscomp$0, eventName$jscomp$0);
            }

            JSCompiler_inline_result = !0;
          } else dispatchConfig.registrationName ? (publishRegistrationName(dispatchConfig.registrationName, pluginModule$jscomp$0, eventName$jscomp$0), JSCompiler_inline_result = !0) : JSCompiler_inline_result = !1;

          invariant(JSCompiler_inline_result, "EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.", eventName, pluginName);
        }
      }
    }
  }

  function publishRegistrationName(registrationName, pluginModule) {
    invariant(!registrationNameModules[registrationName], "EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
    registrationNameModules[registrationName] = pluginModule;
  }

  var plugins = [],
      eventNameDispatchConfigs = {},
      registrationNameModules = {},
      getFiberCurrentPropsFromNode = null,
      getInstanceFromNode = null,
      getNodeFromInstance = null;

  function isEndish(topLevelType) {
    return "topMouseUp" === topLevelType || "topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType;
  }

  function isMoveish(topLevelType) {
    return "topMouseMove" === topLevelType || "topTouchMove" === topLevelType;
  }

  function isStartish(topLevelType) {
    return "topMouseDown" === topLevelType || "topTouchStart" === topLevelType;
  }

  function executeDispatch(event, simulated, listener, inst) {
    simulated = event.type || "unknown-event";
    event.currentTarget = getNodeFromInstance(inst);
    ReactErrorUtils.invokeGuardedCallbackAndCatchFirstError(simulated, listener, void 0, event);
    event.currentTarget = null;
  }

  function executeDirectDispatch(event) {
    var dispatchListener = event._dispatchListeners,
        dispatchInstance = event._dispatchInstances;
    invariant(!Array.isArray(dispatchListener), "executeDirectDispatch(...): Invalid `event`.");
    event.currentTarget = dispatchListener ? getNodeFromInstance(dispatchInstance) : null;
    dispatchListener = dispatchListener ? dispatchListener(event) : null;
    event.currentTarget = null;
    event._dispatchListeners = null;
    event._dispatchInstances = null;
    return dispatchListener;
  }

  function accumulateInto(current, next) {
    invariant(null != next, "accumulateInto(...): Accumulated items must not be null or undefined.");
    if (null == current) return next;

    if (Array.isArray(current)) {
      if (Array.isArray(next)) return current.push.apply(current, next), current;
      current.push(next);
      return current;
    }

    return Array.isArray(next) ? [current].concat(next) : [current, next];
  }

  function forEachAccumulated(arr, cb, scope) {
    Array.isArray(arr) ? arr.forEach(cb, scope) : arr && cb.call(scope, arr);
  }

  var eventQueue = null;

  function executeDispatchesAndReleaseTopLevel(e) {
    if (e) {
      var dispatchListeners = e._dispatchListeners,
          dispatchInstances = e._dispatchInstances;
      if (Array.isArray(dispatchListeners)) for (var i = 0; i < dispatchListeners.length && !e.isPropagationStopped(); i++) {
        executeDispatch(e, !1, dispatchListeners[i], dispatchInstances[i]);
      } else dispatchListeners && executeDispatch(e, !1, dispatchListeners, dispatchInstances);
      e._dispatchListeners = null;
      e._dispatchInstances = null;
      e.isPersistent() || e.constructor.release(e);
    }
  }

  var injection = {
    injectEventPluginOrder: function injectEventPluginOrder(injectedEventPluginOrder) {
      invariant(!eventPluginOrder, "EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.");
      eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
      recomputePluginOrdering();
    },
    injectEventPluginsByName: function injectEventPluginsByName(injectedNamesToPlugins) {
      var isOrderingDirty = !1,
          pluginName;

      for (pluginName in injectedNamesToPlugins) {
        if (injectedNamesToPlugins.hasOwnProperty(pluginName)) {
          var pluginModule = injectedNamesToPlugins[pluginName];
          namesToPlugins.hasOwnProperty(pluginName) && namesToPlugins[pluginName] === pluginModule || (invariant(!namesToPlugins[pluginName], "EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.", pluginName), namesToPlugins[pluginName] = pluginModule, isOrderingDirty = !0);
        }
      }

      isOrderingDirty && recomputePluginOrdering();
    }
  };

  function getListener(inst, registrationName) {
    var listener = inst.stateNode;
    if (!listener) return null;
    var props = getFiberCurrentPropsFromNode(listener);
    if (!props) return null;
    listener = props[registrationName];

    a: switch (registrationName) {
      case "onClick":
      case "onClickCapture":
      case "onDoubleClick":
      case "onDoubleClickCapture":
      case "onMouseDown":
      case "onMouseDownCapture":
      case "onMouseMove":
      case "onMouseMoveCapture":
      case "onMouseUp":
      case "onMouseUpCapture":
        (props = !props.disabled) || (inst = inst.type, props = !("button" === inst || "input" === inst || "select" === inst || "textarea" === inst));
        inst = !props;
        break a;

      default:
        inst = !1;
    }

    if (inst) return null;
    invariant(!listener || "function" === typeof listener, "Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
    return listener;
  }

  function getParent(inst) {
    do {
      inst = inst["return"];
    } while (inst && 5 !== inst.tag);

    return inst ? inst : null;
  }

  function traverseTwoPhase(inst, fn, arg) {
    for (var path = []; inst;) {
      path.push(inst), inst = getParent(inst);
    }

    for (inst = path.length; 0 < inst--;) {
      fn(path[inst], "captured", arg);
    }

    for (inst = 0; inst < path.length; inst++) {
      fn(path[inst], "bubbled", arg);
    }
  }

  function accumulateDirectionalDispatches(inst, phase, event) {
    if (phase = getListener(inst, event.dispatchConfig.phasedRegistrationNames[phase])) event._dispatchListeners = accumulateInto(event._dispatchListeners, phase), event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
  }

  function accumulateTwoPhaseDispatchesSingle(event) {
    event && event.dispatchConfig.phasedRegistrationNames && traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
  }

  function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
    if (event && event.dispatchConfig.phasedRegistrationNames) {
      var targetInst = event._targetInst;
      targetInst = targetInst ? getParent(targetInst) : null;
      traverseTwoPhase(targetInst, accumulateDirectionalDispatches, event);
    }
  }

  function accumulateDirectDispatchesSingle(event) {
    if (event && event.dispatchConfig.registrationName) {
      var inst = event._targetInst;

      if (inst && event && event.dispatchConfig.registrationName) {
        var listener = getListener(inst, event.dispatchConfig.registrationName);
        listener && (event._dispatchListeners = accumulateInto(event._dispatchListeners, listener), event._dispatchInstances = accumulateInto(event._dispatchInstances, inst));
      }
    }
  }

  var shouldBeReleasedProperties = "dispatchConfig _targetInst nativeEvent isDefaultPrevented isPropagationStopped _dispatchListeners _dispatchInstances".split(" "),
      EventInterface = {
    type: null,
    target: null,
    currentTarget: emptyFunction.thatReturnsNull,
    eventPhase: null,
    bubbles: null,
    cancelable: null,
    timeStamp: function timeStamp(event) {
      return event.timeStamp || Date.now();
    },
    defaultPrevented: null,
    isTrusted: null
  };

  function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
    this.dispatchConfig = dispatchConfig;
    this._targetInst = targetInst;
    this.nativeEvent = nativeEvent;
    dispatchConfig = this.constructor.Interface;

    for (var propName in dispatchConfig) {
      dispatchConfig.hasOwnProperty(propName) && ((targetInst = dispatchConfig[propName]) ? this[propName] = targetInst(nativeEvent) : "target" === propName ? this.target = nativeEventTarget : this[propName] = nativeEvent[propName]);
    }

    this.isDefaultPrevented = (null != nativeEvent.defaultPrevented ? nativeEvent.defaultPrevented : !1 === nativeEvent.returnValue) ? emptyFunction.thatReturnsTrue : emptyFunction.thatReturnsFalse;
    this.isPropagationStopped = emptyFunction.thatReturnsFalse;
    return this;
  }

  babelHelpers.extends(SyntheticEvent.prototype, {
    preventDefault: function preventDefault() {
      this.defaultPrevented = !0;
      var event = this.nativeEvent;
      event && (event.preventDefault ? event.preventDefault() : "unknown" !== typeof event.returnValue && (event.returnValue = !1), this.isDefaultPrevented = emptyFunction.thatReturnsTrue);
    },
    stopPropagation: function stopPropagation() {
      var event = this.nativeEvent;
      event && (event.stopPropagation ? event.stopPropagation() : "unknown" !== typeof event.cancelBubble && (event.cancelBubble = !0), this.isPropagationStopped = emptyFunction.thatReturnsTrue);
    },
    persist: function persist() {
      this.isPersistent = emptyFunction.thatReturnsTrue;
    },
    isPersistent: emptyFunction.thatReturnsFalse,
    destructor: function destructor() {
      var Interface = this.constructor.Interface,
          propName;

      for (propName in Interface) {
        this[propName] = null;
      }

      for (Interface = 0; Interface < shouldBeReleasedProperties.length; Interface++) {
        this[shouldBeReleasedProperties[Interface]] = null;
      }
    }
  });
  SyntheticEvent.Interface = EventInterface;

  SyntheticEvent.extend = function (Interface) {
    function E() {}

    function Class() {
      return Super.apply(this, arguments);
    }

    var Super = this;
    E.prototype = Super.prototype;
    var prototype = new E();
    babelHelpers.extends(prototype, Class.prototype);
    Class.prototype = prototype;
    Class.prototype.constructor = Class;
    Class.Interface = babelHelpers.extends({}, Super.Interface, Interface);
    Class.extend = Super.extend;
    addEventPoolingTo(Class);
    return Class;
  };

  addEventPoolingTo(SyntheticEvent);

  function getPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
    if (this.eventPool.length) {
      var instance = this.eventPool.pop();
      this.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
      return instance;
    }

    return new this(dispatchConfig, targetInst, nativeEvent, nativeInst);
  }

  function releasePooledEvent(event) {
    invariant(event instanceof this, "Trying to release an event instance  into a pool of a different type.");
    event.destructor();
    10 > this.eventPool.length && this.eventPool.push(event);
  }

  function addEventPoolingTo(EventConstructor) {
    EventConstructor.eventPool = [];
    EventConstructor.getPooled = getPooledEvent;
    EventConstructor.release = releasePooledEvent;
  }

  var ResponderSyntheticEvent = SyntheticEvent.extend({
    touchHistory: function touchHistory() {
      return null;
    }
  }),
      touchBank = [],
      touchHistory = {
    touchBank: touchBank,
    numberActiveTouches: 0,
    indexOfSingleActiveTouch: -1,
    mostRecentTimeStamp: 0
  };

  function timestampForTouch(touch) {
    return touch.timeStamp || touch.timestamp;
  }

  function getTouchIdentifier(_ref) {
    _ref = _ref.identifier;
    invariant(null != _ref, "Touch object is missing identifier.");
    return _ref;
  }

  function recordTouchStart(touch) {
    var identifier = getTouchIdentifier(touch),
        touchRecord = touchBank[identifier];
    touchRecord ? (touchRecord.touchActive = !0, touchRecord.startPageX = touch.pageX, touchRecord.startPageY = touch.pageY, touchRecord.startTimeStamp = timestampForTouch(touch), touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchRecord.previousPageX = touch.pageX, touchRecord.previousPageY = touch.pageY, touchRecord.previousTimeStamp = timestampForTouch(touch)) : (touchRecord = {
      touchActive: !0,
      startPageX: touch.pageX,
      startPageY: touch.pageY,
      startTimeStamp: timestampForTouch(touch),
      currentPageX: touch.pageX,
      currentPageY: touch.pageY,
      currentTimeStamp: timestampForTouch(touch),
      previousPageX: touch.pageX,
      previousPageY: touch.pageY,
      previousTimeStamp: timestampForTouch(touch)
    }, touchBank[identifier] = touchRecord);
    touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
  }

  function recordTouchMove(touch) {
    var touchRecord = touchBank[getTouchIdentifier(touch)];
    touchRecord ? (touchRecord.touchActive = !0, touchRecord.previousPageX = touchRecord.currentPageX, touchRecord.previousPageY = touchRecord.currentPageY, touchRecord.previousTimeStamp = touchRecord.currentTimeStamp, touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch)) : console.error("Cannot record touch move without a touch start.\nTouch Move: %s\n", "Touch Bank: %s", printTouch(touch), printTouchBank());
  }

  function recordTouchEnd(touch) {
    var touchRecord = touchBank[getTouchIdentifier(touch)];
    touchRecord ? (touchRecord.touchActive = !1, touchRecord.previousPageX = touchRecord.currentPageX, touchRecord.previousPageY = touchRecord.currentPageY, touchRecord.previousTimeStamp = touchRecord.currentTimeStamp, touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch)) : console.error("Cannot record touch end without a touch start.\nTouch End: %s\n", "Touch Bank: %s", printTouch(touch), printTouchBank());
  }

  function printTouch(touch) {
    return JSON.stringify({
      identifier: touch.identifier,
      pageX: touch.pageX,
      pageY: touch.pageY,
      timestamp: timestampForTouch(touch)
    });
  }

  function printTouchBank() {
    var printed = JSON.stringify(touchBank.slice(0, 20));
    20 < touchBank.length && (printed += " (original size: " + touchBank.length + ")");
    return printed;
  }

  var ResponderTouchHistoryStore = {
    recordTouchTrack: function recordTouchTrack(topLevelType, nativeEvent) {
      if (isMoveish(topLevelType)) nativeEvent.changedTouches.forEach(recordTouchMove);else if (isStartish(topLevelType)) nativeEvent.changedTouches.forEach(recordTouchStart), touchHistory.numberActiveTouches = nativeEvent.touches.length, 1 === touchHistory.numberActiveTouches && (touchHistory.indexOfSingleActiveTouch = nativeEvent.touches[0].identifier);else if (isEndish(topLevelType) && (nativeEvent.changedTouches.forEach(recordTouchEnd), touchHistory.numberActiveTouches = nativeEvent.touches.length, 1 === touchHistory.numberActiveTouches)) for (topLevelType = 0; topLevelType < touchBank.length; topLevelType++) {
        if (nativeEvent = touchBank[topLevelType], null != nativeEvent && nativeEvent.touchActive) {
          touchHistory.indexOfSingleActiveTouch = topLevelType;
          break;
        }
      }
    },
    touchHistory: touchHistory
  };

  function accumulate(current, next) {
    invariant(null != next, "accumulate(...): Accumulated items must be not be null or undefined.");
    return null == current ? next : Array.isArray(current) ? current.concat(next) : Array.isArray(next) ? [current].concat(next) : [current, next];
  }

  var responderInst = null,
      trackedTouchCount = 0,
      previousActiveTouches = 0;

  function changeResponder(nextResponderInst, blockHostResponder) {
    var oldResponderInst = responderInst;
    responderInst = nextResponderInst;
    if (null !== ResponderEventPlugin.GlobalResponderHandler) ResponderEventPlugin.GlobalResponderHandler.onChange(oldResponderInst, nextResponderInst, blockHostResponder);
  }

  var eventTypes = {
    startShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onStartShouldSetResponder",
        captured: "onStartShouldSetResponderCapture"
      }
    },
    scrollShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onScrollShouldSetResponder",
        captured: "onScrollShouldSetResponderCapture"
      }
    },
    selectionChangeShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onSelectionChangeShouldSetResponder",
        captured: "onSelectionChangeShouldSetResponderCapture"
      }
    },
    moveShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onMoveShouldSetResponder",
        captured: "onMoveShouldSetResponderCapture"
      }
    },
    responderStart: {
      registrationName: "onResponderStart"
    },
    responderMove: {
      registrationName: "onResponderMove"
    },
    responderEnd: {
      registrationName: "onResponderEnd"
    },
    responderRelease: {
      registrationName: "onResponderRelease"
    },
    responderTerminationRequest: {
      registrationName: "onResponderTerminationRequest"
    },
    responderGrant: {
      registrationName: "onResponderGrant"
    },
    responderReject: {
      registrationName: "onResponderReject"
    },
    responderTerminate: {
      registrationName: "onResponderTerminate"
    }
  },
      ResponderEventPlugin = {
    _getResponder: function _getResponder() {
      return responderInst;
    },
    eventTypes: eventTypes,
    extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
      if (isStartish(topLevelType)) trackedTouchCount += 1;else if (isEndish(topLevelType)) if (0 <= trackedTouchCount) --trackedTouchCount;else return console.error("Ended a touch event which was not counted in `trackedTouchCount`."), null;
      ResponderTouchHistoryStore.recordTouchTrack(topLevelType, nativeEvent);

      if (targetInst && ("topScroll" === topLevelType && !nativeEvent.responderIgnoreScroll || 0 < trackedTouchCount && "topSelectionChange" === topLevelType || isStartish(topLevelType) || isMoveish(topLevelType))) {
        var JSCompiler_temp = isStartish(topLevelType) ? eventTypes.startShouldSetResponder : isMoveish(topLevelType) ? eventTypes.moveShouldSetResponder : "topSelectionChange" === topLevelType ? eventTypes.selectionChangeShouldSetResponder : eventTypes.scrollShouldSetResponder;
        if (responderInst) b: {
          var JSCompiler_temp$jscomp$0 = responderInst;

          for (var depthA = 0, tempA = JSCompiler_temp$jscomp$0; tempA; tempA = getParent(tempA)) {
            depthA++;
          }

          tempA = 0;

          for (var tempB = targetInst; tempB; tempB = getParent(tempB)) {
            tempA++;
          }

          for (; 0 < depthA - tempA;) {
            JSCompiler_temp$jscomp$0 = getParent(JSCompiler_temp$jscomp$0), depthA--;
          }

          for (; 0 < tempA - depthA;) {
            targetInst = getParent(targetInst), tempA--;
          }

          for (; depthA--;) {
            if (JSCompiler_temp$jscomp$0 === targetInst || JSCompiler_temp$jscomp$0 === targetInst.alternate) break b;
            JSCompiler_temp$jscomp$0 = getParent(JSCompiler_temp$jscomp$0);
            targetInst = getParent(targetInst);
          }

          JSCompiler_temp$jscomp$0 = null;
        } else JSCompiler_temp$jscomp$0 = targetInst;
        targetInst = JSCompiler_temp$jscomp$0 === responderInst;
        JSCompiler_temp$jscomp$0 = ResponderSyntheticEvent.getPooled(JSCompiler_temp, JSCompiler_temp$jscomp$0, nativeEvent, nativeEventTarget);
        JSCompiler_temp$jscomp$0.touchHistory = ResponderTouchHistoryStore.touchHistory;
        targetInst ? forEachAccumulated(JSCompiler_temp$jscomp$0, accumulateTwoPhaseDispatchesSingleSkipTarget) : forEachAccumulated(JSCompiler_temp$jscomp$0, accumulateTwoPhaseDispatchesSingle);

        b: {
          JSCompiler_temp = JSCompiler_temp$jscomp$0._dispatchListeners;
          targetInst = JSCompiler_temp$jscomp$0._dispatchInstances;
          if (Array.isArray(JSCompiler_temp)) for (depthA = 0; depthA < JSCompiler_temp.length && !JSCompiler_temp$jscomp$0.isPropagationStopped(); depthA++) {
            if (JSCompiler_temp[depthA](JSCompiler_temp$jscomp$0, targetInst[depthA])) {
              JSCompiler_temp = targetInst[depthA];
              break b;
            }
          } else if (JSCompiler_temp && JSCompiler_temp(JSCompiler_temp$jscomp$0, targetInst)) {
            JSCompiler_temp = targetInst;
            break b;
          }
          JSCompiler_temp = null;
        }

        JSCompiler_temp$jscomp$0._dispatchInstances = null;
        JSCompiler_temp$jscomp$0._dispatchListeners = null;
        JSCompiler_temp$jscomp$0.isPersistent() || JSCompiler_temp$jscomp$0.constructor.release(JSCompiler_temp$jscomp$0);
        JSCompiler_temp && JSCompiler_temp !== responderInst ? (JSCompiler_temp$jscomp$0 = void 0, targetInst = ResponderSyntheticEvent.getPooled(eventTypes.responderGrant, JSCompiler_temp, nativeEvent, nativeEventTarget), targetInst.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(targetInst, accumulateDirectDispatchesSingle), depthA = !0 === executeDirectDispatch(targetInst), responderInst ? (tempA = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminationRequest, responderInst, nativeEvent, nativeEventTarget), tempA.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(tempA, accumulateDirectDispatchesSingle), tempB = !tempA._dispatchListeners || executeDirectDispatch(tempA), tempA.isPersistent() || tempA.constructor.release(tempA), tempB ? (tempA = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminate, responderInst, nativeEvent, nativeEventTarget), tempA.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(tempA, accumulateDirectDispatchesSingle), JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, [targetInst, tempA]), changeResponder(JSCompiler_temp, depthA)) : (JSCompiler_temp = ResponderSyntheticEvent.getPooled(eventTypes.responderReject, JSCompiler_temp, nativeEvent, nativeEventTarget), JSCompiler_temp.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(JSCompiler_temp, accumulateDirectDispatchesSingle), JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, JSCompiler_temp))) : (JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, targetInst), changeResponder(JSCompiler_temp, depthA)), JSCompiler_temp = JSCompiler_temp$jscomp$0) : JSCompiler_temp = null;
      } else JSCompiler_temp = null;

      JSCompiler_temp$jscomp$0 = responderInst && isStartish(topLevelType);
      targetInst = responderInst && isMoveish(topLevelType);
      depthA = responderInst && isEndish(topLevelType);
      if (JSCompiler_temp$jscomp$0 = JSCompiler_temp$jscomp$0 ? eventTypes.responderStart : targetInst ? eventTypes.responderMove : depthA ? eventTypes.responderEnd : null) JSCompiler_temp$jscomp$0 = ResponderSyntheticEvent.getPooled(JSCompiler_temp$jscomp$0, responderInst, nativeEvent, nativeEventTarget), JSCompiler_temp$jscomp$0.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(JSCompiler_temp$jscomp$0, accumulateDirectDispatchesSingle), JSCompiler_temp = accumulate(JSCompiler_temp, JSCompiler_temp$jscomp$0);
      JSCompiler_temp$jscomp$0 = responderInst && "topTouchCancel" === topLevelType;
      if (topLevelType = responderInst && !JSCompiler_temp$jscomp$0 && isEndish(topLevelType)) a: {
        if ((topLevelType = nativeEvent.touches) && 0 !== topLevelType.length) for (targetInst = 0; targetInst < topLevelType.length; targetInst++) {
          if (depthA = topLevelType[targetInst].target, null !== depthA && void 0 !== depthA && 0 !== depthA) {
            tempA = getInstanceFromNode(depthA);

            b: {
              for (depthA = responderInst; tempA;) {
                if (depthA === tempA || depthA === tempA.alternate) {
                  depthA = !0;
                  break b;
                }

                tempA = getParent(tempA);
              }

              depthA = !1;
            }

            if (depthA) {
              topLevelType = !1;
              break a;
            }
          }
        }
        topLevelType = !0;
      }
      if (topLevelType = JSCompiler_temp$jscomp$0 ? eventTypes.responderTerminate : topLevelType ? eventTypes.responderRelease : null) nativeEvent = ResponderSyntheticEvent.getPooled(topLevelType, responderInst, nativeEvent, nativeEventTarget), nativeEvent.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(nativeEvent, accumulateDirectDispatchesSingle), JSCompiler_temp = accumulate(JSCompiler_temp, nativeEvent), changeResponder(null);
      nativeEvent = ResponderTouchHistoryStore.touchHistory.numberActiveTouches;
      if (ResponderEventPlugin.GlobalInteractionHandler && nativeEvent !== previousActiveTouches) ResponderEventPlugin.GlobalInteractionHandler.onChange(nativeEvent);
      previousActiveTouches = nativeEvent;
      return JSCompiler_temp;
    },
    GlobalResponderHandler: null,
    GlobalInteractionHandler: null,
    injection: {
      injectGlobalResponderHandler: function injectGlobalResponderHandler(GlobalResponderHandler) {
        ResponderEventPlugin.GlobalResponderHandler = GlobalResponderHandler;
      },
      injectGlobalInteractionHandler: function injectGlobalInteractionHandler(GlobalInteractionHandler) {
        ResponderEventPlugin.GlobalInteractionHandler = GlobalInteractionHandler;
      }
    }
  },
      customBubblingEventTypes = {},
      customDirectEventTypes = {},
      ReactNativeBridgeEventPlugin = {
    eventTypes: {},
    extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
      if (null == targetInst) return null;
      var bubbleDispatchConfig = customBubblingEventTypes[topLevelType],
          directDispatchConfig = customDirectEventTypes[topLevelType];
      invariant(bubbleDispatchConfig || directDispatchConfig, 'Unsupported top level event type "%s" dispatched', topLevelType);
      topLevelType = SyntheticEvent.getPooled(bubbleDispatchConfig || directDispatchConfig, targetInst, nativeEvent, nativeEventTarget);
      if (bubbleDispatchConfig) forEachAccumulated(topLevelType, accumulateTwoPhaseDispatchesSingle);else if (directDispatchConfig) forEachAccumulated(topLevelType, accumulateDirectDispatchesSingle);else return null;
      return topLevelType;
    },
    processEventTypes: function processEventTypes(viewConfig) {
      var bubblingEventTypes = viewConfig.bubblingEventTypes;
      viewConfig = viewConfig.directEventTypes;
      if (null != bubblingEventTypes) for (var _topLevelType in bubblingEventTypes) {
        null == customBubblingEventTypes[_topLevelType] && (ReactNativeBridgeEventPlugin.eventTypes[_topLevelType] = customBubblingEventTypes[_topLevelType] = bubblingEventTypes[_topLevelType]);
      }
      if (null != viewConfig) for (var _topLevelType2 in viewConfig) {
        null == customDirectEventTypes[_topLevelType2] && (ReactNativeBridgeEventPlugin.eventTypes[_topLevelType2] = customDirectEventTypes[_topLevelType2] = viewConfig[_topLevelType2]);
      }
    }
  },
      instanceCache = {},
      instanceProps = {};

  function uncacheFiberNode(tag) {
    delete instanceCache[tag];
    delete instanceProps[tag];
  }

  function getInstanceFromTag(tag) {
    return "number" === typeof tag ? instanceCache[tag] || null : tag;
  }

  var ReactNativeComponentTree = Object.freeze({
    precacheFiberNode: function precacheFiberNode(hostInst, tag) {
      instanceCache[tag] = hostInst;
    },
    uncacheFiberNode: uncacheFiberNode,
    getClosestInstanceFromNode: getInstanceFromTag,
    getInstanceFromNode: getInstanceFromTag,
    getNodeFromInstance: function getNodeFromInstance(inst) {
      var tag = inst.stateNode._nativeTag;
      void 0 === tag && (tag = inst.stateNode.canonical._nativeTag);
      invariant(tag, "All native instances should have a tag.");
      return tag;
    },
    getFiberCurrentPropsFromNode: function getFiberCurrentPropsFromNode(stateNode) {
      return instanceProps[stateNode._nativeTag] || null;
    },
    updateFiberProps: function updateFiberProps(tag, props) {
      instanceProps[tag] = props;
    }
  });
  injection.injectEventPluginOrder(["ResponderEventPlugin", "ReactNativeBridgeEventPlugin"]);
  getFiberCurrentPropsFromNode = ReactNativeComponentTree.getFiberCurrentPropsFromNode;
  getInstanceFromNode = ReactNativeComponentTree.getInstanceFromNode;
  getNodeFromInstance = ReactNativeComponentTree.getNodeFromInstance;
  ResponderEventPlugin.injection.injectGlobalResponderHandler({
    onChange: function onChange(from, to, blockNativeResponder) {
      null !== to ? UIManager.setJSResponder(to.stateNode._nativeTag, blockNativeResponder) : UIManager.clearJSResponder();
    }
  });
  injection.injectEventPluginsByName({
    ResponderEventPlugin: ResponderEventPlugin,
    ReactNativeBridgeEventPlugin: ReactNativeBridgeEventPlugin
  });
  var restoreTarget = null,
      restoreQueue = null;

  function restoreStateOfTarget(target) {
    if (target = getInstanceFromNode(target)) {
      invariant(null, "Fiber needs to be injected to handle a fiber target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
      var props = getFiberCurrentPropsFromNode(target.stateNode);
      null.restoreControlledState(target.stateNode, target.type, props);
    }
  }

  function _batchedUpdates(fn, bookkeeping) {
    return fn(bookkeeping);
  }

  function _flushInteractiveUpdates() {}

  var isBatching = !1;

  function batchedUpdates(fn, bookkeeping) {
    if (isBatching) return fn(bookkeeping);
    isBatching = !0;

    try {
      return _batchedUpdates(fn, bookkeeping);
    } finally {
      if (isBatching = !1, null !== restoreTarget || null !== restoreQueue) if (_flushInteractiveUpdates(), restoreTarget && (bookkeeping = restoreTarget, fn = restoreQueue, restoreQueue = restoreTarget = null, restoreStateOfTarget(bookkeeping), fn)) for (bookkeeping = 0; bookkeeping < fn.length; bookkeeping++) {
        restoreStateOfTarget(fn[bookkeeping]);
      }
    }
  }

  var ReactNativeTagHandles = {
    tagsStartAt: 1,
    tagCount: 1,
    allocateTag: function allocateTag() {
      for (; this.reactTagIsNativeTopRootID(ReactNativeTagHandles.tagCount);) {
        ReactNativeTagHandles.tagCount++;
      }

      var tag = ReactNativeTagHandles.tagCount;
      ReactNativeTagHandles.tagCount++;
      return tag;
    },
    assertRootTag: function assertRootTag(tag) {
      invariant(this.reactTagIsNativeTopRootID(tag), "Expect a native root tag, instead got %s", tag);
    },
    reactTagIsNativeTopRootID: function reactTagIsNativeTopRootID(reactTag) {
      return 1 === reactTag % 10;
    }
  },
      EMPTY_NATIVE_EVENT = {};

  function _receiveRootNodeIDEvent(rootNodeID, topLevelType, nativeEventParam) {
    var nativeEvent = nativeEventParam || EMPTY_NATIVE_EVENT,
        inst = getInstanceFromTag(rootNodeID);
    batchedUpdates(function () {
      var events = nativeEvent.target;

      for (var events$jscomp$0 = null, i = 0; i < plugins.length; i++) {
        var possiblePlugin = plugins[i];
        possiblePlugin && (possiblePlugin = possiblePlugin.extractEvents(topLevelType, inst, nativeEvent, events)) && (events$jscomp$0 = accumulateInto(events$jscomp$0, possiblePlugin));
      }

      events = events$jscomp$0;
      null !== events && (eventQueue = accumulateInto(eventQueue, events));
      events = eventQueue;
      eventQueue = null;
      events && (forEachAccumulated(events, executeDispatchesAndReleaseTopLevel), invariant(!eventQueue, "processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented."), ReactErrorUtils.rethrowCaughtError());
    });
  }

  var ReactNativeEventEmitter = Object.freeze({
    getListener: getListener,
    registrationNames: registrationNameModules,
    _receiveRootNodeIDEvent: _receiveRootNodeIDEvent,
    receiveEvent: function receiveEvent(rootNodeID, topLevelType, nativeEventParam) {
      _receiveRootNodeIDEvent(rootNodeID, topLevelType, nativeEventParam);
    },
    receiveTouches: function receiveTouches(eventTopLevelType, touches, changedIndices) {
      if ("topTouchEnd" === eventTopLevelType || "topTouchCancel" === eventTopLevelType) {
        var JSCompiler_temp = [];

        for (var i = 0; i < changedIndices.length; i++) {
          var index = changedIndices[i];
          JSCompiler_temp.push(touches[index]);
          touches[index] = null;
        }

        for (i = changedIndices = 0; i < touches.length; i++) {
          index = touches[i], null !== index && (touches[changedIndices++] = index);
        }

        touches.length = changedIndices;
      } else for (JSCompiler_temp = [], i = 0; i < changedIndices.length; i++) {
        JSCompiler_temp.push(touches[changedIndices[i]]);
      }

      for (changedIndices = 0; changedIndices < JSCompiler_temp.length; changedIndices++) {
        i = JSCompiler_temp[changedIndices];
        i.changedTouches = JSCompiler_temp;
        i.touches = touches;
        index = null;
        var target = i.target;
        null === target || void 0 === target || target < ReactNativeTagHandles.tagsStartAt || (index = target);

        _receiveRootNodeIDEvent(index, eventTopLevelType, i);
      }
    }
  });
  RCTEventEmitter.register(ReactNativeEventEmitter);
  var hasSymbol = "function" === typeof Symbol && Symbol["for"],
      REACT_ELEMENT_TYPE = hasSymbol ? Symbol["for"]("react.element") : 60103,
      REACT_CALL_TYPE = hasSymbol ? Symbol["for"]("react.call") : 60104,
      REACT_RETURN_TYPE = hasSymbol ? Symbol["for"]("react.return") : 60105,
      REACT_PORTAL_TYPE = hasSymbol ? Symbol["for"]("react.portal") : 60106,
      REACT_FRAGMENT_TYPE = hasSymbol ? Symbol["for"]("react.fragment") : 60107,
      REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol["for"]("react.strict_mode") : 60108,
      REACT_PROVIDER_TYPE = hasSymbol ? Symbol["for"]("react.provider") : 60109,
      REACT_CONTEXT_TYPE = hasSymbol ? Symbol["for"]("react.context") : 60110,
      REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol["for"]("react.async_mode") : 60111,
      MAYBE_ITERATOR_SYMBOL = "function" === typeof Symbol && (typeof Symbol === "function" ? Symbol.iterator : "@@iterator");

  function getIteratorFn(maybeIterable) {
    if (null === maybeIterable || "undefined" === typeof maybeIterable) return null;
    maybeIterable = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable["@@iterator"];
    return "function" === typeof maybeIterable ? maybeIterable : null;
  }

  function _createPortal(children, containerInfo, implementation) {
    var key = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
    return {
      $$typeof: REACT_PORTAL_TYPE,
      key: null == key ? null : "" + key,
      children: children,
      containerInfo: containerInfo,
      implementation: implementation
    };
  }

  var TouchHistoryMath = {
    centroidDimension: function centroidDimension(touchHistory, touchesChangedAfter, isXAxis, ofCurrent) {
      var touchBank = touchHistory.touchBank,
          total = 0,
          count = 0;
      touchHistory = 1 === touchHistory.numberActiveTouches ? touchHistory.touchBank[touchHistory.indexOfSingleActiveTouch] : null;
      if (null !== touchHistory) touchHistory.touchActive && touchHistory.currentTimeStamp > touchesChangedAfter && (total += ofCurrent && isXAxis ? touchHistory.currentPageX : ofCurrent && !isXAxis ? touchHistory.currentPageY : !ofCurrent && isXAxis ? touchHistory.previousPageX : touchHistory.previousPageY, count = 1);else for (touchHistory = 0; touchHistory < touchBank.length; touchHistory++) {
        var touchTrack = touchBank[touchHistory];
        null !== touchTrack && void 0 !== touchTrack && touchTrack.touchActive && touchTrack.currentTimeStamp >= touchesChangedAfter && (total += ofCurrent && isXAxis ? touchTrack.currentPageX : ofCurrent && !isXAxis ? touchTrack.currentPageY : !ofCurrent && isXAxis ? touchTrack.previousPageX : touchTrack.previousPageY, count++);
      }
      return 0 < count ? total / count : TouchHistoryMath.noCentroid;
    },
    currentCentroidXOfTouchesChangedAfter: function currentCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
      return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, !0, !0);
    },
    currentCentroidYOfTouchesChangedAfter: function currentCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
      return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, !1, !0);
    },
    previousCentroidXOfTouchesChangedAfter: function previousCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
      return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, !0, !1);
    },
    previousCentroidYOfTouchesChangedAfter: function previousCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
      return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, !1, !1);
    },
    currentCentroidX: function currentCentroidX(touchHistory) {
      return TouchHistoryMath.centroidDimension(touchHistory, 0, !0, !0);
    },
    currentCentroidY: function currentCentroidY(touchHistory) {
      return TouchHistoryMath.centroidDimension(touchHistory, 0, !1, !0);
    },
    noCentroid: -1
  },
      objects = {},
      uniqueID = 1,
      emptyObject$2 = {},
      ReactNativePropRegistry = function () {
    function ReactNativePropRegistry() {
      if (!(this instanceof ReactNativePropRegistry)) throw new TypeError("Cannot call a class as a function");
    }

    ReactNativePropRegistry.register = function (object) {
      var id = ++uniqueID;
      objects[id] = object;
      return id;
    };

    ReactNativePropRegistry.getByID = function (id) {
      if (!id) return emptyObject$2;
      var object = objects[id];
      return object ? object : (console.warn("Invalid style with id `" + id + "`. Skipping ..."), emptyObject$2);
    };

    return ReactNativePropRegistry;
  }(),
      emptyObject$1 = {},
      removedKeys = null,
      removedKeyCount = 0;

  function resolveObject(idOrObject) {
    return "number" === typeof idOrObject ? ReactNativePropRegistry.getByID(idOrObject) : idOrObject;
  }

  function restoreDeletedValuesInNestedArray(updatePayload, node, validAttributes) {
    if (Array.isArray(node)) for (var i = node.length; i-- && 0 < removedKeyCount;) {
      restoreDeletedValuesInNestedArray(updatePayload, node[i], validAttributes);
    } else if (node && 0 < removedKeyCount) for (i in node = resolveObject(node), removedKeys) {
      if (removedKeys[i]) {
        var _nextProp = node[i];

        if (void 0 !== _nextProp) {
          var attributeConfig = validAttributes[i];

          if (attributeConfig) {
            "function" === typeof _nextProp && (_nextProp = !0);
            "undefined" === typeof _nextProp && (_nextProp = null);
            if ("object" !== typeof attributeConfig) updatePayload[i] = _nextProp;else if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) _nextProp = "function" === typeof attributeConfig.process ? attributeConfig.process(_nextProp) : _nextProp, updatePayload[i] = _nextProp;
            removedKeys[i] = !1;
            removedKeyCount--;
          }
        }
      }
    }
  }

  function diffNestedProperty(updatePayload, prevProp, nextProp, validAttributes) {
    if (!updatePayload && prevProp === nextProp) return updatePayload;
    if (!prevProp || !nextProp) return nextProp ? addNestedProperty(updatePayload, nextProp, validAttributes) : prevProp ? clearNestedProperty(updatePayload, prevProp, validAttributes) : updatePayload;
    if (!Array.isArray(prevProp) && !Array.isArray(nextProp)) return diffProperties(updatePayload, resolveObject(prevProp), resolveObject(nextProp), validAttributes);

    if (Array.isArray(prevProp) && Array.isArray(nextProp)) {
      var minLength = prevProp.length < nextProp.length ? prevProp.length : nextProp.length,
          i;

      for (i = 0; i < minLength; i++) {
        updatePayload = diffNestedProperty(updatePayload, prevProp[i], nextProp[i], validAttributes);
      }

      for (; i < prevProp.length; i++) {
        updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
      }

      for (; i < nextProp.length; i++) {
        updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
      }

      return updatePayload;
    }

    return Array.isArray(prevProp) ? diffProperties(updatePayload, flattenStyle(prevProp), resolveObject(nextProp), validAttributes) : diffProperties(updatePayload, resolveObject(prevProp), flattenStyle(nextProp), validAttributes);
  }

  function addNestedProperty(updatePayload, nextProp, validAttributes) {
    if (!nextProp) return updatePayload;
    if (!Array.isArray(nextProp)) return nextProp = resolveObject(nextProp), diffProperties(updatePayload, emptyObject$1, nextProp, validAttributes);

    for (var i = 0; i < nextProp.length; i++) {
      updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
    }

    return updatePayload;
  }

  function clearNestedProperty(updatePayload, prevProp, validAttributes) {
    if (!prevProp) return updatePayload;
    if (!Array.isArray(prevProp)) return prevProp = resolveObject(prevProp), diffProperties(updatePayload, prevProp, emptyObject$1, validAttributes);

    for (var i = 0; i < prevProp.length; i++) {
      updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
    }

    return updatePayload;
  }

  function diffProperties(updatePayload, prevProps, nextProps, validAttributes) {
    var attributeConfig, propKey;

    for (propKey in nextProps) {
      if (attributeConfig = validAttributes[propKey]) {
        var prevProp = prevProps[propKey];
        var nextProp = nextProps[propKey];
        "function" === typeof nextProp && (nextProp = !0, "function" === typeof prevProp && (prevProp = !0));
        "undefined" === typeof nextProp && (nextProp = null, "undefined" === typeof prevProp && (prevProp = null));
        removedKeys && (removedKeys[propKey] = !1);
        if (updatePayload && void 0 !== updatePayload[propKey]) {
          if ("object" !== typeof attributeConfig) updatePayload[propKey] = nextProp;else {
            if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) attributeConfig = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, updatePayload[propKey] = attributeConfig;
          }
        } else if (prevProp !== nextProp) if ("object" !== typeof attributeConfig) ("object" !== typeof nextProp || null === nextProp || deepDiffer(prevProp, nextProp)) && ((updatePayload || (updatePayload = {}))[propKey] = nextProp);else if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) {
          if (void 0 === prevProp || ("function" === typeof attributeConfig.diff ? attributeConfig.diff(prevProp, nextProp) : "object" !== typeof nextProp || null === nextProp || deepDiffer(prevProp, nextProp))) attributeConfig = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, (updatePayload || (updatePayload = {}))[propKey] = attributeConfig;
        } else removedKeys = null, removedKeyCount = 0, updatePayload = diffNestedProperty(updatePayload, prevProp, nextProp, attributeConfig), 0 < removedKeyCount && updatePayload && (restoreDeletedValuesInNestedArray(updatePayload, nextProp, attributeConfig), removedKeys = null);
      }
    }

    for (var _propKey in prevProps) {
      void 0 === nextProps[_propKey] && (!(attributeConfig = validAttributes[_propKey]) || updatePayload && void 0 !== updatePayload[_propKey] || (prevProp = prevProps[_propKey], void 0 !== prevProp && ("object" !== typeof attributeConfig || "function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process ? ((updatePayload || (updatePayload = {}))[_propKey] = null, removedKeys || (removedKeys = {}), removedKeys[_propKey] || (removedKeys[_propKey] = !0, removedKeyCount++)) : updatePayload = clearNestedProperty(updatePayload, prevProp, attributeConfig))));
    }

    return updatePayload;
  }

  function mountSafeCallback(context, callback) {
    return function () {
      if (callback) {
        if ("boolean" === typeof context.__isMounted) {
          if (!context.__isMounted) return;
        } else if ("function" === typeof context.isMounted && !context.isMounted()) return;

        return callback.apply(context, arguments);
      }
    };
  }

  var ReactCurrentOwner = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner;

  function getComponentName(fiber) {
    fiber = fiber.type;
    if ("function" === typeof fiber) return fiber.displayName || fiber.name;
    if ("string" === typeof fiber) return fiber;

    switch (fiber) {
      case REACT_FRAGMENT_TYPE:
        return "ReactFragment";

      case REACT_PORTAL_TYPE:
        return "ReactPortal";

      case REACT_CALL_TYPE:
        return "ReactCall";

      case REACT_RETURN_TYPE:
        return "ReactReturn";
    }

    return null;
  }

  function findHostInstance() {
    return null;
  }

  function findNodeHandle(componentOrHandle) {
    if (null == componentOrHandle) return null;
    if ("number" === typeof componentOrHandle) return componentOrHandle;
    var internalInstance = componentOrHandle._reactInternalFiber;
    if (internalInstance) return findHostInstance(internalInstance) || null;
    if (componentOrHandle) return componentOrHandle;
    invariant("object" === typeof componentOrHandle && "_nativeTag" in componentOrHandle || null != componentOrHandle.render && "function" === typeof componentOrHandle.render, "findNodeHandle(...): Argument is not a component (type: %s, keys: %s)", typeof componentOrHandle, Object.keys(componentOrHandle));
    invariant(!1, "findNodeHandle(...): Unable to find node handle for unmounted component.");
  }

  function findNumericNodeHandleFiber(componentOrHandle) {
    componentOrHandle = findNodeHandle(componentOrHandle);
    return null == componentOrHandle || "number" === typeof componentOrHandle ? componentOrHandle : componentOrHandle._nativeTag;
  }

  function _inherits(subClass, superClass) {
    if ("function" !== typeof superClass && null !== superClass) throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: !1,
        writable: !0,
        configurable: !0
      }
    });
    superClass && (Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass);
  }

  var ReactNativeComponent = function (_React$Component) {
    function ReactNativeComponent() {
      if (!(this instanceof ReactNativeComponent)) throw new TypeError("Cannot call a class as a function");

      var call = _React$Component.apply(this, arguments);

      if (!this) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      return !call || "object" !== typeof call && "function" !== typeof call ? this : call;
    }

    _inherits(ReactNativeComponent, _React$Component);

    ReactNativeComponent.prototype.blur = function () {
      TextInputState.blurTextInput(findNumericNodeHandleFiber(this));
    };

    ReactNativeComponent.prototype.focus = function () {
      TextInputState.focusTextInput(findNumericNodeHandleFiber(this));
    };

    ReactNativeComponent.prototype.measure = function (callback) {
      UIManager.measure(findNumericNodeHandleFiber(this), mountSafeCallback(this, callback));
    };

    ReactNativeComponent.prototype.measureInWindow = function (callback) {
      UIManager.measureInWindow(findNumericNodeHandleFiber(this), mountSafeCallback(this, callback));
    };

    ReactNativeComponent.prototype.measureLayout = function (relativeToNativeNode, onSuccess, onFail) {
      UIManager.measureLayout(findNumericNodeHandleFiber(this), relativeToNativeNode, mountSafeCallback(this, onFail), mountSafeCallback(this, onSuccess));
    };

    ReactNativeComponent.prototype.setNativeProps = function (nativeProps) {
      var maybeInstance = void 0;

      try {
        maybeInstance = findNodeHandle(this);
      } catch (error) {}

      if (null != maybeInstance) {
        var viewConfig = maybeInstance.viewConfig || maybeInstance.canonical.viewConfig;
        nativeProps = diffProperties(null, emptyObject$1, nativeProps, viewConfig.validAttributes);
        null != nativeProps && UIManager.updateView(maybeInstance._nativeTag, viewConfig.uiViewClassName, nativeProps);
      }
    };

    return ReactNativeComponent;
  }(React.Component);

  function isFiberMountedImpl(fiber) {
    var node = fiber;
    if (fiber.alternate) for (; node["return"];) {
      node = node["return"];
    } else {
      if (0 !== (node.effectTag & 2)) return 1;

      for (; node["return"];) {
        if (node = node["return"], 0 !== (node.effectTag & 2)) return 1;
      }
    }
    return 3 === node.tag ? 2 : 3;
  }

  function isMounted(component) {
    return (component = component._reactInternalFiber) ? 2 === isFiberMountedImpl(component) : !1;
  }

  function assertIsMounted(fiber) {
    invariant(2 === isFiberMountedImpl(fiber), "Unable to find node on an unmounted component.");
  }

  function findCurrentFiberUsingSlowPath(fiber) {
    var alternate = fiber.alternate;
    if (!alternate) return alternate = isFiberMountedImpl(fiber), invariant(3 !== alternate, "Unable to find node on an unmounted component."), 1 === alternate ? null : fiber;

    for (var a = fiber, b = alternate;;) {
      var parentA = a["return"],
          parentB = parentA ? parentA.alternate : null;
      if (!parentA || !parentB) break;

      if (parentA.child === parentB.child) {
        for (var child = parentA.child; child;) {
          if (child === a) return assertIsMounted(parentA), fiber;
          if (child === b) return assertIsMounted(parentA), alternate;
          child = child.sibling;
        }

        invariant(!1, "Unable to find node on an unmounted component.");
      }

      if (a["return"] !== b["return"]) a = parentA, b = parentB;else {
        child = !1;

        for (var _child = parentA.child; _child;) {
          if (_child === a) {
            child = !0;
            a = parentA;
            b = parentB;
            break;
          }

          if (_child === b) {
            child = !0;
            b = parentA;
            a = parentB;
            break;
          }

          _child = _child.sibling;
        }

        if (!child) {
          for (_child = parentB.child; _child;) {
            if (_child === a) {
              child = !0;
              a = parentB;
              b = parentA;
              break;
            }

            if (_child === b) {
              child = !0;
              b = parentB;
              a = parentA;
              break;
            }

            _child = _child.sibling;
          }

          invariant(child, "Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
        }
      }
      invariant(a.alternate === b, "Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
    }

    invariant(3 === a.tag, "Unable to find node on an unmounted component.");
    return a.stateNode.current === a ? fiber : alternate;
  }

  function findCurrentHostFiber(parent) {
    parent = findCurrentFiberUsingSlowPath(parent);
    if (!parent) return null;

    for (var node = parent;;) {
      if (5 === node.tag || 6 === node.tag) return node;
      if (node.child) node.child["return"] = node, node = node.child;else {
        if (node === parent) break;

        for (; !node.sibling;) {
          if (!node["return"] || node["return"] === parent) return null;
          node = node["return"];
        }

        node.sibling["return"] = node["return"];
        node = node.sibling;
      }
    }

    return null;
  }

  function findCurrentHostFiberWithNoPortals(parent) {
    parent = findCurrentFiberUsingSlowPath(parent);
    if (!parent) return null;

    for (var node = parent;;) {
      if (5 === node.tag || 6 === node.tag) return node;
      if (node.child && 4 !== node.tag) node.child["return"] = node, node = node.child;else {
        if (node === parent) break;

        for (; !node.sibling;) {
          if (!node["return"] || node["return"] === parent) return null;
          node = node["return"];
        }

        node.sibling["return"] = node["return"];
        node = node.sibling;
      }
    }

    return null;
  }

  var valueStack = [],
      index = -1;

  function pop(cursor) {
    0 > index || (cursor.current = valueStack[index], valueStack[index] = null, index--);
  }

  function push(cursor, value) {
    index++;
    valueStack[index] = cursor.current;
    cursor.current = value;
  }

  function getStackAddendumByWorkInProgressFiber(workInProgress) {
    var info = "";

    do {
      a: switch (workInProgress.tag) {
        case 0:
        case 1:
        case 2:
        case 5:
          var owner = workInProgress._debugOwner,
              source = workInProgress._debugSource;
          var JSCompiler_inline_result = getComponentName(workInProgress);
          var ownerName = null;
          owner && (ownerName = getComponentName(owner));
          owner = source;
          JSCompiler_inline_result = "\n    in " + (JSCompiler_inline_result || "Unknown") + (owner ? " (at " + owner.fileName.replace(/^.*[\\\/]/, "") + ":" + owner.lineNumber + ")" : ownerName ? " (created by " + ownerName + ")" : "");
          break a;

        default:
          JSCompiler_inline_result = "";
      }

      info += JSCompiler_inline_result;
      workInProgress = workInProgress["return"];
    } while (workInProgress);

    return info;
  }

  var _require = _require2(_dependencyMap[12], "ReactFeatureFlags"),
      enableGetDerivedStateFromCatch = _require.enableGetDerivedStateFromCatch,
      debugRenderPhaseSideEffects = _require.debugRenderPhaseSideEffects,
      debugRenderPhaseSideEffectsForStrictMode = _require.debugRenderPhaseSideEffectsForStrictMode;

  new Set();
  var contextStackCursor = {
    current: emptyObject
  },
      didPerformWorkStackCursor = {
    current: !1
  },
      previousContext = emptyObject;

  function getUnmaskedContext(workInProgress) {
    return isContextProvider(workInProgress) ? previousContext : contextStackCursor.current;
  }

  function getMaskedContext(workInProgress, unmaskedContext) {
    var contextTypes = workInProgress.type.contextTypes;
    if (!contextTypes) return emptyObject;
    var instance = workInProgress.stateNode;
    if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) return instance.__reactInternalMemoizedMaskedChildContext;
    var context = {},
        key;

    for (key in contextTypes) {
      context[key] = unmaskedContext[key];
    }

    instance && (workInProgress = workInProgress.stateNode, workInProgress.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext, workInProgress.__reactInternalMemoizedMaskedChildContext = context);
    return context;
  }

  function isContextProvider(fiber) {
    return 2 === fiber.tag && null != fiber.type.childContextTypes;
  }

  function popContextProvider(fiber) {
    isContextProvider(fiber) && (pop(didPerformWorkStackCursor, fiber), pop(contextStackCursor, fiber));
  }

  function pushTopLevelContextObject(fiber, context, didChange) {
    invariant(null == contextStackCursor.cursor, "Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
    push(contextStackCursor, context, fiber);
    push(didPerformWorkStackCursor, didChange, fiber);
  }

  function processChildContext(fiber, parentContext) {
    var instance = fiber.stateNode,
        childContextTypes = fiber.type.childContextTypes;
    if ("function" !== typeof instance.getChildContext) return parentContext;
    instance = instance.getChildContext();

    for (var contextKey in instance) {
      invariant(contextKey in childContextTypes, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', getComponentName(fiber) || "Unknown", contextKey);
    }

    return babelHelpers.extends({}, parentContext, instance);
  }

  function pushContextProvider(workInProgress) {
    if (!isContextProvider(workInProgress)) return !1;
    var instance = workInProgress.stateNode;
    instance = instance && instance.__reactInternalMemoizedMergedChildContext || emptyObject;
    previousContext = contextStackCursor.current;
    push(contextStackCursor, instance, workInProgress);
    push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
    return !0;
  }

  function invalidateContextProvider(workInProgress, didChange) {
    var instance = workInProgress.stateNode;
    invariant(instance, "Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");

    if (didChange) {
      var mergedContext = processChildContext(workInProgress, previousContext);
      instance.__reactInternalMemoizedMergedChildContext = mergedContext;
      pop(didPerformWorkStackCursor, workInProgress);
      pop(contextStackCursor, workInProgress);
      push(contextStackCursor, mergedContext, workInProgress);
    } else pop(didPerformWorkStackCursor, workInProgress);

    push(didPerformWorkStackCursor, didChange, workInProgress);
  }

  function FiberNode(tag, pendingProps, key, mode) {
    this.tag = tag;
    this.key = key;
    this.stateNode = this.type = null;
    this.sibling = this.child = this["return"] = null;
    this.index = 0;
    this.ref = null;
    this.pendingProps = pendingProps;
    this.memoizedState = this.updateQueue = this.memoizedProps = null;
    this.mode = mode;
    this.effectTag = 0;
    this.lastEffect = this.firstEffect = this.nextEffect = null;
    this.expirationTime = 0;
    this.alternate = null;
  }

  function createWorkInProgress(current, pendingProps, expirationTime) {
    var workInProgress = current.alternate;
    null === workInProgress ? (workInProgress = new FiberNode(current.tag, pendingProps, current.key, current.mode), workInProgress.type = current.type, workInProgress.stateNode = current.stateNode, workInProgress.alternate = current, current.alternate = workInProgress) : (workInProgress.pendingProps = pendingProps, workInProgress.effectTag = 0, workInProgress.nextEffect = null, workInProgress.firstEffect = null, workInProgress.lastEffect = null);
    workInProgress.expirationTime = expirationTime;
    workInProgress.child = current.child;
    workInProgress.memoizedProps = current.memoizedProps;
    workInProgress.memoizedState = current.memoizedState;
    workInProgress.updateQueue = current.updateQueue;
    workInProgress.sibling = current.sibling;
    workInProgress.index = current.index;
    workInProgress.ref = current.ref;
    return workInProgress;
  }

  function createFiberFromElement(element, mode, expirationTime) {
    var type = element.type,
        key = element.key;
    element = element.props;
    var fiberTag = void 0;
    if ("function" === typeof type) fiberTag = type.prototype && type.prototype.isReactComponent ? 2 : 0;else if ("string" === typeof type) fiberTag = 5;else switch (type) {
      case REACT_FRAGMENT_TYPE:
        return createFiberFromFragment(element.children, mode, expirationTime, key);

      case REACT_ASYNC_MODE_TYPE:
        fiberTag = 11;
        mode |= 3;
        break;

      case REACT_STRICT_MODE_TYPE:
        fiberTag = 11;
        mode |= 2;
        break;

      case REACT_CALL_TYPE:
        fiberTag = 7;
        break;

      case REACT_RETURN_TYPE:
        fiberTag = 9;
        break;

      default:
        if ("object" === typeof type && null !== type) switch (type.$$typeof) {
          case REACT_PROVIDER_TYPE:
            fiberTag = 13;
            break;

          case REACT_CONTEXT_TYPE:
            fiberTag = 12;
            break;

          default:
            if ("number" === typeof type.tag) return mode = type, mode.pendingProps = element, mode.expirationTime = expirationTime, mode;
            throwOnInvalidElementType(type, null);
        } else throwOnInvalidElementType(type, null);
    }
    mode = new FiberNode(fiberTag, element, key, mode);
    mode.type = type;
    mode.expirationTime = expirationTime;
    return mode;
  }

  function throwOnInvalidElementType(type) {
    invariant(!1, "Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", null == type ? type : typeof type, "");
  }

  function createFiberFromFragment(elements, mode, expirationTime, key) {
    elements = new FiberNode(10, elements, key, mode);
    elements.expirationTime = expirationTime;
    return elements;
  }

  function createFiberFromText(content, mode, expirationTime) {
    content = new FiberNode(6, content, null, mode);
    content.expirationTime = expirationTime;
    return content;
  }

  function createFiberFromPortal(portal, mode, expirationTime) {
    mode = new FiberNode(4, null !== portal.children ? portal.children : [], portal.key, mode);
    mode.expirationTime = expirationTime;
    mode.stateNode = {
      containerInfo: portal.containerInfo,
      pendingChildren: null,
      implementation: portal.implementation
    };
    return mode;
  }

  var onCommitFiberRoot = null,
      onCommitFiberUnmount = null;

  function catchErrors(fn) {
    return function (arg) {
      try {
        return fn(arg);
      } catch (err) {}
    };
  }

  function injectInternals(internals) {
    if ("undefined" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) return !1;
    var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
    if (hook.isDisabled || !hook.supportsFiber) return !0;

    try {
      var rendererID = hook.inject(internals);
      onCommitFiberRoot = catchErrors(function (root) {
        return hook.onCommitFiberRoot(rendererID, root);
      });
      onCommitFiberUnmount = catchErrors(function (fiber) {
        return hook.onCommitFiberUnmount(rendererID, fiber);
      });
    } catch (err) {}

    return !0;
  }

  function onCommitRoot(root) {
    "function" === typeof onCommitFiberRoot && onCommitFiberRoot(root);
  }

  function onCommitUnmount(fiber) {
    "function" === typeof onCommitFiberUnmount && onCommitFiberUnmount(fiber);
  }

  function createUpdateQueue(baseState) {
    return {
      baseState: baseState,
      expirationTime: 0,
      first: null,
      last: null,
      callbackList: null,
      hasForceUpdate: !1,
      isInitialized: !1,
      capturedValues: null
    };
  }

  function insertUpdateIntoQueue(queue, update) {
    null === queue.last ? queue.first = queue.last = update : (queue.last.next = update, queue.last = update);
    if (0 === queue.expirationTime || queue.expirationTime > update.expirationTime) queue.expirationTime = update.expirationTime;
  }

  var q1 = void 0,
      q2 = void 0;

  function ensureUpdateQueues(fiber) {
    q1 = q2 = null;
    var alternateFiber = fiber.alternate,
        queue1 = fiber.updateQueue;
    null === queue1 && (queue1 = fiber.updateQueue = createUpdateQueue(null));
    null !== alternateFiber ? (fiber = alternateFiber.updateQueue, null === fiber && (fiber = alternateFiber.updateQueue = createUpdateQueue(null))) : fiber = null;
    q1 = queue1;
    q2 = fiber !== queue1 ? fiber : null;
  }

  function insertUpdateIntoFiber(fiber, update) {
    ensureUpdateQueues(fiber);
    fiber = q1;
    var queue2 = q2;
    null === queue2 ? insertUpdateIntoQueue(fiber, update) : null === fiber.last || null === queue2.last ? (insertUpdateIntoQueue(fiber, update), insertUpdateIntoQueue(queue2, update)) : (insertUpdateIntoQueue(fiber, update), queue2.last = update);
  }

  function getStateFromUpdate(update, instance, prevState, props) {
    update = update.partialState;
    return "function" === typeof update ? update.call(instance, prevState, props) : update;
  }

  function processUpdateQueue(current, workInProgress, queue, instance, props, renderExpirationTime) {
    null !== current && current.updateQueue === queue && (queue = workInProgress.updateQueue = {
      baseState: queue.baseState,
      expirationTime: queue.expirationTime,
      first: queue.first,
      last: queue.last,
      isInitialized: queue.isInitialized,
      capturedValues: queue.capturedValues,
      callbackList: null,
      hasForceUpdate: !1
    });
    queue.expirationTime = 0;
    queue.isInitialized ? current = queue.baseState : (current = queue.baseState = workInProgress.memoizedState, queue.isInitialized = !0);

    for (var dontMutatePrevState = !0, update = queue.first, didSkip = !1; null !== update;) {
      var updateExpirationTime = update.expirationTime;

      if (updateExpirationTime > renderExpirationTime) {
        var remainingExpirationTime = queue.expirationTime;
        if (0 === remainingExpirationTime || remainingExpirationTime > updateExpirationTime) queue.expirationTime = updateExpirationTime;
        didSkip || (didSkip = !0, queue.baseState = current);
      } else {
        didSkip || (queue.first = update.next, null === queue.first && (queue.last = null));
        (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & 2) && getStateFromUpdate(update, instance, current, props);
        if (update.isReplace) current = getStateFromUpdate(update, instance, current, props), dontMutatePrevState = !0;else if (updateExpirationTime = getStateFromUpdate(update, instance, current, props)) current = dontMutatePrevState ? babelHelpers.extends({}, current, updateExpirationTime) : babelHelpers.extends(current, updateExpirationTime), dontMutatePrevState = !1;
        update.isForced && (queue.hasForceUpdate = !0);
        null !== update.callback && (updateExpirationTime = queue.callbackList, null === updateExpirationTime && (updateExpirationTime = queue.callbackList = []), updateExpirationTime.push(update));
        null !== update.capturedValue && (updateExpirationTime = queue.capturedValues, null === updateExpirationTime ? queue.capturedValues = [update.capturedValue] : updateExpirationTime.push(update.capturedValue));
      }

      update = update.next;
    }

    null !== queue.callbackList ? workInProgress.effectTag |= 32 : null !== queue.first || queue.hasForceUpdate || null !== queue.capturedValues || (workInProgress.updateQueue = null);
    didSkip || (queue.baseState = current);
    return current;
  }

  function commitCallbacks(queue, context) {
    var callbackList = queue.callbackList;
    if (null !== callbackList) for (queue.callbackList = null, queue = 0; queue < callbackList.length; queue++) {
      var update = callbackList[queue],
          _callback = update.callback;
      update.callback = null;
      invariant("function" === typeof _callback, "Invalid argument passed as callback. Expected a function. Instead received: %s", _callback);

      _callback.call(context);
    }
  }

  function callGetDerivedStateFromCatch(ctor, capturedValues) {
    for (var resultState = {}, i = 0; i < capturedValues.length; i++) {
      var partialState = ctor.getDerivedStateFromCatch.call(null, capturedValues[i].value);
      null !== partialState && void 0 !== partialState && babelHelpers.extends(resultState, partialState);
    }

    return resultState;
  }

  function ReactFiberClassComponent(scheduleWork, computeExpirationForFiber, memoizeProps, memoizeState) {
    function checkShouldComponentUpdate(workInProgress, oldProps, newProps, oldState, newState, newContext) {
      if (null === oldProps || null !== workInProgress.updateQueue && workInProgress.updateQueue.hasForceUpdate) return !0;
      var instance = workInProgress.stateNode;
      workInProgress = workInProgress.type;
      return "function" === typeof instance.shouldComponentUpdate ? instance.shouldComponentUpdate(newProps, newState, newContext) : workInProgress.prototype && workInProgress.prototype.isPureReactComponent ? !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState) : !0;
    }

    function adoptClassInstance(workInProgress, instance) {
      instance.updater = updater;
      workInProgress.stateNode = instance;
      instance._reactInternalFiber = workInProgress;
    }

    function callComponentWillReceiveProps(workInProgress, instance, newProps, newContext) {
      workInProgress = instance.state;
      "function" === typeof instance.componentWillReceiveProps && instance.componentWillReceiveProps(newProps, newContext);
      "function" === typeof instance.UNSAFE_componentWillReceiveProps && instance.UNSAFE_componentWillReceiveProps(newProps, newContext);
      instance.state !== workInProgress && updater.enqueueReplaceState(instance, instance.state, null);
    }

    function callGetDerivedStateFromProps(workInProgress, instance, props) {
      instance = workInProgress.type;
      if ("function" === typeof instance.getDerivedStateFromProps) return (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & 2) && instance.getDerivedStateFromProps.call(null, props, workInProgress.memoizedState), instance.getDerivedStateFromProps.call(null, props, workInProgress.memoizedState);
    }

    var updater = {
      isMounted: isMounted,
      enqueueSetState: function enqueueSetState(instance, partialState, callback) {
        instance = instance._reactInternalFiber;
        callback = void 0 === callback ? null : callback;
        var expirationTime = computeExpirationForFiber(instance);
        insertUpdateIntoFiber(instance, {
          expirationTime: expirationTime,
          partialState: partialState,
          callback: callback,
          isReplace: !1,
          isForced: !1,
          capturedValue: null,
          next: null
        });
        scheduleWork(instance, expirationTime);
      },
      enqueueReplaceState: function enqueueReplaceState(instance, state, callback) {
        instance = instance._reactInternalFiber;
        callback = void 0 === callback ? null : callback;
        var expirationTime = computeExpirationForFiber(instance);
        insertUpdateIntoFiber(instance, {
          expirationTime: expirationTime,
          partialState: state,
          callback: callback,
          isReplace: !0,
          isForced: !1,
          capturedValue: null,
          next: null
        });
        scheduleWork(instance, expirationTime);
      },
      enqueueForceUpdate: function enqueueForceUpdate(instance, callback) {
        instance = instance._reactInternalFiber;
        callback = void 0 === callback ? null : callback;
        var expirationTime = computeExpirationForFiber(instance);
        insertUpdateIntoFiber(instance, {
          expirationTime: expirationTime,
          partialState: null,
          callback: callback,
          isReplace: !1,
          isForced: !0,
          capturedValue: null,
          next: null
        });
        scheduleWork(instance, expirationTime);
      }
    };
    return {
      adoptClassInstance: adoptClassInstance,
      callGetDerivedStateFromProps: callGetDerivedStateFromProps,
      constructClassInstance: function constructClassInstance(workInProgress, props) {
        var ctor = workInProgress.type,
            unmaskedContext = getUnmaskedContext(workInProgress),
            needsContext = 2 === workInProgress.tag && null != workInProgress.type.contextTypes,
            context = needsContext ? getMaskedContext(workInProgress, unmaskedContext) : emptyObject;
        (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & 2) && new ctor(props, context);
        ctor = new ctor(props, context);
        var state = null !== ctor.state && void 0 !== ctor.state ? ctor.state : null;
        adoptClassInstance(workInProgress, ctor);
        workInProgress.memoizedState = state;
        props = callGetDerivedStateFromProps(workInProgress, ctor, props);
        null !== props && void 0 !== props && (workInProgress.memoizedState = babelHelpers.extends({}, workInProgress.memoizedState, props));
        needsContext && (workInProgress = workInProgress.stateNode, workInProgress.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext, workInProgress.__reactInternalMemoizedMaskedChildContext = context);
        return ctor;
      },
      mountClassInstance: function mountClassInstance(workInProgress, renderExpirationTime) {
        var ctor = workInProgress.type,
            current = workInProgress.alternate,
            instance = workInProgress.stateNode,
            props = workInProgress.pendingProps,
            unmaskedContext = getUnmaskedContext(workInProgress);
        instance.props = props;
        instance.state = workInProgress.memoizedState;
        instance.refs = emptyObject;
        instance.context = getMaskedContext(workInProgress, unmaskedContext);
        "function" !== typeof instance.UNSAFE_componentWillMount && "function" !== typeof instance.componentWillMount || "function" === typeof ctor.getDerivedStateFromProps || (ctor = instance.state, "function" === typeof instance.componentWillMount && instance.componentWillMount(), "function" === typeof instance.UNSAFE_componentWillMount && instance.UNSAFE_componentWillMount(), ctor !== instance.state && updater.enqueueReplaceState(instance, instance.state, null), ctor = workInProgress.updateQueue, null !== ctor && (instance.state = processUpdateQueue(current, workInProgress, ctor, instance, props, renderExpirationTime)));
        "function" === typeof instance.componentDidMount && (workInProgress.effectTag |= 4);
      },
      resumeMountClassInstance: function resumeMountClassInstance(workInProgress, renderExpirationTime) {
        var ctor = workInProgress.type,
            instance = workInProgress.stateNode;
        instance.props = workInProgress.memoizedProps;
        instance.state = workInProgress.memoizedState;
        var oldProps = workInProgress.memoizedProps,
            newProps = workInProgress.pendingProps,
            oldContext = instance.context,
            newUnmaskedContext = getUnmaskedContext(workInProgress);
        newUnmaskedContext = getMaskedContext(workInProgress, newUnmaskedContext);
        "function" !== typeof instance.UNSAFE_componentWillReceiveProps && "function" !== typeof instance.componentWillReceiveProps || "function" === typeof ctor.getDerivedStateFromProps || (oldProps !== newProps || oldContext !== newUnmaskedContext) && callComponentWillReceiveProps(workInProgress, instance, newProps, newUnmaskedContext);
        oldContext = void 0;
        oldProps !== newProps && (oldContext = callGetDerivedStateFromProps(workInProgress, instance, newProps));
        var oldState = workInProgress.memoizedState,
            derivedStateFromCatch = void 0;

        if (null !== workInProgress.updateQueue) {
          renderExpirationTime = processUpdateQueue(null, workInProgress, workInProgress.updateQueue, instance, newProps, renderExpirationTime);
          var updateQueue = workInProgress.updateQueue;
          null !== updateQueue && null !== updateQueue.capturedValues && enableGetDerivedStateFromCatch && "function" === typeof ctor.getDerivedStateFromCatch && (derivedStateFromCatch = callGetDerivedStateFromCatch(ctor, updateQueue.capturedValues));
        } else renderExpirationTime = oldState;

        null !== oldContext && void 0 !== oldContext && (renderExpirationTime = null === renderExpirationTime || void 0 === renderExpirationTime ? oldContext : babelHelpers.extends({}, renderExpirationTime, oldContext));
        null !== derivedStateFromCatch && void 0 !== derivedStateFromCatch && (renderExpirationTime = null === renderExpirationTime || void 0 === renderExpirationTime ? derivedStateFromCatch : babelHelpers.extends({}, renderExpirationTime, derivedStateFromCatch));
        if (!(oldProps !== newProps || oldState !== renderExpirationTime || didPerformWorkStackCursor.current || null !== workInProgress.updateQueue && workInProgress.updateQueue.hasForceUpdate)) return "function" === typeof instance.componentDidMount && (workInProgress.effectTag |= 4), !1;
        (oldProps = checkShouldComponentUpdate(workInProgress, oldProps, newProps, oldState, renderExpirationTime, newUnmaskedContext)) ? ("function" !== typeof instance.UNSAFE_componentWillUpdate && "function" !== typeof instance.componentWillUpdate || "function" === typeof ctor.getDerivedStateFromProps || ("function" === typeof instance.componentWillUpdate && instance.componentWillUpdate(newProps, renderExpirationTime, newUnmaskedContext), "function" === typeof instance.UNSAFE_componentWillUpdate && instance.UNSAFE_componentWillUpdate(newProps, renderExpirationTime, newUnmaskedContext)), "function" === typeof instance.componentDidUpdate && (workInProgress.effectTag |= 4)) : ("function" === typeof instance.componentDidMount && (workInProgress.effectTag |= 4), memoizeProps(workInProgress, newProps), memoizeState(workInProgress, renderExpirationTime));
        instance.props = newProps;
        instance.state = renderExpirationTime;
        instance.context = newUnmaskedContext;
        return oldProps;
      },
      updateClassInstance: function updateClassInstance(current, workInProgress, renderExpirationTime) {
        var ctor = workInProgress.type,
            instance = workInProgress.stateNode;
        instance.props = workInProgress.memoizedProps;
        instance.state = workInProgress.memoizedState;
        var oldProps = workInProgress.memoizedProps,
            newProps = workInProgress.pendingProps,
            oldContext = instance.context,
            newUnmaskedContext = getUnmaskedContext(workInProgress);
        newUnmaskedContext = getMaskedContext(workInProgress, newUnmaskedContext);
        "function" !== typeof instance.UNSAFE_componentWillReceiveProps && "function" !== typeof instance.componentWillReceiveProps || "function" === typeof ctor.getDerivedStateFromProps || (oldProps !== newProps || oldContext !== newUnmaskedContext) && callComponentWillReceiveProps(workInProgress, instance, newProps, newUnmaskedContext);
        var derivedStateFromProps = void 0;
        oldProps !== newProps && (derivedStateFromProps = callGetDerivedStateFromProps(workInProgress, instance, newProps));
        oldContext = workInProgress.memoizedState;
        var derivedStateFromCatch = void 0;

        if (null !== workInProgress.updateQueue) {
          renderExpirationTime = processUpdateQueue(current, workInProgress, workInProgress.updateQueue, instance, newProps, renderExpirationTime);
          var updateQueue = workInProgress.updateQueue;
          null !== updateQueue && null !== updateQueue.capturedValues && enableGetDerivedStateFromCatch && "function" === typeof ctor.getDerivedStateFromCatch && (derivedStateFromCatch = callGetDerivedStateFromCatch(ctor, updateQueue.capturedValues));
        } else renderExpirationTime = oldContext;

        null !== derivedStateFromProps && void 0 !== derivedStateFromProps && (renderExpirationTime = null === renderExpirationTime || void 0 === renderExpirationTime ? derivedStateFromProps : babelHelpers.extends({}, renderExpirationTime, derivedStateFromProps));
        null !== derivedStateFromCatch && void 0 !== derivedStateFromCatch && (renderExpirationTime = null === renderExpirationTime || void 0 === renderExpirationTime ? derivedStateFromCatch : babelHelpers.extends({}, renderExpirationTime, derivedStateFromCatch));
        if (!(oldProps !== newProps || oldContext !== renderExpirationTime || didPerformWorkStackCursor.current || null !== workInProgress.updateQueue && workInProgress.updateQueue.hasForceUpdate)) return "function" !== typeof instance.componentDidUpdate || oldProps === current.memoizedProps && oldContext === current.memoizedState || (workInProgress.effectTag |= 4), !1;
        (derivedStateFromProps = checkShouldComponentUpdate(workInProgress, oldProps, newProps, oldContext, renderExpirationTime, newUnmaskedContext)) ? ("function" !== typeof instance.UNSAFE_componentWillUpdate && "function" !== typeof instance.componentWillUpdate || "function" === typeof ctor.getDerivedStateFromProps || ("function" === typeof instance.componentWillUpdate && instance.componentWillUpdate(newProps, renderExpirationTime, newUnmaskedContext), "function" === typeof instance.UNSAFE_componentWillUpdate && instance.UNSAFE_componentWillUpdate(newProps, renderExpirationTime, newUnmaskedContext)), "function" === typeof instance.componentDidUpdate && (workInProgress.effectTag |= 4)) : ("function" !== typeof instance.componentDidUpdate || oldProps === current.memoizedProps && oldContext === current.memoizedState || (workInProgress.effectTag |= 4), memoizeProps(workInProgress, newProps), memoizeState(workInProgress, renderExpirationTime));
        instance.props = newProps;
        instance.state = renderExpirationTime;
        instance.context = newUnmaskedContext;
        return derivedStateFromProps;
      }
    };
  }

  var isArray$1 = Array.isArray;

  function coerceRef(returnFiber, current, element) {
    returnFiber = element.ref;

    if (null !== returnFiber && "function" !== typeof returnFiber && "object" !== typeof returnFiber) {
      if (element._owner) {
        element = element._owner;
        var inst = void 0;
        element && (invariant(2 === element.tag, "Stateless function components cannot have refs."), inst = element.stateNode);
        invariant(inst, "Missing owner for string ref %s. This error is likely caused by a bug in React. Please file an issue.", returnFiber);
        var stringRef = "" + returnFiber;
        if (null !== current && null !== current.ref && current.ref._stringRef === stringRef) return current.ref;

        current = function current(value) {
          var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
          null === value ? delete refs[stringRef] : refs[stringRef] = value;
        };

        current._stringRef = stringRef;
        return current;
      }

      invariant("string" === typeof returnFiber, "Expected ref to be a function or a string.");
      invariant(element._owner, "Element ref was specified as a string (%s) but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a functional component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://fb.me/react-refs-must-have-owner for more information.", returnFiber);
    }

    return returnFiber;
  }

  function throwOnInvalidObjectType(returnFiber, newChild) {
    "textarea" !== returnFiber.type && invariant(!1, "Objects are not valid as a React child (found: %s).%s", "[object Object]" === Object.prototype.toString.call(newChild) ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : newChild, "");
  }

  function ChildReconciler(shouldTrackSideEffects) {
    function deleteChild(returnFiber, childToDelete) {
      if (shouldTrackSideEffects) {
        var last = returnFiber.lastEffect;
        null !== last ? (last.nextEffect = childToDelete, returnFiber.lastEffect = childToDelete) : returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
        childToDelete.nextEffect = null;
        childToDelete.effectTag = 8;
      }
    }

    function deleteRemainingChildren(returnFiber, currentFirstChild) {
      if (!shouldTrackSideEffects) return null;

      for (; null !== currentFirstChild;) {
        deleteChild(returnFiber, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
      }

      return null;
    }

    function mapRemainingChildren(returnFiber, currentFirstChild) {
      for (returnFiber = new Map(); null !== currentFirstChild;) {
        null !== currentFirstChild.key ? returnFiber.set(currentFirstChild.key, currentFirstChild) : returnFiber.set(currentFirstChild.index, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
      }

      return returnFiber;
    }

    function useFiber(fiber, pendingProps, expirationTime) {
      fiber = createWorkInProgress(fiber, pendingProps, expirationTime);
      fiber.index = 0;
      fiber.sibling = null;
      return fiber;
    }

    function placeChild(newFiber, lastPlacedIndex, newIndex) {
      newFiber.index = newIndex;
      if (!shouldTrackSideEffects) return lastPlacedIndex;
      newIndex = newFiber.alternate;
      if (null !== newIndex) return newIndex = newIndex.index, newIndex < lastPlacedIndex ? (newFiber.effectTag = 2, lastPlacedIndex) : newIndex;
      newFiber.effectTag = 2;
      return lastPlacedIndex;
    }

    function placeSingleChild(newFiber) {
      shouldTrackSideEffects && null === newFiber.alternate && (newFiber.effectTag = 2);
      return newFiber;
    }

    function updateTextNode(returnFiber, current, textContent, expirationTime) {
      if (null === current || 6 !== current.tag) return current = createFiberFromText(textContent, returnFiber.mode, expirationTime), current["return"] = returnFiber, current;
      current = useFiber(current, textContent, expirationTime);
      current["return"] = returnFiber;
      return current;
    }

    function updateElement(returnFiber, current, element, expirationTime) {
      if (null !== current && current.type === element.type) return expirationTime = useFiber(current, element.props, expirationTime), expirationTime.ref = coerceRef(returnFiber, current, element), expirationTime["return"] = returnFiber, expirationTime;
      expirationTime = createFiberFromElement(element, returnFiber.mode, expirationTime);
      expirationTime.ref = coerceRef(returnFiber, current, element);
      expirationTime["return"] = returnFiber;
      return expirationTime;
    }

    function updatePortal(returnFiber, current, portal, expirationTime) {
      if (null === current || 4 !== current.tag || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) return current = createFiberFromPortal(portal, returnFiber.mode, expirationTime), current["return"] = returnFiber, current;
      current = useFiber(current, portal.children || [], expirationTime);
      current["return"] = returnFiber;
      return current;
    }

    function updateFragment(returnFiber, current, fragment, expirationTime, key) {
      if (null === current || 10 !== current.tag) return current = createFiberFromFragment(fragment, returnFiber.mode, expirationTime, key), current["return"] = returnFiber, current;
      current = useFiber(current, fragment, expirationTime);
      current["return"] = returnFiber;
      return current;
    }

    function createChild(returnFiber, newChild, expirationTime) {
      if ("string" === typeof newChild || "number" === typeof newChild) return newChild = createFiberFromText("" + newChild, returnFiber.mode, expirationTime), newChild["return"] = returnFiber, newChild;

      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            return expirationTime = createFiberFromElement(newChild, returnFiber.mode, expirationTime), expirationTime.ref = coerceRef(returnFiber, null, newChild), expirationTime["return"] = returnFiber, expirationTime;

          case REACT_PORTAL_TYPE:
            return newChild = createFiberFromPortal(newChild, returnFiber.mode, expirationTime), newChild["return"] = returnFiber, newChild;
        }

        if (isArray$1(newChild) || getIteratorFn(newChild)) return newChild = createFiberFromFragment(newChild, returnFiber.mode, expirationTime, null), newChild["return"] = returnFiber, newChild;
        throwOnInvalidObjectType(returnFiber, newChild);
      }

      return null;
    }

    function updateSlot(returnFiber, oldFiber, newChild, expirationTime) {
      var key = null !== oldFiber ? oldFiber.key : null;
      if ("string" === typeof newChild || "number" === typeof newChild) return null !== key ? null : updateTextNode(returnFiber, oldFiber, "" + newChild, expirationTime);

      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            return newChild.key === key ? newChild.type === REACT_FRAGMENT_TYPE ? updateFragment(returnFiber, oldFiber, newChild.props.children, expirationTime, key) : updateElement(returnFiber, oldFiber, newChild, expirationTime) : null;

          case REACT_PORTAL_TYPE:
            return newChild.key === key ? updatePortal(returnFiber, oldFiber, newChild, expirationTime) : null;
        }

        if (isArray$1(newChild) || getIteratorFn(newChild)) return null !== key ? null : updateFragment(returnFiber, oldFiber, newChild, expirationTime, null);
        throwOnInvalidObjectType(returnFiber, newChild);
      }

      return null;
    }

    function updateFromMap(existingChildren, returnFiber, newIdx, newChild, expirationTime) {
      if ("string" === typeof newChild || "number" === typeof newChild) return existingChildren = existingChildren.get(newIdx) || null, updateTextNode(returnFiber, existingChildren, "" + newChild, expirationTime);

      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            return existingChildren = existingChildren.get(null === newChild.key ? newIdx : newChild.key) || null, newChild.type === REACT_FRAGMENT_TYPE ? updateFragment(returnFiber, existingChildren, newChild.props.children, expirationTime, newChild.key) : updateElement(returnFiber, existingChildren, newChild, expirationTime);

          case REACT_PORTAL_TYPE:
            return existingChildren = existingChildren.get(null === newChild.key ? newIdx : newChild.key) || null, updatePortal(returnFiber, existingChildren, newChild, expirationTime);
        }

        if (isArray$1(newChild) || getIteratorFn(newChild)) return existingChildren = existingChildren.get(newIdx) || null, updateFragment(returnFiber, existingChildren, newChild, expirationTime, null);
        throwOnInvalidObjectType(returnFiber, newChild);
      }

      return null;
    }

    function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, expirationTime) {
      for (var resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null; null !== oldFiber && newIdx < newChildren.length; newIdx++) {
        oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
        var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], expirationTime);

        if (null === newFiber) {
          null === oldFiber && (oldFiber = nextOldFiber);
          break;
        }

        shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
        currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
        null === previousNewFiber ? resultingFirstChild = newFiber : previousNewFiber.sibling = newFiber;
        previousNewFiber = newFiber;
        oldFiber = nextOldFiber;
      }

      if (newIdx === newChildren.length) return deleteRemainingChildren(returnFiber, oldFiber), resultingFirstChild;

      if (null === oldFiber) {
        for (; newIdx < newChildren.length; newIdx++) {
          if (oldFiber = createChild(returnFiber, newChildren[newIdx], expirationTime)) currentFirstChild = placeChild(oldFiber, currentFirstChild, newIdx), null === previousNewFiber ? resultingFirstChild = oldFiber : previousNewFiber.sibling = oldFiber, previousNewFiber = oldFiber;
        }

        return resultingFirstChild;
      }

      for (oldFiber = mapRemainingChildren(returnFiber, oldFiber); newIdx < newChildren.length; newIdx++) {
        if (nextOldFiber = updateFromMap(oldFiber, returnFiber, newIdx, newChildren[newIdx], expirationTime)) {
          if (shouldTrackSideEffects && null !== nextOldFiber.alternate) oldFiber["delete"](null === nextOldFiber.key ? newIdx : nextOldFiber.key);
          currentFirstChild = placeChild(nextOldFiber, currentFirstChild, newIdx);
          null === previousNewFiber ? resultingFirstChild = nextOldFiber : previousNewFiber.sibling = nextOldFiber;
          previousNewFiber = nextOldFiber;
        }
      }

      shouldTrackSideEffects && oldFiber.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
      return resultingFirstChild;
    }

    function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, expirationTime) {
      var iteratorFn = getIteratorFn(newChildrenIterable);
      invariant("function" === typeof iteratorFn, "An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
      newChildrenIterable = iteratorFn.call(newChildrenIterable);
      invariant(null != newChildrenIterable, "An iterable object provided no iterator.");

      for (var previousNewFiber = iteratorFn = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null, step = newChildrenIterable.next(); null !== oldFiber && !step.done; newIdx++, step = newChildrenIterable.next()) {
        oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
        var newFiber = updateSlot(returnFiber, oldFiber, step.value, expirationTime);

        if (null === newFiber) {
          oldFiber || (oldFiber = nextOldFiber);
          break;
        }

        shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
        currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
        null === previousNewFiber ? iteratorFn = newFiber : previousNewFiber.sibling = newFiber;
        previousNewFiber = newFiber;
        oldFiber = nextOldFiber;
      }

      if (step.done) return deleteRemainingChildren(returnFiber, oldFiber), iteratorFn;

      if (null === oldFiber) {
        for (; !step.done; newIdx++, step = newChildrenIterable.next()) {
          step = createChild(returnFiber, step.value, expirationTime), null !== step && (currentFirstChild = placeChild(step, currentFirstChild, newIdx), null === previousNewFiber ? iteratorFn = step : previousNewFiber.sibling = step, previousNewFiber = step);
        }

        return iteratorFn;
      }

      for (oldFiber = mapRemainingChildren(returnFiber, oldFiber); !step.done; newIdx++, step = newChildrenIterable.next()) {
        if (step = updateFromMap(oldFiber, returnFiber, newIdx, step.value, expirationTime), null !== step) {
          if (shouldTrackSideEffects && null !== step.alternate) oldFiber["delete"](null === step.key ? newIdx : step.key);
          currentFirstChild = placeChild(step, currentFirstChild, newIdx);
          null === previousNewFiber ? iteratorFn = step : previousNewFiber.sibling = step;
          previousNewFiber = step;
        }
      }

      shouldTrackSideEffects && oldFiber.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
      return iteratorFn;
    }

    return function (returnFiber, currentFirstChild, newChild, expirationTime) {
      "object" === typeof newChild && null !== newChild && newChild.type === REACT_FRAGMENT_TYPE && null === newChild.key && (newChild = newChild.props.children);
      var isObject = "object" === typeof newChild && null !== newChild;
      if (isObject) switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          a: {
            var key = newChild.key;

            for (isObject = currentFirstChild; null !== isObject;) {
              if (isObject.key === key) {
                if (10 === isObject.tag ? newChild.type === REACT_FRAGMENT_TYPE : isObject.type === newChild.type) {
                  deleteRemainingChildren(returnFiber, isObject.sibling);
                  currentFirstChild = useFiber(isObject, newChild.type === REACT_FRAGMENT_TYPE ? newChild.props.children : newChild.props, expirationTime);
                  currentFirstChild.ref = coerceRef(returnFiber, isObject, newChild);
                  currentFirstChild["return"] = returnFiber;
                  returnFiber = currentFirstChild;
                  break a;
                } else {
                  deleteRemainingChildren(returnFiber, isObject);
                  break;
                }
              } else deleteChild(returnFiber, isObject);
              isObject = isObject.sibling;
            }

            newChild.type === REACT_FRAGMENT_TYPE ? (currentFirstChild = createFiberFromFragment(newChild.props.children, returnFiber.mode, expirationTime, newChild.key), currentFirstChild["return"] = returnFiber, returnFiber = currentFirstChild) : (expirationTime = createFiberFromElement(newChild, returnFiber.mode, expirationTime), expirationTime.ref = coerceRef(returnFiber, currentFirstChild, newChild), expirationTime["return"] = returnFiber, returnFiber = expirationTime);
          }

          return placeSingleChild(returnFiber);

        case REACT_PORTAL_TYPE:
          a: {
            for (isObject = newChild.key; null !== currentFirstChild;) {
              if (currentFirstChild.key === isObject) {
                if (4 === currentFirstChild.tag && currentFirstChild.stateNode.containerInfo === newChild.containerInfo && currentFirstChild.stateNode.implementation === newChild.implementation) {
                  deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                  currentFirstChild = useFiber(currentFirstChild, newChild.children || [], expirationTime);
                  currentFirstChild["return"] = returnFiber;
                  returnFiber = currentFirstChild;
                  break a;
                } else {
                  deleteRemainingChildren(returnFiber, currentFirstChild);
                  break;
                }
              } else deleteChild(returnFiber, currentFirstChild);
              currentFirstChild = currentFirstChild.sibling;
            }

            currentFirstChild = createFiberFromPortal(newChild, returnFiber.mode, expirationTime);
            currentFirstChild["return"] = returnFiber;
            returnFiber = currentFirstChild;
          }

          return placeSingleChild(returnFiber);
      }
      if ("string" === typeof newChild || "number" === typeof newChild) return newChild = "" + newChild, null !== currentFirstChild && 6 === currentFirstChild.tag ? (deleteRemainingChildren(returnFiber, currentFirstChild.sibling), currentFirstChild = useFiber(currentFirstChild, newChild, expirationTime)) : (deleteRemainingChildren(returnFiber, currentFirstChild), currentFirstChild = createFiberFromText(newChild, returnFiber.mode, expirationTime)), currentFirstChild["return"] = returnFiber, returnFiber = currentFirstChild, placeSingleChild(returnFiber);
      if (isArray$1(newChild)) return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, expirationTime);
      if (getIteratorFn(newChild)) return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, expirationTime);
      isObject && throwOnInvalidObjectType(returnFiber, newChild);
      if ("undefined" === typeof newChild) switch (returnFiber.tag) {
        case 2:
        case 1:
          expirationTime = returnFiber.type, invariant(!1, "%s(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.", expirationTime.displayName || expirationTime.name || "Component");
      }
      return deleteRemainingChildren(returnFiber, currentFirstChild);
    };
  }

  var reconcileChildFibers = ChildReconciler(!0),
      mountChildFibers = ChildReconciler(!1),
      changedBitsStack = [],
      currentValueStack = [],
      stack = [],
      index$1 = -1;

  function pushProvider(providerFiber) {
    var context = providerFiber.type.context;
    index$1 += 1;
    changedBitsStack[index$1] = context._changedBits;
    currentValueStack[index$1] = context._currentValue;
    stack[index$1] = providerFiber;
    context._currentValue = providerFiber.pendingProps.value;
    context._changedBits = providerFiber.stateNode;
  }

  function popProvider(providerFiber) {
    var changedBits = changedBitsStack[index$1],
        currentValue = currentValueStack[index$1];
    changedBitsStack[index$1] = null;
    currentValueStack[index$1] = null;
    stack[index$1] = null;
    --index$1;
    providerFiber = providerFiber.type.context;
    providerFiber._currentValue = currentValue;
    providerFiber._changedBits = changedBits;
  }

  function ReactFiberBeginWork(config, hostContext, hydrationContext, scheduleWork, computeExpirationForFiber) {
    function reconcileChildren(current, workInProgress, nextChildren) {
      reconcileChildrenAtExpirationTime(current, workInProgress, nextChildren, workInProgress.expirationTime);
    }

    function reconcileChildrenAtExpirationTime(current, workInProgress, nextChildren, renderExpirationTime) {
      workInProgress.child = null === current ? mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime) : reconcileChildFibers(workInProgress, current.child, nextChildren, renderExpirationTime);
    }

    function markRef(current, workInProgress) {
      var ref = workInProgress.ref;
      if (null === current && null !== ref || null !== current && current.ref !== ref) workInProgress.effectTag |= 128;
    }

    function finishClassComponent(current, workInProgress, shouldUpdate, hasContext, didCaptureError, renderExpirationTime) {
      markRef(current, workInProgress);
      if (!shouldUpdate && !didCaptureError) return hasContext && invalidateContextProvider(workInProgress, !1), bailoutOnAlreadyFinishedWork(current, workInProgress);
      var ctor = workInProgress.type;
      shouldUpdate = workInProgress.stateNode;
      ReactCurrentOwner.current = workInProgress;
      !didCaptureError || enableGetDerivedStateFromCatch && "function" === typeof ctor.getDerivedStateFromCatch ? ((debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & 2) && shouldUpdate.render(), ctor = shouldUpdate.render()) : ctor = null;
      workInProgress.effectTag |= 1;
      didCaptureError && (reconcileChildrenAtExpirationTime(current, workInProgress, null, renderExpirationTime), workInProgress.child = null);
      reconcileChildrenAtExpirationTime(current, workInProgress, ctor, renderExpirationTime);
      workInProgress.memoizedState = shouldUpdate.state;
      workInProgress.memoizedProps = shouldUpdate.props;
      hasContext && invalidateContextProvider(workInProgress, !0);
      return workInProgress.child;
    }

    function pushHostRootContext(workInProgress) {
      var root = workInProgress.stateNode;
      root.pendingContext ? pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context) : root.context && pushTopLevelContextObject(workInProgress, root.context, !1);
      pushHostContainer(workInProgress, root.containerInfo);
    }

    function propagateContextChange(workInProgress, context, changedBits, renderExpirationTime) {
      for (var fiber = workInProgress.child; null !== fiber;) {
        switch (fiber.tag) {
          case 12:
            var nextFiber = fiber.stateNode | 0;

            if (fiber.type === context && 0 !== (nextFiber & changedBits)) {
              for (nextFiber = fiber; null !== nextFiber;) {
                var alternate = nextFiber.alternate;
                if (0 === nextFiber.expirationTime || nextFiber.expirationTime > renderExpirationTime) nextFiber.expirationTime = renderExpirationTime, null !== alternate && (0 === alternate.expirationTime || alternate.expirationTime > renderExpirationTime) && (alternate.expirationTime = renderExpirationTime);else if (null !== alternate && (0 === alternate.expirationTime || alternate.expirationTime > renderExpirationTime)) alternate.expirationTime = renderExpirationTime;else break;
                nextFiber = nextFiber["return"];
              }

              nextFiber = null;
            } else nextFiber = fiber.child;

            break;

          case 13:
            nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
            break;

          default:
            nextFiber = fiber.child;
        }

        if (null !== nextFiber) nextFiber["return"] = fiber;else for (nextFiber = fiber; null !== nextFiber;) {
          if (nextFiber === workInProgress) {
            nextFiber = null;
            break;
          }

          fiber = nextFiber.sibling;

          if (null !== fiber) {
            nextFiber = fiber;
            break;
          }

          nextFiber = nextFiber["return"];
        }
        fiber = nextFiber;
      }
    }

    function updateContextProvider(current, workInProgress, renderExpirationTime) {
      var context = workInProgress.type.context,
          newProps = workInProgress.pendingProps,
          oldProps = workInProgress.memoizedProps;
      if (!didPerformWorkStackCursor.current && oldProps === newProps) return workInProgress.stateNode = 0, pushProvider(workInProgress), bailoutOnAlreadyFinishedWork(current, workInProgress);
      var newValue = newProps.value;
      workInProgress.memoizedProps = newProps;
      if (null === oldProps) newValue = 1073741823;else if (oldProps.value === newProps.value) {
        if (oldProps.children === newProps.children) return workInProgress.stateNode = 0, pushProvider(workInProgress), bailoutOnAlreadyFinishedWork(current, workInProgress);
        newValue = 0;
      } else {
        var oldValue = oldProps.value;

        if (oldValue === newValue && (0 !== oldValue || 1 / oldValue === 1 / newValue) || oldValue !== oldValue && newValue !== newValue) {
          if (oldProps.children === newProps.children) return workInProgress.stateNode = 0, pushProvider(workInProgress), bailoutOnAlreadyFinishedWork(current, workInProgress);
          newValue = 0;
        } else if (newValue = "function" === typeof context._calculateChangedBits ? context._calculateChangedBits(oldValue, newValue) : 1073741823, newValue |= 0, 0 === newValue) {
          if (oldProps.children === newProps.children) return workInProgress.stateNode = 0, pushProvider(workInProgress), bailoutOnAlreadyFinishedWork(current, workInProgress);
        } else propagateContextChange(workInProgress, context, newValue, renderExpirationTime);
      }
      workInProgress.stateNode = newValue;
      pushProvider(workInProgress);
      reconcileChildren(current, workInProgress, newProps.children);
      return workInProgress.child;
    }

    function bailoutOnAlreadyFinishedWork(current, workInProgress) {
      invariant(null === current || workInProgress.child === current.child, "Resuming work not yet implemented.");

      if (null !== workInProgress.child) {
        current = workInProgress.child;
        var newChild = createWorkInProgress(current, current.pendingProps, current.expirationTime);
        workInProgress.child = newChild;

        for (newChild["return"] = workInProgress; null !== current.sibling;) {
          current = current.sibling, newChild = newChild.sibling = createWorkInProgress(current, current.pendingProps, current.expirationTime), newChild["return"] = workInProgress;
        }

        newChild.sibling = null;
      }

      return workInProgress.child;
    }

    var shouldSetTextContent = config.shouldSetTextContent,
        shouldDeprioritizeSubtree = config.shouldDeprioritizeSubtree,
        pushHostContext = hostContext.pushHostContext,
        pushHostContainer = hostContext.pushHostContainer,
        enterHydrationState = hydrationContext.enterHydrationState,
        resetHydrationState = hydrationContext.resetHydrationState,
        tryToClaimNextHydratableInstance = hydrationContext.tryToClaimNextHydratableInstance;
    config = ReactFiberClassComponent(scheduleWork, computeExpirationForFiber, function (workInProgress, nextProps) {
      workInProgress.memoizedProps = nextProps;
    }, function (workInProgress, nextState) {
      workInProgress.memoizedState = nextState;
    });
    var adoptClassInstance = config.adoptClassInstance,
        callGetDerivedStateFromProps = config.callGetDerivedStateFromProps,
        constructClassInstance = config.constructClassInstance,
        mountClassInstance = config.mountClassInstance,
        resumeMountClassInstance = config.resumeMountClassInstance,
        updateClassInstance = config.updateClassInstance;
    return {
      beginWork: function beginWork(current, workInProgress, renderExpirationTime) {
        if (0 === workInProgress.expirationTime || workInProgress.expirationTime > renderExpirationTime) {
          switch (workInProgress.tag) {
            case 3:
              pushHostRootContext(workInProgress);
              break;

            case 2:
              pushContextProvider(workInProgress);
              break;

            case 4:
              pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
              break;

            case 13:
              pushProvider(workInProgress);
          }

          return null;
        }

        switch (workInProgress.tag) {
          case 0:
            invariant(null === current, "An indeterminate component should never have mounted. This error is likely caused by a bug in React. Please file an issue.");
            var fn = workInProgress.type,
                props = workInProgress.pendingProps,
                unmaskedContext = getUnmaskedContext(workInProgress);
            unmaskedContext = getMaskedContext(workInProgress, unmaskedContext);
            fn = fn(props, unmaskedContext);
            workInProgress.effectTag |= 1;
            "object" === typeof fn && null !== fn && "function" === typeof fn.render && void 0 === fn.$$typeof ? (unmaskedContext = workInProgress.type, workInProgress.tag = 2, workInProgress.memoizedState = null !== fn.state && void 0 !== fn.state ? fn.state : null, "function" === typeof unmaskedContext.getDerivedStateFromProps && (props = callGetDerivedStateFromProps(workInProgress, fn, props), null !== props && void 0 !== props && (workInProgress.memoizedState = babelHelpers.extends({}, workInProgress.memoizedState, props))), props = pushContextProvider(workInProgress), adoptClassInstance(workInProgress, fn), mountClassInstance(workInProgress, renderExpirationTime), current = finishClassComponent(current, workInProgress, !0, props, !1, renderExpirationTime)) : (workInProgress.tag = 1, reconcileChildren(current, workInProgress, fn), workInProgress.memoizedProps = props, current = workInProgress.child);
            return current;

          case 1:
            return props = workInProgress.type, renderExpirationTime = workInProgress.pendingProps, didPerformWorkStackCursor.current || workInProgress.memoizedProps !== renderExpirationTime ? (fn = getUnmaskedContext(workInProgress), fn = getMaskedContext(workInProgress, fn), props = props(renderExpirationTime, fn), workInProgress.effectTag |= 1, reconcileChildren(current, workInProgress, props), workInProgress.memoizedProps = renderExpirationTime, current = workInProgress.child) : current = bailoutOnAlreadyFinishedWork(current, workInProgress), current;

          case 2:
            props = pushContextProvider(workInProgress);
            null === current ? null === workInProgress.stateNode ? (constructClassInstance(workInProgress, workInProgress.pendingProps), mountClassInstance(workInProgress, renderExpirationTime), fn = !0) : fn = resumeMountClassInstance(workInProgress, renderExpirationTime) : fn = updateClassInstance(current, workInProgress, renderExpirationTime);
            unmaskedContext = !1;
            var updateQueue = workInProgress.updateQueue;
            null !== updateQueue && null !== updateQueue.capturedValues && (unmaskedContext = fn = !0);
            return finishClassComponent(current, workInProgress, fn, props, unmaskedContext, renderExpirationTime);

          case 3:
            a: if (pushHostRootContext(workInProgress), fn = workInProgress.updateQueue, null !== fn) {
              unmaskedContext = workInProgress.memoizedState;
              props = processUpdateQueue(current, workInProgress, fn, null, null, renderExpirationTime);
              workInProgress.memoizedState = props;
              fn = workInProgress.updateQueue;
              if (null !== fn && null !== fn.capturedValues) fn = null;else if (unmaskedContext === props) {
                resetHydrationState();
                current = bailoutOnAlreadyFinishedWork(current, workInProgress);
                break a;
              } else fn = props.element;
              unmaskedContext = workInProgress.stateNode;
              (null === current || null === current.child) && unmaskedContext.hydrate && enterHydrationState(workInProgress) ? (workInProgress.effectTag |= 2, workInProgress.child = mountChildFibers(workInProgress, null, fn, renderExpirationTime)) : (resetHydrationState(), reconcileChildren(current, workInProgress, fn));
              workInProgress.memoizedState = props;
              current = workInProgress.child;
            } else resetHydrationState(), current = bailoutOnAlreadyFinishedWork(current, workInProgress);

            return current;

          case 5:
            a: {
              pushHostContext(workInProgress);
              null === current && tryToClaimNextHydratableInstance(workInProgress);
              props = workInProgress.type;
              updateQueue = workInProgress.memoizedProps;
              fn = workInProgress.pendingProps;
              unmaskedContext = null !== current ? current.memoizedProps : null;

              if (!didPerformWorkStackCursor.current && updateQueue === fn) {
                if (updateQueue = workInProgress.mode & 1 && shouldDeprioritizeSubtree(props, fn)) workInProgress.expirationTime = 1073741823;

                if (!updateQueue || 1073741823 !== renderExpirationTime) {
                  current = bailoutOnAlreadyFinishedWork(current, workInProgress);
                  break a;
                }
              }

              updateQueue = fn.children;
              shouldSetTextContent(props, fn) ? updateQueue = null : unmaskedContext && shouldSetTextContent(props, unmaskedContext) && (workInProgress.effectTag |= 16);
              markRef(current, workInProgress);
              1073741823 !== renderExpirationTime && workInProgress.mode & 1 && shouldDeprioritizeSubtree(props, fn) ? (workInProgress.expirationTime = 1073741823, workInProgress.memoizedProps = fn, current = null) : (reconcileChildren(current, workInProgress, updateQueue), workInProgress.memoizedProps = fn, current = workInProgress.child);
            }

            return current;

          case 6:
            return null === current && tryToClaimNextHydratableInstance(workInProgress), workInProgress.memoizedProps = workInProgress.pendingProps, null;

          case 8:
            workInProgress.tag = 7;

          case 7:
            return props = workInProgress.pendingProps, didPerformWorkStackCursor.current || workInProgress.memoizedProps !== props || (props = workInProgress.memoizedProps), fn = props.children, workInProgress.stateNode = null === current ? mountChildFibers(workInProgress, workInProgress.stateNode, fn, renderExpirationTime) : reconcileChildFibers(workInProgress, current.stateNode, fn, renderExpirationTime), workInProgress.memoizedProps = props, workInProgress.stateNode;

          case 9:
            return null;

          case 4:
            return pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo), props = workInProgress.pendingProps, didPerformWorkStackCursor.current || workInProgress.memoizedProps !== props ? (null === current ? workInProgress.child = reconcileChildFibers(workInProgress, null, props, renderExpirationTime) : reconcileChildren(current, workInProgress, props), workInProgress.memoizedProps = props, current = workInProgress.child) : current = bailoutOnAlreadyFinishedWork(current, workInProgress), current;

          case 10:
            return renderExpirationTime = workInProgress.pendingProps, didPerformWorkStackCursor.current || workInProgress.memoizedProps !== renderExpirationTime ? (reconcileChildren(current, workInProgress, renderExpirationTime), workInProgress.memoizedProps = renderExpirationTime, current = workInProgress.child) : current = bailoutOnAlreadyFinishedWork(current, workInProgress), current;

          case 11:
            return renderExpirationTime = workInProgress.pendingProps.children, didPerformWorkStackCursor.current || null !== renderExpirationTime && workInProgress.memoizedProps !== renderExpirationTime ? (reconcileChildren(current, workInProgress, renderExpirationTime), workInProgress.memoizedProps = renderExpirationTime, current = workInProgress.child) : current = bailoutOnAlreadyFinishedWork(current, workInProgress), current;

          case 13:
            return updateContextProvider(current, workInProgress, renderExpirationTime);

          case 12:
            a: {
              fn = workInProgress.type;
              unmaskedContext = workInProgress.pendingProps;
              updateQueue = workInProgress.memoizedProps;
              props = fn._currentValue;
              var changedBits = fn._changedBits;

              if (didPerformWorkStackCursor.current || 0 !== changedBits || updateQueue !== unmaskedContext) {
                workInProgress.memoizedProps = unmaskedContext;
                var observedBits = unmaskedContext.unstable_observedBits;
                if (void 0 === observedBits || null === observedBits) observedBits = 1073741823;
                workInProgress.stateNode = observedBits;
                if (0 !== (changedBits & observedBits)) propagateContextChange(workInProgress, fn, changedBits, renderExpirationTime);else if (null !== updateQueue && updateQueue.children === unmaskedContext.children) {
                  current = bailoutOnAlreadyFinishedWork(current, workInProgress);
                  break a;
                }
                renderExpirationTime = unmaskedContext.children;
                renderExpirationTime = renderExpirationTime(props);
                reconcileChildren(current, workInProgress, renderExpirationTime);
                current = workInProgress.child;
              } else current = bailoutOnAlreadyFinishedWork(current, workInProgress);
            }

            return current;

          default:
            invariant(!1, "Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
    };
  }

  function ReactFiberCompleteWork(config, hostContext, hydrationContext) {
    function markUpdate(workInProgress) {
      workInProgress.effectTag |= 4;
    }

    var createInstance = config.createInstance,
        createTextInstance = config.createTextInstance,
        appendInitialChild = config.appendInitialChild,
        finalizeInitialChildren = config.finalizeInitialChildren,
        prepareUpdate = config.prepareUpdate,
        persistence = config.persistence,
        getRootHostContainer = hostContext.getRootHostContainer,
        popHostContext = hostContext.popHostContext,
        getHostContext = hostContext.getHostContext,
        popHostContainer = hostContext.popHostContainer,
        prepareToHydrateHostInstance = hydrationContext.prepareToHydrateHostInstance,
        prepareToHydrateHostTextInstance = hydrationContext.prepareToHydrateHostTextInstance,
        popHydrationState = hydrationContext.popHydrationState,
        updateHostContainer = void 0,
        updateHostComponent = void 0,
        updateHostText = void 0;
    config.mutation ? (updateHostContainer = function updateHostContainer() {}, updateHostComponent = function updateHostComponent(current, workInProgress, updatePayload) {
      (workInProgress.updateQueue = updatePayload) && markUpdate(workInProgress);
    }, updateHostText = function updateHostText(current, workInProgress, oldText, newText) {
      oldText !== newText && markUpdate(workInProgress);
    }) : persistence ? invariant(!1, "Persistent reconciler is disabled.") : invariant(!1, "Noop reconciler is disabled.");
    return {
      completeWork: function completeWork(current, workInProgress, renderExpirationTime) {
        var newProps = workInProgress.pendingProps;

        switch (workInProgress.tag) {
          case 1:
            return null;

          case 2:
            return popContextProvider(workInProgress), current = workInProgress.stateNode, newProps = workInProgress.updateQueue, null !== newProps && null !== newProps.capturedValues && (workInProgress.effectTag &= -65, "function" === typeof current.componentDidCatch ? workInProgress.effectTag |= 256 : newProps.capturedValues = null), null;

          case 3:
            popHostContainer(workInProgress);
            pop(didPerformWorkStackCursor, workInProgress);
            pop(contextStackCursor, workInProgress);
            newProps = workInProgress.stateNode;
            newProps.pendingContext && (newProps.context = newProps.pendingContext, newProps.pendingContext = null);
            if (null === current || null === current.child) popHydrationState(workInProgress), workInProgress.effectTag &= -3;
            updateHostContainer(workInProgress);
            current = workInProgress.updateQueue;
            null !== current && null !== current.capturedValues && (workInProgress.effectTag |= 256);
            return null;

          case 5:
            popHostContext(workInProgress);
            renderExpirationTime = getRootHostContainer();
            var type = workInProgress.type;

            if (null !== current && null != workInProgress.stateNode) {
              var oldProps = current.memoizedProps,
                  _instance = workInProgress.stateNode,
                  currentHostContext = getHostContext();
              _instance = prepareUpdate(_instance, type, oldProps, newProps, renderExpirationTime, currentHostContext);
              updateHostComponent(current, workInProgress, _instance, type, oldProps, newProps, renderExpirationTime, currentHostContext);
              current.ref !== workInProgress.ref && (workInProgress.effectTag |= 128);
            } else {
              if (!newProps) return invariant(null !== workInProgress.stateNode, "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue."), null;
              current = getHostContext();
              if (popHydrationState(workInProgress)) prepareToHydrateHostInstance(workInProgress, renderExpirationTime, current) && markUpdate(workInProgress);else {
                oldProps = createInstance(type, newProps, renderExpirationTime, current, workInProgress);

                a: for (currentHostContext = workInProgress.child; null !== currentHostContext;) {
                  if (5 === currentHostContext.tag || 6 === currentHostContext.tag) appendInitialChild(oldProps, currentHostContext.stateNode);else if (4 !== currentHostContext.tag && null !== currentHostContext.child) {
                    currentHostContext.child["return"] = currentHostContext;
                    currentHostContext = currentHostContext.child;
                    continue;
                  }
                  if (currentHostContext === workInProgress) break;

                  for (; null === currentHostContext.sibling;) {
                    if (null === currentHostContext["return"] || currentHostContext["return"] === workInProgress) break a;
                    currentHostContext = currentHostContext["return"];
                  }

                  currentHostContext.sibling["return"] = currentHostContext["return"];
                  currentHostContext = currentHostContext.sibling;
                }

                finalizeInitialChildren(oldProps, type, newProps, renderExpirationTime, current) && markUpdate(workInProgress);
                workInProgress.stateNode = oldProps;
              }
              null !== workInProgress.ref && (workInProgress.effectTag |= 128);
            }

            return null;

          case 6:
            if (current && null != workInProgress.stateNode) updateHostText(current, workInProgress, current.memoizedProps, newProps);else {
              if ("string" !== typeof newProps) return invariant(null !== workInProgress.stateNode, "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue."), null;
              current = getRootHostContainer();
              renderExpirationTime = getHostContext();
              popHydrationState(workInProgress) ? prepareToHydrateHostTextInstance(workInProgress) && markUpdate(workInProgress) : workInProgress.stateNode = createTextInstance(newProps, current, renderExpirationTime, workInProgress);
            }
            return null;

          case 7:
            newProps = workInProgress.memoizedProps;
            invariant(newProps, "Should be resolved by now. This error is likely caused by a bug in React. Please file an issue.");
            workInProgress.tag = 8;
            type = [];

            a: for ((oldProps = workInProgress.stateNode) && (oldProps["return"] = workInProgress); null !== oldProps;) {
              if (5 === oldProps.tag || 6 === oldProps.tag || 4 === oldProps.tag) invariant(!1, "A call cannot have host component children.");else if (9 === oldProps.tag) type.push(oldProps.pendingProps.value);else if (null !== oldProps.child) {
                oldProps.child["return"] = oldProps;
                oldProps = oldProps.child;
                continue;
              }

              for (; null === oldProps.sibling;) {
                if (null === oldProps["return"] || oldProps["return"] === workInProgress) break a;
                oldProps = oldProps["return"];
              }

              oldProps.sibling["return"] = oldProps["return"];
              oldProps = oldProps.sibling;
            }

            oldProps = newProps.handler;
            newProps = oldProps(newProps.props, type);
            workInProgress.child = reconcileChildFibers(workInProgress, null !== current ? current.child : null, newProps, renderExpirationTime);
            return workInProgress.child;

          case 8:
            return workInProgress.tag = 7, null;

          case 9:
            return null;

          case 10:
            return null;

          case 11:
            return null;

          case 4:
            return popHostContainer(workInProgress), updateHostContainer(workInProgress), null;

          case 13:
            return popProvider(workInProgress), null;

          case 12:
            return null;

          case 0:
            invariant(!1, "An indeterminate component should have become determinate before completing. This error is likely caused by a bug in React. Please file an issue.");

          default:
            invariant(!1, "Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
    };
  }

  function ReactFiberUnwindWork(hostContext, scheduleWork, isAlreadyFailedLegacyErrorBoundary) {
    var popHostContainer = hostContext.popHostContainer,
        popHostContext = hostContext.popHostContext;
    return {
      throwException: function throwException(returnFiber, sourceFiber, rawValue) {
        sourceFiber.effectTag |= 512;
        sourceFiber.firstEffect = sourceFiber.lastEffect = null;
        sourceFiber = {
          value: rawValue,
          source: sourceFiber,
          stack: getStackAddendumByWorkInProgressFiber(sourceFiber)
        };

        do {
          switch (returnFiber.tag) {
            case 3:
              ensureUpdateQueues(returnFiber);
              returnFiber.updateQueue.capturedValues = [sourceFiber];
              returnFiber.effectTag |= 1024;
              return;

            case 2:
              rawValue = returnFiber.type;
              var _instance = returnFiber.stateNode;

              if (0 === (returnFiber.effectTag & 64) && ("function" === typeof rawValue.getDerivedStateFromCatch && enableGetDerivedStateFromCatch || null !== _instance && "function" === typeof _instance.componentDidCatch && !isAlreadyFailedLegacyErrorBoundary(_instance))) {
                ensureUpdateQueues(returnFiber);
                rawValue = returnFiber.updateQueue;
                _instance = rawValue.capturedValues;
                null === _instance ? rawValue.capturedValues = [sourceFiber] : _instance.push(sourceFiber);
                returnFiber.effectTag |= 1024;
                return;
              }

          }

          returnFiber = returnFiber["return"];
        } while (null !== returnFiber);
      },
      unwindWork: function unwindWork(workInProgress) {
        switch (workInProgress.tag) {
          case 2:
            popContextProvider(workInProgress);
            var effectTag = workInProgress.effectTag;
            return effectTag & 1024 ? (workInProgress.effectTag = effectTag & -1025 | 64, workInProgress) : null;

          case 3:
            return popHostContainer(workInProgress), pop(didPerformWorkStackCursor, workInProgress), pop(contextStackCursor, workInProgress), effectTag = workInProgress.effectTag, effectTag & 1024 ? (workInProgress.effectTag = effectTag & -1025 | 64, workInProgress) : null;

          case 5:
            return popHostContext(workInProgress), null;

          case 4:
            return popHostContainer(workInProgress), null;

          case 13:
            return popProvider(workInProgress), null;

          default:
            return null;
        }
      }
    };
  }

  function logError(boundary, errorInfo) {
    var source = errorInfo.source,
        stack = errorInfo.stack;
    null === stack && (stack = getStackAddendumByWorkInProgressFiber(source));
    null !== source && getComponentName(source);
    errorInfo = errorInfo.value;
    stack = null !== stack ? stack : "";
    null !== boundary && getComponentName(boundary);

    try {
      if (errorInfo instanceof Error) {
        var message = errorInfo.message,
            name = errorInfo.name;
        var errorToHandle = errorInfo;

        try {
          errorToHandle.message = (message ? name + ": " + message : name) + "\n\nThis error is located at:" + stack;
        } catch (e) {}
      } else errorToHandle = "string" === typeof errorInfo ? Error(errorInfo + "\n\nThis error is located at:" + stack) : Error("Unspecified error at:" + stack);

      ExceptionsManager.handleException(errorToHandle, !1);
    } catch (e) {
      e && e.suppressReactErrorLogging || console.error(e);
    }
  }

  function ReactFiberCommitWork(config, captureError, scheduleWork, computeExpirationForFiber, markLegacyErrorBoundaryAsFailed) {
    function safelyDetachRef(current) {
      var ref = current.ref;
      if (null !== ref) if ("function" === typeof ref) try {
        ref(null);
      } catch (refError) {
        captureError(current, refError);
      } else ref.value = null;
    }

    function commitUnmount(current) {
      "function" === typeof onCommitUnmount && onCommitUnmount(current);

      switch (current.tag) {
        case 2:
          safelyDetachRef(current);
          var _instance6 = current.stateNode;
          if ("function" === typeof _instance6.componentWillUnmount) try {
            _instance6.props = current.memoizedProps, _instance6.state = current.memoizedState, _instance6.componentWillUnmount();
          } catch (unmountError) {
            captureError(current, unmountError);
          }
          break;

        case 5:
          safelyDetachRef(current);
          break;

        case 7:
          commitNestedUnmounts(current.stateNode);
          break;

        case 4:
          mutation && unmountHostComponents(current);
      }
    }

    function commitNestedUnmounts(root) {
      for (var node = root;;) {
        if (commitUnmount(node), null === node.child || mutation && 4 === node.tag) {
          if (node === root) break;

          for (; null === node.sibling;) {
            if (null === node["return"] || node["return"] === root) return;
            node = node["return"];
          }

          node.sibling["return"] = node["return"];
          node = node.sibling;
        } else node.child["return"] = node, node = node.child;
      }
    }

    function isHostParent(fiber) {
      return 5 === fiber.tag || 3 === fiber.tag || 4 === fiber.tag;
    }

    function unmountHostComponents(current) {
      for (var node = current, currentParentIsValid = !1, currentParent = void 0, currentParentIsContainer = void 0;;) {
        if (!currentParentIsValid) {
          currentParentIsValid = node["return"];

          a: for (;;) {
            invariant(null !== currentParentIsValid, "Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");

            switch (currentParentIsValid.tag) {
              case 5:
                currentParent = currentParentIsValid.stateNode;
                currentParentIsContainer = !1;
                break a;

              case 3:
                currentParent = currentParentIsValid.stateNode.containerInfo;
                currentParentIsContainer = !0;
                break a;

              case 4:
                currentParent = currentParentIsValid.stateNode.containerInfo;
                currentParentIsContainer = !0;
                break a;
            }

            currentParentIsValid = currentParentIsValid["return"];
          }

          currentParentIsValid = !0;
        }

        if (5 === node.tag || 6 === node.tag) commitNestedUnmounts(node), currentParentIsContainer ? removeChildFromContainer(currentParent, node.stateNode) : removeChild(currentParent, node.stateNode);else if (4 === node.tag ? currentParent = node.stateNode.containerInfo : commitUnmount(node), null !== node.child) {
          node.child["return"] = node;
          node = node.child;
          continue;
        }
        if (node === current) break;

        for (; null === node.sibling;) {
          if (null === node["return"] || node["return"] === current) return;
          node = node["return"];
          4 === node.tag && (currentParentIsValid = !1);
        }

        node.sibling["return"] = node["return"];
        node = node.sibling;
      }
    }

    var getPublicInstance = config.getPublicInstance,
        mutation = config.mutation;
    config = config.persistence;
    mutation || (config ? invariant(!1, "Persistent reconciler is disabled.") : invariant(!1, "Noop reconciler is disabled."));
    var commitMount = mutation.commitMount,
        commitUpdate = mutation.commitUpdate,
        resetTextContent = mutation.resetTextContent,
        commitTextUpdate = mutation.commitTextUpdate,
        appendChild = mutation.appendChild,
        appendChildToContainer = mutation.appendChildToContainer,
        insertBefore = mutation.insertBefore,
        insertInContainerBefore = mutation.insertInContainerBefore,
        removeChild = mutation.removeChild,
        removeChildFromContainer = mutation.removeChildFromContainer;
    return {
      commitResetTextContent: function commitResetTextContent(current) {
        resetTextContent(current.stateNode);
      },
      commitPlacement: function commitPlacement(finishedWork) {
        a: {
          for (var parent = finishedWork["return"]; null !== parent;) {
            if (isHostParent(parent)) {
              var parentFiber = parent;
              break a;
            }

            parent = parent["return"];
          }

          invariant(!1, "Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
          parentFiber = void 0;
        }

        var isContainer = parent = void 0;

        switch (parentFiber.tag) {
          case 5:
            parent = parentFiber.stateNode;
            isContainer = !1;
            break;

          case 3:
            parent = parentFiber.stateNode.containerInfo;
            isContainer = !0;
            break;

          case 4:
            parent = parentFiber.stateNode.containerInfo;
            isContainer = !0;
            break;

          default:
            invariant(!1, "Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
        }

        parentFiber.effectTag & 16 && (resetTextContent(parent), parentFiber.effectTag &= -17);

        a: b: for (parentFiber = finishedWork;;) {
          for (; null === parentFiber.sibling;) {
            if (null === parentFiber["return"] || isHostParent(parentFiber["return"])) {
              parentFiber = null;
              break a;
            }

            parentFiber = parentFiber["return"];
          }

          parentFiber.sibling["return"] = parentFiber["return"];

          for (parentFiber = parentFiber.sibling; 5 !== parentFiber.tag && 6 !== parentFiber.tag;) {
            if (parentFiber.effectTag & 2) continue b;
            if (null === parentFiber.child || 4 === parentFiber.tag) continue b;else parentFiber.child["return"] = parentFiber, parentFiber = parentFiber.child;
          }

          if (!(parentFiber.effectTag & 2)) {
            parentFiber = parentFiber.stateNode;
            break a;
          }
        }

        for (var node = finishedWork;;) {
          if (5 === node.tag || 6 === node.tag) parentFiber ? isContainer ? insertInContainerBefore(parent, node.stateNode, parentFiber) : insertBefore(parent, node.stateNode, parentFiber) : isContainer ? appendChildToContainer(parent, node.stateNode) : appendChild(parent, node.stateNode);else if (4 !== node.tag && null !== node.child) {
            node.child["return"] = node;
            node = node.child;
            continue;
          }
          if (node === finishedWork) break;

          for (; null === node.sibling;) {
            if (null === node["return"] || node["return"] === finishedWork) return;
            node = node["return"];
          }

          node.sibling["return"] = node["return"];
          node = node.sibling;
        }
      },
      commitDeletion: function commitDeletion(current) {
        unmountHostComponents(current);
        current["return"] = null;
        current.child = null;
        current.alternate && (current.alternate.child = null, current.alternate["return"] = null);
      },
      commitWork: function commitWork(current, finishedWork) {
        switch (finishedWork.tag) {
          case 2:
            break;

          case 5:
            var _instance7 = finishedWork.stateNode;

            if (null != _instance7) {
              var newProps = finishedWork.memoizedProps;
              current = null !== current ? current.memoizedProps : newProps;
              var type = finishedWork.type,
                  updatePayload = finishedWork.updateQueue;
              finishedWork.updateQueue = null;
              null !== updatePayload && commitUpdate(_instance7, updatePayload, type, current, newProps, finishedWork);
            }

            break;

          case 6:
            invariant(null !== finishedWork.stateNode, "This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
            _instance7 = finishedWork.memoizedProps;
            commitTextUpdate(finishedWork.stateNode, null !== current ? current.memoizedProps : _instance7, _instance7);
            break;

          case 3:
            break;

          default:
            invariant(!1, "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
        }
      },
      commitLifeCycles: function commitLifeCycles(finishedRoot, current, finishedWork) {
        switch (finishedWork.tag) {
          case 2:
            finishedRoot = finishedWork.stateNode;
            if (finishedWork.effectTag & 4) if (null === current) finishedRoot.props = finishedWork.memoizedProps, finishedRoot.state = finishedWork.memoizedState, finishedRoot.componentDidMount();else {
              var prevProps = current.memoizedProps;
              current = current.memoizedState;
              finishedRoot.props = finishedWork.memoizedProps;
              finishedRoot.state = finishedWork.memoizedState;
              finishedRoot.componentDidUpdate(prevProps, current);
            }
            finishedWork = finishedWork.updateQueue;
            null !== finishedWork && commitCallbacks(finishedWork, finishedRoot);
            break;

          case 3:
            current = finishedWork.updateQueue;

            if (null !== current) {
              finishedRoot = null;
              if (null !== finishedWork.child) switch (finishedWork.child.tag) {
                case 5:
                  finishedRoot = getPublicInstance(finishedWork.child.stateNode);
                  break;

                case 2:
                  finishedRoot = finishedWork.child.stateNode;
              }
              commitCallbacks(current, finishedRoot);
            }

            break;

          case 5:
            finishedRoot = finishedWork.stateNode;
            null === current && finishedWork.effectTag & 4 && commitMount(finishedRoot, finishedWork.type, finishedWork.memoizedProps, finishedWork);
            break;

          case 6:
            break;

          case 4:
            break;

          default:
            invariant(!1, "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
        }
      },
      commitErrorLogging: function commitErrorLogging(finishedWork, onUncaughtError) {
        switch (finishedWork.tag) {
          case 2:
            var ctor = finishedWork.type;
            onUncaughtError = finishedWork.stateNode;
            var updateQueue = finishedWork.updateQueue;
            invariant(null !== updateQueue && null !== updateQueue.capturedValues, "An error logging effect should not have been scheduled if no errors were captured. This error is likely caused by a bug in React. Please file an issue.");
            var capturedErrors = updateQueue.capturedValues;
            updateQueue.capturedValues = null;
            "function" !== typeof ctor.getDerivedStateFromCatch && markLegacyErrorBoundaryAsFailed(onUncaughtError);
            onUncaughtError.props = finishedWork.memoizedProps;
            onUncaughtError.state = finishedWork.memoizedState;

            for (ctor = 0; ctor < capturedErrors.length; ctor++) {
              updateQueue = capturedErrors[ctor];
              var _error = updateQueue.value;
              logError(finishedWork, updateQueue);
              onUncaughtError.componentDidCatch(_error);
            }

            break;

          case 3:
            ctor = finishedWork.updateQueue;
            invariant(null !== ctor && null !== ctor.capturedValues, "An error logging effect should not have been scheduled if no errors were captured. This error is likely caused by a bug in React. Please file an issue.");
            capturedErrors = ctor.capturedValues;
            ctor.capturedValues = null;

            for (ctor = 0; ctor < capturedErrors.length; ctor++) {
              updateQueue = capturedErrors[ctor], logError(finishedWork, updateQueue), onUncaughtError(updateQueue.value);
            }

            break;

          default:
            invariant(!1, "This unit of work tag cannot capture errors.  This error is likely caused by a bug in React. Please file an issue.");
        }
      },
      commitAttachRef: function commitAttachRef(finishedWork) {
        var ref = finishedWork.ref;

        if (null !== ref) {
          var _instance5 = finishedWork.stateNode;

          switch (finishedWork.tag) {
            case 5:
              finishedWork = getPublicInstance(_instance5);
              break;

            default:
              finishedWork = _instance5;
          }

          "function" === typeof ref ? ref(finishedWork) : ref.value = finishedWork;
        }
      },
      commitDetachRef: function commitDetachRef(current) {
        current = current.ref;
        null !== current && ("function" === typeof current ? current(null) : current.value = null);
      }
    };
  }

  var NO_CONTEXT = {};

  function ReactFiberHostContext(config) {
    function requiredContext(c) {
      invariant(c !== NO_CONTEXT, "Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
      return c;
    }

    var getChildHostContext = config.getChildHostContext,
        getRootHostContext = config.getRootHostContext,
        contextStackCursor = {
      current: NO_CONTEXT
    },
        contextFiberStackCursor = {
      current: NO_CONTEXT
    },
        rootInstanceStackCursor = {
      current: NO_CONTEXT
    };
    return {
      getHostContext: function getHostContext() {
        return requiredContext(contextStackCursor.current);
      },
      getRootHostContainer: function getRootHostContainer() {
        return requiredContext(rootInstanceStackCursor.current);
      },
      popHostContainer: function popHostContainer(fiber) {
        pop(contextStackCursor, fiber);
        pop(contextFiberStackCursor, fiber);
        pop(rootInstanceStackCursor, fiber);
      },
      popHostContext: function popHostContext(fiber) {
        contextFiberStackCursor.current === fiber && (pop(contextStackCursor, fiber), pop(contextFiberStackCursor, fiber));
      },
      pushHostContainer: function pushHostContainer(fiber, nextRootInstance) {
        push(rootInstanceStackCursor, nextRootInstance, fiber);
        nextRootInstance = getRootHostContext(nextRootInstance);
        push(contextFiberStackCursor, fiber, fiber);
        push(contextStackCursor, nextRootInstance, fiber);
      },
      pushHostContext: function pushHostContext(fiber) {
        var rootInstance = requiredContext(rootInstanceStackCursor.current),
            context = requiredContext(contextStackCursor.current);
        rootInstance = getChildHostContext(context, fiber.type, rootInstance);
        context !== rootInstance && (push(contextFiberStackCursor, fiber, fiber), push(contextStackCursor, rootInstance, fiber));
      },
      resetHostContainer: function resetHostContainer() {
        contextStackCursor.current = NO_CONTEXT;
        rootInstanceStackCursor.current = NO_CONTEXT;
      }
    };
  }

  function ReactFiberHydrationContext(config) {
    function deleteHydratableInstance(returnFiber, instance) {
      var fiber = new FiberNode(5, null, null, 0);
      fiber.type = "DELETED";
      fiber.stateNode = instance;
      fiber["return"] = returnFiber;
      fiber.effectTag = 8;
      null !== returnFiber.lastEffect ? (returnFiber.lastEffect.nextEffect = fiber, returnFiber.lastEffect = fiber) : returnFiber.firstEffect = returnFiber.lastEffect = fiber;
    }

    function tryHydrate(fiber, nextInstance) {
      switch (fiber.tag) {
        case 5:
          return nextInstance = canHydrateInstance(nextInstance, fiber.type, fiber.pendingProps), null !== nextInstance ? (fiber.stateNode = nextInstance, !0) : !1;

        case 6:
          return nextInstance = canHydrateTextInstance(nextInstance, fiber.pendingProps), null !== nextInstance ? (fiber.stateNode = nextInstance, !0) : !1;

        default:
          return !1;
      }
    }

    function popToNextHostParent(fiber) {
      for (fiber = fiber["return"]; null !== fiber && 5 !== fiber.tag && 3 !== fiber.tag;) {
        fiber = fiber["return"];
      }

      hydrationParentFiber = fiber;
    }

    var shouldSetTextContent = config.shouldSetTextContent;
    config = config.hydration;
    if (!config) return {
      enterHydrationState: function enterHydrationState() {
        return !1;
      },
      resetHydrationState: function resetHydrationState() {},
      tryToClaimNextHydratableInstance: function tryToClaimNextHydratableInstance() {},
      prepareToHydrateHostInstance: function prepareToHydrateHostInstance() {
        invariant(!1, "Expected prepareToHydrateHostInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.");
      },
      prepareToHydrateHostTextInstance: function prepareToHydrateHostTextInstance() {
        invariant(!1, "Expected prepareToHydrateHostTextInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.");
      },
      popHydrationState: function popHydrationState() {
        return !1;
      }
    };
    var canHydrateInstance = config.canHydrateInstance,
        canHydrateTextInstance = config.canHydrateTextInstance,
        getNextHydratableSibling = config.getNextHydratableSibling,
        getFirstHydratableChild = config.getFirstHydratableChild,
        hydrateInstance = config.hydrateInstance,
        hydrateTextInstance = config.hydrateTextInstance,
        hydrationParentFiber = null,
        nextHydratableInstance = null,
        isHydrating = !1;
    return {
      enterHydrationState: function enterHydrationState(fiber) {
        nextHydratableInstance = getFirstHydratableChild(fiber.stateNode.containerInfo);
        hydrationParentFiber = fiber;
        return isHydrating = !0;
      },
      resetHydrationState: function resetHydrationState() {
        nextHydratableInstance = hydrationParentFiber = null;
        isHydrating = !1;
      },
      tryToClaimNextHydratableInstance: function tryToClaimNextHydratableInstance(fiber) {
        if (isHydrating) {
          var nextInstance = nextHydratableInstance;

          if (nextInstance) {
            if (!tryHydrate(fiber, nextInstance)) {
              nextInstance = getNextHydratableSibling(nextInstance);

              if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                fiber.effectTag |= 2;
                isHydrating = !1;
                hydrationParentFiber = fiber;
                return;
              }

              deleteHydratableInstance(hydrationParentFiber, nextHydratableInstance);
            }

            hydrationParentFiber = fiber;
            nextHydratableInstance = getFirstHydratableChild(nextInstance);
          } else fiber.effectTag |= 2, isHydrating = !1, hydrationParentFiber = fiber;
        }
      },
      prepareToHydrateHostInstance: function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
        rootContainerInstance = hydrateInstance(fiber.stateNode, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber);
        fiber.updateQueue = rootContainerInstance;
        return null !== rootContainerInstance ? !0 : !1;
      },
      prepareToHydrateHostTextInstance: function prepareToHydrateHostTextInstance(fiber) {
        return hydrateTextInstance(fiber.stateNode, fiber.memoizedProps, fiber);
      },
      popHydrationState: function popHydrationState(fiber) {
        if (fiber !== hydrationParentFiber) return !1;
        if (!isHydrating) return popToNextHostParent(fiber), isHydrating = !0, !1;
        var type = fiber.type;
        if (5 !== fiber.tag || "head" !== type && "body" !== type && !shouldSetTextContent(type, fiber.memoizedProps)) for (type = nextHydratableInstance; type;) {
          deleteHydratableInstance(fiber, type), type = getNextHydratableSibling(type);
        }
        popToNextHostParent(fiber);
        nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
        return !0;
      }
    };
  }

  function ReactFiberScheduler(config) {
    function resetContextStack() {
      for (; -1 < index;) {
        valueStack[index] = null, index--;
      }

      previousContext = emptyObject;
      contextStackCursor.current = emptyObject;
      didPerformWorkStackCursor.current = !1;
      resetHostContainer();

      for (var i = index$1; -1 < i; i--) {
        var context = stack[i].type.context;
        context._currentValue = context._defaultValue;
        context._changedBits = 0;
        changedBitsStack[i] = null;
        currentValueStack[i] = null;
        stack[i] = null;
      }

      index$1 = -1;
      nextRoot = null;
      nextRenderExpirationTime = 0;
      nextUnitOfWork = null;
      isRootReadyForCommit = !1;
    }

    function isAlreadyFailedLegacyErrorBoundary(instance) {
      return null !== legacyErrorBoundariesThatAlreadyFailed && legacyErrorBoundariesThatAlreadyFailed.has(instance);
    }

    function completeUnitOfWork(workInProgress$jscomp$0) {
      for (;;) {
        var current = workInProgress$jscomp$0.alternate,
            returnFiber = workInProgress$jscomp$0["return"],
            siblingFiber = workInProgress$jscomp$0.sibling;

        if (0 === (workInProgress$jscomp$0.effectTag & 512)) {
          current = completeWork(current, workInProgress$jscomp$0, nextRenderExpirationTime);
          var workInProgress = workInProgress$jscomp$0;

          if (1073741823 === nextRenderExpirationTime || 1073741823 !== workInProgress.expirationTime) {
            b: switch (workInProgress.tag) {
              case 3:
              case 2:
                var newExpirationTime = workInProgress.updateQueue;
                newExpirationTime = null === newExpirationTime ? 0 : newExpirationTime.expirationTime;
                break b;

              default:
                newExpirationTime = 0;
            }

            for (var child = workInProgress.child; null !== child;) {
              0 !== child.expirationTime && (0 === newExpirationTime || newExpirationTime > child.expirationTime) && (newExpirationTime = child.expirationTime), child = child.sibling;
            }

            workInProgress.expirationTime = newExpirationTime;
          }

          if (null !== current) return current;
          null !== returnFiber && 0 === (returnFiber.effectTag & 512) && (null === returnFiber.firstEffect && (returnFiber.firstEffect = workInProgress$jscomp$0.firstEffect), null !== workInProgress$jscomp$0.lastEffect && (null !== returnFiber.lastEffect && (returnFiber.lastEffect.nextEffect = workInProgress$jscomp$0.firstEffect), returnFiber.lastEffect = workInProgress$jscomp$0.lastEffect), 1 < workInProgress$jscomp$0.effectTag && (null !== returnFiber.lastEffect ? returnFiber.lastEffect.nextEffect = workInProgress$jscomp$0 : returnFiber.firstEffect = workInProgress$jscomp$0, returnFiber.lastEffect = workInProgress$jscomp$0));
          if (null !== siblingFiber) return siblingFiber;
          if (null !== returnFiber) workInProgress$jscomp$0 = returnFiber;else {
            isRootReadyForCommit = !0;
            break;
          }
        } else {
          workInProgress$jscomp$0 = unwindWork(workInProgress$jscomp$0);
          if (null !== workInProgress$jscomp$0) return workInProgress$jscomp$0.effectTag &= 511, workInProgress$jscomp$0;
          null !== returnFiber && (returnFiber.firstEffect = returnFiber.lastEffect = null, returnFiber.effectTag |= 512);
          if (null !== siblingFiber) return siblingFiber;
          if (null !== returnFiber) workInProgress$jscomp$0 = returnFiber;else break;
        }
      }

      return null;
    }

    function performUnitOfWork(workInProgress) {
      var next = beginWork(workInProgress.alternate, workInProgress, nextRenderExpirationTime);
      null === next && (next = completeUnitOfWork(workInProgress));
      ReactCurrentOwner.current = null;
      return next;
    }

    function renderRoot(root, expirationTime, isAsync) {
      invariant(!isWorking, "renderRoot was called recursively. This error is likely caused by a bug in React. Please file an issue.");
      isWorking = !0;
      if (expirationTime !== nextRenderExpirationTime || root !== nextRoot || null === nextUnitOfWork) resetContextStack(), nextRoot = root, nextRenderExpirationTime = expirationTime, nextUnitOfWork = createWorkInProgress(nextRoot.current, null, nextRenderExpirationTime), root.pendingCommitExpirationTime = 0;
      var didFatal = !1;

      do {
        try {
          if (isAsync) for (; null !== nextUnitOfWork && !shouldYield();) {
            nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
          } else for (; null !== nextUnitOfWork;) {
            nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
          }
        } catch (thrownValue) {
          if (null === nextUnitOfWork) {
            didFatal = !0;
            onUncaughtError(thrownValue);
            break;
          }

          isAsync = nextUnitOfWork;
          var returnFiber = isAsync["return"];

          if (null === returnFiber) {
            didFatal = !0;
            onUncaughtError(thrownValue);
            break;
          }

          throwException(returnFiber, isAsync, thrownValue);
          nextUnitOfWork = completeUnitOfWork(isAsync);
        }

        break;
      } while (1);

      isWorking = !1;
      if (didFatal || null !== nextUnitOfWork) return null;
      if (isRootReadyForCommit) return root.pendingCommitExpirationTime = expirationTime, root.current.alternate;
      invariant(!1, "Expired work should have completed. This error is likely caused by a bug in React. Please file an issue.");
    }

    function scheduleCapture(sourceFiber, boundaryFiber, value, expirationTime) {
      sourceFiber = {
        value: value,
        source: sourceFiber,
        stack: getStackAddendumByWorkInProgressFiber(sourceFiber)
      };
      insertUpdateIntoFiber(boundaryFiber, {
        expirationTime: expirationTime,
        partialState: null,
        callback: null,
        isReplace: !1,
        isForced: !1,
        capturedValue: sourceFiber,
        next: null
      });
      scheduleWork(boundaryFiber, expirationTime);
    }

    function onCommitPhaseError(fiber$jscomp$0, error) {
      a: {
        invariant(!isWorking || isCommitting, "dispatch: Cannot dispatch during the render phase.");

        for (var fiber = fiber$jscomp$0["return"]; null !== fiber;) {
          switch (fiber.tag) {
            case 2:
              var instance = fiber.stateNode;

              if ("function" === typeof fiber.type.getDerivedStateFromCatch || "function" === typeof instance.componentDidCatch && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                scheduleCapture(fiber$jscomp$0, fiber, error, 1);
                fiber$jscomp$0 = void 0;
                break a;
              }

              break;

            case 3:
              scheduleCapture(fiber$jscomp$0, fiber, error, 1);
              fiber$jscomp$0 = void 0;
              break a;
          }

          fiber = fiber["return"];
        }

        3 === fiber$jscomp$0.tag && scheduleCapture(fiber$jscomp$0, fiber$jscomp$0, error, 1);
        fiber$jscomp$0 = void 0;
      }

      return fiber$jscomp$0;
    }

    function computeExpirationForFiber(fiber) {
      fiber = 0 !== expirationContext ? expirationContext : isWorking ? isCommitting ? 1 : nextRenderExpirationTime : fiber.mode & 1 ? isBatchingInteractiveUpdates ? 10 * (((recalculateCurrentTime() + 50) / 10 | 0) + 1) : 25 * (((recalculateCurrentTime() + 500) / 25 | 0) + 1) : 1;
      isBatchingInteractiveUpdates && (0 === lowestPendingInteractiveExpirationTime || fiber > lowestPendingInteractiveExpirationTime) && (lowestPendingInteractiveExpirationTime = fiber);
      return fiber;
    }

    function scheduleWork(fiber, expirationTime) {
      a: {
        for (; null !== fiber;) {
          if (0 === fiber.expirationTime || fiber.expirationTime > expirationTime) fiber.expirationTime = expirationTime;
          null !== fiber.alternate && (0 === fiber.alternate.expirationTime || fiber.alternate.expirationTime > expirationTime) && (fiber.alternate.expirationTime = expirationTime);
          if (null === fiber["return"]) if (3 === fiber.tag) {
            var root = fiber.stateNode;
            !isWorking && 0 !== nextRenderExpirationTime && expirationTime < nextRenderExpirationTime && resetContextStack();
            nextRoot === root && isWorking || requestWork(root, expirationTime);
            nestedUpdateCount > NESTED_UPDATE_LIMIT && invariant(!1, "Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
          } else {
            expirationTime = void 0;
            break a;
          }
          fiber = fiber["return"];
        }

        expirationTime = void 0;
      }

      return expirationTime;
    }

    function recalculateCurrentTime() {
      mostRecentCurrentTimeMs = now() - originalStartTimeMs;
      return mostRecentCurrentTime = (mostRecentCurrentTimeMs / 10 | 0) + 2;
    }

    function syncUpdates(fn, a, b, c, d) {
      var previousExpirationContext = expirationContext;
      expirationContext = 1;

      try {
        return fn(a, b, c, d);
      } finally {
        expirationContext = previousExpirationContext;
      }
    }

    function scheduleCallbackWithExpiration(expirationTime) {
      if (0 !== callbackExpirationTime) {
        if (expirationTime > callbackExpirationTime) return;
        cancelDeferredCallback(callbackID);
      }

      var currentMs = now() - originalStartTimeMs;
      callbackExpirationTime = expirationTime;
      callbackID = scheduleDeferredCallback(performAsyncWork, {
        timeout: 10 * (expirationTime - 2) - currentMs
      });
    }

    function requestWork(root, expirationTime) {
      if (null === root.nextScheduledRoot) root.remainingExpirationTime = expirationTime, null === lastScheduledRoot ? (firstScheduledRoot = lastScheduledRoot = root, root.nextScheduledRoot = root) : (lastScheduledRoot = lastScheduledRoot.nextScheduledRoot = root, lastScheduledRoot.nextScheduledRoot = firstScheduledRoot);else {
        var remainingExpirationTime = root.remainingExpirationTime;
        if (0 === remainingExpirationTime || expirationTime < remainingExpirationTime) root.remainingExpirationTime = expirationTime;
      }
      isRendering || (isBatchingUpdates ? isUnbatchingUpdates && (nextFlushedRoot = root, nextFlushedExpirationTime = 1, performWorkOnRoot(root, 1, !1)) : 1 === expirationTime ? performWork(1, !1, null) : scheduleCallbackWithExpiration(expirationTime));
    }

    function findHighestPriorityRoot() {
      var highestPriorityWork = 0,
          highestPriorityRoot = null;
      if (null !== lastScheduledRoot) for (var previousScheduledRoot = lastScheduledRoot, root = firstScheduledRoot; null !== root;) {
        var remainingExpirationTime = root.remainingExpirationTime;

        if (0 === remainingExpirationTime) {
          invariant(null !== previousScheduledRoot && null !== lastScheduledRoot, "Should have a previous and last root. This error is likely caused by a bug in React. Please file an issue.");

          if (root === root.nextScheduledRoot) {
            firstScheduledRoot = lastScheduledRoot = root.nextScheduledRoot = null;
            break;
          } else if (root === firstScheduledRoot) firstScheduledRoot = remainingExpirationTime = root.nextScheduledRoot, lastScheduledRoot.nextScheduledRoot = remainingExpirationTime, root.nextScheduledRoot = null;else if (root === lastScheduledRoot) {
            lastScheduledRoot = previousScheduledRoot;
            lastScheduledRoot.nextScheduledRoot = firstScheduledRoot;
            root.nextScheduledRoot = null;
            break;
          } else previousScheduledRoot.nextScheduledRoot = root.nextScheduledRoot, root.nextScheduledRoot = null;

          root = previousScheduledRoot.nextScheduledRoot;
        } else {
          if (0 === highestPriorityWork || remainingExpirationTime < highestPriorityWork) highestPriorityWork = remainingExpirationTime, highestPriorityRoot = root;
          if (root === lastScheduledRoot) break;
          previousScheduledRoot = root;
          root = root.nextScheduledRoot;
        }
      }
      previousScheduledRoot = nextFlushedRoot;
      null !== previousScheduledRoot && previousScheduledRoot === highestPriorityRoot && 1 === highestPriorityWork ? nestedUpdateCount++ : nestedUpdateCount = 0;
      nextFlushedRoot = highestPriorityRoot;
      nextFlushedExpirationTime = highestPriorityWork;
    }

    function performAsyncWork(dl) {
      performWork(0, !0, dl);
    }

    function performWork(minExpirationTime, isAsync, dl) {
      deadline = dl;
      findHighestPriorityRoot();
      if (isAsync) for (; null !== nextFlushedRoot && 0 !== nextFlushedExpirationTime && (0 === minExpirationTime || minExpirationTime >= nextFlushedExpirationTime) && (!deadlineDidExpire || recalculateCurrentTime() >= nextFlushedExpirationTime);) {
        performWorkOnRoot(nextFlushedRoot, nextFlushedExpirationTime, !deadlineDidExpire), findHighestPriorityRoot();
      } else for (; null !== nextFlushedRoot && 0 !== nextFlushedExpirationTime && (0 === minExpirationTime || minExpirationTime >= nextFlushedExpirationTime);) {
        performWorkOnRoot(nextFlushedRoot, nextFlushedExpirationTime, !1), findHighestPriorityRoot();
      }
      null !== deadline && (callbackExpirationTime = 0, callbackID = -1);
      0 !== nextFlushedExpirationTime && scheduleCallbackWithExpiration(nextFlushedExpirationTime);
      deadline = null;
      deadlineDidExpire = !1;
      finishRendering();
    }

    function finishRendering() {
      nestedUpdateCount = 0;

      if (null !== completedBatches) {
        var batches = completedBatches;
        completedBatches = null;

        for (var i = 0; i < batches.length; i++) {
          var batch = batches[i];

          try {
            batch._onComplete();
          } catch (error) {
            hasUnhandledError || (hasUnhandledError = !0, unhandledError = error);
          }
        }
      }

      if (hasUnhandledError) throw batches = unhandledError, unhandledError = null, hasUnhandledError = !1, batches;
    }

    function performWorkOnRoot(root, expirationTime, isAsync) {
      invariant(!isRendering, "performWorkOnRoot was called recursively. This error is likely caused by a bug in React. Please file an issue.");
      isRendering = !0;
      isAsync ? (isAsync = root.finishedWork, null !== isAsync ? completeRoot(root, isAsync, expirationTime) : (root.finishedWork = null, isAsync = renderRoot(root, expirationTime, !0), null !== isAsync && (shouldYield() ? root.finishedWork = isAsync : completeRoot(root, isAsync, expirationTime)))) : (isAsync = root.finishedWork, null !== isAsync ? completeRoot(root, isAsync, expirationTime) : (root.finishedWork = null, isAsync = renderRoot(root, expirationTime, !1), null !== isAsync && completeRoot(root, isAsync, expirationTime)));
      isRendering = !1;
    }

    function completeRoot(root, finishedWork, expirationTime) {
      var firstBatch = root.firstBatch;

      if (null !== firstBatch && firstBatch._expirationTime <= expirationTime && (null === completedBatches ? completedBatches = [firstBatch] : completedBatches.push(firstBatch), firstBatch._defer)) {
        root.finishedWork = finishedWork;
        root.remainingExpirationTime = 0;
        return;
      }

      root.finishedWork = null;
      isCommitting = isWorking = !0;
      expirationTime = finishedWork.stateNode;
      invariant(expirationTime.current !== finishedWork, "Cannot commit the same tree as before. This is probably a bug related to the return field. This error is likely caused by a bug in React. Please file an issue.");
      firstBatch = expirationTime.pendingCommitExpirationTime;
      invariant(0 !== firstBatch, "Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
      expirationTime.pendingCommitExpirationTime = 0;
      var currentTime = recalculateCurrentTime();
      ReactCurrentOwner.current = null;
      if (1 < finishedWork.effectTag) {
        if (null !== finishedWork.lastEffect) {
          finishedWork.lastEffect.nextEffect = finishedWork;
          var firstEffect = finishedWork.firstEffect;
        } else firstEffect = finishedWork;
      } else firstEffect = finishedWork.firstEffect;
      prepareForCommit(expirationTime.containerInfo);

      for (nextEffect = firstEffect; null !== nextEffect;) {
        var didError = !1,
            error = void 0;

        try {
          for (; null !== nextEffect;) {
            var effectTag = nextEffect.effectTag;
            effectTag & 16 && commitResetTextContent(nextEffect);

            if (effectTag & 128) {
              var current = nextEffect.alternate;
              null !== current && commitDetachRef(current);
            }

            switch (effectTag & 14) {
              case 2:
                commitPlacement(nextEffect);
                nextEffect.effectTag &= -3;
                break;

              case 6:
                commitPlacement(nextEffect);
                nextEffect.effectTag &= -3;
                commitWork(nextEffect.alternate, nextEffect);
                break;

              case 4:
                commitWork(nextEffect.alternate, nextEffect);
                break;

              case 8:
                commitDeletion(nextEffect);
            }

            nextEffect = nextEffect.nextEffect;
          }
        } catch (e) {
          didError = !0, error = e;
        }

        didError && (invariant(null !== nextEffect, "Should have next effect. This error is likely caused by a bug in React. Please file an issue."), onCommitPhaseError(nextEffect, error), null !== nextEffect && (nextEffect = nextEffect.nextEffect));
      }

      resetAfterCommit(expirationTime.containerInfo);
      expirationTime.current = finishedWork;

      for (nextEffect = firstEffect; null !== nextEffect;) {
        effectTag = !1;
        current = void 0;

        try {
          for (firstEffect = expirationTime, didError = currentTime, error = firstBatch; null !== nextEffect;) {
            var effectTag$jscomp$0 = nextEffect.effectTag;
            effectTag$jscomp$0 & 36 && commitLifeCycles(firstEffect, nextEffect.alternate, nextEffect, didError, error);
            effectTag$jscomp$0 & 256 && commitErrorLogging(nextEffect, onUncaughtError);
            effectTag$jscomp$0 & 128 && commitAttachRef(nextEffect);
            var next = nextEffect.nextEffect;
            nextEffect.nextEffect = null;
            nextEffect = next;
          }
        } catch (e) {
          effectTag = !0, current = e;
        }

        effectTag && (invariant(null !== nextEffect, "Should have next effect. This error is likely caused by a bug in React. Please file an issue."), onCommitPhaseError(nextEffect, current), null !== nextEffect && (nextEffect = nextEffect.nextEffect));
      }

      isWorking = isCommitting = !1;
      "function" === typeof onCommitRoot && onCommitRoot(finishedWork.stateNode);
      finishedWork = expirationTime.current.expirationTime;
      0 === finishedWork && (legacyErrorBoundariesThatAlreadyFailed = null);
      root.remainingExpirationTime = finishedWork;
    }

    function shouldYield() {
      return null === deadline || deadline.timeRemaining() > timeHeuristicForUnitOfWork ? !1 : deadlineDidExpire = !0;
    }

    function onUncaughtError(error) {
      invariant(null !== nextFlushedRoot, "Should be working on a root. This error is likely caused by a bug in React. Please file an issue.");
      nextFlushedRoot.remainingExpirationTime = 0;
      hasUnhandledError || (hasUnhandledError = !0, unhandledError = error);
    }

    var hostContext = ReactFiberHostContext(config),
        hydrationContext = ReactFiberHydrationContext(config),
        resetHostContainer = hostContext.resetHostContainer,
        beginWork = ReactFiberBeginWork(config, hostContext, hydrationContext, scheduleWork, computeExpirationForFiber).beginWork,
        completeWork = ReactFiberCompleteWork(config, hostContext, hydrationContext).completeWork;
    hostContext = ReactFiberUnwindWork(hostContext, scheduleWork, isAlreadyFailedLegacyErrorBoundary);
    var throwException = hostContext.throwException,
        unwindWork = hostContext.unwindWork;
    hostContext = ReactFiberCommitWork(config, onCommitPhaseError, scheduleWork, computeExpirationForFiber, function (instance) {
      null === legacyErrorBoundariesThatAlreadyFailed ? legacyErrorBoundariesThatAlreadyFailed = new Set([instance]) : legacyErrorBoundariesThatAlreadyFailed.add(instance);
    }, recalculateCurrentTime);
    var commitResetTextContent = hostContext.commitResetTextContent,
        commitPlacement = hostContext.commitPlacement,
        commitDeletion = hostContext.commitDeletion,
        commitWork = hostContext.commitWork,
        commitLifeCycles = hostContext.commitLifeCycles,
        commitErrorLogging = hostContext.commitErrorLogging,
        commitAttachRef = hostContext.commitAttachRef,
        commitDetachRef = hostContext.commitDetachRef,
        now = config.now,
        scheduleDeferredCallback = config.scheduleDeferredCallback,
        cancelDeferredCallback = config.cancelDeferredCallback,
        prepareForCommit = config.prepareForCommit,
        resetAfterCommit = config.resetAfterCommit,
        originalStartTimeMs = now(),
        mostRecentCurrentTime = 2,
        mostRecentCurrentTimeMs = originalStartTimeMs,
        lastUniqueAsyncExpiration = 0,
        expirationContext = 0,
        isWorking = !1,
        nextUnitOfWork = null,
        nextRoot = null,
        nextRenderExpirationTime = 0,
        nextEffect = null,
        isCommitting = !1,
        isRootReadyForCommit = !1,
        legacyErrorBoundariesThatAlreadyFailed = null,
        firstScheduledRoot = null,
        lastScheduledRoot = null,
        callbackExpirationTime = 0,
        callbackID = -1,
        isRendering = !1,
        nextFlushedRoot = null,
        nextFlushedExpirationTime = 0,
        lowestPendingInteractiveExpirationTime = 0,
        deadlineDidExpire = !1,
        hasUnhandledError = !1,
        unhandledError = null,
        deadline = null,
        isBatchingUpdates = !1,
        isUnbatchingUpdates = !1,
        isBatchingInteractiveUpdates = !1,
        completedBatches = null,
        NESTED_UPDATE_LIMIT = 1e3,
        nestedUpdateCount = 0,
        timeHeuristicForUnitOfWork = 1;
    return {
      recalculateCurrentTime: recalculateCurrentTime,
      computeExpirationForFiber: computeExpirationForFiber,
      scheduleWork: scheduleWork,
      requestWork: requestWork,
      flushRoot: function flushRoot(root, expirationTime) {
        invariant(!isRendering, "work.commit(): Cannot commit while already rendering. This likely means you attempted to commit from inside a lifecycle method.");
        performWorkOnRoot(root, expirationTime, !1);
        finishRendering();
      },
      batchedUpdates: function batchedUpdates(fn, a) {
        var previousIsBatchingUpdates = isBatchingUpdates;
        isBatchingUpdates = !0;

        try {
          return fn(a);
        } finally {
          (isBatchingUpdates = previousIsBatchingUpdates) || isRendering || performWork(1, !1, null);
        }
      },
      unbatchedUpdates: function unbatchedUpdates(fn, a) {
        if (isBatchingUpdates && !isUnbatchingUpdates) {
          isUnbatchingUpdates = !0;

          try {
            return fn(a);
          } finally {
            isUnbatchingUpdates = !1;
          }
        }

        return fn(a);
      },
      flushSync: function flushSync(fn, a) {
        invariant(!isRendering, "flushSync was called from inside a lifecycle method. It cannot be called when React is already rendering.");
        var previousIsBatchingUpdates = isBatchingUpdates;
        isBatchingUpdates = !0;

        try {
          return syncUpdates(fn, a);
        } finally {
          isBatchingUpdates = previousIsBatchingUpdates, performWork(1, !1, null);
        }
      },
      flushControlled: function flushControlled(fn) {
        var previousIsBatchingUpdates = isBatchingUpdates;
        isBatchingUpdates = !0;

        try {
          syncUpdates(fn);
        } finally {
          (isBatchingUpdates = previousIsBatchingUpdates) || isRendering || performWork(1, !1, null);
        }
      },
      deferredUpdates: function deferredUpdates(fn) {
        var previousExpirationContext = expirationContext;
        expirationContext = 25 * (((recalculateCurrentTime() + 500) / 25 | 0) + 1);

        try {
          return fn();
        } finally {
          expirationContext = previousExpirationContext;
        }
      },
      syncUpdates: syncUpdates,
      interactiveUpdates: function interactiveUpdates(fn, a, b) {
        if (isBatchingInteractiveUpdates) return fn(a, b);
        isBatchingUpdates || isRendering || 0 === lowestPendingInteractiveExpirationTime || (performWork(lowestPendingInteractiveExpirationTime, !1, null), lowestPendingInteractiveExpirationTime = 0);
        var previousIsBatchingInteractiveUpdates = isBatchingInteractiveUpdates,
            previousIsBatchingUpdates = isBatchingUpdates;
        isBatchingUpdates = isBatchingInteractiveUpdates = !0;

        try {
          return fn(a, b);
        } finally {
          isBatchingInteractiveUpdates = previousIsBatchingInteractiveUpdates, (isBatchingUpdates = previousIsBatchingUpdates) || isRendering || performWork(1, !1, null);
        }
      },
      flushInteractiveUpdates: function flushInteractiveUpdates() {
        isRendering || 0 === lowestPendingInteractiveExpirationTime || (performWork(lowestPendingInteractiveExpirationTime, !1, null), lowestPendingInteractiveExpirationTime = 0);
      },
      computeUniqueAsyncExpiration: function computeUniqueAsyncExpiration() {
        var result = 25 * (((recalculateCurrentTime() + 500) / 25 | 0) + 1);
        result <= lastUniqueAsyncExpiration && (result = lastUniqueAsyncExpiration + 1);
        return lastUniqueAsyncExpiration = result;
      }
    };
  }

  function ReactFiberReconciler$1(config) {
    function _updateContainerAtExpirationTime(element, container, parentComponent, currentTime, expirationTime, callback) {
      currentTime = container.current;

      if (parentComponent) {
        parentComponent = parentComponent._reactInternalFiber;
        var parentContext;

        b: {
          invariant(2 === isFiberMountedImpl(parentComponent) && 2 === parentComponent.tag, "Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");

          for (parentContext = parentComponent; 3 !== parentContext.tag;) {
            if (isContextProvider(parentContext)) {
              parentContext = parentContext.stateNode.__reactInternalMemoizedMergedChildContext;
              break b;
            }

            parentContext = parentContext["return"];
            invariant(parentContext, "Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
          }

          parentContext = parentContext.stateNode.context;
        }

        parentComponent = isContextProvider(parentComponent) ? processChildContext(parentComponent, parentContext) : parentContext;
      } else parentComponent = emptyObject;

      null === container.context ? container.context = parentComponent : container.pendingContext = parentComponent;
      container = callback;
      insertUpdateIntoFiber(currentTime, {
        expirationTime: expirationTime,
        partialState: {
          element: element
        },
        callback: void 0 === container ? null : container,
        isReplace: !1,
        isForced: !1,
        capturedValue: null,
        next: null
      });
      scheduleWork(currentTime, expirationTime);
      return expirationTime;
    }

    function findHostInstance(fiber) {
      fiber = findCurrentHostFiber(fiber);
      return null === fiber ? null : fiber.stateNode;
    }

    var getPublicInstance = config.getPublicInstance;
    config = ReactFiberScheduler(config);
    var recalculateCurrentTime = config.recalculateCurrentTime,
        computeExpirationForFiber = config.computeExpirationForFiber,
        scheduleWork = config.scheduleWork;
    return {
      createContainer: function createContainer(containerInfo, isAsync, hydrate) {
        isAsync = new FiberNode(3, null, null, isAsync ? 3 : 0);
        containerInfo = {
          current: isAsync,
          containerInfo: containerInfo,
          pendingChildren: null,
          pendingCommitExpirationTime: 0,
          finishedWork: null,
          context: null,
          pendingContext: null,
          hydrate: hydrate,
          remainingExpirationTime: 0,
          firstBatch: null,
          nextScheduledRoot: null
        };
        return isAsync.stateNode = containerInfo;
      },
      updateContainer: function updateContainer(element, container, parentComponent, callback) {
        var current = container.current,
            currentTime = recalculateCurrentTime();
        current = computeExpirationForFiber(current);
        return _updateContainerAtExpirationTime(element, container, parentComponent, currentTime, current, callback);
      },
      updateContainerAtExpirationTime: function updateContainerAtExpirationTime(element, container, parentComponent, expirationTime, callback) {
        var currentTime = recalculateCurrentTime();
        return _updateContainerAtExpirationTime(element, container, parentComponent, currentTime, expirationTime, callback);
      },
      flushRoot: config.flushRoot,
      requestWork: config.requestWork,
      computeUniqueAsyncExpiration: config.computeUniqueAsyncExpiration,
      batchedUpdates: config.batchedUpdates,
      unbatchedUpdates: config.unbatchedUpdates,
      deferredUpdates: config.deferredUpdates,
      syncUpdates: config.syncUpdates,
      interactiveUpdates: config.interactiveUpdates,
      flushInteractiveUpdates: config.flushInteractiveUpdates,
      flushControlled: config.flushControlled,
      flushSync: config.flushSync,
      getPublicRootInstance: function getPublicRootInstance(container) {
        container = container.current;
        if (!container.child) return null;

        switch (container.child.tag) {
          case 5:
            return getPublicInstance(container.child.stateNode);

          default:
            return container.child.stateNode;
        }
      },
      findHostInstance: findHostInstance,
      findHostInstanceWithNoPortals: function findHostInstanceWithNoPortals(fiber) {
        fiber = findCurrentHostFiberWithNoPortals(fiber);
        return null === fiber ? null : fiber.stateNode;
      },
      injectIntoDevTools: function injectIntoDevTools(devToolsConfig) {
        var _findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
        return injectInternals(babelHelpers.extends({}, devToolsConfig, {
          findHostInstanceByFiber: function findHostInstanceByFiber(fiber) {
            return findHostInstance(fiber);
          },
          findFiberByHostInstance: function findFiberByHostInstance(instance) {
            return _findFiberByHostInstance ? _findFiberByHostInstance(instance) : null;
          }
        }));
      }
    };
  }

  var ReactFiberReconciler$2 = Object.freeze({
    default: ReactFiberReconciler$1
  }),
      ReactFiberReconciler$3 = ReactFiberReconciler$2 && ReactFiberReconciler$1 || ReactFiberReconciler$2,
      reactReconciler = ReactFiberReconciler$3["default"] ? ReactFiberReconciler$3["default"] : ReactFiberReconciler$3,
      viewConfigCallbacks = new Map(),
      viewConfigs = new Map(),
      ReactNativeFiberHostComponent = function () {
    function ReactNativeFiberHostComponent(tag, viewConfig) {
      if (!(this instanceof ReactNativeFiberHostComponent)) throw new TypeError("Cannot call a class as a function");
      this._nativeTag = tag;
      this._children = [];
      this.viewConfig = viewConfig;
    }

    ReactNativeFiberHostComponent.prototype.blur = function () {
      TextInputState.blurTextInput(this._nativeTag);
    };

    ReactNativeFiberHostComponent.prototype.focus = function () {
      TextInputState.focusTextInput(this._nativeTag);
    };

    ReactNativeFiberHostComponent.prototype.measure = function (callback) {
      UIManager.measure(this._nativeTag, mountSafeCallback(this, callback));
    };

    ReactNativeFiberHostComponent.prototype.measureInWindow = function (callback) {
      UIManager.measureInWindow(this._nativeTag, mountSafeCallback(this, callback));
    };

    ReactNativeFiberHostComponent.prototype.measureLayout = function (relativeToNativeNode, onSuccess, onFail) {
      UIManager.measureLayout(this._nativeTag, relativeToNativeNode, mountSafeCallback(this, onFail), mountSafeCallback(this, onSuccess));
    };

    ReactNativeFiberHostComponent.prototype.setNativeProps = function (nativeProps) {
      nativeProps = diffProperties(null, emptyObject$1, nativeProps, this.viewConfig.validAttributes);
      null != nativeProps && UIManager.updateView(this._nativeTag, this.viewConfig.uiViewClassName, nativeProps);
    };

    return ReactNativeFiberHostComponent;
  }(),
      now = "object" === typeof performance && "function" === typeof performance.now ? function () {
    return performance.now();
  } : function () {
    return Date.now();
  },
      scheduledCallback = null,
      frameDeadline = 0,
      frameDeadlineObject = {
    timeRemaining: function timeRemaining() {
      return frameDeadline - now();
    }
  };

  function setTimeoutCallback() {
    frameDeadline = now() + 5;
    var callback = scheduledCallback;
    scheduledCallback = null;
    null !== callback && callback(frameDeadlineObject);
  }

  function recursivelyUncacheFiberNode(node) {
    "number" === typeof node ? uncacheFiberNode(node) : (uncacheFiberNode(node._nativeTag), node._children.forEach(recursivelyUncacheFiberNode));
  }

  var NativeRenderer = reactReconciler({
    appendInitialChild: function appendInitialChild(parentInstance, child) {
      parentInstance._children.push(child);
    },
    createInstance: function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
      hostContext = ReactNativeTagHandles.allocateTag();
      if (viewConfigs.has(type)) var viewConfig = viewConfigs.get(type);else viewConfig = viewConfigCallbacks.get(type), invariant("function" === typeof viewConfig, "View config not found for name %s", type), viewConfigCallbacks.set(type, null), viewConfig = viewConfig(), viewConfigs.set(type, viewConfig);
      invariant(viewConfig, "View config not found for name %s", type);
      type = viewConfig;
      viewConfig = diffProperties(null, emptyObject$1, props, type.validAttributes);
      UIManager.createView(hostContext, type.uiViewClassName, rootContainerInstance, viewConfig);
      rootContainerInstance = new ReactNativeFiberHostComponent(hostContext, type);
      instanceCache[hostContext] = internalInstanceHandle;
      instanceProps[hostContext] = props;
      return rootContainerInstance;
    },
    createTextInstance: function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
      hostContext = ReactNativeTagHandles.allocateTag();
      UIManager.createView(hostContext, "RCTRawText", rootContainerInstance, {
        text: text
      });
      instanceCache[hostContext] = internalInstanceHandle;
      return hostContext;
    },
    finalizeInitialChildren: function finalizeInitialChildren(parentInstance) {
      if (0 === parentInstance._children.length) return !1;

      var nativeTags = parentInstance._children.map(function (child) {
        return "number" === typeof child ? child : child._nativeTag;
      });

      UIManager.setChildren(parentInstance._nativeTag, nativeTags);
      return !1;
    },
    getRootHostContext: function getRootHostContext() {
      return emptyObject;
    },
    getChildHostContext: function getChildHostContext() {
      return emptyObject;
    },
    getPublicInstance: function getPublicInstance(instance) {
      return instance;
    },
    now: now,
    prepareForCommit: function prepareForCommit() {},
    prepareUpdate: function prepareUpdate() {
      return emptyObject;
    },
    resetAfterCommit: function resetAfterCommit() {},
    scheduleDeferredCallback: function scheduleDeferredCallback(callback) {
      scheduledCallback = callback;
      return setTimeout(setTimeoutCallback, 1);
    },
    cancelDeferredCallback: function cancelDeferredCallback(callbackID) {
      scheduledCallback = null;
      clearTimeout(callbackID);
    },
    shouldDeprioritizeSubtree: function shouldDeprioritizeSubtree() {
      return !1;
    },
    shouldSetTextContent: function shouldSetTextContent() {
      return !1;
    },
    mutation: {
      appendChild: function appendChild(parentInstance, child) {
        var childTag = "number" === typeof child ? child : child._nativeTag,
            children = parentInstance._children,
            index = children.indexOf(child);
        0 <= index ? (children.splice(index, 1), children.push(child), UIManager.manageChildren(parentInstance._nativeTag, [index], [children.length - 1], [], [], [])) : (children.push(child), UIManager.manageChildren(parentInstance._nativeTag, [], [], [childTag], [children.length - 1], []));
      },
      appendChildToContainer: function appendChildToContainer(parentInstance, child) {
        UIManager.setChildren(parentInstance, ["number" === typeof child ? child : child._nativeTag]);
      },
      commitTextUpdate: function commitTextUpdate(textInstance, oldText, newText) {
        UIManager.updateView(textInstance, "RCTRawText", {
          text: newText
        });
      },
      commitMount: function commitMount() {},
      commitUpdate: function commitUpdate(instance, updatePayloadTODO, type, oldProps, newProps) {
        updatePayloadTODO = instance.viewConfig;
        instanceProps[instance._nativeTag] = newProps;
        oldProps = diffProperties(null, oldProps, newProps, updatePayloadTODO.validAttributes);
        null != oldProps && UIManager.updateView(instance._nativeTag, updatePayloadTODO.uiViewClassName, oldProps);
      },
      insertBefore: function insertBefore(parentInstance, child, beforeChild) {
        var children = parentInstance._children,
            index = children.indexOf(child);
        0 <= index ? (children.splice(index, 1), beforeChild = children.indexOf(beforeChild), children.splice(beforeChild, 0, child), UIManager.manageChildren(parentInstance._nativeTag, [index], [beforeChild], [], [], [])) : (index = children.indexOf(beforeChild), children.splice(index, 0, child), UIManager.manageChildren(parentInstance._nativeTag, [], [], ["number" === typeof child ? child : child._nativeTag], [index], []));
      },
      insertInContainerBefore: function insertInContainerBefore(parentInstance) {
        invariant("number" !== typeof parentInstance, "Container does not support insertBefore operation");
      },
      removeChild: function removeChild(parentInstance, child) {
        recursivelyUncacheFiberNode(child);
        var children = parentInstance._children;
        child = children.indexOf(child);
        children.splice(child, 1);
        UIManager.manageChildren(parentInstance._nativeTag, [], [], [], [], [child]);
      },
      removeChildFromContainer: function removeChildFromContainer(parentInstance, child) {
        recursivelyUncacheFiberNode(child);
        UIManager.manageChildren(parentInstance, [], [], [], [], [0]);
      },
      resetTextContent: function resetTextContent() {}
    }
  }),
      getInspectorDataForViewTag = void 0;

  getInspectorDataForViewTag = function getInspectorDataForViewTag() {
    invariant(!1, "getInspectorDataForViewTag() is not available in production");
  };

  findHostInstance = NativeRenderer.findHostInstance;
  _batchedUpdates = NativeRenderer.batchedUpdates;
  _flushInteractiveUpdates = NativeRenderer.flushInteractiveUpdates;
  var roots = new Map(),
      ReactNativeRenderer = {
    NativeComponent: ReactNativeComponent,
    findNodeHandle: findNumericNodeHandleFiber,
    render: function render(element, containerTag, callback) {
      var root = roots.get(containerTag);
      root || (root = NativeRenderer.createContainer(containerTag, !1, !1), roots.set(containerTag, root));
      NativeRenderer.updateContainer(element, root, null, callback);
      return NativeRenderer.getPublicRootInstance(root);
    },
    unmountComponentAtNode: function unmountComponentAtNode(containerTag) {
      var root = roots.get(containerTag);
      root && NativeRenderer.updateContainer(null, root, null, function () {
        roots["delete"](containerTag);
      });
    },
    unmountComponentAtNodeAndRemoveContainer: function unmountComponentAtNodeAndRemoveContainer(containerTag) {
      ReactNativeRenderer.unmountComponentAtNode(containerTag);
      UIManager.removeRootView(containerTag);
    },
    createPortal: function createPortal(children, containerTag) {
      return _createPortal(children, containerTag, null, 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null);
    },
    unstable_batchedUpdates: batchedUpdates,
    flushSync: NativeRenderer.flushSync,
    __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
      NativeMethodsMixin: {
        measure: function measure(callback) {
          UIManager.measure(findNumericNodeHandleFiber(this), mountSafeCallback(this, callback));
        },
        measureInWindow: function measureInWindow(callback) {
          UIManager.measureInWindow(findNumericNodeHandleFiber(this), mountSafeCallback(this, callback));
        },
        measureLayout: function measureLayout(relativeToNativeNode, onSuccess, onFail) {
          UIManager.measureLayout(findNumericNodeHandleFiber(this), relativeToNativeNode, mountSafeCallback(this, onFail), mountSafeCallback(this, onSuccess));
        },
        setNativeProps: function setNativeProps(nativeProps) {
          var maybeInstance = void 0;

          try {
            maybeInstance = findNodeHandle(this);
          } catch (error) {}

          if (null != maybeInstance) {
            var viewConfig = maybeInstance.viewConfig;
            nativeProps = diffProperties(null, emptyObject$1, nativeProps, viewConfig.validAttributes);
            null != nativeProps && UIManager.updateView(maybeInstance._nativeTag, viewConfig.uiViewClassName, nativeProps);
          }
        },
        focus: function focus() {
          TextInputState.focusTextInput(findNumericNodeHandleFiber(this));
        },
        blur: function blur() {
          TextInputState.blurTextInput(findNumericNodeHandleFiber(this));
        }
      },
      ReactNativeBridgeEventPlugin: ReactNativeBridgeEventPlugin,
      ReactNativeComponentTree: ReactNativeComponentTree,
      ReactNativePropRegistry: ReactNativePropRegistry,
      TouchHistoryMath: TouchHistoryMath,
      createReactNativeComponentClass: function createReactNativeComponentClass(name, callback) {
        invariant(!viewConfigCallbacks.has(name), "Tried to register two views with the same name %s", name);
        viewConfigCallbacks.set(name, callback);
        return name;
      },
      takeSnapshot: function takeSnapshot(view, options) {
        "number" !== typeof view && "window" !== view && (view = findNumericNodeHandleFiber(view) || "window");
        return UIManager.__takeSnapshot(view, options);
      }
    }
  };
  NativeRenderer.injectIntoDevTools({
    findFiberByHostInstance: getInstanceFromTag,
    getInspectorDataForViewTag: getInspectorDataForViewTag,
    bundleType: 0,
    version: "16.3.0-alpha.1",
    rendererPackageName: "react-native-renderer"
  });
  var ReactNativeRenderer$2 = Object.freeze({
    default: ReactNativeRenderer
  }),
      ReactNativeRenderer$3 = ReactNativeRenderer$2 && ReactNativeRenderer || ReactNativeRenderer$2;
  module.exports = ReactNativeRenderer$3["default"] ? ReactNativeRenderer$3["default"] : ReactNativeRenderer$3;
},124,[23,13,57,110,111,112,113,105,114,117,121,31,123],"ReactNativeRenderer-prod");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _require = _require2(_dependencyMap[0], 'ReactNative'),
      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = _require.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

  module.exports = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactDebugTool;
},125,[21],"ReactDebugTool");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-native/Libraries/Components/ActivityIndicator/ActivityIndicator.js";

  var ColorPropType = _require(_dependencyMap[0], 'ColorPropType');

  var NativeMethodsMixin = _require(_dependencyMap[1], 'NativeMethodsMixin');

  var Platform = _require(_dependencyMap[2], 'Platform');

  var ProgressBarAndroid = _require(_dependencyMap[3], 'ProgressBarAndroid');

  var PropTypes = _require(_dependencyMap[4], 'prop-types');

  var React = _require(_dependencyMap[5], 'React');

  var StyleSheet = _require(_dependencyMap[6], 'StyleSheet');

  var View = _require(_dependencyMap[7], 'View');

  var ViewPropTypes = _require(_dependencyMap[8], 'ViewPropTypes');

  var createReactClass = _require(_dependencyMap[9], 'create-react-class');

  var requireNativeComponent = _require(_dependencyMap[10], 'requireNativeComponent');

  var GRAY = '#999999';
  var ActivityIndicator = createReactClass({
    displayName: 'ActivityIndicator',
    mixins: [NativeMethodsMixin],
    propTypes: babelHelpers.extends({}, ViewPropTypes, {
      animating: PropTypes.bool,
      color: ColorPropType,
      size: PropTypes.oneOfType([PropTypes.oneOf(['small', 'large']), PropTypes.number]),
      hidesWhenStopped: PropTypes.bool
    }),
    getDefaultProps: function getDefaultProps() {
      return {
        animating: true,
        color: Platform.OS === 'ios' ? GRAY : undefined,
        hidesWhenStopped: true,
        size: 'small'
      };
    },
    render: function render() {
      var _props = this.props,
          onLayout = _props.onLayout,
          style = _props.style,
          props = babelHelpers.objectWithoutProperties(_props, ["onLayout", "style"]);
      var sizeStyle = void 0;

      switch (props.size) {
        case 'small':
          sizeStyle = styles.sizeSmall;
          break;

        case 'large':
          sizeStyle = styles.sizeLarge;
          break;

        default:
          sizeStyle = {
            height: props.size,
            width: props.size
          };
          break;
      }

      var nativeProps = babelHelpers.extends({}, props, {
        style: sizeStyle,
        styleAttr: 'Normal',
        indeterminate: true
      });
      return React.createElement(
        View,
        {
          onLayout: onLayout,
          style: [styles.container, style],
          __source: {
            fileName: _jsxFileName,
            lineNumber: 114
          }
        },
        Platform.OS === 'ios' ? React.createElement(RCTActivityIndicator, babelHelpers.extends({}, nativeProps, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 116
          }
        })) : React.createElement(ProgressBarAndroid, babelHelpers.extends({}, nativeProps, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 118
          }
        }))
      );
    }
  });
  var styles = StyleSheet.create({
    container: {
      alignItems: 'center',
      justifyContent: 'center'
    },
    sizeSmall: {
      width: 20,
      height: 20
    },
    sizeLarge: {
      width: 36,
      height: 36
    }
  });

  if (Platform.OS === 'ios') {
    var RCTActivityIndicator = requireNativeComponent('RCTActivityIndicatorView', ActivityIndicator, {
      nativeOnly: {
        activityIndicatorViewStyle: true
      }
    });
  }

  module.exports = ActivityIndicator;
},126,[127,128,52,129,141,131,132,153,155,166,168],"ActivityIndicator");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var normalizeColor = _require(_dependencyMap[0], 'normalizeColor');

  var colorPropType = function colorPropType(isRequired, props, propName, componentName, location, propFullName) {
    var color = props[propName];

    if (color === undefined || color === null) {
      if (isRequired) {
        return new Error('Required ' + location + ' `' + (propFullName || propName) + '` was not specified in `' + componentName + '`.');
      }

      return;
    }

    if (typeof color === 'number') {
      return;
    }

    if (normalizeColor(color) === null) {
      return new Error('Invalid ' + location + ' `' + (propFullName || propName) + '` supplied to `' + componentName + '`: ' + color + '\n' + "Valid color formats are\n  - '#f0f' (#rgb)\n  - '#f0fc' (#rgba)\n  - '#ff00ff' (#rrggbb)\n  - '#ff00ff00' (#rrggbbaa)\n  - 'rgb(255, 255, 255)'\n  - 'rgba(255, 255, 255, 1.0)'\n  - 'hsl(360, 100%, 100%)'\n  - 'hsla(360, 100%, 100%, 1.0)'\n  - 'transparent'\n  - 'red'\n  - 0xff00ff00 (0xrrggbbaa)\n");
    }
  };

  var ColorPropType = colorPropType.bind(null, false);
  ColorPropType.isRequired = colorPropType.bind(null, true);
  module.exports = ColorPropType;
},127,[101],"ColorPropType");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _require = _require2(_dependencyMap[0], 'ReactNative'),
      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = _require.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

  var NativeMethodsMixin = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.NativeMethodsMixin;
  module.exports = NativeMethodsMixin;
},128,[21],"NativeMethodsMixin");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  module.exports = _require(_dependencyMap[0], 'UnimplementedView');
},129,[130],"ProgressBarAndroid");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-native/Libraries/Components/UnimplementedViews/UnimplementedView.js";

  var React = _require(_dependencyMap[0], 'React');

  var StyleSheet = _require(_dependencyMap[1], 'StyleSheet');

  var UnimplementedView = function (_React$Component) {
    babelHelpers.inherits(UnimplementedView, _React$Component);

    function UnimplementedView() {
      babelHelpers.classCallCheck(this, UnimplementedView);
      return babelHelpers.possibleConstructorReturn(this, (UnimplementedView.__proto__ || Object.getPrototypeOf(UnimplementedView)).apply(this, arguments));
    }

    babelHelpers.createClass(UnimplementedView, [{
      key: "setNativeProps",
      value: function setNativeProps() {}
    }, {
      key: "render",
      value: function render() {
        var View = _require(_dependencyMap[2], 'View');

        return React.createElement(
          View,
          {
            style: [styles.unimplementedView, this.props.style],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 33
            }
          },
          this.props.children
        );
      }
    }]);
    return UnimplementedView;
  }(React.Component);

  var styles = StyleSheet.create({
    unimplementedView: __DEV__ ? {
      alignSelf: 'flex-start',
      borderColor: 'red',
      borderWidth: 1
    } : {}
  });
  module.exports = UnimplementedView;
},130,[131,132,153],"UnimplementedView");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  module.exports = _require(_dependencyMap[0], 'react');
},131,[114],"React");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var PixelRatio = _require(_dependencyMap[0], 'PixelRatio');

  var ReactNativePropRegistry = _require(_dependencyMap[1], 'ReactNativePropRegistry');

  var ReactNativeStyleAttributes = _require(_dependencyMap[2], 'ReactNativeStyleAttributes');

  var StyleSheetValidation = _require(_dependencyMap[3], 'StyleSheetValidation');

  var flatten = _require(_dependencyMap[4], 'flattenStyle');

  var hairlineWidth = PixelRatio.roundToNearestPixel(0.4);

  if (hairlineWidth === 0) {
    hairlineWidth = 1 / PixelRatio.get();
  }

  var absoluteFillObject = {
    position: 'absolute',
    left: 0,
    right: 0,
    top: 0,
    bottom: 0
  };
  var absoluteFill = ReactNativePropRegistry.register(absoluteFillObject);
  module.exports = {
    hairlineWidth: hairlineWidth,
    absoluteFill: absoluteFill,
    absoluteFillObject: absoluteFillObject,
    compose: function compose(style1, style2) {
      if (style1 && style2) {
        return [style1, style2];
      } else {
        return style1 || style2;
      }
    },
    flatten: flatten,
    setStyleAttributePreprocessor: function setStyleAttributePreprocessor(property, process) {
      var value = void 0;

      if (typeof ReactNativeStyleAttributes[property] === 'string') {
        value = {};
      } else if (typeof ReactNativeStyleAttributes[property] === 'object') {
        value = ReactNativeStyleAttributes[property];
      } else {
        console.error(property + " is not a valid style attribute");
        return;
      }

      if (__DEV__ && typeof value.process === 'function') {
        console.warn("Overwriting " + property + " style attribute preprocessor");
      }

      ReactNativeStyleAttributes[property] = babelHelpers.extends({}, value, {
        process: process
      });
    },
    create: function create(obj) {
      var result = {};

      for (var key in obj) {
        StyleSheetValidation.validateStyle(key, obj);
        result[key] = obj[key] && ReactNativePropRegistry.register(obj[key]);
      }

      return result;
    }
  };
},132,[133,106,136,152,105],"StyleSheet");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var Dimensions = _require(_dependencyMap[0], 'Dimensions');

  var PixelRatio = function () {
    function PixelRatio() {
      babelHelpers.classCallCheck(this, PixelRatio);
    }

    babelHelpers.createClass(PixelRatio, null, [{
      key: "get",
      value: function get() {
        return Dimensions.get('window').scale;
      }
    }, {
      key: "getFontScale",
      value: function getFontScale() {
        return Dimensions.get('window').fontScale || PixelRatio.get();
      }
    }, {
      key: "getPixelSizeForLayoutSize",
      value: function getPixelSizeForLayoutSize(layoutSize) {
        return Math.round(layoutSize * PixelRatio.get());
      }
    }, {
      key: "roundToNearestPixel",
      value: function roundToNearestPixel(layoutSize) {
        var ratio = PixelRatio.get();
        return Math.round(layoutSize * ratio) / ratio;
      }
    }, {
      key: "startDetecting",
      value: function startDetecting() {}
    }]);
    return PixelRatio;
  }();

  module.exports = PixelRatio;
},133,[134],"PixelRatio");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var EventEmitter = _require(_dependencyMap[0], 'EventEmitter');

  var Platform = _require(_dependencyMap[1], 'Platform');

  var RCTDeviceEventEmitter = _require(_dependencyMap[2], 'RCTDeviceEventEmitter');

  var invariant = _require(_dependencyMap[3], 'fbjs/lib/invariant');

  var eventEmitter = new EventEmitter();
  var dimensionsInitialized = false;
  var dimensions = {};

  var Dimensions = function () {
    function Dimensions() {
      babelHelpers.classCallCheck(this, Dimensions);
    }

    babelHelpers.createClass(Dimensions, null, [{
      key: "set",
      value: function set(dims) {
        if (dims && dims.windowPhysicalPixels) {
          dims = JSON.parse(JSON.stringify(dims));
          var windowPhysicalPixels = dims.windowPhysicalPixels;
          dims.window = {
            width: windowPhysicalPixels.width / windowPhysicalPixels.scale,
            height: windowPhysicalPixels.height / windowPhysicalPixels.scale,
            scale: windowPhysicalPixels.scale,
            fontScale: windowPhysicalPixels.fontScale
          };

          if (Platform.OS === 'android') {
            var screenPhysicalPixels = dims.screenPhysicalPixels;
            dims.screen = {
              width: screenPhysicalPixels.width / screenPhysicalPixels.scale,
              height: screenPhysicalPixels.height / screenPhysicalPixels.scale,
              scale: screenPhysicalPixels.scale,
              fontScale: screenPhysicalPixels.fontScale
            };
            delete dims.screenPhysicalPixels;
          } else {
            dims.screen = dims.window;
          }

          delete dims.windowPhysicalPixels;
        }

        babelHelpers.extends(dimensions, dims);

        if (dimensionsInitialized) {
          eventEmitter.emit('change', {
            window: dimensions.window,
            screen: dimensions.screen
          });
        } else {
          dimensionsInitialized = true;
        }
      }
    }, {
      key: "get",
      value: function get(dim) {
        invariant(dimensions[dim], 'No dimension set for key ' + dim);
        return dimensions[dim];
      }
    }, {
      key: "addEventListener",
      value: function addEventListener(type, handler) {
        invariant(type === 'change', 'Trying to subscribe to unknown event: "%s"', type);
        eventEmitter.addListener(type, handler);
      }
    }, {
      key: "removeEventListener",
      value: function removeEventListener(type, handler) {
        invariant(type === 'change', 'Trying to remove listener for unknown event: "%s"', type);
        eventEmitter.removeListener(type, handler);
      }
    }]);
    return Dimensions;
  }();

  var dims = global.nativeExtensions && global.nativeExtensions.DeviceInfo && global.nativeExtensions.DeviceInfo.Dimensions;
  var nativeExtensionsEnabled = true;

  if (!dims) {
    var DeviceInfo = _require(_dependencyMap[4], 'DeviceInfo');

    dims = DeviceInfo.Dimensions;
    nativeExtensionsEnabled = false;
  }

  invariant(dims, 'Either DeviceInfo native extension or DeviceInfo Native Module must be registered');
  Dimensions.set(dims);

  if (!nativeExtensionsEnabled) {
    RCTDeviceEventEmitter.addListener('didUpdateDimensions', function (update) {
      Dimensions.set(update);
    });
  }

  module.exports = Dimensions;
},134,[67,52,70,13,135],"Dimensions");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var DeviceInfo = _require(_dependencyMap[0], 'NativeModules').DeviceInfo;

  var invariant = _require(_dependencyMap[1], 'fbjs/lib/invariant');

  invariant(DeviceInfo, 'DeviceInfo native module is not installed correctly');
  module.exports = DeviceInfo;
},135,[15,13],"DeviceInfo");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var ImageStylePropTypes = _require(_dependencyMap[0], 'ImageStylePropTypes');

  var TextStylePropTypes = _require(_dependencyMap[1], 'TextStylePropTypes');

  var ViewStylePropTypes = _require(_dependencyMap[2], 'ViewStylePropTypes');

  var keyMirror = _require(_dependencyMap[3], 'fbjs/lib/keyMirror');

  var processColor = _require(_dependencyMap[4], 'processColor');

  var processTransform = _require(_dependencyMap[5], 'processTransform');

  var sizesDiffer = _require(_dependencyMap[6], 'sizesDiffer');

  var ReactNativeStyleAttributes = babelHelpers.extends({}, keyMirror(ViewStylePropTypes), keyMirror(TextStylePropTypes), keyMirror(ImageStylePropTypes));
  ReactNativeStyleAttributes.transform = {
    process: processTransform
  };
  ReactNativeStyleAttributes.shadowOffset = {
    diff: sizesDiffer
  };
  var colorAttributes = {
    process: processColor
  };
  ReactNativeStyleAttributes.backgroundColor = colorAttributes;
  ReactNativeStyleAttributes.borderBottomColor = colorAttributes;
  ReactNativeStyleAttributes.borderColor = colorAttributes;
  ReactNativeStyleAttributes.borderLeftColor = colorAttributes;
  ReactNativeStyleAttributes.borderRightColor = colorAttributes;
  ReactNativeStyleAttributes.borderTopColor = colorAttributes;
  ReactNativeStyleAttributes.borderStartColor = colorAttributes;
  ReactNativeStyleAttributes.borderEndColor = colorAttributes;
  ReactNativeStyleAttributes.color = colorAttributes;
  ReactNativeStyleAttributes.shadowColor = colorAttributes;
  ReactNativeStyleAttributes.textDecorationColor = colorAttributes;
  ReactNativeStyleAttributes.tintColor = colorAttributes;
  ReactNativeStyleAttributes.textShadowColor = colorAttributes;
  ReactNativeStyleAttributes.overlayColor = colorAttributes;
  module.exports = ReactNativeStyleAttributes;
},136,[137,147,148,139,100,149,151],"ReactNativeStyleAttributes");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var ColorPropType = _require(_dependencyMap[0], 'ColorPropType');

  var ImageResizeMode = _require(_dependencyMap[1], 'ImageResizeMode');

  var LayoutPropTypes = _require(_dependencyMap[2], 'LayoutPropTypes');

  var ReactPropTypes = _require(_dependencyMap[3], 'prop-types');

  var ShadowPropTypesIOS = _require(_dependencyMap[4], 'ShadowPropTypesIOS');

  var TransformPropTypes = _require(_dependencyMap[5], 'TransformPropTypes');

  var ImageStylePropTypes = babelHelpers.extends({}, LayoutPropTypes, ShadowPropTypesIOS, TransformPropTypes, {
    resizeMode: ReactPropTypes.oneOf(Object.keys(ImageResizeMode)),
    backfaceVisibility: ReactPropTypes.oneOf(['visible', 'hidden']),
    backgroundColor: ColorPropType,
    borderColor: ColorPropType,
    borderWidth: ReactPropTypes.number,
    borderRadius: ReactPropTypes.number,
    overflow: ReactPropTypes.oneOf(['visible', 'hidden']),
    tintColor: ColorPropType,
    opacity: ReactPropTypes.number,
    overlayColor: ReactPropTypes.string,
    borderTopLeftRadius: ReactPropTypes.number,
    borderTopRightRadius: ReactPropTypes.number,
    borderBottomLeftRadius: ReactPropTypes.number,
    borderBottomRightRadius: ReactPropTypes.number
  });
  module.exports = ImageStylePropTypes;
},137,[127,138,140,141,144,145],"ImageStylePropTypes");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var keyMirror = _require(_dependencyMap[0], 'fbjs/lib/keyMirror');

  var ImageResizeMode = keyMirror({
    contain: null,
    cover: null,
    stretch: null,
    center: null,
    repeat: null
  });
  module.exports = ImageResizeMode;
},138,[139],"ImageResizeMode");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = _require(_dependencyMap[0], './invariant');

  var keyMirror = function keyMirror(obj) {
    var ret = {};
    var key;
    !(obj instanceof Object && !Array.isArray(obj)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'keyMirror(...): Argument must be an object.') : invariant(false) : void 0;

    for (key in obj) {
      if (!obj.hasOwnProperty(key)) {
        continue;
      }

      ret[key] = key;
    }

    return ret;
  };

  module.exports = keyMirror;
},139,[13],"node_modules/fbjs/lib/keyMirror.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var ReactPropTypes = _require(_dependencyMap[0], 'prop-types');

  var LayoutPropTypes = {
    display: ReactPropTypes.oneOf(['none', 'flex']),
    width: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    height: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    start: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    end: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    top: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    left: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    right: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    bottom: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    minWidth: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    maxWidth: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    minHeight: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    maxHeight: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    margin: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginVertical: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginHorizontal: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginTop: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginBottom: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginLeft: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginRight: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginStart: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginEnd: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    padding: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingVertical: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingHorizontal: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingTop: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingBottom: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingLeft: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingRight: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingStart: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingEnd: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    borderWidth: ReactPropTypes.number,
    borderTopWidth: ReactPropTypes.number,
    borderStartWidth: ReactPropTypes.number,
    borderEndWidth: ReactPropTypes.number,
    borderRightWidth: ReactPropTypes.number,
    borderBottomWidth: ReactPropTypes.number,
    borderLeftWidth: ReactPropTypes.number,
    position: ReactPropTypes.oneOf(['absolute', 'relative']),
    flexDirection: ReactPropTypes.oneOf(['row', 'row-reverse', 'column', 'column-reverse']),
    flexWrap: ReactPropTypes.oneOf(['wrap', 'nowrap']),
    justifyContent: ReactPropTypes.oneOf(['flex-start', 'flex-end', 'center', 'space-between', 'space-around', 'space-evenly']),
    alignItems: ReactPropTypes.oneOf(['flex-start', 'flex-end', 'center', 'stretch', 'baseline']),
    alignSelf: ReactPropTypes.oneOf(['auto', 'flex-start', 'flex-end', 'center', 'stretch', 'baseline']),
    alignContent: ReactPropTypes.oneOf(['flex-start', 'flex-end', 'center', 'stretch', 'space-between', 'space-around']),
    overflow: ReactPropTypes.oneOf(['visible', 'hidden', 'scroll']),
    flex: ReactPropTypes.number,
    flexGrow: ReactPropTypes.number,
    flexShrink: ReactPropTypes.number,
    flexBasis: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    aspectRatio: ReactPropTypes.number,
    zIndex: ReactPropTypes.number,
    direction: ReactPropTypes.oneOf(['inherit', 'ltr', 'rtl'])
  };
  module.exports = LayoutPropTypes;
},140,[141],"LayoutPropTypes");
__d(function (global, _require, module, exports, _dependencyMap) {
  if (process.env.NODE_ENV !== 'production') {
    var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && (typeof Symbol === "function" ? Symbol.for : "@@for") && (typeof Symbol === "function" ? Symbol.for : "@@for")('react.element') || 0xeac7;

    var isValidElement = function isValidElement(object) {
      return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    };

    var throwOnDirectAccess = true;
    module.exports = _require(_dependencyMap[0], './factoryWithTypeCheckers')(isValidElement, throwOnDirectAccess);
  } else {
    module.exports = _require(_dependencyMap[1], './factoryWithThrowingShims')();
  }
},141,[142,143],"node_modules/prop-types/index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var assign = _require(_dependencyMap[0], 'object-assign');

  var ReactPropTypesSecret = _require(_dependencyMap[1], './lib/ReactPropTypesSecret');

  var checkPropTypes = _require(_dependencyMap[2], './checkPropTypes');

  var printWarning = function printWarning() {};

  if (process.env.NODE_ENV !== 'production') {
    printWarning = function printWarning(text) {
      var message = 'Warning: ' + text;

      if (typeof console !== 'undefined') {
        console.error(message);
      }

      try {
        throw new Error(message);
      } catch (x) {}
    };
  }

  function emptyFunctionThatReturnsNull() {
    return null;
  }

  module.exports = function (isValidElement, throwOnDirectAccess) {
    var ITERATOR_SYMBOL = typeof Symbol === 'function' && (typeof Symbol === "function" ? Symbol.iterator : "@@iterator");
    var FAUX_ITERATOR_SYMBOL = '@@iterator';

    function getIteratorFn(maybeIterable) {
      var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);

      if (typeof iteratorFn === 'function') {
        return iteratorFn;
      }
    }

    var ANONYMOUS = '<<anonymous>>';
    var ReactPropTypes = {
      array: createPrimitiveTypeChecker('array'),
      bool: createPrimitiveTypeChecker('boolean'),
      func: createPrimitiveTypeChecker('function'),
      number: createPrimitiveTypeChecker('number'),
      object: createPrimitiveTypeChecker('object'),
      string: createPrimitiveTypeChecker('string'),
      symbol: createPrimitiveTypeChecker('symbol'),
      any: createAnyTypeChecker(),
      arrayOf: createArrayOfTypeChecker,
      element: createElementTypeChecker(),
      instanceOf: createInstanceTypeChecker,
      node: createNodeChecker(),
      objectOf: createObjectOfTypeChecker,
      oneOf: createEnumTypeChecker,
      oneOfType: createUnionTypeChecker,
      shape: createShapeTypeChecker,
      exact: createStrictShapeTypeChecker
    };

    function is(x, y) {
      if (x === y) {
        return x !== 0 || 1 / x === 1 / y;
      } else {
        return x !== x && y !== y;
      }
    }

    function PropTypeError(message) {
      this.message = message;
      this.stack = '';
    }

    PropTypeError.prototype = Error.prototype;

    function createChainableTypeChecker(validate) {
      if (process.env.NODE_ENV !== 'production') {
        var manualPropTypeCallCache = {};
        var manualPropTypeWarningCount = 0;
      }

      function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
        componentName = componentName || ANONYMOUS;
        propFullName = propFullName || propName;

        if (secret !== ReactPropTypesSecret) {
          if (throwOnDirectAccess) {
            var err = new Error('Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use `PropTypes.checkPropTypes()` to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
            err.name = 'Invariant Violation';
            throw err;
          } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {
            var cacheKey = componentName + ':' + propName;

            if (!manualPropTypeCallCache[cacheKey] && manualPropTypeWarningCount < 3) {
              printWarning('You are manually calling a React.PropTypes validation ' + 'function for the `' + propFullName + '` prop on `' + componentName + '`. This is deprecated ' + 'and will throw in the standalone `prop-types` package. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.');
              manualPropTypeCallCache[cacheKey] = true;
              manualPropTypeWarningCount++;
            }
          }
        }

        if (props[propName] == null) {
          if (isRequired) {
            if (props[propName] === null) {
              return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
            }

            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
          }

          return null;
        } else {
          return validate(props, propName, componentName, location, propFullName);
        }
      }

      var chainedCheckType = checkType.bind(null, false);
      chainedCheckType.isRequired = checkType.bind(null, true);
      return chainedCheckType;
    }

    function createPrimitiveTypeChecker(expectedType) {
      function validate(props, propName, componentName, location, propFullName, secret) {
        var propValue = props[propName];
        var propType = getPropType(propValue);

        if (propType !== expectedType) {
          var preciseType = getPreciseType(propValue);
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
        }

        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function createAnyTypeChecker() {
      return createChainableTypeChecker(emptyFunctionThatReturnsNull);
    }

    function createArrayOfTypeChecker(typeChecker) {
      function validate(props, propName, componentName, location, propFullName) {
        if (typeof typeChecker !== 'function') {
          return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
        }

        var propValue = props[propName];

        if (!Array.isArray(propValue)) {
          var propType = getPropType(propValue);
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
        }

        for (var i = 0; i < propValue.length; i++) {
          var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);

          if (error instanceof Error) {
            return error;
          }
        }

        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function createElementTypeChecker() {
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];

        if (!isValidElement(propValue)) {
          var propType = getPropType(propValue);
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
        }

        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function createInstanceTypeChecker(expectedClass) {
      function validate(props, propName, componentName, location, propFullName) {
        if (!(props[propName] instanceof expectedClass)) {
          var expectedClassName = expectedClass.name || ANONYMOUS;
          var actualClassName = getClassName(props[propName]);
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
        }

        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function createEnumTypeChecker(expectedValues) {
      if (!Array.isArray(expectedValues)) {
        process.env.NODE_ENV !== 'production' ? printWarning('Invalid argument supplied to oneOf, expected an instance of array.') : void 0;
        return emptyFunctionThatReturnsNull;
      }

      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];

        for (var i = 0; i < expectedValues.length; i++) {
          if (is(propValue, expectedValues[i])) {
            return null;
          }
        }

        var valuesString = JSON.stringify(expectedValues);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
      }

      return createChainableTypeChecker(validate);
    }

    function createObjectOfTypeChecker(typeChecker) {
      function validate(props, propName, componentName, location, propFullName) {
        if (typeof typeChecker !== 'function') {
          return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
        }

        var propValue = props[propName];
        var propType = getPropType(propValue);

        if (propType !== 'object') {
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
        }

        for (var key in propValue) {
          if (propValue.hasOwnProperty(key)) {
            var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);

            if (error instanceof Error) {
              return error;
            }
          }
        }

        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function createUnionTypeChecker(arrayOfTypeCheckers) {
      if (!Array.isArray(arrayOfTypeCheckers)) {
        process.env.NODE_ENV !== 'production' ? printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
        return emptyFunctionThatReturnsNull;
      }

      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];

        if (typeof checker !== 'function') {
          printWarning('Invalid argument supplied to oneOfType. Expected an array of check functions, but ' + 'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.');
          return emptyFunctionThatReturnsNull;
        }
      }

      function validate(props, propName, componentName, location, propFullName) {
        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
          var checker = arrayOfTypeCheckers[i];

          if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
            return null;
          }
        }

        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
      }

      return createChainableTypeChecker(validate);
    }

    function createNodeChecker() {
      function validate(props, propName, componentName, location, propFullName) {
        if (!isNode(props[propName])) {
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
        }

        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function createShapeTypeChecker(shapeTypes) {
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        var propType = getPropType(propValue);

        if (propType !== 'object') {
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
        }

        for (var key in shapeTypes) {
          var checker = shapeTypes[key];

          if (!checker) {
            continue;
          }

          var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);

          if (error) {
            return error;
          }
        }

        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function createStrictShapeTypeChecker(shapeTypes) {
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        var propType = getPropType(propValue);

        if (propType !== 'object') {
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
        }

        var allKeys = assign({}, props[propName], shapeTypes);

        for (var key in allKeys) {
          var checker = shapeTypes[key];

          if (!checker) {
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' + '\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
          }

          var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);

          if (error) {
            return error;
          }
        }

        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function isNode(propValue) {
      switch (typeof propValue) {
        case 'number':
        case 'string':
        case 'undefined':
          return true;

        case 'boolean':
          return !propValue;

        case 'object':
          if (Array.isArray(propValue)) {
            return propValue.every(isNode);
          }

          if (propValue === null || isValidElement(propValue)) {
            return true;
          }

          var iteratorFn = getIteratorFn(propValue);

          if (iteratorFn) {
            var iterator = iteratorFn.call(propValue);
            var step;

            if (iteratorFn !== propValue.entries) {
              while (!(step = iterator.next()).done) {
                if (!isNode(step.value)) {
                  return false;
                }
              }
            } else {
              while (!(step = iterator.next()).done) {
                var entry = step.value;

                if (entry) {
                  if (!isNode(entry[1])) {
                    return false;
                  }
                }
              }
            }
          } else {
            return false;
          }

          return true;

        default:
          return false;
      }
    }

    function isSymbol(propType, propValue) {
      if (propType === 'symbol') {
        return true;
      }

      if (propValue['@@toStringTag'] === 'Symbol') {
        return true;
      }

      if (typeof Symbol === 'function' && propValue instanceof Symbol) {
        return true;
      }

      return false;
    }

    function getPropType(propValue) {
      var propType = typeof propValue;

      if (Array.isArray(propValue)) {
        return 'array';
      }

      if (propValue instanceof RegExp) {
        return 'object';
      }

      if (isSymbol(propType, propValue)) {
        return 'symbol';
      }

      return propType;
    }

    function getPreciseType(propValue) {
      if (typeof propValue === 'undefined' || propValue === null) {
        return '' + propValue;
      }

      var propType = getPropType(propValue);

      if (propType === 'object') {
        if (propValue instanceof Date) {
          return 'date';
        } else if (propValue instanceof RegExp) {
          return 'regexp';
        }
      }

      return propType;
    }

    function getPostfixForTypeWarning(value) {
      var type = getPreciseType(value);

      switch (type) {
        case 'array':
        case 'object':
          return 'an ' + type;

        case 'boolean':
        case 'date':
        case 'regexp':
          return 'a ' + type;

        default:
          return type;
      }
    }

    function getClassName(propValue) {
      if (!propValue.constructor || !propValue.constructor.name) {
        return ANONYMOUS;
      }

      return propValue.constructor.name;
    }

    ReactPropTypes.checkPropTypes = checkPropTypes;
    ReactPropTypes.PropTypes = ReactPropTypes;
    return ReactPropTypes;
  };
},142,[116,120,119],"node_modules/prop-types/factoryWithTypeCheckers.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var ReactPropTypesSecret = _require(_dependencyMap[0], './lib/ReactPropTypesSecret');

  function emptyFunction() {}

  module.exports = function () {
    function shim(props, propName, componentName, location, propFullName, secret) {
      if (secret === ReactPropTypesSecret) {
        return;
      }

      var err = new Error('Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use PropTypes.checkPropTypes() to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
      err.name = 'Invariant Violation';
      throw err;
    }

    ;
    shim.isRequired = shim;

    function getShim() {
      return shim;
    }

    ;
    var ReactPropTypes = {
      array: shim,
      bool: shim,
      func: shim,
      number: shim,
      object: shim,
      string: shim,
      symbol: shim,
      any: shim,
      arrayOf: getShim,
      element: shim,
      instanceOf: getShim,
      node: shim,
      objectOf: getShim,
      oneOf: getShim,
      oneOfType: getShim,
      shape: getShim,
      exact: getShim
    };
    ReactPropTypes.checkPropTypes = emptyFunction;
    ReactPropTypes.PropTypes = ReactPropTypes;
    return ReactPropTypes;
  };
},143,[120],"node_modules/prop-types/factoryWithThrowingShims.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var ColorPropType = _require(_dependencyMap[0], 'ColorPropType');

  var ReactPropTypes = _require(_dependencyMap[1], 'prop-types');

  var ShadowPropTypesIOS = {
    shadowColor: ColorPropType,
    shadowOffset: ReactPropTypes.shape({
      width: ReactPropTypes.number,
      height: ReactPropTypes.number
    }),
    shadowOpacity: ReactPropTypes.number,
    shadowRadius: ReactPropTypes.number
  };
  module.exports = ShadowPropTypesIOS;
},144,[127,141],"ShadowPropTypesIOS");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var ReactPropTypes = _require(_dependencyMap[0], 'prop-types');

  var deprecatedPropType = _require(_dependencyMap[1], 'deprecatedPropType');

  var TransformMatrixPropType = function TransformMatrixPropType(props, propName, componentName) {
    if (props[propName]) {
      return new Error('The transformMatrix style property is deprecated. ' + 'Use `transform: [{ matrix: ... }]` instead.');
    }
  };

  var DecomposedMatrixPropType = function DecomposedMatrixPropType(props, propName, componentName) {
    if (props[propName]) {
      return new Error('The decomposedMatrix style property is deprecated. ' + 'Use `transform: [...]` instead.');
    }
  };

  var TransformPropTypes = {
    transform: ReactPropTypes.arrayOf(ReactPropTypes.oneOfType([ReactPropTypes.shape({
      perspective: ReactPropTypes.number
    }), ReactPropTypes.shape({
      rotate: ReactPropTypes.string
    }), ReactPropTypes.shape({
      rotateX: ReactPropTypes.string
    }), ReactPropTypes.shape({
      rotateY: ReactPropTypes.string
    }), ReactPropTypes.shape({
      rotateZ: ReactPropTypes.string
    }), ReactPropTypes.shape({
      scale: ReactPropTypes.number
    }), ReactPropTypes.shape({
      scaleX: ReactPropTypes.number
    }), ReactPropTypes.shape({
      scaleY: ReactPropTypes.number
    }), ReactPropTypes.shape({
      translateX: ReactPropTypes.number
    }), ReactPropTypes.shape({
      translateY: ReactPropTypes.number
    }), ReactPropTypes.shape({
      skewX: ReactPropTypes.string
    }), ReactPropTypes.shape({
      skewY: ReactPropTypes.string
    })])),
    transformMatrix: TransformMatrixPropType,
    decomposedMatrix: DecomposedMatrixPropType,
    scaleX: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
    scaleY: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
    rotation: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
    translateX: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
    translateY: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.')
  };
  module.exports = TransformPropTypes;
},145,[141,146],"TransformPropTypes");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var UIManager = _require(_dependencyMap[0], 'UIManager');

  function deprecatedPropType(propType, explanation) {
    return function validate(props, propName, componentName) {
      if (!UIManager[componentName] && props[propName] !== undefined) {
        console.warn("`" + propName + "` supplied to `" + componentName + "` has been deprecated. " + explanation);
      }

      for (var _len = arguments.length, rest = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
        rest[_key - 3] = arguments[_key];
      }

      return propType.apply(undefined, [props, propName, componentName].concat(rest));
    };
  }

  module.exports = deprecatedPropType;
},146,[110],"deprecatedPropType");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var ColorPropType = _require(_dependencyMap[0], 'ColorPropType');

  var ReactPropTypes = _require(_dependencyMap[1], 'prop-types');

  var ViewStylePropTypes = _require(_dependencyMap[2], 'ViewStylePropTypes');

  var TextStylePropTypes = babelHelpers.extends({}, ViewStylePropTypes, {
    color: ColorPropType,
    fontFamily: ReactPropTypes.string,
    fontSize: ReactPropTypes.number,
    fontStyle: ReactPropTypes.oneOf(['normal', 'italic']),
    fontWeight: ReactPropTypes.oneOf(['normal', 'bold', '100', '200', '300', '400', '500', '600', '700', '800', '900']),
    fontVariant: ReactPropTypes.arrayOf(ReactPropTypes.oneOf(['small-caps', 'oldstyle-nums', 'lining-nums', 'tabular-nums', 'proportional-nums'])),
    textShadowOffset: ReactPropTypes.shape({
      width: ReactPropTypes.number,
      height: ReactPropTypes.number
    }),
    textShadowRadius: ReactPropTypes.number,
    textShadowColor: ColorPropType,
    letterSpacing: ReactPropTypes.number,
    lineHeight: ReactPropTypes.number,
    textAlign: ReactPropTypes.oneOf(['auto', 'left', 'right', 'center', 'justify']),
    textAlignVertical: ReactPropTypes.oneOf(['auto', 'top', 'bottom', 'center']),
    includeFontPadding: ReactPropTypes.bool,
    textDecorationLine: ReactPropTypes.oneOf(['none', 'underline', 'line-through', 'underline line-through']),
    textDecorationStyle: ReactPropTypes.oneOf(['solid', 'double', 'dotted', 'dashed']),
    textDecorationColor: ColorPropType,
    writingDirection: ReactPropTypes.oneOf(['auto', 'ltr', 'rtl'])
  });
  module.exports = TextStylePropTypes;
},147,[127,141,148],"TextStylePropTypes");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var ColorPropType = _require(_dependencyMap[0], 'ColorPropType');

  var LayoutPropTypes = _require(_dependencyMap[1], 'LayoutPropTypes');

  var ReactPropTypes = _require(_dependencyMap[2], 'prop-types');

  var ShadowPropTypesIOS = _require(_dependencyMap[3], 'ShadowPropTypesIOS');

  var TransformPropTypes = _require(_dependencyMap[4], 'TransformPropTypes');

  var ViewStylePropTypes = babelHelpers.extends({}, LayoutPropTypes, ShadowPropTypesIOS, TransformPropTypes, {
    backfaceVisibility: ReactPropTypes.oneOf(['visible', 'hidden']),
    backgroundColor: ColorPropType,
    borderColor: ColorPropType,
    borderTopColor: ColorPropType,
    borderRightColor: ColorPropType,
    borderBottomColor: ColorPropType,
    borderLeftColor: ColorPropType,
    borderStartColor: ColorPropType,
    borderEndColor: ColorPropType,
    borderRadius: ReactPropTypes.number,
    borderTopLeftRadius: ReactPropTypes.number,
    borderTopRightRadius: ReactPropTypes.number,
    borderTopStartRadius: ReactPropTypes.number,
    borderTopEndRadius: ReactPropTypes.number,
    borderBottomLeftRadius: ReactPropTypes.number,
    borderBottomRightRadius: ReactPropTypes.number,
    borderBottomStartRadius: ReactPropTypes.number,
    borderBottomEndRadius: ReactPropTypes.number,
    borderStyle: ReactPropTypes.oneOf(['solid', 'dotted', 'dashed']),
    borderWidth: ReactPropTypes.number,
    borderTopWidth: ReactPropTypes.number,
    borderRightWidth: ReactPropTypes.number,
    borderBottomWidth: ReactPropTypes.number,
    borderLeftWidth: ReactPropTypes.number,
    opacity: ReactPropTypes.number,
    elevation: ReactPropTypes.number
  });
  module.exports = ViewStylePropTypes;
},148,[127,140,141,144,145],"ViewStylePropTypes");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var MatrixMath = _require(_dependencyMap[0], 'MatrixMath');

  var Platform = _require(_dependencyMap[1], 'Platform');

  var invariant = _require(_dependencyMap[2], 'fbjs/lib/invariant');

  var stringifySafe = _require(_dependencyMap[3], 'stringifySafe');

  function processTransform(transform) {
    if (__DEV__) {
      _validateTransforms(transform);
    }

    if (Platform.OS === 'android' || Platform.OS === 'ios') {
      return transform;
    }

    var result = MatrixMath.createIdentityMatrix();
    transform.forEach(function (transformation) {
      var key = Object.keys(transformation)[0];
      var value = transformation[key];

      switch (key) {
        case 'matrix':
          MatrixMath.multiplyInto(result, result, value);
          break;

        case 'perspective':
          _multiplyTransform(result, MatrixMath.reusePerspectiveCommand, [value]);

          break;

        case 'rotateX':
          _multiplyTransform(result, MatrixMath.reuseRotateXCommand, [_convertToRadians(value)]);

          break;

        case 'rotateY':
          _multiplyTransform(result, MatrixMath.reuseRotateYCommand, [_convertToRadians(value)]);

          break;

        case 'rotate':
        case 'rotateZ':
          _multiplyTransform(result, MatrixMath.reuseRotateZCommand, [_convertToRadians(value)]);

          break;

        case 'scale':
          _multiplyTransform(result, MatrixMath.reuseScaleCommand, [value]);

          break;

        case 'scaleX':
          _multiplyTransform(result, MatrixMath.reuseScaleXCommand, [value]);

          break;

        case 'scaleY':
          _multiplyTransform(result, MatrixMath.reuseScaleYCommand, [value]);

          break;

        case 'translate':
          _multiplyTransform(result, MatrixMath.reuseTranslate3dCommand, [value[0], value[1], value[2] || 0]);

          break;

        case 'translateX':
          _multiplyTransform(result, MatrixMath.reuseTranslate2dCommand, [value, 0]);

          break;

        case 'translateY':
          _multiplyTransform(result, MatrixMath.reuseTranslate2dCommand, [0, value]);

          break;

        case 'skewX':
          _multiplyTransform(result, MatrixMath.reuseSkewXCommand, [_convertToRadians(value)]);

          break;

        case 'skewY':
          _multiplyTransform(result, MatrixMath.reuseSkewYCommand, [_convertToRadians(value)]);

          break;

        default:
          throw new Error('Invalid transform name: ' + key);
      }
    });
    return result;
  }

  function _multiplyTransform(result, matrixMathFunction, args) {
    var matrixToApply = MatrixMath.createIdentityMatrix();
    var argsWithIdentity = [matrixToApply].concat(args);
    matrixMathFunction.apply(this, argsWithIdentity);
    MatrixMath.multiplyInto(result, result, matrixToApply);
  }

  function _convertToRadians(value) {
    var floatValue = parseFloat(value);
    return value.indexOf('rad') > -1 ? floatValue : floatValue * Math.PI / 180;
  }

  function _validateTransforms(transform) {
    transform.forEach(function (transformation) {
      var keys = Object.keys(transformation);
      invariant(keys.length === 1, 'You must specify exactly one property per transform object. Passed properties: %s', stringifySafe(transformation));
      var key = keys[0];
      var value = transformation[key];

      _validateTransform(key, value, transformation);
    });
  }

  function _validateTransform(key, value, transformation) {
    invariant(!value.getValue, 'You passed an Animated.Value to a normal component. ' + 'You need to wrap that component in an Animated. For example, ' + 'replace <View /> by <Animated.View />.');
    var multivalueTransforms = ['matrix', 'translate'];

    if (multivalueTransforms.indexOf(key) !== -1) {
      invariant(Array.isArray(value), 'Transform with key of %s must have an array as the value: %s', key, stringifySafe(transformation));
    }

    switch (key) {
      case 'matrix':
        invariant(value.length === 9 || value.length === 16, 'Matrix transform must have a length of 9 (2d) or 16 (3d). ' + 'Provided matrix has a length of %s: %s', value.length, stringifySafe(transformation));
        break;

      case 'translate':
        invariant(value.length === 2 || value.length === 3, 'Transform with key translate must be an array of length 2 or 3, found %s: %s', value.length, stringifySafe(transformation));
        break;

      case 'rotateX':
      case 'rotateY':
      case 'rotateZ':
      case 'rotate':
      case 'skewX':
      case 'skewY':
        invariant(typeof value === 'string', 'Transform with key of "%s" must be a string: %s', key, stringifySafe(transformation));
        invariant(value.indexOf('deg') > -1 || value.indexOf('rad') > -1, 'Rotate transform must be expressed in degrees (deg) or radians ' + '(rad): %s', stringifySafe(transformation));
        break;

      case 'perspective':
        invariant(typeof value === 'number', 'Transform with key of "%s" must be a number: %s', key, stringifySafe(transformation));
        invariant(value !== 0, 'Transform with key of "%s" cannot be zero: %s', key, stringifySafe(transformation));
        break;

      case 'translateX':
      case 'translateY':
      case 'scale':
      case 'scaleX':
      case 'scaleY':
        invariant(typeof value === 'number', 'Transform with key of "%s" must be a number: %s', key, stringifySafe(transformation));
        break;

      default:
        invariant(false, 'Invalid transform %s: %s', key, stringifySafe(transformation));
    }
  }

  module.exports = processTransform;
},149,[150,52,13,39],"processTransform");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = _require(_dependencyMap[0], 'fbjs/lib/invariant');

  var MatrixMath = {
    createIdentityMatrix: function createIdentityMatrix() {
      return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
    },
    createCopy: function createCopy(m) {
      return [m[0], m[1], m[2], m[3], m[4], m[5], m[6], m[7], m[8], m[9], m[10], m[11], m[12], m[13], m[14], m[15]];
    },
    createOrthographic: function createOrthographic(left, right, bottom, top, near, far) {
      var a = 2 / (right - left);
      var b = 2 / (top - bottom);
      var c = -2 / (far - near);
      var tx = -(right + left) / (right - left);
      var ty = -(top + bottom) / (top - bottom);
      var tz = -(far + near) / (far - near);
      return [a, 0, 0, 0, 0, b, 0, 0, 0, 0, c, 0, tx, ty, tz, 1];
    },
    createFrustum: function createFrustum(left, right, bottom, top, near, far) {
      var r_width = 1 / (right - left);
      var r_height = 1 / (top - bottom);
      var r_depth = 1 / (near - far);
      var x = 2 * (near * r_width);
      var y = 2 * (near * r_height);
      var A = (right + left) * r_width;
      var B = (top + bottom) * r_height;
      var C = (far + near) * r_depth;
      var D = 2 * (far * near * r_depth);
      return [x, 0, 0, 0, 0, y, 0, 0, A, B, C, -1, 0, 0, D, 0];
    },
    createPerspective: function createPerspective(fovInRadians, aspect, near, far) {
      var h = 1 / Math.tan(fovInRadians / 2);
      var r_depth = 1 / (near - far);
      var C = (far + near) * r_depth;
      var D = 2 * (far * near * r_depth);
      return [h / aspect, 0, 0, 0, 0, h, 0, 0, 0, 0, C, -1, 0, 0, D, 0];
    },
    createTranslate2d: function createTranslate2d(x, y) {
      var mat = MatrixMath.createIdentityMatrix();
      MatrixMath.reuseTranslate2dCommand(mat, x, y);
      return mat;
    },
    reuseTranslate2dCommand: function reuseTranslate2dCommand(matrixCommand, x, y) {
      matrixCommand[12] = x;
      matrixCommand[13] = y;
    },
    reuseTranslate3dCommand: function reuseTranslate3dCommand(matrixCommand, x, y, z) {
      matrixCommand[12] = x;
      matrixCommand[13] = y;
      matrixCommand[14] = z;
    },
    createScale: function createScale(factor) {
      var mat = MatrixMath.createIdentityMatrix();
      MatrixMath.reuseScaleCommand(mat, factor);
      return mat;
    },
    reuseScaleCommand: function reuseScaleCommand(matrixCommand, factor) {
      matrixCommand[0] = factor;
      matrixCommand[5] = factor;
    },
    reuseScale3dCommand: function reuseScale3dCommand(matrixCommand, x, y, z) {
      matrixCommand[0] = x;
      matrixCommand[5] = y;
      matrixCommand[10] = z;
    },
    reusePerspectiveCommand: function reusePerspectiveCommand(matrixCommand, p) {
      matrixCommand[11] = -1 / p;
    },
    reuseScaleXCommand: function reuseScaleXCommand(matrixCommand, factor) {
      matrixCommand[0] = factor;
    },
    reuseScaleYCommand: function reuseScaleYCommand(matrixCommand, factor) {
      matrixCommand[5] = factor;
    },
    reuseScaleZCommand: function reuseScaleZCommand(matrixCommand, factor) {
      matrixCommand[10] = factor;
    },
    reuseRotateXCommand: function reuseRotateXCommand(matrixCommand, radians) {
      matrixCommand[5] = Math.cos(radians);
      matrixCommand[6] = Math.sin(radians);
      matrixCommand[9] = -Math.sin(radians);
      matrixCommand[10] = Math.cos(radians);
    },
    reuseRotateYCommand: function reuseRotateYCommand(matrixCommand, amount) {
      matrixCommand[0] = Math.cos(amount);
      matrixCommand[2] = -Math.sin(amount);
      matrixCommand[8] = Math.sin(amount);
      matrixCommand[10] = Math.cos(amount);
    },
    reuseRotateZCommand: function reuseRotateZCommand(matrixCommand, radians) {
      matrixCommand[0] = Math.cos(radians);
      matrixCommand[1] = Math.sin(radians);
      matrixCommand[4] = -Math.sin(radians);
      matrixCommand[5] = Math.cos(radians);
    },
    createRotateZ: function createRotateZ(radians) {
      var mat = MatrixMath.createIdentityMatrix();
      MatrixMath.reuseRotateZCommand(mat, radians);
      return mat;
    },
    reuseSkewXCommand: function reuseSkewXCommand(matrixCommand, radians) {
      matrixCommand[4] = Math.tan(radians);
    },
    reuseSkewYCommand: function reuseSkewYCommand(matrixCommand, radians) {
      matrixCommand[1] = Math.tan(radians);
    },
    multiplyInto: function multiplyInto(out, a, b) {
      var a00 = a[0],
          a01 = a[1],
          a02 = a[2],
          a03 = a[3],
          a10 = a[4],
          a11 = a[5],
          a12 = a[6],
          a13 = a[7],
          a20 = a[8],
          a21 = a[9],
          a22 = a[10],
          a23 = a[11],
          a30 = a[12],
          a31 = a[13],
          a32 = a[14],
          a33 = a[15];
      var b0 = b[0],
          b1 = b[1],
          b2 = b[2],
          b3 = b[3];
      out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
      out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
      out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
      out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
      b0 = b[4];
      b1 = b[5];
      b2 = b[6];
      b3 = b[7];
      out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
      out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
      out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
      out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
      b0 = b[8];
      b1 = b[9];
      b2 = b[10];
      b3 = b[11];
      out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
      out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
      out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
      out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
      b0 = b[12];
      b1 = b[13];
      b2 = b[14];
      b3 = b[15];
      out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
      out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
      out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
      out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
    },
    determinant: function determinant(matrix) {
      var _matrix = babelHelpers.slicedToArray(matrix, 16),
          m00 = _matrix[0],
          m01 = _matrix[1],
          m02 = _matrix[2],
          m03 = _matrix[3],
          m10 = _matrix[4],
          m11 = _matrix[5],
          m12 = _matrix[6],
          m13 = _matrix[7],
          m20 = _matrix[8],
          m21 = _matrix[9],
          m22 = _matrix[10],
          m23 = _matrix[11],
          m30 = _matrix[12],
          m31 = _matrix[13],
          m32 = _matrix[14],
          m33 = _matrix[15];

      return m03 * m12 * m21 * m30 - m02 * m13 * m21 * m30 - m03 * m11 * m22 * m30 + m01 * m13 * m22 * m30 + m02 * m11 * m23 * m30 - m01 * m12 * m23 * m30 - m03 * m12 * m20 * m31 + m02 * m13 * m20 * m31 + m03 * m10 * m22 * m31 - m00 * m13 * m22 * m31 - m02 * m10 * m23 * m31 + m00 * m12 * m23 * m31 + m03 * m11 * m20 * m32 - m01 * m13 * m20 * m32 - m03 * m10 * m21 * m32 + m00 * m13 * m21 * m32 + m01 * m10 * m23 * m32 - m00 * m11 * m23 * m32 - m02 * m11 * m20 * m33 + m01 * m12 * m20 * m33 + m02 * m10 * m21 * m33 - m00 * m12 * m21 * m33 - m01 * m10 * m22 * m33 + m00 * m11 * m22 * m33;
    },
    inverse: function inverse(matrix) {
      var det = MatrixMath.determinant(matrix);

      if (!det) {
        return matrix;
      }

      var _matrix2 = babelHelpers.slicedToArray(matrix, 16),
          m00 = _matrix2[0],
          m01 = _matrix2[1],
          m02 = _matrix2[2],
          m03 = _matrix2[3],
          m10 = _matrix2[4],
          m11 = _matrix2[5],
          m12 = _matrix2[6],
          m13 = _matrix2[7],
          m20 = _matrix2[8],
          m21 = _matrix2[9],
          m22 = _matrix2[10],
          m23 = _matrix2[11],
          m30 = _matrix2[12],
          m31 = _matrix2[13],
          m32 = _matrix2[14],
          m33 = _matrix2[15];

      return [(m12 * m23 * m31 - m13 * m22 * m31 + m13 * m21 * m32 - m11 * m23 * m32 - m12 * m21 * m33 + m11 * m22 * m33) / det, (m03 * m22 * m31 - m02 * m23 * m31 - m03 * m21 * m32 + m01 * m23 * m32 + m02 * m21 * m33 - m01 * m22 * m33) / det, (m02 * m13 * m31 - m03 * m12 * m31 + m03 * m11 * m32 - m01 * m13 * m32 - m02 * m11 * m33 + m01 * m12 * m33) / det, (m03 * m12 * m21 - m02 * m13 * m21 - m03 * m11 * m22 + m01 * m13 * m22 + m02 * m11 * m23 - m01 * m12 * m23) / det, (m13 * m22 * m30 - m12 * m23 * m30 - m13 * m20 * m32 + m10 * m23 * m32 + m12 * m20 * m33 - m10 * m22 * m33) / det, (m02 * m23 * m30 - m03 * m22 * m30 + m03 * m20 * m32 - m00 * m23 * m32 - m02 * m20 * m33 + m00 * m22 * m33) / det, (m03 * m12 * m30 - m02 * m13 * m30 - m03 * m10 * m32 + m00 * m13 * m32 + m02 * m10 * m33 - m00 * m12 * m33) / det, (m02 * m13 * m20 - m03 * m12 * m20 + m03 * m10 * m22 - m00 * m13 * m22 - m02 * m10 * m23 + m00 * m12 * m23) / det, (m11 * m23 * m30 - m13 * m21 * m30 + m13 * m20 * m31 - m10 * m23 * m31 - m11 * m20 * m33 + m10 * m21 * m33) / det, (m03 * m21 * m30 - m01 * m23 * m30 - m03 * m20 * m31 + m00 * m23 * m31 + m01 * m20 * m33 - m00 * m21 * m33) / det, (m01 * m13 * m30 - m03 * m11 * m30 + m03 * m10 * m31 - m00 * m13 * m31 - m01 * m10 * m33 + m00 * m11 * m33) / det, (m03 * m11 * m20 - m01 * m13 * m20 - m03 * m10 * m21 + m00 * m13 * m21 + m01 * m10 * m23 - m00 * m11 * m23) / det, (m12 * m21 * m30 - m11 * m22 * m30 - m12 * m20 * m31 + m10 * m22 * m31 + m11 * m20 * m32 - m10 * m21 * m32) / det, (m01 * m22 * m30 - m02 * m21 * m30 + m02 * m20 * m31 - m00 * m22 * m31 - m01 * m20 * m32 + m00 * m21 * m32) / det, (m02 * m11 * m30 - m01 * m12 * m30 - m02 * m10 * m31 + m00 * m12 * m31 + m01 * m10 * m32 - m00 * m11 * m32) / det, (m01 * m12 * m20 - m02 * m11 * m20 + m02 * m10 * m21 - m00 * m12 * m21 - m01 * m10 * m22 + m00 * m11 * m22) / det];
    },
    transpose: function transpose(m) {
      return [m[0], m[4], m[8], m[12], m[1], m[5], m[9], m[13], m[2], m[6], m[10], m[14], m[3], m[7], m[11], m[15]];
    },
    multiplyVectorByMatrix: function multiplyVectorByMatrix(v, m) {
      var _v = babelHelpers.slicedToArray(v, 4),
          vx = _v[0],
          vy = _v[1],
          vz = _v[2],
          vw = _v[3];

      return [vx * m[0] + vy * m[4] + vz * m[8] + vw * m[12], vx * m[1] + vy * m[5] + vz * m[9] + vw * m[13], vx * m[2] + vy * m[6] + vz * m[10] + vw * m[14], vx * m[3] + vy * m[7] + vz * m[11] + vw * m[15]];
    },
    v3Length: function v3Length(a) {
      return Math.sqrt(a[0] * a[0] + a[1] * a[1] + a[2] * a[2]);
    },
    v3Normalize: function v3Normalize(vector, v3Length) {
      var im = 1 / (v3Length || MatrixMath.v3Length(vector));
      return [vector[0] * im, vector[1] * im, vector[2] * im];
    },
    v3Dot: function v3Dot(a, b) {
      return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
    },
    v3Combine: function v3Combine(a, b, aScale, bScale) {
      return [aScale * a[0] + bScale * b[0], aScale * a[1] + bScale * b[1], aScale * a[2] + bScale * b[2]];
    },
    v3Cross: function v3Cross(a, b) {
      return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];
    },
    quaternionToDegreesXYZ: function quaternionToDegreesXYZ(q, matrix, row) {
      var _q = babelHelpers.slicedToArray(q, 4),
          qx = _q[0],
          qy = _q[1],
          qz = _q[2],
          qw = _q[3];

      var qw2 = qw * qw;
      var qx2 = qx * qx;
      var qy2 = qy * qy;
      var qz2 = qz * qz;
      var test = qx * qy + qz * qw;
      var unit = qw2 + qx2 + qy2 + qz2;
      var conv = 180 / Math.PI;

      if (test > 0.49999 * unit) {
        return [0, 2 * Math.atan2(qx, qw) * conv, 90];
      }

      if (test < -0.49999 * unit) {
        return [0, -2 * Math.atan2(qx, qw) * conv, -90];
      }

      return [MatrixMath.roundTo3Places(Math.atan2(2 * qx * qw - 2 * qy * qz, 1 - 2 * qx2 - 2 * qz2) * conv), MatrixMath.roundTo3Places(Math.atan2(2 * qy * qw - 2 * qx * qz, 1 - 2 * qy2 - 2 * qz2) * conv), MatrixMath.roundTo3Places(Math.asin(2 * qx * qy + 2 * qz * qw) * conv)];
    },
    roundTo3Places: function roundTo3Places(n) {
      var arr = n.toString().split('e');
      return Math.round(arr[0] + 'e' + (arr[1] ? +arr[1] - 3 : 3)) * 0.001;
    },
    decomposeMatrix: function decomposeMatrix(transformMatrix) {
      invariant(transformMatrix.length === 16, 'Matrix decomposition needs a list of 3d matrix values, received %s', transformMatrix);
      var perspective = [];
      var quaternion = [];
      var scale = [];
      var skew = [];
      var translation = [];

      if (!transformMatrix[15]) {
        return;
      }

      var matrix = [];
      var perspectiveMatrix = [];

      for (var i = 0; i < 4; i++) {
        matrix.push([]);

        for (var j = 0; j < 4; j++) {
          var value = transformMatrix[i * 4 + j] / transformMatrix[15];
          matrix[i].push(value);
          perspectiveMatrix.push(j === 3 ? 0 : value);
        }
      }

      perspectiveMatrix[15] = 1;

      if (!MatrixMath.determinant(perspectiveMatrix)) {
        return;
      }

      if (matrix[0][3] !== 0 || matrix[1][3] !== 0 || matrix[2][3] !== 0) {
        var rightHandSide = [matrix[0][3], matrix[1][3], matrix[2][3], matrix[3][3]];
        var inversePerspectiveMatrix = MatrixMath.inverse(perspectiveMatrix);
        var transposedInversePerspectiveMatrix = MatrixMath.transpose(inversePerspectiveMatrix);
        var perspective = MatrixMath.multiplyVectorByMatrix(rightHandSide, transposedInversePerspectiveMatrix);
      } else {
        perspective[0] = perspective[1] = perspective[2] = 0;
        perspective[3] = 1;
      }

      for (var i = 0; i < 3; i++) {
        translation[i] = matrix[3][i];
      }

      var row = [];

      for (i = 0; i < 3; i++) {
        row[i] = [matrix[i][0], matrix[i][1], matrix[i][2]];
      }

      scale[0] = MatrixMath.v3Length(row[0]);
      row[0] = MatrixMath.v3Normalize(row[0], scale[0]);
      skew[0] = MatrixMath.v3Dot(row[0], row[1]);
      row[1] = MatrixMath.v3Combine(row[1], row[0], 1.0, -skew[0]);
      skew[0] = MatrixMath.v3Dot(row[0], row[1]);
      row[1] = MatrixMath.v3Combine(row[1], row[0], 1.0, -skew[0]);
      scale[1] = MatrixMath.v3Length(row[1]);
      row[1] = MatrixMath.v3Normalize(row[1], scale[1]);
      skew[0] /= scale[1];
      skew[1] = MatrixMath.v3Dot(row[0], row[2]);
      row[2] = MatrixMath.v3Combine(row[2], row[0], 1.0, -skew[1]);
      skew[2] = MatrixMath.v3Dot(row[1], row[2]);
      row[2] = MatrixMath.v3Combine(row[2], row[1], 1.0, -skew[2]);
      scale[2] = MatrixMath.v3Length(row[2]);
      row[2] = MatrixMath.v3Normalize(row[2], scale[2]);
      skew[1] /= scale[2];
      skew[2] /= scale[2];
      var pdum3 = MatrixMath.v3Cross(row[1], row[2]);

      if (MatrixMath.v3Dot(row[0], pdum3) < 0) {
        for (i = 0; i < 3; i++) {
          scale[i] *= -1;
          row[i][0] *= -1;
          row[i][1] *= -1;
          row[i][2] *= -1;
        }
      }

      quaternion[0] = 0.5 * Math.sqrt(Math.max(1 + row[0][0] - row[1][1] - row[2][2], 0));
      quaternion[1] = 0.5 * Math.sqrt(Math.max(1 - row[0][0] + row[1][1] - row[2][2], 0));
      quaternion[2] = 0.5 * Math.sqrt(Math.max(1 - row[0][0] - row[1][1] + row[2][2], 0));
      quaternion[3] = 0.5 * Math.sqrt(Math.max(1 + row[0][0] + row[1][1] + row[2][2], 0));

      if (row[2][1] > row[1][2]) {
        quaternion[0] = -quaternion[0];
      }

      if (row[0][2] > row[2][0]) {
        quaternion[1] = -quaternion[1];
      }

      if (row[1][0] > row[0][1]) {
        quaternion[2] = -quaternion[2];
      }

      var rotationDegrees;

      if (quaternion[0] < 0.001 && quaternion[0] >= 0 && quaternion[1] < 0.001 && quaternion[1] >= 0) {
        rotationDegrees = [0, 0, MatrixMath.roundTo3Places(Math.atan2(row[0][1], row[0][0]) * 180 / Math.PI)];
      } else {
        rotationDegrees = MatrixMath.quaternionToDegreesXYZ(quaternion, matrix, row);
      }

      return {
        rotationDegrees: rotationDegrees,
        perspective: perspective,
        quaternion: quaternion,
        scale: scale,
        skew: skew,
        translation: translation,
        rotate: rotationDegrees[2],
        rotateX: rotationDegrees[0],
        rotateY: rotationDegrees[1],
        scaleX: scale[0],
        scaleY: scale[1],
        translateX: translation[0],
        translateY: translation[1]
      };
    }
  };
  module.exports = MatrixMath;
},150,[13],"MatrixMath");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var dummySize = {
    width: undefined,
    height: undefined
  };

  var sizesDiffer = function sizesDiffer(one, two) {
    one = one || dummySize;
    two = two || dummySize;
    return one !== two && (one.width !== two.width || one.height !== two.height);
  };

  module.exports = sizesDiffer;
},151,[],"sizesDiffer");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var ImageStylePropTypes = _require(_dependencyMap[0], 'ImageStylePropTypes');

  var TextStylePropTypes = _require(_dependencyMap[1], 'TextStylePropTypes');

  var ViewStylePropTypes = _require(_dependencyMap[2], 'ViewStylePropTypes');

  var invariant = _require(_dependencyMap[3], 'fbjs/lib/invariant');

  var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

  var StyleSheetValidation = function () {
    function StyleSheetValidation() {
      babelHelpers.classCallCheck(this, StyleSheetValidation);
    }

    babelHelpers.createClass(StyleSheetValidation, null, [{
      key: "validateStyleProp",
      value: function validateStyleProp(prop, style, caller) {
        if (!__DEV__) {
          return;
        }

        if (allStylePropTypes[prop] === undefined) {
          var message1 = '"' + prop + '" is not a valid style property.';
          var message2 = '\nValid style props: ' + JSON.stringify(Object.keys(allStylePropTypes).sort(), null, '  ');
          styleError(message1, style, caller, message2);
        }

        var error = allStylePropTypes[prop](style, prop, caller, 'prop', null, ReactPropTypesSecret);

        if (error) {
          styleError(error.message, style, caller);
        }
      }
    }, {
      key: "validateStyle",
      value: function validateStyle(name, styles) {
        if (!__DEV__) {
          return;
        }

        for (var prop in styles[name]) {
          StyleSheetValidation.validateStyleProp(prop, styles[name], 'StyleSheet ' + name);
        }
      }
    }, {
      key: "addValidStylePropTypes",
      value: function addValidStylePropTypes(stylePropTypes) {
        for (var key in stylePropTypes) {
          allStylePropTypes[key] = stylePropTypes[key];
        }
      }
    }]);
    return StyleSheetValidation;
  }();

  var styleError = function styleError(message1, style, caller, message2) {
    invariant(false, message1 + '\n' + (caller || '<<unknown>>') + ': ' + JSON.stringify(style, null, '  ') + (message2 || ''));
  };

  var allStylePropTypes = {};
  StyleSheetValidation.addValidStylePropTypes(ImageStylePropTypes);
  StyleSheetValidation.addValidStylePropTypes(TextStylePropTypes);
  StyleSheetValidation.addValidStylePropTypes(ViewStylePropTypes);
  module.exports = StyleSheetValidation;
},152,[137,147,148,13],"StyleSheetValidation");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-native/Libraries/Components/View/View.js";

  var NativeMethodsMixin = _require2(_dependencyMap[0], 'NativeMethodsMixin');

  var Platform = _require2(_dependencyMap[1], 'Platform');

  var React = _require2(_dependencyMap[2], 'React');

  var ReactNativeStyleAttributes = _require2(_dependencyMap[3], 'ReactNativeStyleAttributes');

  var ReactNativeViewAttributes = _require2(_dependencyMap[4], 'ReactNativeViewAttributes');

  var ViewPropTypes = _require2(_dependencyMap[5], 'ViewPropTypes');

  var _require = _require2(_dependencyMap[6], 'ViewContext'),
      ViewContextTypes = _require.ViewContextTypes;

  var createReactClass = _require2(_dependencyMap[7], 'create-react-class');

  var invariant = _require2(_dependencyMap[8], 'fbjs/lib/invariant');

  var requireNativeComponent = _require2(_dependencyMap[9], 'requireNativeComponent');

  var View = createReactClass({
    displayName: 'View',
    mixins: [NativeMethodsMixin],
    propTypes: ViewPropTypes,
    viewConfig: {
      uiViewClassName: 'RCTView',
      validAttributes: ReactNativeViewAttributes.RCTView
    },
    childContextTypes: ViewContextTypes,
    getChildContext: function getChildContext() {
      return {
        isInAParentText: false
      };
    },
    render: function render() {
      invariant(!(this.context.isInAParentText && Platform.OS === 'android'), 'Nesting of <View> within <Text> is not supported on Android.');
      return React.createElement(RCTView, babelHelpers.extends({}, this.props, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 78
        }
      }));
    }
  });
  var RCTView = requireNativeComponent('RCTView', View, {
    nativeOnly: {
      nativeBackgroundAndroid: true,
      nativeForegroundAndroid: true
    }
  });

  if (__DEV__) {
    var UIManager = _require2(_dependencyMap[10], 'UIManager');

    var viewConfig = UIManager.viewConfigs && UIManager.viewConfigs.RCTView || {};

    for (var prop in viewConfig.nativeProps) {
      var viewAny = View;

      if (!viewAny.propTypes[prop] && !ReactNativeStyleAttributes[prop]) {
        throw new Error('View is missing propType for native prop `' + prop + '`');
      }
    }
  }

  var ViewToExport = RCTView;

  if (__DEV__) {
    ViewToExport = View;
  }

  module.exports = ViewToExport;
},153,[128,52,131,136,154,155,165,166,13,168,110],"View");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var ReactNativeStyleAttributes = _require(_dependencyMap[0], 'ReactNativeStyleAttributes');

  var ReactNativeViewAttributes = {};
  ReactNativeViewAttributes.UIView = {
    pointerEvents: true,
    accessible: true,
    accessibilityActions: true,
    accessibilityLabel: true,
    accessibilityComponentType: true,
    accessibilityLiveRegion: true,
    accessibilityTraits: true,
    importantForAccessibility: true,
    nativeID: true,
    testID: true,
    renderToHardwareTextureAndroid: true,
    shouldRasterizeIOS: true,
    onLayout: true,
    onAccessibilityAction: true,
    onAccessibilityTap: true,
    onMagicTap: true,
    collapsable: true,
    needsOffscreenAlphaCompositing: true,
    style: ReactNativeStyleAttributes
  };
  ReactNativeViewAttributes.RCTView = babelHelpers.extends({}, ReactNativeViewAttributes.UIView, {
    removeClippedSubviews: true
  });
  module.exports = ReactNativeViewAttributes;
},154,[136],"ReactNativeViewAttributes");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var EdgeInsetsPropType = _require2(_dependencyMap[0], 'EdgeInsetsPropType');

  var PlatformViewPropTypes = _require2(_dependencyMap[1], 'PlatformViewPropTypes');

  var PropTypes = _require2(_dependencyMap[2], 'prop-types');

  var StyleSheetPropType = _require2(_dependencyMap[3], 'StyleSheetPropType');

  var ViewStylePropTypes = _require2(_dependencyMap[4], 'ViewStylePropTypes');

  var _require = _require2(_dependencyMap[5], 'ViewAccessibility'),
      AccessibilityComponentTypes = _require.AccessibilityComponentTypes,
      AccessibilityTraits = _require.AccessibilityTraits;

  var stylePropType = StyleSheetPropType(ViewStylePropTypes);
  module.exports = babelHelpers.extends({}, PlatformViewPropTypes, {
    accessible: PropTypes.bool,
    accessibilityLabel: PropTypes.node,
    accessibilityActions: PropTypes.arrayOf(PropTypes.string),
    accessibilityComponentType: PropTypes.oneOf(AccessibilityComponentTypes),
    accessibilityLiveRegion: PropTypes.oneOf(['none', 'polite', 'assertive']),
    importantForAccessibility: PropTypes.oneOf(['auto', 'yes', 'no', 'no-hide-descendants']),
    accessibilityTraits: PropTypes.oneOfType([PropTypes.oneOf(AccessibilityTraits), PropTypes.arrayOf(PropTypes.oneOf(AccessibilityTraits))]),
    accessibilityViewIsModal: PropTypes.bool,
    accessibilityElementsHidden: PropTypes.bool,
    onAccessibilityAction: PropTypes.func,
    onAccessibilityTap: PropTypes.func,
    onMagicTap: PropTypes.func,
    testID: PropTypes.string,
    nativeID: PropTypes.string,
    onResponderGrant: PropTypes.func,
    onResponderMove: PropTypes.func,
    onResponderReject: PropTypes.func,
    onResponderRelease: PropTypes.func,
    onResponderTerminate: PropTypes.func,
    onResponderTerminationRequest: PropTypes.func,
    onStartShouldSetResponder: PropTypes.func,
    onStartShouldSetResponderCapture: PropTypes.func,
    onMoveShouldSetResponder: PropTypes.func,
    onMoveShouldSetResponderCapture: PropTypes.func,
    hitSlop: EdgeInsetsPropType,
    onLayout: PropTypes.func,
    pointerEvents: PropTypes.oneOf(['box-none', 'none', 'box-only', 'auto']),
    style: stylePropType,
    removeClippedSubviews: PropTypes.bool,
    renderToHardwareTextureAndroid: PropTypes.bool,
    shouldRasterizeIOS: PropTypes.bool,
    collapsable: PropTypes.bool,
    needsOffscreenAlphaCompositing: PropTypes.bool
  });
},155,[156,161,141,163,148,164],"ViewPropTypes");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var PropTypes = _require(_dependencyMap[0], 'prop-types');

  var createStrictShapeTypeChecker = _require(_dependencyMap[1], 'createStrictShapeTypeChecker');

  var EdgeInsetsPropType = createStrictShapeTypeChecker({
    top: PropTypes.number,
    left: PropTypes.number,
    bottom: PropTypes.number,
    right: PropTypes.number
  });
  module.exports = EdgeInsetsPropType;
},156,[141,157],"EdgeInsetsPropType");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = _require(_dependencyMap[0], 'fbjs/lib/invariant');

  var merge = _require(_dependencyMap[1], 'merge');

  function createStrictShapeTypeChecker(shapeTypes) {
    function checkType(isRequired, props, propName, componentName, location) {
      if (!props[propName]) {
        if (isRequired) {
          invariant(false, "Required object `" + propName + "` was not specified in " + ("`" + componentName + "`."));
        }

        return;
      }

      var propValue = props[propName];
      var propType = typeof propValue;
      var locationName = location || '(unknown)';

      if (propType !== 'object') {
        invariant(false, "Invalid " + locationName + " `" + propName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
      }

      var allKeys = merge(props[propName], shapeTypes);

      for (var _len = arguments.length, rest = Array(_len > 5 ? _len - 5 : 0), _key = 5; _key < _len; _key++) {
        rest[_key - 5] = arguments[_key];
      }

      for (var key in allKeys) {
        var checker = shapeTypes[key];

        if (!checker) {
          invariant(false, "Invalid props." + propName + " key `" + key + "` supplied to `" + componentName + "`." + '\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
        }

        var error = checker.apply(undefined, [propValue, key, componentName, location].concat(rest));

        if (error) {
          invariant(false, error.message + '\nBad object: ' + JSON.stringify(props[propName], null, '  '));
        }
      }
    }

    function chainedCheckType(props, propName, componentName, location) {
      for (var _len2 = arguments.length, rest = Array(_len2 > 4 ? _len2 - 4 : 0), _key2 = 4; _key2 < _len2; _key2++) {
        rest[_key2 - 4] = arguments[_key2];
      }

      return checkType.apply(undefined, [false, props, propName, componentName, location].concat(rest));
    }

    chainedCheckType.isRequired = checkType.bind(null, true);
    return chainedCheckType;
  }

  module.exports = createStrictShapeTypeChecker;
},157,[13,158],"createStrictShapeTypeChecker");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var mergeInto = _require(_dependencyMap[0], 'mergeInto');

  var merge = function merge(one, two) {
    var result = {};
    mergeInto(result, one);
    mergeInto(result, two);
    return result;
  };

  module.exports = merge;
},158,[159],"merge");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var mergeHelpers = _require(_dependencyMap[0], 'mergeHelpers');

  var checkMergeObjectArg = mergeHelpers.checkMergeObjectArg;
  var checkMergeIntoObjectArg = mergeHelpers.checkMergeIntoObjectArg;

  function mergeInto(one, two) {
    checkMergeIntoObjectArg(one);

    if (two != null) {
      checkMergeObjectArg(two);

      for (var key in two) {
        if (!two.hasOwnProperty(key)) {
          continue;
        }

        one[key] = two[key];
      }
    }
  }

  module.exports = mergeInto;
},159,[160],"mergeInto");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = _require(_dependencyMap[0], 'fbjs/lib/invariant');

  var MAX_MERGE_DEPTH = 36;

  var isTerminal = function isTerminal(o) {
    return typeof o !== 'object' || o instanceof Date || o === null;
  };

  var mergeHelpers = {
    MAX_MERGE_DEPTH: MAX_MERGE_DEPTH,
    isTerminal: isTerminal,
    normalizeMergeArg: function normalizeMergeArg(arg) {
      return arg === undefined || arg === null ? {} : arg;
    },
    checkMergeArrayArgs: function checkMergeArrayArgs(one, two) {
      invariant(Array.isArray(one) && Array.isArray(two), 'Tried to merge arrays, instead got %s and %s.', one, two);
    },
    checkMergeObjectArgs: function checkMergeObjectArgs(one, two) {
      mergeHelpers.checkMergeObjectArg(one);
      mergeHelpers.checkMergeObjectArg(two);
    },
    checkMergeObjectArg: function checkMergeObjectArg(arg) {
      invariant(!isTerminal(arg) && !Array.isArray(arg), 'Tried to merge an object, instead got %s.', arg);
    },
    checkMergeIntoObjectArg: function checkMergeIntoObjectArg(arg) {
      invariant((!isTerminal(arg) || typeof arg === 'function') && !Array.isArray(arg), 'Tried to merge into an object, instead got %s.', arg);
    },
    checkMergeLevel: function checkMergeLevel(level) {
      invariant(level < MAX_MERGE_DEPTH, 'Maximum deep merge depth exceeded. You may be attempting to merge ' + 'circular structures in an unsupported way.');
    },
    checkArrayStrategy: function checkArrayStrategy(strategy) {
      invariant(strategy === undefined || strategy in mergeHelpers.ArrayStrategies, 'You must provide an array strategy to deep merge functions to ' + 'instruct the deep merge how to resolve merging two arrays.');
    },
    ArrayStrategies: {
      Clobber: 'Clobber',
      Concat: 'Concat',
      IndexByIndex: 'IndexByIndex'
    }
  };
  module.exports = mergeHelpers;
},160,[13],"mergeHelpers");
__d(function (global, _require, module, exports, _dependencyMap) {
  var Platform = _require(_dependencyMap[0], 'Platform');

  var TVViewPropTypes = {};

  if (Platform.isTVOS) {
    TVViewPropTypes = _require(_dependencyMap[1], 'TVViewPropTypes');
  }

  module.exports = TVViewPropTypes;
},161,[52,162],"PlatformViewPropTypes");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var PropTypes = _require(_dependencyMap[0], 'prop-types');

  var TVViewPropTypes = {
    isTVSelectable: PropTypes.bool,
    hasTVPreferredFocus: PropTypes.bool,
    tvParallaxProperties: PropTypes.object,
    tvParallaxShiftDistanceX: PropTypes.number,
    tvParallaxShiftDistanceY: PropTypes.number,
    tvParallaxTiltAngle: PropTypes.number,
    tvParallaxMagnification: PropTypes.number
  };
  module.exports = TVViewPropTypes;
},162,[141],"TVViewPropTypes");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var createStrictShapeTypeChecker = _require(_dependencyMap[0], 'createStrictShapeTypeChecker');

  var flattenStyle = _require(_dependencyMap[1], 'flattenStyle');

  function StyleSheetPropType(shape) {
    var shapePropType = createStrictShapeTypeChecker(shape);
    return function (props, propName, componentName, location) {
      var newProps = props;

      if (props[propName]) {
        newProps = {};
        newProps[propName] = flattenStyle(props[propName]);
      }

      for (var _len = arguments.length, rest = Array(_len > 4 ? _len - 4 : 0), _key = 4; _key < _len; _key++) {
        rest[_key - 4] = arguments[_key];
      }

      return shapePropType.apply(undefined, [newProps, propName, componentName, location].concat(rest));
    };
  }

  module.exports = StyleSheetPropType;
},163,[157,105],"StyleSheetPropType");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  module.exports = {
    AccessibilityTraits: ['none', 'button', 'link', 'header', 'search', 'image', 'selected', 'plays', 'key', 'text', 'summary', 'disabled', 'frequentUpdates', 'startsMedia', 'adjustable', 'allowsDirectInteraction', 'pageTurn'],
    AccessibilityComponentTypes: ['none', 'button', 'radiobutton_checked', 'radiobutton_unchecked']
  };
},164,[],"ViewAccessibility");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var PropTypes = _require(_dependencyMap[0], 'prop-types');

  var ViewContextTypes = exports.ViewContextTypes = {
    isInAParentText: PropTypes.bool
  };
},165,[141],"ViewContext");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var React = _require(_dependencyMap[0], 'react');

  var factory = _require(_dependencyMap[1], './factory');

  if (typeof React === 'undefined') {
    throw Error('create-react-class could not find the React object. If you are using script tags, ' + 'make sure that React is being loaded before create-react-class.');
  }

  var ReactNoopUpdateQueue = new React.Component().updater;
  module.exports = factory(React.Component, React.isValidElement, ReactNoopUpdateQueue);
},166,[114,167],"node_modules/create-react-class/index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _assign = _require(_dependencyMap[0], 'object-assign');

  var emptyObject = _require(_dependencyMap[1], 'fbjs/lib/emptyObject');

  var _invariant = _require(_dependencyMap[2], 'fbjs/lib/invariant');

  if (process.env.NODE_ENV !== 'production') {
    var warning = _require(_dependencyMap[3], 'fbjs/lib/warning');
  }

  var MIXINS_KEY = 'mixins';

  function identity(fn) {
    return fn;
  }

  var ReactPropTypeLocationNames;

  if (process.env.NODE_ENV !== 'production') {
    ReactPropTypeLocationNames = {
      prop: 'prop',
      context: 'context',
      childContext: 'child context'
    };
  } else {
    ReactPropTypeLocationNames = {};
  }

  function factory(ReactComponent, isValidElement, ReactNoopUpdateQueue) {
    var injectedMixins = [];
    var ReactClassInterface = {
      mixins: 'DEFINE_MANY',
      statics: 'DEFINE_MANY',
      propTypes: 'DEFINE_MANY',
      contextTypes: 'DEFINE_MANY',
      childContextTypes: 'DEFINE_MANY',
      getDefaultProps: 'DEFINE_MANY_MERGED',
      getInitialState: 'DEFINE_MANY_MERGED',
      getChildContext: 'DEFINE_MANY_MERGED',
      render: 'DEFINE_ONCE',
      componentWillMount: 'DEFINE_MANY',
      componentDidMount: 'DEFINE_MANY',
      componentWillReceiveProps: 'DEFINE_MANY',
      shouldComponentUpdate: 'DEFINE_ONCE',
      componentWillUpdate: 'DEFINE_MANY',
      componentDidUpdate: 'DEFINE_MANY',
      componentWillUnmount: 'DEFINE_MANY',
      UNSAFE_componentWillMount: 'DEFINE_MANY',
      UNSAFE_componentWillReceiveProps: 'DEFINE_MANY',
      UNSAFE_componentWillUpdate: 'DEFINE_MANY',
      updateComponent: 'OVERRIDE_BASE'
    };
    var ReactClassStaticInterface = {
      getDerivedStateFromProps: 'DEFINE_MANY_MERGED'
    };
    var RESERVED_SPEC_KEYS = {
      displayName: function displayName(Constructor, _displayName) {
        Constructor.displayName = _displayName;
      },
      mixins: function mixins(Constructor, _mixins) {
        if (_mixins) {
          for (var i = 0; i < _mixins.length; i++) {
            mixSpecIntoComponent(Constructor, _mixins[i]);
          }
        }
      },
      childContextTypes: function childContextTypes(Constructor, _childContextTypes) {
        if (process.env.NODE_ENV !== 'production') {
          validateTypeDef(Constructor, _childContextTypes, 'childContext');
        }

        Constructor.childContextTypes = _assign({}, Constructor.childContextTypes, _childContextTypes);
      },
      contextTypes: function contextTypes(Constructor, _contextTypes) {
        if (process.env.NODE_ENV !== 'production') {
          validateTypeDef(Constructor, _contextTypes, 'context');
        }

        Constructor.contextTypes = _assign({}, Constructor.contextTypes, _contextTypes);
      },
      getDefaultProps: function getDefaultProps(Constructor, _getDefaultProps) {
        if (Constructor.getDefaultProps) {
          Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, _getDefaultProps);
        } else {
          Constructor.getDefaultProps = _getDefaultProps;
        }
      },
      propTypes: function propTypes(Constructor, _propTypes) {
        if (process.env.NODE_ENV !== 'production') {
          validateTypeDef(Constructor, _propTypes, 'prop');
        }

        Constructor.propTypes = _assign({}, Constructor.propTypes, _propTypes);
      },
      statics: function statics(Constructor, _statics) {
        mixStaticSpecIntoComponent(Constructor, _statics);
      },
      autobind: function autobind() {}
    };

    function validateTypeDef(Constructor, typeDef, location) {
      for (var propName in typeDef) {
        if (typeDef.hasOwnProperty(propName)) {
          if (process.env.NODE_ENV !== 'production') {
            warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName);
          }
        }
      }
    }

    function validateMethodOverride(isAlreadyDefined, name) {
      var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;

      if (ReactClassMixin.hasOwnProperty(name)) {
        _invariant(specPolicy === 'OVERRIDE_BASE', 'ReactClassInterface: You are attempting to override ' + '`%s` from your class specification. Ensure that your method names ' + 'do not overlap with React methods.', name);
      }

      if (isAlreadyDefined) {
        _invariant(specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED', 'ReactClassInterface: You are attempting to define ' + '`%s` on your component more than once. This conflict may be due ' + 'to a mixin.', name);
      }
    }

    function mixSpecIntoComponent(Constructor, spec) {
      if (!spec) {
        if (process.env.NODE_ENV !== 'production') {
          var typeofSpec = typeof spec;
          var isMixinValid = typeofSpec === 'object' && spec !== null;

          if (process.env.NODE_ENV !== 'production') {
            warning(isMixinValid, "%s: You're attempting to include a mixin that is either null " + 'or not an object. Check the mixins included by the component, ' + 'as well as any mixins they include themselves. ' + 'Expected object but got %s.', Constructor.displayName || 'ReactClass', spec === null ? null : typeofSpec);
          }
        }

        return;
      }

      _invariant(typeof spec !== 'function', "ReactClass: You're attempting to " + 'use a component class or function as a mixin. Instead, just use a ' + 'regular object.');

      _invariant(!isValidElement(spec), "ReactClass: You're attempting to " + 'use a component as a mixin. Instead, just use a regular object.');

      var proto = Constructor.prototype;
      var autoBindPairs = proto.__reactAutoBindPairs;

      if (spec.hasOwnProperty(MIXINS_KEY)) {
        RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
      }

      for (var name in spec) {
        if (!spec.hasOwnProperty(name)) {
          continue;
        }

        if (name === MIXINS_KEY) {
          continue;
        }

        var property = spec[name];
        var isAlreadyDefined = proto.hasOwnProperty(name);
        validateMethodOverride(isAlreadyDefined, name);

        if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
          RESERVED_SPEC_KEYS[name](Constructor, property);
        } else {
          var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
          var isFunction = typeof property === 'function';
          var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;

          if (shouldAutoBind) {
            autoBindPairs.push(name, property);
            proto[name] = property;
          } else {
            if (isAlreadyDefined) {
              var specPolicy = ReactClassInterface[name];

              _invariant(isReactClassMethod && (specPolicy === 'DEFINE_MANY_MERGED' || specPolicy === 'DEFINE_MANY'), 'ReactClass: Unexpected spec policy %s for key %s ' + 'when mixing in component specs.', specPolicy, name);

              if (specPolicy === 'DEFINE_MANY_MERGED') {
                proto[name] = createMergedResultFunction(proto[name], property);
              } else if (specPolicy === 'DEFINE_MANY') {
                proto[name] = createChainedFunction(proto[name], property);
              }
            } else {
              proto[name] = property;

              if (process.env.NODE_ENV !== 'production') {
                if (typeof property === 'function' && spec.displayName) {
                  proto[name].displayName = spec.displayName + '_' + name;
                }
              }
            }
          }
        }
      }
    }

    function mixStaticSpecIntoComponent(Constructor, statics) {
      if (!statics) {
        return;
      }

      for (var name in statics) {
        var property = statics[name];

        if (!statics.hasOwnProperty(name)) {
          continue;
        }

        var isReserved = name in RESERVED_SPEC_KEYS;

        _invariant(!isReserved, 'ReactClass: You are attempting to define a reserved ' + 'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' + 'as an instance property instead; it will still be accessible on the ' + 'constructor.', name);

        var isAlreadyDefined = name in Constructor;

        if (isAlreadyDefined) {
          var specPolicy = ReactClassStaticInterface.hasOwnProperty(name) ? ReactClassStaticInterface[name] : null;

          _invariant(specPolicy === 'DEFINE_MANY_MERGED', 'ReactClass: You are attempting to define ' + '`%s` on your component more than once. This conflict may be ' + 'due to a mixin.', name);

          Constructor[name] = createMergedResultFunction(Constructor[name], property);
          return;
        }

        Constructor[name] = property;
      }
    }

    function mergeIntoWithNoDuplicateKeys(one, two) {
      _invariant(one && two && typeof one === 'object' && typeof two === 'object', 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.');

      for (var key in two) {
        if (two.hasOwnProperty(key)) {
          _invariant(one[key] === undefined, 'mergeIntoWithNoDuplicateKeys(): ' + 'Tried to merge two objects with the same key: `%s`. This conflict ' + 'may be due to a mixin; in particular, this may be caused by two ' + 'getInitialState() or getDefaultProps() methods returning objects ' + 'with clashing keys.', key);

          one[key] = two[key];
        }
      }

      return one;
    }

    function createMergedResultFunction(one, two) {
      return function mergedResult() {
        var a = one.apply(this, arguments);
        var b = two.apply(this, arguments);

        if (a == null) {
          return b;
        } else if (b == null) {
          return a;
        }

        var c = {};
        mergeIntoWithNoDuplicateKeys(c, a);
        mergeIntoWithNoDuplicateKeys(c, b);
        return c;
      };
    }

    function createChainedFunction(one, two) {
      return function chainedFunction() {
        one.apply(this, arguments);
        two.apply(this, arguments);
      };
    }

    function bindAutoBindMethod(component, method) {
      var boundMethod = method.bind(component);

      if (process.env.NODE_ENV !== 'production') {
        boundMethod.__reactBoundContext = component;
        boundMethod.__reactBoundMethod = method;
        boundMethod.__reactBoundArguments = null;
        var componentName = component.constructor.displayName;
        var _bind = boundMethod.bind;

        boundMethod.bind = function (newThis) {
          for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }

          if (newThis !== component && newThis !== null) {
            if (process.env.NODE_ENV !== 'production') {
              warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName);
            }
          } else if (!args.length) {
            if (process.env.NODE_ENV !== 'production') {
              warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName);
            }

            return boundMethod;
          }

          var reboundMethod = _bind.apply(boundMethod, arguments);

          reboundMethod.__reactBoundContext = component;
          reboundMethod.__reactBoundMethod = method;
          reboundMethod.__reactBoundArguments = args;
          return reboundMethod;
        };
      }

      return boundMethod;
    }

    function bindAutoBindMethods(component) {
      var pairs = component.__reactAutoBindPairs;

      for (var i = 0; i < pairs.length; i += 2) {
        var autoBindKey = pairs[i];
        var method = pairs[i + 1];
        component[autoBindKey] = bindAutoBindMethod(component, method);
      }
    }

    var IsMountedPreMixin = {
      componentDidMount: function componentDidMount() {
        this.__isMounted = true;
      }
    };
    var IsMountedPostMixin = {
      componentWillUnmount: function componentWillUnmount() {
        this.__isMounted = false;
      }
    };
    var ReactClassMixin = {
      replaceState: function replaceState(newState, callback) {
        this.updater.enqueueReplaceState(this, newState, callback);
      },
      isMounted: function isMounted() {
        if (process.env.NODE_ENV !== 'production') {
          warning(this.__didWarnIsMounted, '%s: isMounted is deprecated. Instead, make sure to clean up ' + 'subscriptions and pending requests in componentWillUnmount to ' + 'prevent memory leaks.', this.constructor && this.constructor.displayName || this.name || 'Component');
          this.__didWarnIsMounted = true;
        }

        return !!this.__isMounted;
      }
    };

    var ReactClassComponent = function ReactClassComponent() {};

    _assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);

    function createClass(spec) {
      var Constructor = identity(function (props, context, updater) {
        if (process.env.NODE_ENV !== 'production') {
          warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory');
        }

        if (this.__reactAutoBindPairs.length) {
          bindAutoBindMethods(this);
        }

        this.props = props;
        this.context = context;
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
        this.state = null;
        var initialState = this.getInitialState ? this.getInitialState() : null;

        if (process.env.NODE_ENV !== 'production') {
          if (initialState === undefined && this.getInitialState._isMockFunction) {
            initialState = null;
          }
        }

        _invariant(typeof initialState === 'object' && !Array.isArray(initialState), '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent');

        this.state = initialState;
      });
      Constructor.prototype = new ReactClassComponent();
      Constructor.prototype.constructor = Constructor;
      Constructor.prototype.__reactAutoBindPairs = [];
      injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));
      mixSpecIntoComponent(Constructor, IsMountedPreMixin);
      mixSpecIntoComponent(Constructor, spec);
      mixSpecIntoComponent(Constructor, IsMountedPostMixin);

      if (Constructor.getDefaultProps) {
        Constructor.defaultProps = Constructor.getDefaultProps();
      }

      if (process.env.NODE_ENV !== 'production') {
        if (Constructor.getDefaultProps) {
          Constructor.getDefaultProps.isReactClassApproved = {};
        }

        if (Constructor.prototype.getInitialState) {
          Constructor.prototype.getInitialState.isReactClassApproved = {};
        }
      }

      _invariant(Constructor.prototype.render, 'createClass(...): Class specification must implement a `render` method.');

      if (process.env.NODE_ENV !== 'production') {
        warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component');
        warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component');
        warning(!Constructor.prototype.UNSAFE_componentWillRecieveProps, '%s has a method called UNSAFE_componentWillRecieveProps(). ' + 'Did you mean UNSAFE_componentWillReceiveProps()?', spec.displayName || 'A component');
      }

      for (var methodName in ReactClassInterface) {
        if (!Constructor.prototype[methodName]) {
          Constructor.prototype[methodName] = null;
        }
      }

      return Constructor;
    }

    return createClass;
  }

  module.exports = factory;
},167,[116,117,13,56],"node_modules/create-react-class/factory.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var Platform = _require(_dependencyMap[0], 'Platform');

  var ReactNativeBridgeEventPlugin = _require(_dependencyMap[1], 'ReactNativeBridgeEventPlugin');

  var ReactNativeStyleAttributes = _require(_dependencyMap[2], 'ReactNativeStyleAttributes');

  var UIManager = _require(_dependencyMap[3], 'UIManager');

  var createReactNativeComponentClass = _require(_dependencyMap[4], 'createReactNativeComponentClass');

  var insetsDiffer = _require(_dependencyMap[5], 'insetsDiffer');

  var matricesDiffer = _require(_dependencyMap[6], 'matricesDiffer');

  var pointsDiffer = _require(_dependencyMap[7], 'pointsDiffer');

  var processColor = _require(_dependencyMap[8], 'processColor');

  var resolveAssetSource = _require(_dependencyMap[9], 'resolveAssetSource');

  var sizesDiffer = _require(_dependencyMap[10], 'sizesDiffer');

  var verifyPropTypes = _require(_dependencyMap[11], 'verifyPropTypes');

  var invariant = _require(_dependencyMap[12], 'fbjs/lib/invariant');

  var warning = _require(_dependencyMap[13], 'fbjs/lib/warning');

  var hasAttachedDefaultEventTypes = false;

  function requireNativeComponent(viewName, componentInterface, extraConfig) {
    function attachDefaultEventTypes(viewConfig) {
      if (Platform.OS === 'android') {
        if (UIManager.ViewManagerNames) {
          viewConfig = merge(viewConfig, UIManager.getDefaultEventTypes());
        } else {
          viewConfig.bubblingEventTypes = merge(viewConfig.bubblingEventTypes, UIManager.genericBubblingEventTypes);
          viewConfig.directEventTypes = merge(viewConfig.directEventTypes, UIManager.genericDirectEventTypes);
        }
      }
    }

    function merge(destination, source) {
      if (!source) {
        return destination;
      }

      if (!destination) {
        return source;
      }

      for (var key in source) {
        if (!source.hasOwnProperty(key)) {
          continue;
        }

        var sourceValue = source[key];

        if (destination.hasOwnProperty(key)) {
          var destinationValue = destination[key];

          if (typeof sourceValue === 'object' && typeof destinationValue === 'object') {
            sourceValue = merge(destinationValue, sourceValue);
          }
        }

        destination[key] = sourceValue;
      }

      return destination;
    }

    function getViewConfig() {
      var viewConfig = UIManager[viewName];
      invariant(viewConfig != null && !viewConfig.NativeProps != null, 'Native component for "%s" does not exist', viewName);
      viewConfig.uiViewClassName = viewName;
      viewConfig.validAttributes = {};

      if (componentInterface) {
        viewConfig.propTypes = typeof componentInterface.__propTypesSecretDontUseThesePlease === 'object' ? componentInterface.__propTypesSecretDontUseThesePlease : componentInterface.propTypes;
      } else {
        viewConfig.propTypes = null;
      }

      var baseModuleName = viewConfig.baseModuleName;
      var bubblingEventTypes = viewConfig.bubblingEventTypes;
      var directEventTypes = viewConfig.directEventTypes;
      var nativeProps = viewConfig.NativeProps;

      while (baseModuleName) {
        var baseModule = UIManager[baseModuleName];

        if (!baseModule) {
          warning(false, 'Base module "%s" does not exist', baseModuleName);
          baseModuleName = null;
        } else {
          bubblingEventTypes = babelHelpers.extends({}, baseModule.bubblingEventTypes, bubblingEventTypes);
          directEventTypes = babelHelpers.extends({}, baseModule.directEventTypes, directEventTypes);
          nativeProps = babelHelpers.extends({}, baseModule.NativeProps, nativeProps);
          baseModuleName = baseModule.baseModuleName;
        }
      }

      viewConfig.bubblingEventTypes = bubblingEventTypes;
      viewConfig.directEventTypes = directEventTypes;

      for (var key in nativeProps) {
        var useAttribute = false;
        var attribute = {};
        var differ = TypeToDifferMap[nativeProps[key]];

        if (differ) {
          attribute.diff = differ;
          useAttribute = true;
        }

        var processor = TypeToProcessorMap[nativeProps[key]];

        if (processor) {
          attribute.process = processor;
          useAttribute = true;
        }

        viewConfig.validAttributes[key] = useAttribute ? attribute : true;
      }

      viewConfig.validAttributes.style = ReactNativeStyleAttributes;

      if (__DEV__) {
        componentInterface && verifyPropTypes(componentInterface, viewConfig, extraConfig && extraConfig.nativeOnly);
      }

      if (!hasAttachedDefaultEventTypes) {
        attachDefaultEventTypes(viewConfig);
        hasAttachedDefaultEventTypes = true;
      }

      ReactNativeBridgeEventPlugin.processEventTypes(viewConfig);
      return viewConfig;
    }

    return createReactNativeComponentClass(viewName, getViewConfig);
  }

  var TypeToDifferMap = {
    CATransform3D: matricesDiffer,
    CGPoint: pointsDiffer,
    CGSize: sizesDiffer,
    UIEdgeInsets: insetsDiffer
  };

  function processColorArray(colors) {
    return colors && colors.map(processColor);
  }

  var TypeToProcessorMap = {
    CGColor: processColor,
    CGColorArray: processColorArray,
    UIColor: processColor,
    UIColorArray: processColorArray,
    CGImage: resolveAssetSource,
    UIImage: resolveAssetSource,
    RCTImageSource: resolveAssetSource,
    Color: processColor,
    ColorArray: processColorArray
  };
  module.exports = requireNativeComponent;
},168,[52,169,136,110,170,171,172,173,100,174,151,178,13,56],"requireNativeComponent");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _require = _require2(_dependencyMap[0], 'ReactNative'),
      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = _require.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

  module.exports = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactNativeBridgeEventPlugin;
},169,[21],"ReactNativeBridgeEventPlugin");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _require = _require2(_dependencyMap[0], 'ReactNative'),
      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = _require.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

  module.exports = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.createReactNativeComponentClass;
},170,[21],"createReactNativeComponentClass");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var dummyInsets = {
    top: undefined,
    left: undefined,
    right: undefined,
    bottom: undefined
  };

  var insetsDiffer = function insetsDiffer(one, two) {
    one = one || dummyInsets;
    two = two || dummyInsets;
    return one !== two && (one.top !== two.top || one.left !== two.left || one.right !== two.right || one.bottom !== two.bottom);
  };

  module.exports = insetsDiffer;
},171,[],"insetsDiffer");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var matricesDiffer = function matricesDiffer(one, two) {
    if (one === two) {
      return false;
    }

    return !one || !two || one[12] !== two[12] || one[13] !== two[13] || one[14] !== two[14] || one[5] !== two[5] || one[10] !== two[10] || one[1] !== two[1] || one[2] !== two[2] || one[3] !== two[3] || one[4] !== two[4] || one[6] !== two[6] || one[7] !== two[7] || one[8] !== two[8] || one[9] !== two[9] || one[11] !== two[11] || one[15] !== two[15];
  };

  module.exports = matricesDiffer;
},172,[],"matricesDiffer");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var dummyPoint = {
    x: undefined,
    y: undefined
  };

  var pointsDiffer = function pointsDiffer(one, two) {
    one = one || dummyPoint;
    two = two || dummyPoint;
    return one !== two && (one.x !== two.x || one.y !== two.y);
  };

  module.exports = pointsDiffer;
},173,[],"pointsDiffer");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var AssetRegistry = _require(_dependencyMap[0], 'AssetRegistry');

  var AssetSourceResolver = _require(_dependencyMap[1], 'AssetSourceResolver');

  var _customSourceTransformer = void 0,
      _serverURL = void 0,
      _scriptURL = void 0;

  var _sourceCodeScriptURL = void 0;

  function getDevServerURL() {
    if (_serverURL === undefined) {
      var match = _sourceCodeScriptURL && _sourceCodeScriptURL.match(/^https?:\/\/.*?\//);

      if (match) {
        _serverURL = match[0];
      } else {
        _serverURL = null;
      }
    }

    return _serverURL;
  }

  function _coerceLocalScriptURL(scriptURL) {
    if (scriptURL) {
      if (scriptURL.startsWith('assets://')) {
        return null;
      }

      scriptURL = scriptURL.substring(0, scriptURL.lastIndexOf('/') + 1);

      if (!scriptURL.includes('://')) {
        scriptURL = 'file://' + scriptURL;
      }
    }

    return scriptURL;
  }

  function getScriptURL() {
    if (_scriptURL === undefined) {
      _scriptURL = _coerceLocalScriptURL(_sourceCodeScriptURL);
    }

    return _scriptURL;
  }

  function setCustomSourceTransformer(transformer) {
    _customSourceTransformer = transformer;
  }

  function resolveAssetSource(source) {
    if (typeof source === 'object') {
      return source;
    }

    var asset = AssetRegistry.getAssetByID(source);

    if (!asset) {
      return null;
    }

    var resolver = new AssetSourceResolver(getDevServerURL(), getScriptURL(), asset);

    if (_customSourceTransformer) {
      return _customSourceTransformer(resolver);
    }

    return resolver.defaultAsset();
  }

  var sourceCode = global.nativeExtensions && global.nativeExtensions.SourceCode;

  if (!sourceCode) {
    var NativeModules = _require(_dependencyMap[2], 'NativeModules');

    sourceCode = NativeModules && NativeModules.SourceCode;
  }

  _sourceCodeScriptURL = sourceCode.scriptURL;
  module.exports = resolveAssetSource;
  module.exports.pickScale = AssetSourceResolver.pickScale;
  module.exports.setCustomSourceTransformer = setCustomSourceTransformer;
},174,[175,176,15],"resolveAssetSource");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var assets = [];

  function registerAsset(asset) {
    return assets.push(asset);
  }

  function getAssetByID(assetId) {
    return assets[assetId - 1];
  }

  module.exports = {
    registerAsset: registerAsset,
    getAssetByID: getAssetByID
  };
},175,[],"AssetRegistry");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var PixelRatio = _require(_dependencyMap[0], 'PixelRatio');

  var Platform = _require(_dependencyMap[1], 'Platform');

  var assetPathUtils = _require(_dependencyMap[2], '../../local-cli/bundle/assetPathUtils');

  var invariant = _require(_dependencyMap[3], 'fbjs/lib/invariant');

  function getScaledAssetPath(asset) {
    var scale = AssetSourceResolver.pickScale(asset.scales, PixelRatio.get());
    var scaleSuffix = scale === 1 ? '' : '@' + scale + 'x';
    var assetDir = assetPathUtils.getBasePath(asset);
    return assetDir + '/' + asset.name + scaleSuffix + '.' + asset.type;
  }

  function getAssetPathInDrawableFolder(asset) {
    var scale = AssetSourceResolver.pickScale(asset.scales, PixelRatio.get());
    var drawbleFolder = assetPathUtils.getAndroidResourceFolderName(asset, scale);
    var fileName = assetPathUtils.getAndroidResourceIdentifier(asset);
    return drawbleFolder + '/' + fileName + '.' + asset.type;
  }

  var AssetSourceResolver = function () {
    function AssetSourceResolver(serverUrl, jsbundleUrl, asset) {
      babelHelpers.classCallCheck(this, AssetSourceResolver);
      this.serverUrl = serverUrl;
      this.jsbundleUrl = jsbundleUrl;
      this.asset = asset;
    }

    babelHelpers.createClass(AssetSourceResolver, [{
      key: "isLoadedFromServer",
      value: function isLoadedFromServer() {
        return !!this.serverUrl;
      }
    }, {
      key: "isLoadedFromFileSystem",
      value: function isLoadedFromFileSystem() {
        return !!(this.jsbundleUrl && this.jsbundleUrl.startsWith('file://'));
      }
    }, {
      key: "defaultAsset",
      value: function defaultAsset() {
        if (this.isLoadedFromServer()) {
          return this.assetServerURL();
        }

        if (Platform.OS === 'android') {
          return this.isLoadedFromFileSystem() ? this.drawableFolderInBundle() : this.resourceIdentifierWithoutScale();
        } else {
          return this.scaledAssetURLNearBundle();
        }
      }
    }, {
      key: "assetServerURL",
      value: function assetServerURL() {
        invariant(!!this.serverUrl, 'need server to load from');
        return this.fromSource(this.serverUrl + getScaledAssetPath(this.asset) + '?platform=' + Platform.OS + '&hash=' + this.asset.hash);
      }
    }, {
      key: "scaledAssetPath",
      value: function scaledAssetPath() {
        return this.fromSource(getScaledAssetPath(this.asset));
      }
    }, {
      key: "scaledAssetURLNearBundle",
      value: function scaledAssetURLNearBundle() {
        var path = this.jsbundleUrl || 'file://';
        return this.fromSource(path + getScaledAssetPath(this.asset));
      }
    }, {
      key: "resourceIdentifierWithoutScale",
      value: function resourceIdentifierWithoutScale() {
        invariant(Platform.OS === 'android', 'resource identifiers work on Android');
        return this.fromSource(assetPathUtils.getAndroidResourceIdentifier(this.asset));
      }
    }, {
      key: "drawableFolderInBundle",
      value: function drawableFolderInBundle() {
        var path = this.jsbundleUrl || 'file://';
        return this.fromSource(path + getAssetPathInDrawableFolder(this.asset));
      }
    }, {
      key: "fromSource",
      value: function fromSource(source) {
        return {
          __packager_asset: true,
          width: this.asset.width,
          height: this.asset.height,
          uri: source,
          scale: AssetSourceResolver.pickScale(this.asset.scales, PixelRatio.get())
        };
      }
    }], [{
      key: "pickScale",
      value: function pickScale(scales, deviceScale) {
        for (var i = 0; i < scales.length; i++) {
          if (scales[i] >= deviceScale) {
            return scales[i];
          }
        }

        return scales[scales.length - 1] || 1;
      }
    }]);
    return AssetSourceResolver;
  }();

  module.exports = AssetSourceResolver;
},176,[133,52,177,13],"AssetSourceResolver");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  function getAndroidAssetSuffix(scale) {
    switch (scale) {
      case 0.75:
        return 'ldpi';

      case 1:
        return 'mdpi';

      case 1.5:
        return 'hdpi';

      case 2:
        return 'xhdpi';

      case 3:
        return 'xxhdpi';

      case 4:
        return 'xxxhdpi';
    }

    throw new Error('no such scale');
  }

  var drawableFileTypes = new Set(['gif', 'jpeg', 'jpg', 'png', 'svg', 'webp', 'xml']);

  function getAndroidResourceFolderName(asset, scale) {
    if (!drawableFileTypes.has(asset.type)) {
      return 'raw';
    }

    var suffix = getAndroidAssetSuffix(scale);

    if (!suffix) {
      throw new Error('Don\'t know which android drawable suffix to use for asset: ' + JSON.stringify(asset));
    }

    var androidFolder = 'drawable-' + suffix;
    return androidFolder;
  }

  function getAndroidResourceIdentifier(asset) {
    var folderPath = getBasePath(asset);
    return (folderPath + '/' + asset.name).toLowerCase().replace(/\//g, '_').replace(/([^a-z0-9_])/g, '').replace(/^assets_/, '');
  }

  function getBasePath(asset) {
    var basePath = asset.httpServerLocation;

    if (basePath[0] === '/') {
      basePath = basePath.substr(1);
    }

    return basePath;
  }

  module.exports = {
    getAndroidAssetSuffix: getAndroidAssetSuffix,
    getAndroidResourceFolderName: getAndroidResourceFolderName,
    getAndroidResourceIdentifier: getAndroidResourceIdentifier,
    getBasePath: getBasePath
  };
},177,[],"node_modules/react-native/local-cli/bundle/assetPathUtils.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var ReactNativeStyleAttributes = _require(_dependencyMap[0], 'ReactNativeStyleAttributes');

  function verifyPropTypes(componentInterface, viewConfig, nativePropsToIgnore) {
    if (!viewConfig) {
      return;
    }

    var componentName = componentInterface.displayName || componentInterface.name || 'unknown';
    var propTypes = componentInterface.__propTypesSecretDontUseThesePlease || componentInterface.propTypes;

    if (!propTypes) {
      throw new Error('`' + componentName + '` has no propTypes defined`');
    }

    var nativeProps = viewConfig.NativeProps;

    for (var prop in nativeProps) {
      if (!propTypes[prop] && !ReactNativeStyleAttributes[prop] && (!nativePropsToIgnore || !nativePropsToIgnore[prop])) {
        var message;

        if (propTypes.hasOwnProperty(prop)) {
          message = '`' + componentName + '` has incorrectly defined propType for native prop `' + viewConfig.uiViewClassName + '.' + prop + '` of native type `' + nativeProps[prop];
        } else {
          message = '`' + componentName + '` has no propType for native prop `' + viewConfig.uiViewClassName + '.' + prop + '` of native type `' + nativeProps[prop] + '`';
        }

        message += "\nIf you haven't changed this prop yourself, this usually means that " + 'your versions of the native code and JavaScript code are out of sync. Updating both ' + 'should make this error go away.';
        throw new Error(message);
      }
    }
  }

  module.exports = verifyPropTypes;
},178,[136],"verifyPropTypes");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _class,
      _temp,
      _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-native/Libraries/ART/ReactNativeART.js",
      _class2,
      _temp2;

  var Color = _require(_dependencyMap[0], 'art/core/color');

  var Path = _require(_dependencyMap[1], 'ARTSerializablePath');

  var Transform = _require(_dependencyMap[2], 'art/core/transform');

  var React = _require(_dependencyMap[3], 'React');

  var PropTypes = _require(_dependencyMap[4], 'prop-types');

  var ReactNativeViewAttributes = _require(_dependencyMap[5], 'ReactNativeViewAttributes');

  var createReactNativeComponentClass = _require(_dependencyMap[6], 'createReactNativeComponentClass');

  var merge = _require(_dependencyMap[7], 'merge');

  var invariant = _require(_dependencyMap[8], 'fbjs/lib/invariant');

  function arrayDiffer(a, b) {
    if (a == null || b == null) {
      return true;
    }

    if (a.length !== b.length) {
      return true;
    }

    for (var i = 0; i < a.length; i++) {
      if (a[i] !== b[i]) {
        return true;
      }
    }

    return false;
  }

  function fontAndLinesDiffer(a, b) {
    if (a === b) {
      return false;
    }

    if (a.font !== b.font) {
      if (a.font === null) {
        return true;
      }

      if (b.font === null) {
        return true;
      }

      if (a.font.fontFamily !== b.font.fontFamily || a.font.fontSize !== b.font.fontSize || a.font.fontWeight !== b.font.fontWeight || a.font.fontStyle !== b.font.fontStyle) {
        return true;
      }
    }

    return arrayDiffer(a.lines, b.lines);
  }

  var SurfaceViewAttributes = merge(ReactNativeViewAttributes.UIView, {});
  var NodeAttributes = {
    transform: {
      diff: arrayDiffer
    },
    opacity: true
  };
  var GroupAttributes = merge(NodeAttributes, {
    clipping: {
      diff: arrayDiffer
    }
  });
  var RenderableAttributes = merge(NodeAttributes, {
    fill: {
      diff: arrayDiffer
    },
    stroke: {
      diff: arrayDiffer
    },
    strokeWidth: true,
    strokeCap: true,
    strokeJoin: true,
    strokeDash: {
      diff: arrayDiffer
    }
  });
  var ShapeAttributes = merge(RenderableAttributes, {
    d: {
      diff: arrayDiffer
    }
  });
  var TextAttributes = merge(RenderableAttributes, {
    alignment: true,
    frame: {
      diff: fontAndLinesDiffer
    },
    path: {
      diff: arrayDiffer
    }
  });
  var NativeSurfaceView = createReactNativeComponentClass('ARTSurfaceView', function () {
    return {
      validAttributes: SurfaceViewAttributes,
      uiViewClassName: 'ARTSurfaceView'
    };
  });
  var NativeGroup = createReactNativeComponentClass('ARTGroup', function () {
    return {
      validAttributes: GroupAttributes,
      uiViewClassName: 'ARTGroup'
    };
  });
  var NativeShape = createReactNativeComponentClass('ARTShape', function () {
    return {
      validAttributes: ShapeAttributes,
      uiViewClassName: 'ARTShape'
    };
  });
  var NativeText = createReactNativeComponentClass('ARTText', function () {
    return {
      validAttributes: TextAttributes,
      uiViewClassName: 'ARTText'
    };
  });

  function childrenAsString(children) {
    if (!children) {
      return '';
    }

    if (typeof children === 'string') {
      return children;
    }

    if (children.length) {
      return children.join('\n');
    }

    return '';
  }

  var Surface = (_temp = _class = function (_React$Component) {
    babelHelpers.inherits(Surface, _React$Component);

    function Surface() {
      babelHelpers.classCallCheck(this, Surface);
      return babelHelpers.possibleConstructorReturn(this, (Surface.__proto__ || Object.getPrototypeOf(Surface)).apply(this, arguments));
    }

    babelHelpers.createClass(Surface, [{
      key: "getChildContext",
      value: function getChildContext() {
        return {
          isInSurface: true
        };
      }
    }, {
      key: "render",
      value: function render() {
        var props = this.props;
        var w = extractNumber(props.width, 0);
        var h = extractNumber(props.height, 0);
        return React.createElement(
          NativeSurfaceView,
          {
            style: [props.style, {
              width: w,
              height: h
            }],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 159
            }
          },
          this.props.children
        );
      }
    }]);
    return Surface;
  }(React.Component), _class.childContextTypes = {
    isInSurface: PropTypes.bool
  }, _temp);

  function extractNumber(value, defaultValue) {
    if (value == null) {
      return defaultValue;
    }

    return +value;
  }

  var pooledTransform = new Transform();

  function extractTransform(props) {
    var scaleX = props.scaleX != null ? props.scaleX : props.scale != null ? props.scale : 1;
    var scaleY = props.scaleY != null ? props.scaleY : props.scale != null ? props.scale : 1;
    pooledTransform.transformTo(1, 0, 0, 1, 0, 0).move(props.x || 0, props.y || 0).rotate(props.rotation || 0, props.originX, props.originY).scale(scaleX, scaleY, props.originX, props.originY);

    if (props.transform != null) {
      pooledTransform.transform(props.transform);
    }

    return [pooledTransform.xx, pooledTransform.yx, pooledTransform.xy, pooledTransform.yy, pooledTransform.x, pooledTransform.y];
  }

  function extractOpacity(props) {
    if (props.visible === false) {
      return 0;
    }

    if (props.opacity == null) {
      return 1;
    }

    return +props.opacity;
  }

  var Group = (_temp2 = _class2 = function (_React$Component2) {
    babelHelpers.inherits(Group, _React$Component2);

    function Group() {
      babelHelpers.classCallCheck(this, Group);
      return babelHelpers.possibleConstructorReturn(this, (Group.__proto__ || Object.getPrototypeOf(Group)).apply(this, arguments));
    }

    babelHelpers.createClass(Group, [{
      key: "render",
      value: function render() {
        var props = this.props;
        invariant(this.context.isInSurface, 'ART: <Group /> must be a child of a <Surface />');
        return React.createElement(
          NativeGroup,
          {
            opacity: extractOpacity(props),
            transform: extractTransform(props),
            __source: {
              fileName: _jsxFileName,
              lineNumber: 231
            }
          },
          this.props.children
        );
      }
    }]);
    return Group;
  }(React.Component), _class2.contextTypes = {
    isInSurface: PropTypes.bool.isRequired
  }, _temp2);

  var ClippingRectangle = function (_React$Component3) {
    babelHelpers.inherits(ClippingRectangle, _React$Component3);

    function ClippingRectangle() {
      babelHelpers.classCallCheck(this, ClippingRectangle);
      return babelHelpers.possibleConstructorReturn(this, (ClippingRectangle.__proto__ || Object.getPrototypeOf(ClippingRectangle)).apply(this, arguments));
    }

    babelHelpers.createClass(ClippingRectangle, [{
      key: "render",
      value: function render() {
        var props = this.props;
        var x = extractNumber(props.x, 0);
        var y = extractNumber(props.y, 0);
        var w = extractNumber(props.width, 0);
        var h = extractNumber(props.height, 0);
        var clipping = [x, y, w, h];
        var propsExcludingXAndY = merge(props);
        delete propsExcludingXAndY.x;
        delete propsExcludingXAndY.y;
        return React.createElement(
          NativeGroup,
          {
            clipping: clipping,
            opacity: extractOpacity(props),
            transform: extractTransform(propsExcludingXAndY),
            __source: {
              fileName: _jsxFileName,
              lineNumber: 253
            }
          },
          this.props.children
        );
      }
    }]);
    return ClippingRectangle;
  }(React.Component);

  var SOLID_COLOR = 0;
  var LINEAR_GRADIENT = 1;
  var RADIAL_GRADIENT = 2;
  var PATTERN = 3;

  function insertColorIntoArray(color, targetArray, atIndex) {
    var c = new Color(color);
    targetArray[atIndex + 0] = c.red / 255;
    targetArray[atIndex + 1] = c.green / 255;
    targetArray[atIndex + 2] = c.blue / 255;
    targetArray[atIndex + 3] = c.alpha;
  }

  function insertColorsIntoArray(stops, targetArray, atIndex) {
    var i = 0;

    if ('length' in stops) {
      while (i < stops.length) {
        insertColorIntoArray(stops[i], targetArray, atIndex + i * 4);
        i++;
      }
    } else {
      for (var offset in stops) {
        insertColorIntoArray(stops[offset], targetArray, atIndex + i * 4);
        i++;
      }
    }

    return atIndex + i * 4;
  }

  function insertOffsetsIntoArray(stops, targetArray, atIndex, multi, reverse) {
    var offsetNumber;
    var i = 0;

    if ('length' in stops) {
      while (i < stops.length) {
        offsetNumber = i / (stops.length - 1) * multi;
        targetArray[atIndex + i] = reverse ? 1 - offsetNumber : offsetNumber;
        i++;
      }
    } else {
      for (var offsetString in stops) {
        offsetNumber = +offsetString * multi;
        targetArray[atIndex + i] = reverse ? 1 - offsetNumber : offsetNumber;
        i++;
      }
    }

    return atIndex + i;
  }

  function insertColorStopsIntoArray(stops, targetArray, atIndex) {
    var lastIndex = insertColorsIntoArray(stops, targetArray, atIndex);
    insertOffsetsIntoArray(stops, targetArray, lastIndex, 1, false);
  }

  function insertDoubleColorStopsIntoArray(stops, targetArray, atIndex) {
    var lastIndex = insertColorsIntoArray(stops, targetArray, atIndex);
    lastIndex = insertColorsIntoArray(stops, targetArray, lastIndex);
    lastIndex = insertOffsetsIntoArray(stops, targetArray, lastIndex, 0.5, false);
    insertOffsetsIntoArray(stops, targetArray, lastIndex, 0.5, true);
  }

  function applyBoundingBoxToBrushData(brushData, props) {
    var type = brushData[0];
    var width = +props.width;
    var height = +props.height;

    if (type === LINEAR_GRADIENT) {
      brushData[1] *= width;
      brushData[2] *= height;
      brushData[3] *= width;
      brushData[4] *= height;
    } else if (type === RADIAL_GRADIENT) {
      brushData[1] *= width;
      brushData[2] *= height;
      brushData[3] *= width;
      brushData[4] *= height;
      brushData[5] *= width;
      brushData[6] *= height;
    } else if (type === PATTERN) {}
  }

  function extractBrush(colorOrBrush, props) {
    if (colorOrBrush == null) {
      return null;
    }

    if (colorOrBrush._brush) {
      if (colorOrBrush._bb) {
        applyBoundingBoxToBrushData(colorOrBrush._brush, props);
        colorOrBrush._bb = false;
      }

      return colorOrBrush._brush;
    }

    var c = new Color(colorOrBrush);
    return [SOLID_COLOR, c.red / 255, c.green / 255, c.blue / 255, c.alpha];
  }

  function extractColor(color) {
    if (color == null) {
      return null;
    }

    var c = new Color(color);
    return [c.red / 255, c.green / 255, c.blue / 255, c.alpha];
  }

  function extractStrokeCap(strokeCap) {
    switch (strokeCap) {
      case 'butt':
        return 0;

      case 'square':
        return 2;

      default:
        return 1;
    }
  }

  function extractStrokeJoin(strokeJoin) {
    switch (strokeJoin) {
      case 'miter':
        return 0;

      case 'bevel':
        return 2;

      default:
        return 1;
    }
  }

  var Shape = function (_React$Component4) {
    babelHelpers.inherits(Shape, _React$Component4);

    function Shape() {
      babelHelpers.classCallCheck(this, Shape);
      return babelHelpers.possibleConstructorReturn(this, (Shape.__proto__ || Object.getPrototypeOf(Shape)).apply(this, arguments));
    }

    babelHelpers.createClass(Shape, [{
      key: "render",
      value: function render() {
        var props = this.props;
        var path = props.d || childrenAsString(props.children);
        var d = (path instanceof Path ? path : new Path(path)).toJSON();
        return React.createElement(NativeShape, {
          fill: extractBrush(props.fill, props),
          opacity: extractOpacity(props),
          stroke: extractColor(props.stroke),
          strokeCap: extractStrokeCap(props.strokeCap),
          strokeDash: props.strokeDash || null,
          strokeJoin: extractStrokeJoin(props.strokeJoin),
          strokeWidth: extractNumber(props.strokeWidth, 1),
          transform: extractTransform(props),
          d: d,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 401
          }
        });
      }
    }]);
    return Shape;
  }(React.Component);

  var cachedFontObjectsFromString = {};
  var fontFamilyPrefix = /^[\s"']*/;
  var fontFamilySuffix = /[\s"']*$/;

  function extractSingleFontFamily(fontFamilyString) {
    return fontFamilyString.split(',')[0].replace(fontFamilyPrefix, '').replace(fontFamilySuffix, '');
  }

  function parseFontString(font) {
    if (cachedFontObjectsFromString.hasOwnProperty(font)) {
      return cachedFontObjectsFromString[font];
    }

    var regexp = /^\s*((?:(?:normal|bold|italic)\s+)*)(?:(\d+(?:\.\d+)?)[ptexm\%]*(?:\s*\/.*?)?\s+)?\s*\"?([^\"]*)/i;
    var match = regexp.exec(font);

    if (!match) {
      return null;
    }

    var fontFamily = extractSingleFontFamily(match[3]);
    var fontSize = +match[2] || 12;
    var isBold = /bold/.exec(match[1]);
    var isItalic = /italic/.exec(match[1]);
    cachedFontObjectsFromString[font] = {
      fontFamily: fontFamily,
      fontSize: fontSize,
      fontWeight: isBold ? 'bold' : 'normal',
      fontStyle: isItalic ? 'italic' : 'normal'
    };
    return cachedFontObjectsFromString[font];
  }

  function extractFont(font) {
    if (font == null) {
      return null;
    }

    if (typeof font === 'string') {
      return parseFontString(font);
    }

    var fontFamily = extractSingleFontFamily(font.fontFamily);
    var fontSize = +font.fontSize || 12;
    var fontWeight = font.fontWeight != null ? font.fontWeight.toString() : '400';
    return {
      fontFamily: fontFamily,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: font.fontStyle
    };
  }

  var newLine = /\n/g;

  function extractFontAndLines(font, text) {
    return {
      font: extractFont(font),
      lines: text.split(newLine)
    };
  }

  function extractAlignment(alignment) {
    switch (alignment) {
      case 'right':
        return 1;

      case 'center':
        return 2;

      default:
        return 0;
    }
  }

  var Text = function (_React$Component5) {
    babelHelpers.inherits(Text, _React$Component5);

    function Text() {
      babelHelpers.classCallCheck(this, Text);
      return babelHelpers.possibleConstructorReturn(this, (Text.__proto__ || Object.getPrototypeOf(Text)).apply(this, arguments));
    }

    babelHelpers.createClass(Text, [{
      key: "render",
      value: function render() {
        var props = this.props;
        var path = props.path;
        var textPath = path ? (path instanceof Path ? path : new Path(path)).toJSON() : null;
        var textFrame = extractFontAndLines(props.font, childrenAsString(props.children));
        return React.createElement(NativeText, {
          fill: extractBrush(props.fill, props),
          opacity: extractOpacity(props),
          stroke: extractColor(props.stroke),
          strokeCap: extractStrokeCap(props.strokeCap),
          strokeDash: props.strokeDash || null,
          strokeJoin: extractStrokeJoin(props.strokeJoin),
          strokeWidth: extractNumber(props.strokeWidth, 1),
          transform: extractTransform(props),
          alignment: extractAlignment(props.alignment),
          frame: textFrame,
          path: textPath,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 500
          }
        });
      }
    }]);
    return Text;
  }(React.Component);

  function LinearGradient(stops, x1, y1, x2, y2) {
    var type = LINEAR_GRADIENT;

    if (arguments.length < 5) {
      var angle = (x1 == null ? 270 : x1) * Math.PI / 180;
      var x = Math.cos(angle);
      var y = -Math.sin(angle);
      var l = (Math.abs(x) + Math.abs(y)) / 2;
      x *= l;
      y *= l;
      x1 = 0.5 - x;
      x2 = 0.5 + x;
      y1 = 0.5 - y;
      y2 = 0.5 + y;
      this._bb = true;
    } else {
      this._bb = false;
    }

    var brushData = [type, +x1, +y1, +x2, +y2];
    insertColorStopsIntoArray(stops, brushData, 5);
    this._brush = brushData;
  }

  function RadialGradient(stops, fx, fy, rx, ry, cx, cy) {
    if (ry == null) {
      ry = rx;
    }

    if (cx == null) {
      cx = fx;
    }

    if (cy == null) {
      cy = fy;
    }

    if (fx == null) {
      fx = fy = rx = ry = cx = cy = 0.5;
      this._bb = true;
    } else {
      this._bb = false;
    }

    var brushData = [RADIAL_GRADIENT, +fx, +fy, +rx * 2, +ry * 2, +cx, +cy];
    insertDoubleColorStopsIntoArray(stops, brushData, 7);
    this._brush = brushData;
  }

  function Pattern(url, width, height, left, top) {
    this._brush = [PATTERN, url, +left || 0, +top || 0, +width, +height];
  }

  var ReactART = {
    LinearGradient: LinearGradient,
    RadialGradient: RadialGradient,
    Pattern: Pattern,
    Transform: Transform,
    Path: Path,
    Surface: Surface,
    Group: Group,
    ClippingRectangle: ClippingRectangle,
    Shape: Shape,
    Text: Text
  };
  module.exports = ReactART;
},179,[180,181,184,131,141,154,170,158,13],"ReactNativeART");
__d(function (global, _require, module, exports, _dependencyMap) {
	var colors = {
		maroon: '#800000',
		red: '#ff0000',
		orange: '#ffA500',
		yellow: '#ffff00',
		olive: '#808000',
		purple: '#800080',
		fuchsia: "#ff00ff",
		white: '#ffffff',
		lime: '#00ff00',
		green: '#008000',
		navy: '#000080',
		blue: '#0000ff',
		aqua: '#00ffff',
		teal: '#008080',
		black: '#000000',
		silver: '#c0c0c0',
		gray: '#808080'
	};

	var map = function map(array, fn) {
		var results = [];

		for (var i = 0, l = array.length; i < l; i++) {
			results[i] = fn(array[i], i);
		}

		return results;
	};

	var Color = function Color(color, type) {
		if (color.isColor) {
			this.red = color.red;
			this.green = color.green;
			this.blue = color.blue;
			this.alpha = color.alpha;
		} else {
			var namedColor = colors[color];

			if (namedColor) {
				color = namedColor;
				type = 'hex';
			}

			switch (typeof color) {
				case 'string':
					if (!type) type = (type = color.match(/^rgb|^hsb|^hsl/)) ? type[0] : 'hex';
					break;

				case 'object':
					type = type || 'rgb';
					color = color.toString();
					break;

				case 'number':
					type = 'hex';
					color = color.toString(16);
					break;
			}

			color = Color['parse' + type.toUpperCase()](color);
			this.red = color[0];
			this.green = color[1];
			this.blue = color[2];
			this.alpha = color[3];
		}

		this.isColor = true;
	};

	var limit = function limit(number, min, max) {
		return Math.min(max, Math.max(min, number));
	};

	var listMatch = /([-.\d]+\%?)\s*,\s*([-.\d]+\%?)\s*,\s*([-.\d]+\%?)\s*,?\s*([-.\d]*\%?)/;
	var hexMatch = /^#?([a-f0-9]{1,2})([a-f0-9]{1,2})([a-f0-9]{1,2})([a-f0-9]{0,2})$/i;

	Color.parseRGB = function (color) {
		return map(color.match(listMatch).slice(1), function (bit, i) {
			if (bit) bit = parseFloat(bit) * (bit[bit.length - 1] == '%' ? 2.55 : 1);
			return i < 3 ? Math.round((bit %= 256) < 0 ? bit + 256 : bit) : limit(bit === '' ? 1 : Number(bit), 0, 1);
		});
	};

	Color.parseHEX = function (color) {
		if (color.length == 1) color = color + color + color;
		return map(color.match(hexMatch).slice(1), function (bit, i) {
			if (i == 3) return bit ? parseInt(bit, 16) / 255 : 1;
			return parseInt(bit.length == 1 ? bit + bit : bit, 16);
		});
	};

	Color.parseHSB = function (color) {
		var hsb = map(color.match(listMatch).slice(1), function (bit, i) {
			if (bit) bit = parseFloat(bit);
			if (i === 0) return Math.round((bit %= 360) < 0 ? bit + 360 : bit);else if (i < 3) return limit(Math.round(bit), 0, 100);else return limit(bit === '' ? 1 : Number(bit), 0, 1);
		});
		var a = hsb[3];
		var br = Math.round(hsb[2] / 100 * 255);
		if (hsb[1] == 0) return [br, br, br, a];
		var hue = hsb[0];
		var f = hue % 60;
		var p = Math.round(hsb[2] * (100 - hsb[1]) / 10000 * 255);
		var q = Math.round(hsb[2] * (6000 - hsb[1] * f) / 600000 * 255);
		var t = Math.round(hsb[2] * (6000 - hsb[1] * (60 - f)) / 600000 * 255);

		switch (Math.floor(hue / 60)) {
			case 0:
				return [br, t, p, a];

			case 1:
				return [q, br, p, a];

			case 2:
				return [p, br, t, a];

			case 3:
				return [p, q, br, a];

			case 4:
				return [t, p, br, a];

			default:
				return [br, p, q, a];
		}
	};

	Color.parseHSL = function (color) {
		var hsb = map(color.match(listMatch).slice(1), function (bit, i) {
			if (bit) bit = parseFloat(bit);
			if (i === 0) return Math.round((bit %= 360) < 0 ? bit + 360 : bit);else if (i < 3) return limit(Math.round(bit), 0, 100);else return limit(bit === '' ? 1 : Number(bit), 0, 1);
		});
		var h = hsb[0] / 60;
		var s = hsb[1] / 100;
		var l = hsb[2] / 100;
		var a = hsb[3];
		var c = (1 - Math.abs(2 * l - 1)) * s;
		var x = c * (1 - Math.abs(h % 2 - 1));
		var m = l - c / 2;
		var p = Math.round((c + m) * 255);
		var q = Math.round((x + m) * 255);
		var t = Math.round(m * 255);

		switch (Math.floor(h)) {
			case 0:
				return [p, q, t, a];

			case 1:
				return [q, p, t, a];

			case 2:
				return [t, p, q, a];

			case 3:
				return [t, q, p, a];

			case 4:
				return [q, t, p, a];

			default:
				return [p, t, q, a];
		}
	};

	var toString = function toString(type, array) {
		if (array[3] != 1) type += 'a';else array.pop();
		return type + '(' + array.join(', ') + ')';
	};

	Color.prototype = {
		toHSB: function toHSB(array) {
			var red = this.red,
			    green = this.green,
			    blue = this.blue,
			    alpha = this.alpha;
			var max = Math.max(red, green, blue),
			    min = Math.min(red, green, blue),
			    delta = max - min;
			var hue = 0,
			    saturation = delta != 0 ? delta / max : 0,
			    brightness = max / 255;

			if (saturation) {
				var rr = (max - red) / delta,
				    gr = (max - green) / delta,
				    br = (max - blue) / delta;
				hue = red == max ? br - gr : green == max ? 2 + rr - br : 4 + gr - rr;
				if ((hue /= 6) < 0) hue++;
			}

			var hsb = [Math.round(hue * 360), Math.round(saturation * 100), Math.round(brightness * 100), alpha];
			return array ? hsb : toString('hsb', hsb);
		},
		toHSL: function toHSL(array) {
			var red = this.red,
			    green = this.green,
			    blue = this.blue,
			    alpha = this.alpha;
			var max = Math.max(red, green, blue),
			    min = Math.min(red, green, blue),
			    delta = max - min;
			var hue = 0,
			    saturation = delta != 0 ? delta / (255 - Math.abs(max + min - 255)) : 0,
			    lightness = (max + min) / 512;

			if (saturation) {
				var rr = (max - red) / delta,
				    gr = (max - green) / delta,
				    br = (max - blue) / delta;
				hue = red == max ? br - gr : green == max ? 2 + rr - br : 4 + gr - rr;
				if ((hue /= 6) < 0) hue++;
			}

			var hsl = [Math.round(hue * 360), Math.round(saturation * 100), Math.round(lightness * 100), alpha];
			return array ? hsl : toString('hsl', hsl);
		},
		toHEX: function toHEX(array) {
			var a = this.alpha;
			var alpha = (a = Math.round(a * 255).toString(16)).length == 1 ? a + a : a;
			var hex = map([this.red, this.green, this.blue], function (bit) {
				bit = bit.toString(16);
				return bit.length == 1 ? '0' + bit : bit;
			});
			return array ? hex.concat(alpha) : '#' + hex.join('') + (alpha == 'ff' ? '' : alpha);
		},
		toRGB: function toRGB(array) {
			var rgb = [this.red, this.green, this.blue, this.alpha];
			return array ? rgb : toString('rgb', rgb);
		}
	};
	Color.prototype.toString = Color.prototype.toRGB;

	Color.hex = function (hex) {
		return new Color(hex, 'hex');
	};

	if (this.hex == null) this.hex = Color.hex;

	Color.hsb = function (h, s, b, a) {
		return new Color([h || 0, s || 0, b || 0, a == null ? 1 : a], 'hsb');
	};

	if (this.hsb == null) this.hsb = Color.hsb;

	Color.hsl = function (h, s, l, a) {
		return new Color([h || 0, s || 0, l || 0, a == null ? 1 : a], 'hsl');
	};

	if (this.hsl == null) this.hsl = Color.hsl;

	Color.rgb = function (r, g, b, a) {
		return new Color([r || 0, g || 0, b || 0, a == null ? 1 : a], 'rgb');
	};

	if (this.rgb == null) this.rgb = Color.rgb;

	Color.detach = function (color) {
		color = new Color(color);
		return [Color.rgb(color.red, color.green, color.blue).toString(), color.alpha];
	};

	module.exports = Color;
},180,[],"node_modules/art/core/color.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var Class = _require(_dependencyMap[0], 'art/core/class.js');

  var Path = _require(_dependencyMap[1], 'art/core/path.js');

  var MOVE_TO = 0;
  var CLOSE = 1;
  var LINE_TO = 2;
  var CURVE_TO = 3;
  var ARC = 4;
  var SerializablePath = Class(Path, {
    initialize: function initialize(path) {
      this.reset();

      if (path instanceof SerializablePath) {
        this.path = path.path.slice(0);
      } else if (path) {
        if (path.applyToPath) {
          path.applyToPath(this);
        } else {
          this.push(path);
        }
      }
    },
    onReset: function onReset() {
      this.path = [];
    },
    onMove: function onMove(sx, sy, x, y) {
      this.path.push(MOVE_TO, x, y);
    },
    onLine: function onLine(sx, sy, x, y) {
      this.path.push(LINE_TO, x, y);
    },
    onBezierCurve: function onBezierCurve(sx, sy, p1x, p1y, p2x, p2y, x, y) {
      this.path.push(CURVE_TO, p1x, p1y, p2x, p2y, x, y);
    },
    _arcToBezier: Path.prototype.onArc,
    onArc: function onArc(sx, sy, ex, ey, cx, cy, rx, ry, sa, ea, ccw, rotation) {
      if (rx !== ry || rotation) {
        return this._arcToBezier(sx, sy, ex, ey, cx, cy, rx, ry, sa, ea, ccw, rotation);
      }

      this.path.push(ARC, cx, cy, rx, sa, ea, ccw ? 0 : 1);
    },
    onClose: function onClose() {
      this.path.push(CLOSE);
    },
    toJSON: function toJSON() {
      return this.path;
    }
  });
  module.exports = SerializablePath;
},181,[182,183],"ARTSerializablePath");
__d(function (global, _require, module, exports, _dependencyMap) {
	module.exports = function (mixins) {
		var proto = {};

		for (var i = 0, l = arguments.length; i < l; i++) {
			var mixin = arguments[i];
			if (typeof mixin == 'function') mixin = mixin.prototype;

			for (var key in mixin) {
				proto[key] = mixin[key];
			}
		}

		if (!proto.initialize) proto.initialize = function () {};

		proto.constructor = function (a, b, c, d, e, f, g, h) {
			return new proto.initialize(a, b, c, d, e, f, g, h);
		};

		proto.constructor.prototype = proto.initialize.prototype = proto;
		return proto.constructor;
	};
},182,[],"node_modules/art/core/class.js");
__d(function (global, _require, module, exports, _dependencyMap) {
	var Class = _require(_dependencyMap[0], './class');

	module.exports = Class({
		initialize: function initialize(path) {
			this.reset().push(path);
		},
		push: function push() {
			var p = Array.prototype.join.call(arguments, ' ').match(/[a-df-z]|[\-+]?(?:[\d\.]e[\-+]?|[^\s\-+,a-z])+/ig);
			if (!p) return this;
			var last,
			    cmd = p[0],
			    i = 1;

			while (cmd) {
				switch (cmd) {
					case 'm':
						this.move(p[i++], p[i++]);
						break;

					case 'l':
						this.line(p[i++], p[i++]);
						break;

					case 'c':
						this.curve(p[i++], p[i++], p[i++], p[i++], p[i++], p[i++]);
						break;

					case 's':
						this.curve(p[i++], p[i++], null, null, p[i++], p[i++]);
						break;

					case 'q':
						this.curve(p[i++], p[i++], p[i++], p[i++]);
						break;

					case 't':
						this.curve(p[i++], p[i++]);
						break;

					case 'a':
						this.arc(p[i + 5], p[i + 6], p[i], p[i + 1], p[i + 3], !+p[i + 4], p[i + 2]);
						i += 7;
						break;

					case 'h':
						this.line(p[i++], 0);
						break;

					case 'v':
						this.line(0, p[i++]);
						break;

					case 'M':
						this.moveTo(p[i++], p[i++]);
						break;

					case 'L':
						this.lineTo(p[i++], p[i++]);
						break;

					case 'C':
						this.curveTo(p[i++], p[i++], p[i++], p[i++], p[i++], p[i++]);
						break;

					case 'S':
						this.curveTo(p[i++], p[i++], null, null, p[i++], p[i++]);
						break;

					case 'Q':
						this.curveTo(p[i++], p[i++], p[i++], p[i++]);
						break;

					case 'T':
						this.curveTo(p[i++], p[i++]);
						break;

					case 'A':
						this.arcTo(p[i + 5], p[i + 6], p[i], p[i + 1], p[i + 3], !+p[i + 4], p[i + 2]);
						i += 7;
						break;

					case 'H':
						this.lineTo(p[i++], this.penY);
						break;

					case 'V':
						this.lineTo(this.penX, p[i++]);
						break;

					case 'Z':
					case 'z':
						this.close();
						break;

					default:
						cmd = last;
						i--;
						continue;
				}

				last = cmd;
				if (last == 'm') last = 'l';else if (last == 'M') last = 'L';
				cmd = p[i++];
			}

			return this;
		},
		reset: function reset() {
			this.penX = this.penY = 0;
			this.penDownX = this.penDownY = null;
			this._pivotX = this._pivotY = 0;
			this.onReset();
			return this;
		},
		move: function move(x, y) {
			this.onMove(this.penX, this.penY, this._pivotX = this.penX += +x, this._pivotY = this.penY += +y);
			return this;
		},
		moveTo: function moveTo(x, y) {
			this.onMove(this.penX, this.penY, this._pivotX = this.penX = +x, this._pivotY = this.penY = +y);
			return this;
		},
		line: function line(x, y) {
			return this.lineTo(this.penX + +x, this.penY + +y);
		},
		lineTo: function lineTo(x, y) {
			if (this.penDownX == null) {
				this.penDownX = this.penX;
				this.penDownY = this.penY;
			}

			this.onLine(this.penX, this.penY, this._pivotX = this.penX = +x, this._pivotY = this.penY = +y);
			return this;
		},
		curve: function curve(c1x, c1y, c2x, c2y, ex, ey) {
			var x = this.penX,
			    y = this.penY;
			return this.curveTo(x + +c1x, y + +c1y, c2x == null ? null : x + +c2x, c2y == null ? null : y + +c2y, ex == null ? null : x + +ex, ey == null ? null : y + +ey);
		},
		curveTo: function curveTo(c1x, c1y, c2x, c2y, ex, ey) {
			var x = this.penX,
			    y = this.penY;

			if (c2x == null) {
				c2x = +c1x;
				c2y = +c1y;
				c1x = x * 2 - (this._pivotX || 0);
				c1y = y * 2 - (this._pivotY || 0);
			}

			if (ex == null) {
				this._pivotX = +c1x;
				this._pivotY = +c1y;
				ex = +c2x;
				ey = +c2y;
				c2x = (ex + +c1x * 2) / 3;
				c2y = (ey + +c1y * 2) / 3;
				c1x = (x + +c1x * 2) / 3;
				c1y = (y + +c1y * 2) / 3;
			} else {
				this._pivotX = +c2x;
				this._pivotY = +c2y;
			}

			if (this.penDownX == null) {
				this.penDownX = x;
				this.penDownY = y;
			}

			this.onBezierCurve(x, y, +c1x, +c1y, +c2x, +c2y, this.penX = +ex, this.penY = +ey);
			return this;
		},
		arc: function arc(x, y, rx, ry, outer, counterClockwise, rotation) {
			return this.arcTo(this.penX + +x, this.penY + +y, rx, ry, outer, counterClockwise, rotation);
		},
		arcTo: function arcTo(x, y, rx, ry, outer, counterClockwise, rotation) {
			ry = Math.abs(+ry || +rx || +y - this.penY);
			rx = Math.abs(+rx || +x - this.penX);
			if (!rx || !ry || x == this.penX && y == this.penY) return this.lineTo(x, y);
			var tX = this.penX,
			    tY = this.penY,
			    clockwise = !+counterClockwise,
			    large = !!+outer;
			var rad = rotation ? rotation * Math.PI / 180 : 0,
			    cos = Math.cos(rad),
			    sin = Math.sin(rad);
			x -= tX;
			y -= tY;
			var cx = cos * x / 2 + sin * y / 2,
			    cy = -sin * x / 2 + cos * y / 2,
			    rxry = rx * rx * ry * ry,
			    rycx = ry * ry * cx * cx,
			    rxcy = rx * rx * cy * cy,
			    a = rxry - rxcy - rycx;

			if (a < 0) {
				a = Math.sqrt(1 - a / rxry);
				rx *= a;
				ry *= a;
				cx = x / 2;
				cy = y / 2;
			} else {
				a = Math.sqrt(a / (rxcy + rycx));
				if (large == clockwise) a = -a;
				var cxd = -a * cy * rx / ry,
				    cyd = a * cx * ry / rx;
				cx = cos * cxd - sin * cyd + x / 2;
				cy = sin * cxd + cos * cyd + y / 2;
			}

			var xx = cos / rx,
			    yx = sin / rx,
			    xy = -sin / ry,
			    yy = cos / ry;
			var sa = Math.atan2(xy * -cx + yy * -cy, xx * -cx + yx * -cy),
			    ea = Math.atan2(xy * (x - cx) + yy * (y - cy), xx * (x - cx) + yx * (y - cy));
			cx += tX;
			cy += tY;
			x += tX;
			y += tY;

			if (this.penDownX == null) {
				this.penDownX = this.penX;
				this.penDownY = this.penY;
			}

			this.onArc(tX, tY, this._pivotX = this.penX = x, this._pivotY = this.penY = y, cx, cy, rx, ry, sa, ea, !clockwise, rotation);
			return this;
		},
		counterArc: function counterArc(x, y, rx, ry, outer) {
			return this.arc(x, y, rx, ry, outer, true);
		},
		counterArcTo: function counterArcTo(x, y, rx, ry, outer) {
			return this.arcTo(x, y, rx, ry, outer, true);
		},
		close: function close() {
			if (this.penDownX != null) {
				this.onClose(this.penX, this.penY, this.penX = this.penDownX, this.penY = this.penDownY);
				this.penDownX = null;
			}

			return this;
		},
		onReset: function onReset() {},
		onMove: function onMove(sx, sy, ex, ey) {},
		onLine: function onLine(sx, sy, ex, ey) {
			this.onBezierCurve(sx, sy, sx, sy, ex, ey, ex, ey);
		},
		onBezierCurve: function onBezierCurve(sx, sy, c1x, c1y, c2x, c2y, ex, ey) {
			var gx = ex - sx,
			    gy = ey - sy,
			    g = gx * gx + gy * gy,
			    v1,
			    v2,
			    cx,
			    cy,
			    u;
			cx = c1x - sx;
			cy = c1y - sy;
			u = cx * gx + cy * gy;

			if (u > g) {
				cx -= gx;
				cy -= gy;
			} else if (u > 0 && g != 0) {
				cx -= u / g * gx;
				cy -= u / g * gy;
			}

			v1 = cx * cx + cy * cy;
			cx = c2x - sx;
			cy = c2y - sy;
			u = cx * gx + cy * gy;

			if (u > g) {
				cx -= gx;
				cy -= gy;
			} else if (u > 0 && g != 0) {
				cx -= u / g * gx;
				cy -= u / g * gy;
			}

			v2 = cx * cx + cy * cy;

			if (v1 < 0.01 && v2 < 0.01) {
				this.onLine(sx, sy, ex, ey);
				return;
			}

			if (isNaN(v1) || isNaN(v2)) {
				throw new Error('Bad input');
			}

			var s1x = (c1x + c2x) * 0.5,
			    s1y = (c1y + c2y) * 0.5,
			    l1x = (c1x + sx) * 0.5,
			    l1y = (c1y + sy) * 0.5,
			    l2x = (l1x + s1x) * 0.5,
			    l2y = (l1y + s1y) * 0.5,
			    r2x = (ex + c2x) * 0.5,
			    r2y = (ey + c2y) * 0.5,
			    r1x = (r2x + s1x) * 0.5,
			    r1y = (r2y + s1y) * 0.5,
			    l2r1x = (l2x + r1x) * 0.5,
			    l2r1y = (l2y + r1y) * 0.5;
			this.onBezierCurve(sx, sy, l1x, l1y, l2x, l2y, l2r1x, l2r1y);
			this.onBezierCurve(l2r1x, l2r1y, r1x, r1y, r2x, r2y, ex, ey);
		},
		onArc: function onArc(sx, sy, ex, ey, cx, cy, rx, ry, sa, ea, ccw, rotation) {
			var rad = rotation ? rotation * Math.PI / 180 : 0,
			    cos = Math.cos(rad),
			    sin = Math.sin(rad),
			    xx = cos * rx,
			    yx = -sin * ry,
			    xy = sin * rx,
			    yy = cos * ry;
			var arc = ea - sa;
			if (arc < 0 && !ccw) arc += Math.PI * 2;else if (arc > 0 && ccw) arc -= Math.PI * 2;
			var n = Math.ceil(Math.abs(arc / (Math.PI / 2))),
			    step = arc / n,
			    k = 4 / 3 * Math.tan(step / 4);
			var x = Math.cos(sa),
			    y = Math.sin(sa);

			for (var i = 0; i < n; i++) {
				var cp1x = x - k * y,
				    cp1y = y + k * x;
				sa += step;
				x = Math.cos(sa);
				y = Math.sin(sa);
				var cp2x = x + k * y,
				    cp2y = y - k * x;
				this.onBezierCurve(sx, sy, cx + xx * cp1x + yx * cp1y, cy + xy * cp1x + yy * cp1y, cx + xx * cp2x + yx * cp2y, cy + xy * cp2x + yy * cp2y, sx = cx + xx * x + yx * y, sy = cy + xy * x + yy * y);
			}
		},
		onClose: function onClose(sx, sy, ex, ey) {
			this.onLine(sx, sy, ex, ey);
		}
	});
},183,[182],"node_modules/art/core/path.js");
__d(function (global, _require, module, exports, _dependencyMap) {
	var Class = _require(_dependencyMap[0], './class');

	function Transform(xx, yx, xy, yy, x, y) {
		if (xx && typeof xx == 'object') {
			yx = xx.yx;
			yy = xx.yy;
			y = xx.y;
			xy = xx.xy;
			x = xx.x;
			xx = xx.xx;
		}

		this.xx = xx == null ? 1 : xx;
		this.yx = yx || 0;
		this.xy = xy || 0;
		this.yy = yy == null ? 1 : yy;
		this.x = (x == null ? this.x : x) || 0;
		this.y = (y == null ? this.y : y) || 0;

		this._transform();

		return this;
	}

	;
	module.exports = Class({
		initialize: Transform,
		_transform: function _transform() {},
		xx: 1,
		yx: 0,
		x: 0,
		xy: 0,
		yy: 1,
		y: 0,
		transform: function transform(xx, yx, xy, yy, x, y) {
			var m = this;

			if (xx && typeof xx == 'object') {
				yx = xx.yx;
				yy = xx.yy;
				y = xx.y;
				xy = xx.xy;
				x = xx.x;
				xx = xx.xx;
			}

			if (!x) x = 0;
			if (!y) y = 0;
			return this.transformTo(m.xx * xx + m.xy * yx, m.yx * xx + m.yy * yx, m.xx * xy + m.xy * yy, m.yx * xy + m.yy * yy, m.xx * x + m.xy * y + m.x, m.yx * x + m.yy * y + m.y);
		},
		transformTo: Transform,
		translate: function translate(x, y) {
			return this.transform(1, 0, 0, 1, x, y);
		},
		move: function move(x, y) {
			this.x += x || 0;
			this.y += y || 0;

			this._transform();

			return this;
		},
		scale: function scale(x, y) {
			if (y == null) y = x;
			return this.transform(x, 0, 0, y, 0, 0);
		},
		rotate: function rotate(deg, x, y) {
			if (x == null || y == null) {
				x = (this.left || 0) + (this.width || 0) / 2;
				y = (this.top || 0) + (this.height || 0) / 2;
			}

			var rad = deg * Math.PI / 180,
			    sin = Math.sin(rad),
			    cos = Math.cos(rad);
			this.transform(1, 0, 0, 1, x, y);
			var m = this;
			return this.transformTo(cos * m.xx - sin * m.yx, sin * m.xx + cos * m.yx, cos * m.xy - sin * m.yy, sin * m.xy + cos * m.yy, m.x, m.y).transform(1, 0, 0, 1, -x, -y);
		},
		moveTo: function moveTo(x, y) {
			var m = this;
			return this.transformTo(m.xx, m.yx, m.xy, m.yy, x, y);
		},
		rotateTo: function rotateTo(deg, x, y) {
			var m = this;
			var flip = m.yx / m.xx > m.yy / m.xy ? -1 : 1;
			if (m.xx < 0 ? m.xy >= 0 : m.xy < 0) flip = -flip;
			return this.rotate(deg - Math.atan2(flip * m.yx, flip * m.xx) * 180 / Math.PI, x, y);
		},
		scaleTo: function scaleTo(x, y) {
			var m = this;
			var h = Math.sqrt(m.xx * m.xx + m.yx * m.yx);
			m.xx /= h;
			m.yx /= h;
			h = Math.sqrt(m.yy * m.yy + m.xy * m.xy);
			m.yy /= h;
			m.xy /= h;
			return this.scale(x, y);
		},
		resizeTo: function resizeTo(width, height) {
			var w = this.width,
			    h = this.height;
			if (!w || !h) return this;
			return this.scaleTo(width / w, height / h);
		},
		inversePoint: function inversePoint(x, y) {
			var a = this.xx,
			    b = this.yx,
			    c = this.xy,
			    d = this.yy,
			    e = this.x,
			    f = this.y;
			var det = b * c - a * d;
			if (det == 0) return null;
			return {
				x: (d * (e - x) + c * (y - f)) / det,
				y: (a * (f - y) + b * (x - e)) / det
			};
		},
		point: function point(x, y) {
			var m = this;
			return {
				x: m.xx * x + m.xy * y + m.x,
				y: m.yx * x + m.yy * y + m.y
			};
		}
	});
},184,[182],"node_modules/art/core/transform.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _class,
      _temp,
      _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-native/Libraries/Components/Button.js";

  var ColorPropType = _require(_dependencyMap[0], 'ColorPropType');

  var Platform = _require(_dependencyMap[1], 'Platform');

  var React = _require(_dependencyMap[2], 'React');

  var PropTypes = _require(_dependencyMap[3], 'prop-types');

  var StyleSheet = _require(_dependencyMap[4], 'StyleSheet');

  var Text = _require(_dependencyMap[5], 'Text');

  var TouchableNativeFeedback = _require(_dependencyMap[6], 'TouchableNativeFeedback');

  var TouchableOpacity = _require(_dependencyMap[7], 'TouchableOpacity');

  var View = _require(_dependencyMap[8], 'View');

  var invariant = _require(_dependencyMap[9], 'fbjs/lib/invariant');

  var Button = (_temp = _class = function (_React$Component) {
    babelHelpers.inherits(Button, _React$Component);

    function Button() {
      babelHelpers.classCallCheck(this, Button);
      return babelHelpers.possibleConstructorReturn(this, (Button.__proto__ || Object.getPrototypeOf(Button)).apply(this, arguments));
    }

    babelHelpers.createClass(Button, [{
      key: "render",
      value: function render() {
        var _props = this.props,
            accessibilityLabel = _props.accessibilityLabel,
            color = _props.color,
            onPress = _props.onPress,
            title = _props.title,
            hasTVPreferredFocus = _props.hasTVPreferredFocus,
            disabled = _props.disabled,
            testID = _props.testID;
        var buttonStyles = [styles.button];
        var textStyles = [styles.text];

        if (color) {
          if (Platform.OS === 'ios') {
            textStyles.push({
              color: color
            });
          } else {
            buttonStyles.push({
              backgroundColor: color
            });
          }
        }

        var accessibilityTraits = ['button'];

        if (disabled) {
          buttonStyles.push(styles.buttonDisabled);
          textStyles.push(styles.textDisabled);
          accessibilityTraits.push('disabled');
        }

        invariant(typeof title === 'string', 'The title prop of a Button must be a string');
        var formattedTitle = Platform.OS === 'android' ? title.toUpperCase() : title;
        var Touchable = Platform.OS === 'android' ? TouchableNativeFeedback : TouchableOpacity;
        return React.createElement(
          Touchable,
          {
            accessibilityComponentType: "button",
            accessibilityLabel: accessibilityLabel,
            accessibilityTraits: accessibilityTraits,
            hasTVPreferredFocus: hasTVPreferredFocus,
            testID: testID,
            disabled: disabled,
            onPress: onPress,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 128
            }
          },
          React.createElement(
            View,
            {
              style: buttonStyles,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 136
              }
            },
            React.createElement(
              Text,
              {
                style: textStyles,
                disabled: disabled,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 137
                }
              },
              formattedTitle
            )
          )
        );
      }
    }]);
    return Button;
  }(React.Component), _class.propTypes = {
    title: PropTypes.string.isRequired,
    accessibilityLabel: PropTypes.string,
    color: ColorPropType,
    disabled: PropTypes.bool,
    onPress: PropTypes.func.isRequired,
    testID: PropTypes.string,
    hasTVPreferredFocus: PropTypes.bool
  }, _temp);
  var styles = StyleSheet.create({
    button: Platform.select({
      ios: {},
      android: {
        elevation: 4,
        backgroundColor: '#2196F3',
        borderRadius: 2
      }
    }),
    text: Platform.select({
      ios: {
        color: '#007AFF',
        textAlign: 'center',
        padding: 8,
        fontSize: 18
      },
      android: {
        color: 'white',
        textAlign: 'center',
        padding: 8,
        fontWeight: '500'
      }
    }),
    buttonDisabled: Platform.select({
      ios: {},
      android: {
        elevation: 0,
        backgroundColor: '#dfdfdf'
      }
    }),
    textDisabled: Platform.select({
      ios: {
        color: '#cdcdcd'
      },
      android: {
        color: '#a1a1a1'
      }
    })
  });
  module.exports = Button;
},185,[127,52,131,141,132,186,194,195,153,13],"Button");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-native/Libraries/Text/Text.js";

  var ColorPropType = _require2(_dependencyMap[0], 'ColorPropType');

  var EdgeInsetsPropType = _require2(_dependencyMap[1], 'EdgeInsetsPropType');

  var NativeMethodsMixin = _require2(_dependencyMap[2], 'NativeMethodsMixin');

  var Platform = _require2(_dependencyMap[3], 'Platform');

  var React = _require2(_dependencyMap[4], 'React');

  var PropTypes = _require2(_dependencyMap[5], 'prop-types');

  var ReactNativeViewAttributes = _require2(_dependencyMap[6], 'ReactNativeViewAttributes');

  var StyleSheetPropType = _require2(_dependencyMap[7], 'StyleSheetPropType');

  var TextStylePropTypes = _require2(_dependencyMap[8], 'TextStylePropTypes');

  var Touchable = _require2(_dependencyMap[9], 'Touchable');

  var UIManager = _require2(_dependencyMap[10], 'UIManager');

  var createReactClass = _require2(_dependencyMap[11], 'create-react-class');

  var createReactNativeComponentClass = _require2(_dependencyMap[12], 'createReactNativeComponentClass');

  var mergeFast = _require2(_dependencyMap[13], 'mergeFast');

  var processColor = _require2(_dependencyMap[14], 'processColor');

  var _require = _require2(_dependencyMap[15], 'ViewContext'),
      ViewContextTypes = _require.ViewContextTypes;

  var stylePropType = StyleSheetPropType(TextStylePropTypes);
  var viewConfig = {
    validAttributes: mergeFast(ReactNativeViewAttributes.UIView, {
      isHighlighted: true,
      numberOfLines: true,
      ellipsizeMode: true,
      allowFontScaling: true,
      disabled: true,
      selectable: true,
      selectionColor: true,
      adjustsFontSizeToFit: true,
      minimumFontScale: true,
      textBreakStrategy: true
    }),
    uiViewClassName: 'RCTText'
  };
  var Text = createReactClass({
    displayName: 'Text',
    propTypes: {
      ellipsizeMode: PropTypes.oneOf(['head', 'middle', 'tail', 'clip']),
      numberOfLines: PropTypes.number,
      textBreakStrategy: PropTypes.oneOf(['simple', 'highQuality', 'balanced']),
      onLayout: PropTypes.func,
      onPress: PropTypes.func,
      onLongPress: PropTypes.func,
      pressRetentionOffset: EdgeInsetsPropType,
      selectable: PropTypes.bool,
      selectionColor: ColorPropType,
      suppressHighlighting: PropTypes.bool,
      style: stylePropType,
      testID: PropTypes.string,
      nativeID: PropTypes.string,
      allowFontScaling: PropTypes.bool,
      accessible: PropTypes.bool,
      adjustsFontSizeToFit: PropTypes.bool,
      minimumFontScale: PropTypes.number,
      disabled: PropTypes.bool
    },
    getDefaultProps: function getDefaultProps() {
      return {
        accessible: true,
        allowFontScaling: true,
        ellipsizeMode: 'tail'
      };
    },
    getInitialState: function getInitialState() {
      return mergeFast(Touchable.Mixin.touchableGetInitialState(), {
        isHighlighted: false
      });
    },
    mixins: [NativeMethodsMixin],
    viewConfig: viewConfig,
    getChildContext: function getChildContext() {
      return {
        isInAParentText: true
      };
    },
    childContextTypes: ViewContextTypes,
    contextTypes: ViewContextTypes,
    _handlers: null,
    _hasPressHandler: function _hasPressHandler() {
      return !!this.props.onPress || !!this.props.onLongPress;
    },
    touchableHandleActivePressIn: null,
    touchableHandleActivePressOut: null,
    touchableHandlePress: null,
    touchableHandleLongPress: null,
    touchableGetPressRectOffset: null,
    render: function render() {
      var _this = this;

      var newProps = this.props;

      if (this.props.onStartShouldSetResponder || this._hasPressHandler()) {
        if (!this._handlers) {
          this._handlers = {
            onStartShouldSetResponder: function onStartShouldSetResponder() {
              var shouldSetFromProps = _this.props.onStartShouldSetResponder && _this.props.onStartShouldSetResponder();

              var setResponder = shouldSetFromProps || _this._hasPressHandler();

              if (setResponder && !_this.touchableHandleActivePressIn) {
                for (var key in Touchable.Mixin) {
                  if (typeof Touchable.Mixin[key] === 'function') {
                    _this[key] = Touchable.Mixin[key].bind(_this);
                  }
                }

                _this.touchableHandleActivePressIn = function () {
                  if (_this.props.suppressHighlighting || !_this._hasPressHandler()) {
                    return;
                  }

                  _this.setState({
                    isHighlighted: true
                  });
                };

                _this.touchableHandleActivePressOut = function () {
                  if (_this.props.suppressHighlighting || !_this._hasPressHandler()) {
                    return;
                  }

                  _this.setState({
                    isHighlighted: false
                  });
                };

                _this.touchableHandlePress = function (e) {
                  _this.props.onPress && _this.props.onPress(e);
                };

                _this.touchableHandleLongPress = function (e) {
                  _this.props.onLongPress && _this.props.onLongPress(e);
                };

                _this.touchableGetPressRectOffset = function () {
                  return this.props.pressRetentionOffset || PRESS_RECT_OFFSET;
                };
              }

              return setResponder;
            },
            onResponderGrant: function (e, dispatchID) {
              this.touchableHandleResponderGrant(e, dispatchID);
              this.props.onResponderGrant && this.props.onResponderGrant.apply(this, arguments);
            }.bind(this),
            onResponderMove: function (e) {
              this.touchableHandleResponderMove(e);
              this.props.onResponderMove && this.props.onResponderMove.apply(this, arguments);
            }.bind(this),
            onResponderRelease: function (e) {
              this.touchableHandleResponderRelease(e);
              this.props.onResponderRelease && this.props.onResponderRelease.apply(this, arguments);
            }.bind(this),
            onResponderTerminate: function (e) {
              this.touchableHandleResponderTerminate(e);
              this.props.onResponderTerminate && this.props.onResponderTerminate.apply(this, arguments);
            }.bind(this),
            onResponderTerminationRequest: function () {
              var allowTermination = this.touchableHandleResponderTerminationRequest();

              if (allowTermination && this.props.onResponderTerminationRequest) {
                allowTermination = this.props.onResponderTerminationRequest.apply(this, arguments);
              }

              return allowTermination;
            }.bind(this)
          };
        }

        newProps = babelHelpers.extends({}, this.props, this._handlers, {
          isHighlighted: this.state.isHighlighted
        });
      }

      if (newProps.selectionColor != null) {
        newProps = babelHelpers.extends({}, newProps, {
          selectionColor: processColor(newProps.selectionColor)
        });
      }

      if (Touchable.TOUCH_TARGET_DEBUG && newProps.onPress) {
        newProps = babelHelpers.extends({}, newProps, {
          style: [this.props.style, {
            color: 'magenta'
          }]
        });
      }

      if (this.context.isInAParentText) {
        return React.createElement(RCTVirtualText, babelHelpers.extends({}, newProps, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 315
          }
        }));
      } else {
        return React.createElement(RCTText, babelHelpers.extends({}, newProps, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 317
          }
        }));
      }
    }
  });
  var PRESS_RECT_OFFSET = {
    top: 20,
    left: 20,
    right: 20,
    bottom: 30
  };
  var RCTText = createReactNativeComponentClass(viewConfig.uiViewClassName, function () {
    return viewConfig;
  });
  var RCTVirtualText = RCTText;

  if (UIManager.RCTVirtualText) {
    RCTVirtualText = createReactNativeComponentClass('RCTVirtualText', function () {
      return {
        validAttributes: mergeFast(ReactNativeViewAttributes.UIView, {
          isHighlighted: true
        }),
        uiViewClassName: 'RCTVirtualText'
      };
    });
  }

  module.exports = Text;
},186,[127,156,128,52,131,141,154,163,147,187,110,166,170,193,100,165],"Text");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-native/Libraries/Components/Touchable/Touchable.js";

  var BoundingDimensions = _require(_dependencyMap[0], 'BoundingDimensions');

  var Platform = _require(_dependencyMap[1], 'Platform');

  var Position = _require(_dependencyMap[2], 'Position');

  var React = _require(_dependencyMap[3], 'React');

  var ReactNative = _require(_dependencyMap[4], 'ReactNative');

  var TVEventHandler = _require(_dependencyMap[5], 'TVEventHandler');

  var TouchEventUtils = _require(_dependencyMap[6], 'fbjs/lib/TouchEventUtils');

  var UIManager = _require(_dependencyMap[7], 'UIManager');

  var View = _require(_dependencyMap[8], 'View');

  var keyMirror = _require(_dependencyMap[9], 'fbjs/lib/keyMirror');

  var normalizeColor = _require(_dependencyMap[10], 'normalizeColor');

  var States = keyMirror({
    NOT_RESPONDER: null,
    RESPONDER_INACTIVE_PRESS_IN: null,
    RESPONDER_INACTIVE_PRESS_OUT: null,
    RESPONDER_ACTIVE_PRESS_IN: null,
    RESPONDER_ACTIVE_PRESS_OUT: null,
    RESPONDER_ACTIVE_LONG_PRESS_IN: null,
    RESPONDER_ACTIVE_LONG_PRESS_OUT: null,
    ERROR: null
  });
  var IsActive = {
    RESPONDER_ACTIVE_PRESS_OUT: true,
    RESPONDER_ACTIVE_PRESS_IN: true
  };
  var IsPressingIn = {
    RESPONDER_INACTIVE_PRESS_IN: true,
    RESPONDER_ACTIVE_PRESS_IN: true,
    RESPONDER_ACTIVE_LONG_PRESS_IN: true
  };
  var IsLongPressingIn = {
    RESPONDER_ACTIVE_LONG_PRESS_IN: true
  };
  var Signals = keyMirror({
    DELAY: null,
    RESPONDER_GRANT: null,
    RESPONDER_RELEASE: null,
    RESPONDER_TERMINATED: null,
    ENTER_PRESS_RECT: null,
    LEAVE_PRESS_RECT: null,
    LONG_PRESS_DETECTED: null
  });
  var Transitions = {
    NOT_RESPONDER: {
      DELAY: States.ERROR,
      RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,
      RESPONDER_RELEASE: States.ERROR,
      RESPONDER_TERMINATED: States.ERROR,
      ENTER_PRESS_RECT: States.ERROR,
      LEAVE_PRESS_RECT: States.ERROR,
      LONG_PRESS_DETECTED: States.ERROR
    },
    RESPONDER_INACTIVE_PRESS_IN: {
      DELAY: States.RESPONDER_ACTIVE_PRESS_IN,
      RESPONDER_GRANT: States.ERROR,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,
      LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,
      LONG_PRESS_DETECTED: States.ERROR
    },
    RESPONDER_INACTIVE_PRESS_OUT: {
      DELAY: States.RESPONDER_ACTIVE_PRESS_OUT,
      RESPONDER_GRANT: States.ERROR,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,
      LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,
      LONG_PRESS_DETECTED: States.ERROR
    },
    RESPONDER_ACTIVE_PRESS_IN: {
      DELAY: States.ERROR,
      RESPONDER_GRANT: States.ERROR,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,
      LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,
      LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN
    },
    RESPONDER_ACTIVE_PRESS_OUT: {
      DELAY: States.ERROR,
      RESPONDER_GRANT: States.ERROR,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,
      LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,
      LONG_PRESS_DETECTED: States.ERROR
    },
    RESPONDER_ACTIVE_LONG_PRESS_IN: {
      DELAY: States.ERROR,
      RESPONDER_GRANT: States.ERROR,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,
      LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,
      LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN
    },
    RESPONDER_ACTIVE_LONG_PRESS_OUT: {
      DELAY: States.ERROR,
      RESPONDER_GRANT: States.ERROR,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,
      LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,
      LONG_PRESS_DETECTED: States.ERROR
    },
    error: {
      DELAY: States.NOT_RESPONDER,
      RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.NOT_RESPONDER,
      LEAVE_PRESS_RECT: States.NOT_RESPONDER,
      LONG_PRESS_DETECTED: States.NOT_RESPONDER
    }
  };
  var HIGHLIGHT_DELAY_MS = 130;
  var PRESS_EXPAND_PX = 20;
  var LONG_PRESS_THRESHOLD = 500;
  var LONG_PRESS_DELAY_MS = LONG_PRESS_THRESHOLD - HIGHLIGHT_DELAY_MS;
  var LONG_PRESS_ALLOWED_MOVEMENT = 10;
  var TouchableMixin = {
    componentDidMount: function componentDidMount() {
      if (!Platform.isTVOS) {
        return;
      }

      this._tvEventHandler = new TVEventHandler();

      this._tvEventHandler.enable(this, function (cmp, evt) {
        var myTag = ReactNative.findNodeHandle(cmp);
        evt.dispatchConfig = {};

        if (myTag === evt.tag) {
          if (evt.eventType === 'focus') {
            cmp.touchableHandleActivePressIn && cmp.touchableHandleActivePressIn(evt);
          } else if (evt.eventType === 'blur') {
            cmp.touchableHandleActivePressOut && cmp.touchableHandleActivePressOut(evt);
          } else if (evt.eventType === 'select') {
            cmp.touchableHandlePress && cmp.touchableHandlePress(evt);
          }
        }
      });
    },
    componentWillUnmount: function componentWillUnmount() {
      if (this._tvEventHandler) {
        this._tvEventHandler.disable();

        delete this._tvEventHandler;
      }

      this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);
      this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);
      this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);
    },
    touchableGetInitialState: function touchableGetInitialState() {
      return {
        touchable: {
          touchState: undefined,
          responderID: null
        }
      };
    },
    touchableHandleResponderTerminationRequest: function touchableHandleResponderTerminationRequest() {
      return !this.props.rejectResponderTermination;
    },
    touchableHandleStartShouldSetResponder: function touchableHandleStartShouldSetResponder() {
      return !this.props.disabled;
    },
    touchableLongPressCancelsPress: function touchableLongPressCancelsPress() {
      return true;
    },
    touchableHandleResponderGrant: function touchableHandleResponderGrant(e) {
      var dispatchID = e.currentTarget;
      e.persist();
      this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);
      this.pressOutDelayTimeout = null;
      this.state.touchable.touchState = States.NOT_RESPONDER;
      this.state.touchable.responderID = dispatchID;

      this._receiveSignal(Signals.RESPONDER_GRANT, e);

      var delayMS = this.touchableGetHighlightDelayMS !== undefined ? Math.max(this.touchableGetHighlightDelayMS(), 0) : HIGHLIGHT_DELAY_MS;
      delayMS = isNaN(delayMS) ? HIGHLIGHT_DELAY_MS : delayMS;

      if (delayMS !== 0) {
        this.touchableDelayTimeout = setTimeout(this._handleDelay.bind(this, e), delayMS);
      } else {
        this._handleDelay(e);
      }

      var longDelayMS = this.touchableGetLongPressDelayMS !== undefined ? Math.max(this.touchableGetLongPressDelayMS(), 10) : LONG_PRESS_DELAY_MS;
      longDelayMS = isNaN(longDelayMS) ? LONG_PRESS_DELAY_MS : longDelayMS;
      this.longPressDelayTimeout = setTimeout(this._handleLongDelay.bind(this, e), longDelayMS + delayMS);
    },
    touchableHandleResponderRelease: function touchableHandleResponderRelease(e) {
      this._receiveSignal(Signals.RESPONDER_RELEASE, e);
    },
    touchableHandleResponderTerminate: function touchableHandleResponderTerminate(e) {
      this._receiveSignal(Signals.RESPONDER_TERMINATED, e);
    },
    touchableHandleResponderMove: function touchableHandleResponderMove(e) {
      if (this.state.touchable.touchState === States.RESPONDER_INACTIVE_PRESS_IN) {
        return;
      }

      if (!this.state.touchable.positionOnActivate) {
        return;
      }

      var positionOnActivate = this.state.touchable.positionOnActivate;
      var dimensionsOnActivate = this.state.touchable.dimensionsOnActivate;
      var pressRectOffset = this.touchableGetPressRectOffset ? this.touchableGetPressRectOffset() : {
        left: PRESS_EXPAND_PX,
        right: PRESS_EXPAND_PX,
        top: PRESS_EXPAND_PX,
        bottom: PRESS_EXPAND_PX
      };
      var pressExpandLeft = pressRectOffset.left;
      var pressExpandTop = pressRectOffset.top;
      var pressExpandRight = pressRectOffset.right;
      var pressExpandBottom = pressRectOffset.bottom;
      var hitSlop = this.touchableGetHitSlop ? this.touchableGetHitSlop() : null;

      if (hitSlop) {
        pressExpandLeft += hitSlop.left;
        pressExpandTop += hitSlop.top;
        pressExpandRight += hitSlop.right;
        pressExpandBottom += hitSlop.bottom;
      }

      var touch = TouchEventUtils.extractSingleTouch(e.nativeEvent);
      var pageX = touch && touch.pageX;
      var pageY = touch && touch.pageY;

      if (this.pressInLocation) {
        var movedDistance = this._getDistanceBetweenPoints(pageX, pageY, this.pressInLocation.pageX, this.pressInLocation.pageY);

        if (movedDistance > LONG_PRESS_ALLOWED_MOVEMENT) {
          this._cancelLongPressDelayTimeout();
        }
      }

      var isTouchWithinActive = pageX > positionOnActivate.left - pressExpandLeft && pageY > positionOnActivate.top - pressExpandTop && pageX < positionOnActivate.left + dimensionsOnActivate.width + pressExpandRight && pageY < positionOnActivate.top + dimensionsOnActivate.height + pressExpandBottom;

      if (isTouchWithinActive) {
        this._receiveSignal(Signals.ENTER_PRESS_RECT, e);

        var curState = this.state.touchable.touchState;

        if (curState === States.RESPONDER_INACTIVE_PRESS_IN) {
          this._cancelLongPressDelayTimeout();
        }
      } else {
        this._cancelLongPressDelayTimeout();

        this._receiveSignal(Signals.LEAVE_PRESS_RECT, e);
      }
    },
    _remeasureMetricsOnActivation: function _remeasureMetricsOnActivation() {
      var tag = this.state.touchable.responderID;

      if (tag == null) {
        return;
      }

      UIManager.measure(tag, this._handleQueryLayout);
    },
    _handleQueryLayout: function _handleQueryLayout(l, t, w, h, globalX, globalY) {
      if (!l && !t && !w && !h && !globalX && !globalY) {
        return;
      }

      this.state.touchable.positionOnActivate && Position.release(this.state.touchable.positionOnActivate);
      this.state.touchable.dimensionsOnActivate && BoundingDimensions.release(this.state.touchable.dimensionsOnActivate);
      this.state.touchable.positionOnActivate = Position.getPooled(globalX, globalY);
      this.state.touchable.dimensionsOnActivate = BoundingDimensions.getPooled(w, h);
    },
    _handleDelay: function _handleDelay(e) {
      this.touchableDelayTimeout = null;

      this._receiveSignal(Signals.DELAY, e);
    },
    _handleLongDelay: function _handleLongDelay(e) {
      this.longPressDelayTimeout = null;
      var curState = this.state.touchable.touchState;

      if (curState !== States.RESPONDER_ACTIVE_PRESS_IN && curState !== States.RESPONDER_ACTIVE_LONG_PRESS_IN) {
        console.error('Attempted to transition from state `' + curState + '` to `' + States.RESPONDER_ACTIVE_LONG_PRESS_IN + '`, which is not supported. This is ' + 'most likely due to `Touchable.longPressDelayTimeout` not being cancelled.');
      } else {
        this._receiveSignal(Signals.LONG_PRESS_DETECTED, e);
      }
    },
    _receiveSignal: function _receiveSignal(signal, e) {
      var responderID = this.state.touchable.responderID;
      var curState = this.state.touchable.touchState;
      var nextState = Transitions[curState] && Transitions[curState][signal];

      if (!responderID && signal === Signals.RESPONDER_RELEASE) {
        return;
      }

      if (!nextState) {
        throw new Error('Unrecognized signal `' + signal + '` or state `' + curState + '` for Touchable responder `' + responderID + '`');
      }

      if (nextState === States.ERROR) {
        throw new Error('Touchable cannot transition from `' + curState + '` to `' + signal + '` for responder `' + responderID + '`');
      }

      if (curState !== nextState) {
        this._performSideEffectsForTransition(curState, nextState, signal, e);

        this.state.touchable.touchState = nextState;
      }
    },
    _cancelLongPressDelayTimeout: function _cancelLongPressDelayTimeout() {
      this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);
      this.longPressDelayTimeout = null;
    },
    _isHighlight: function _isHighlight(state) {
      return state === States.RESPONDER_ACTIVE_PRESS_IN || state === States.RESPONDER_ACTIVE_LONG_PRESS_IN;
    },
    _savePressInLocation: function _savePressInLocation(e) {
      var touch = TouchEventUtils.extractSingleTouch(e.nativeEvent);
      var pageX = touch && touch.pageX;
      var pageY = touch && touch.pageY;
      var locationX = touch && touch.locationX;
      var locationY = touch && touch.locationY;
      this.pressInLocation = {
        pageX: pageX,
        pageY: pageY,
        locationX: locationX,
        locationY: locationY
      };
    },
    _getDistanceBetweenPoints: function _getDistanceBetweenPoints(aX, aY, bX, bY) {
      var deltaX = aX - bX;
      var deltaY = aY - bY;
      return Math.sqrt(deltaX * deltaX + deltaY * deltaY);
    },
    _performSideEffectsForTransition: function _performSideEffectsForTransition(curState, nextState, signal, e) {
      var curIsHighlight = this._isHighlight(curState);

      var newIsHighlight = this._isHighlight(nextState);

      var isFinalSignal = signal === Signals.RESPONDER_TERMINATED || signal === Signals.RESPONDER_RELEASE;

      if (isFinalSignal) {
        this._cancelLongPressDelayTimeout();
      }

      if (!IsActive[curState] && IsActive[nextState]) {
        this._remeasureMetricsOnActivation();
      }

      if (IsPressingIn[curState] && signal === Signals.LONG_PRESS_DETECTED) {
        this.touchableHandleLongPress && this.touchableHandleLongPress(e);
      }

      if (newIsHighlight && !curIsHighlight) {
        this._startHighlight(e);
      } else if (!newIsHighlight && curIsHighlight) {
        this._endHighlight(e);
      }

      if (IsPressingIn[curState] && signal === Signals.RESPONDER_RELEASE) {
        var hasLongPressHandler = !!this.props.onLongPress;
        var pressIsLongButStillCallOnPress = IsLongPressingIn[curState] && (!hasLongPressHandler || !this.touchableLongPressCancelsPress());
        var shouldInvokePress = !IsLongPressingIn[curState] || pressIsLongButStillCallOnPress;

        if (shouldInvokePress && this.touchableHandlePress) {
          if (!newIsHighlight && !curIsHighlight) {
            this._startHighlight(e);

            this._endHighlight(e);
          }

          this.touchableHandlePress(e);
        }
      }

      this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);
      this.touchableDelayTimeout = null;
    },
    _startHighlight: function _startHighlight(e) {
      this._savePressInLocation(e);

      this.touchableHandleActivePressIn && this.touchableHandleActivePressIn(e);
    },
    _endHighlight: function _endHighlight(e) {
      var _this = this;

      if (this.touchableHandleActivePressOut) {
        if (this.touchableGetPressOutDelayMS && this.touchableGetPressOutDelayMS()) {
          this.pressOutDelayTimeout = setTimeout(function () {
            _this.touchableHandleActivePressOut(e);
          }, this.touchableGetPressOutDelayMS());
        } else {
          this.touchableHandleActivePressOut(e);
        }
      }
    }
  };
  var Touchable = {
    Mixin: TouchableMixin,
    TOUCH_TARGET_DEBUG: false,
    renderDebugView: function renderDebugView(_ref) {
      var color = _ref.color,
          hitSlop = _ref.hitSlop;

      if (!Touchable.TOUCH_TARGET_DEBUG) {
        return null;
      }

      if (!__DEV__) {
        throw Error('Touchable.TOUCH_TARGET_DEBUG should not be enabled in prod!');
      }

      var debugHitSlopStyle = {};
      hitSlop = hitSlop || {
        top: 0,
        bottom: 0,
        left: 0,
        right: 0
      };

      for (var key in hitSlop) {
        debugHitSlopStyle[key] = -hitSlop[key];
      }

      var hexColor = '#' + ('00000000' + normalizeColor(color).toString(16)).substr(-8);
      return React.createElement(View, {
        pointerEvents: "none",
        style: babelHelpers.extends({
          position: 'absolute',
          borderColor: hexColor.slice(0, -2) + '55',
          borderWidth: 1,
          borderStyle: 'dashed',
          backgroundColor: hexColor.slice(0, -2) + '0F'
        }, debugHitSlopStyle),
        __source: {
          fileName: _jsxFileName,
          lineNumber: 793
        }
      });
    }
  };
  module.exports = Touchable;
},187,[188,52,190,131,21,191,192,110,153,139,101],"Touchable");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var PooledClass = _require(_dependencyMap[0], 'PooledClass');

  var twoArgumentPooler = PooledClass.twoArgumentPooler;

  function BoundingDimensions(width, height) {
    this.width = width;
    this.height = height;
  }

  BoundingDimensions.prototype.destructor = function () {
    this.width = null;
    this.height = null;
  };

  BoundingDimensions.getPooledFromElement = function (element) {
    return BoundingDimensions.getPooled(element.offsetWidth, element.offsetHeight);
  };

  PooledClass.addPoolingTo(BoundingDimensions, twoArgumentPooler);
  module.exports = BoundingDimensions;
},188,[189],"BoundingDimensions");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = _require(_dependencyMap[0], 'fbjs/lib/invariant');

  var oneArgumentPooler = function oneArgumentPooler(copyFieldsFrom) {
    var Klass = this;

    if (Klass.instancePool.length) {
      var instance = Klass.instancePool.pop();
      Klass.call(instance, copyFieldsFrom);
      return instance;
    } else {
      return new Klass(copyFieldsFrom);
    }
  };

  var twoArgumentPooler = function twoArgumentPooler(a1, a2) {
    var Klass = this;

    if (Klass.instancePool.length) {
      var instance = Klass.instancePool.pop();
      Klass.call(instance, a1, a2);
      return instance;
    } else {
      return new Klass(a1, a2);
    }
  };

  var threeArgumentPooler = function threeArgumentPooler(a1, a2, a3) {
    var Klass = this;

    if (Klass.instancePool.length) {
      var instance = Klass.instancePool.pop();
      Klass.call(instance, a1, a2, a3);
      return instance;
    } else {
      return new Klass(a1, a2, a3);
    }
  };

  var fourArgumentPooler = function fourArgumentPooler(a1, a2, a3, a4) {
    var Klass = this;

    if (Klass.instancePool.length) {
      var instance = Klass.instancePool.pop();
      Klass.call(instance, a1, a2, a3, a4);
      return instance;
    } else {
      return new Klass(a1, a2, a3, a4);
    }
  };

  var standardReleaser = function standardReleaser(instance) {
    var Klass = this;
    invariant(instance instanceof Klass, 'Trying to release an instance into a pool of a different type.');
    instance.destructor();

    if (Klass.instancePool.length < Klass.poolSize) {
      Klass.instancePool.push(instance);
    }
  };

  var DEFAULT_POOL_SIZE = 10;
  var DEFAULT_POOLER = oneArgumentPooler;

  var addPoolingTo = function addPoolingTo(CopyConstructor, pooler) {
    var NewKlass = CopyConstructor;
    NewKlass.instancePool = [];
    NewKlass.getPooled = pooler || DEFAULT_POOLER;

    if (!NewKlass.poolSize) {
      NewKlass.poolSize = DEFAULT_POOL_SIZE;
    }

    NewKlass.release = standardReleaser;
    return NewKlass;
  };

  var PooledClass = {
    addPoolingTo: addPoolingTo,
    oneArgumentPooler: oneArgumentPooler,
    twoArgumentPooler: twoArgumentPooler,
    threeArgumentPooler: threeArgumentPooler,
    fourArgumentPooler: fourArgumentPooler
  };
  module.exports = PooledClass;
},189,[13],"PooledClass");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var PooledClass = _require(_dependencyMap[0], 'PooledClass');

  var twoArgumentPooler = PooledClass.twoArgumentPooler;

  function Position(left, top) {
    this.left = left;
    this.top = top;
  }

  Position.prototype.destructor = function () {
    this.left = null;
    this.top = null;
  };

  PooledClass.addPoolingTo(Position, twoArgumentPooler);
  module.exports = Position;
},190,[189],"Position");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var React = _require(_dependencyMap[0], 'React');

  var TVNavigationEventEmitter = _require(_dependencyMap[1], 'NativeModules').TVNavigationEventEmitter;

  var NativeEventEmitter = _require(_dependencyMap[2], 'NativeEventEmitter');

  function TVEventHandler() {
    this.__nativeTVNavigationEventListener = null;
    this.__nativeTVNavigationEventEmitter = null;
  }

  TVEventHandler.prototype.enable = function (component, callback) {
    if (!TVNavigationEventEmitter) {
      return;
    }

    this.__nativeTVNavigationEventEmitter = new NativeEventEmitter(TVNavigationEventEmitter);
    this.__nativeTVNavigationEventListener = this.__nativeTVNavigationEventEmitter.addListener('onTVNavEvent', function (data) {
      if (callback) {
        callback(component, data);
      }
    });
  };

  TVEventHandler.prototype.disable = function () {
    if (this.__nativeTVNavigationEventListener) {
      this.__nativeTVNavigationEventListener.remove();

      delete this.__nativeTVNavigationEventListener;
    }

    if (this.__nativeTVNavigationEventEmitter) {
      delete this.__nativeTVNavigationEventEmitter;
    }
  };

  module.exports = TVEventHandler;
},191,[131,15,69],"TVEventHandler");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var TouchEventUtils = {
    extractSingleTouch: function extractSingleTouch(nativeEvent) {
      var touches = nativeEvent.touches;
      var changedTouches = nativeEvent.changedTouches;
      var hasTouches = touches && touches.length > 0;
      var hasChangedTouches = changedTouches && changedTouches.length > 0;
      return !hasTouches && hasChangedTouches ? changedTouches[0] : hasTouches ? touches[0] : nativeEvent;
    }
  };
  module.exports = TouchEventUtils;
},192,[],"node_modules/fbjs/lib/TouchEventUtils.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var mergeFast = function mergeFast(one, two) {
    var ret = {};

    for (var keyOne in one) {
      ret[keyOne] = one[keyOne];
    }

    for (var keyTwo in two) {
      ret[keyTwo] = two[keyTwo];
    }

    return ret;
  };

  module.exports = mergeFast;
},193,[],"mergeFast");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-native/Libraries/Components/Touchable/TouchableNativeFeedback.ios.js";

  var React = _require(_dependencyMap[0], 'React');

  var StyleSheet = _require(_dependencyMap[1], 'StyleSheet');

  var Text = _require(_dependencyMap[2], 'Text');

  var View = _require(_dependencyMap[3], 'View');

  var DummyTouchableNativeFeedback = function (_React$Component) {
    babelHelpers.inherits(DummyTouchableNativeFeedback, _React$Component);

    function DummyTouchableNativeFeedback() {
      babelHelpers.classCallCheck(this, DummyTouchableNativeFeedback);
      return babelHelpers.possibleConstructorReturn(this, (DummyTouchableNativeFeedback.__proto__ || Object.getPrototypeOf(DummyTouchableNativeFeedback)).apply(this, arguments));
    }

    babelHelpers.createClass(DummyTouchableNativeFeedback, [{
      key: "render",
      value: function render() {
        return React.createElement(
          View,
          {
            style: [styles.container, this.props.style],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 22
            }
          },
          React.createElement(
            Text,
            {
              style: styles.info,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 23
              }
            },
            "TouchableNativeFeedback is not supported on this platform!"
          )
        );
      }
    }]);
    return DummyTouchableNativeFeedback;
  }(React.Component);

  var styles = StyleSheet.create({
    container: {
      height: 100,
      width: 300,
      backgroundColor: '#ffbcbc',
      borderWidth: 1,
      borderColor: 'red',
      alignItems: 'center',
      justifyContent: 'center',
      margin: 10
    },
    info: {
      color: '#333333',
      margin: 20
    }
  });
  module.exports = DummyTouchableNativeFeedback;
},194,[131,132,186,153],"TouchableNativeFeedback");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-native/Libraries/Components/Touchable/TouchableOpacity.js";

  var Animated = _require(_dependencyMap[0], 'Animated');

  var Easing = _require(_dependencyMap[1], 'Easing');

  var NativeMethodsMixin = _require(_dependencyMap[2], 'NativeMethodsMixin');

  var React = _require(_dependencyMap[3], 'React');

  var PropTypes = _require(_dependencyMap[4], 'prop-types');

  var TimerMixin = _require(_dependencyMap[5], 'react-timer-mixin');

  var Touchable = _require(_dependencyMap[6], 'Touchable');

  var TouchableWithoutFeedback = _require(_dependencyMap[7], 'TouchableWithoutFeedback');

  var createReactClass = _require(_dependencyMap[8], 'create-react-class');

  var ensurePositiveDelayProps = _require(_dependencyMap[9], 'ensurePositiveDelayProps');

  var flattenStyle = _require(_dependencyMap[10], 'flattenStyle');

  var PRESS_RETENTION_OFFSET = {
    top: 20,
    left: 20,
    right: 20,
    bottom: 30
  };
  var TouchableOpacity = createReactClass({
    displayName: 'TouchableOpacity',
    mixins: [TimerMixin, Touchable.Mixin, NativeMethodsMixin],
    propTypes: babelHelpers.extends({}, TouchableWithoutFeedback.propTypes, {
      activeOpacity: PropTypes.number,
      hasTVPreferredFocus: PropTypes.bool,
      tvParallaxProperties: PropTypes.object
    }),
    getDefaultProps: function getDefaultProps() {
      return {
        activeOpacity: 0.2
      };
    },
    getInitialState: function getInitialState() {
      return babelHelpers.extends({}, this.touchableGetInitialState(), {
        anim: new Animated.Value(this._getChildStyleOpacityWithDefault())
      });
    },
    componentDidMount: function componentDidMount() {
      ensurePositiveDelayProps(this.props);
    },
    UNSAFE_componentWillReceiveProps: function UNSAFE_componentWillReceiveProps(nextProps) {
      ensurePositiveDelayProps(nextProps);
    },
    setOpacityTo: function setOpacityTo(value, duration) {
      Animated.timing(this.state.anim, {
        toValue: value,
        duration: duration,
        easing: Easing.inOut(Easing.quad),
        useNativeDriver: true
      }).start();
    },
    touchableHandleActivePressIn: function touchableHandleActivePressIn(e) {
      if (e.dispatchConfig.registrationName === 'onResponderGrant') {
        this._opacityActive(0);
      } else {
        this._opacityActive(150);
      }

      this.props.onPressIn && this.props.onPressIn(e);
    },
    touchableHandleActivePressOut: function touchableHandleActivePressOut(e) {
      this._opacityInactive(250);

      this.props.onPressOut && this.props.onPressOut(e);
    },
    touchableHandlePress: function touchableHandlePress(e) {
      this.props.onPress && this.props.onPress(e);
    },
    touchableHandleLongPress: function touchableHandleLongPress(e) {
      this.props.onLongPress && this.props.onLongPress(e);
    },
    touchableGetPressRectOffset: function touchableGetPressRectOffset() {
      return this.props.pressRetentionOffset || PRESS_RETENTION_OFFSET;
    },
    touchableGetHitSlop: function touchableGetHitSlop() {
      return this.props.hitSlop;
    },
    touchableGetHighlightDelayMS: function touchableGetHighlightDelayMS() {
      return this.props.delayPressIn || 0;
    },
    touchableGetLongPressDelayMS: function touchableGetLongPressDelayMS() {
      return this.props.delayLongPress === 0 ? 0 : this.props.delayLongPress || 500;
    },
    touchableGetPressOutDelayMS: function touchableGetPressOutDelayMS() {
      return this.props.delayPressOut;
    },
    _opacityActive: function _opacityActive(duration) {
      this.setOpacityTo(this.props.activeOpacity, duration);
    },
    _opacityInactive: function _opacityInactive(duration) {
      this.setOpacityTo(this._getChildStyleOpacityWithDefault(), duration);
    },
    _getChildStyleOpacityWithDefault: function _getChildStyleOpacityWithDefault() {
      var childStyle = flattenStyle(this.props.style) || {};
      return childStyle.opacity == undefined ? 1 : childStyle.opacity;
    },
    render: function render() {
      return React.createElement(
        Animated.View,
        {
          accessible: this.props.accessible !== false,
          accessibilityLabel: this.props.accessibilityLabel,
          accessibilityComponentType: this.props.accessibilityComponentType,
          accessibilityTraits: this.props.accessibilityTraits,
          style: [this.props.style, {
            opacity: this.state.anim
          }],
          nativeID: this.props.nativeID,
          testID: this.props.testID,
          onLayout: this.props.onLayout,
          isTVSelectable: true,
          hasTVPreferredFocus: this.props.hasTVPreferredFocus,
          tvParallaxProperties: this.props.tvParallaxProperties,
          hitSlop: this.props.hitSlop,
          onStartShouldSetResponder: this.touchableHandleStartShouldSetResponder,
          onResponderTerminationRequest: this.touchableHandleResponderTerminationRequest,
          onResponderGrant: this.touchableHandleResponderGrant,
          onResponderMove: this.touchableHandleResponderMove,
          onResponderRelease: this.touchableHandleResponderRelease,
          onResponderTerminate: this.touchableHandleResponderTerminate,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 245
          }
        },
        this.props.children,
        Touchable.renderDebugView({
          color: 'cyan',
          hitSlop: this.props.hitSlop
        })
      );
    }
  });
  module.exports = TouchableOpacity;
},195,[196,221,128,131,141,238,187,239,166,240,105],"TouchableOpacity");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var AnimatedImplementation = _require(_dependencyMap[0], 'AnimatedImplementation');

  var Image = _require(_dependencyMap[1], 'Image');

  var Text = _require(_dependencyMap[2], 'Text');

  var View = _require(_dependencyMap[3], 'View');

  var AnimatedScrollView = void 0;
  var Animated = {
    View: AnimatedImplementation.createAnimatedComponent(View),
    Text: AnimatedImplementation.createAnimatedComponent(Text),
    Image: AnimatedImplementation.createAnimatedComponent(Image),

    get ScrollView() {
      if (!AnimatedScrollView) {
        AnimatedScrollView = AnimatedImplementation.createAnimatedComponent(_require(_dependencyMap[4], 'ScrollView'));
      }

      return AnimatedScrollView;
    }

  };
  babelHelpers.extends(Animated, AnimatedImplementation);
  module.exports = Animated;
},196,[197,224,186,153,226],"Animated");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _require = _require2(_dependencyMap[0], './AnimatedEvent'),
      AnimatedEvent = _require.AnimatedEvent,
      attachNativeEvent = _require.attachNativeEvent;

  var AnimatedAddition = _require2(_dependencyMap[1], './nodes/AnimatedAddition');

  var AnimatedDiffClamp = _require2(_dependencyMap[2], './nodes/AnimatedDiffClamp');

  var AnimatedDivision = _require2(_dependencyMap[3], './nodes/AnimatedDivision');

  var AnimatedInterpolation = _require2(_dependencyMap[4], './nodes/AnimatedInterpolation');

  var AnimatedModulo = _require2(_dependencyMap[5], './nodes/AnimatedModulo');

  var AnimatedMultiplication = _require2(_dependencyMap[6], './nodes/AnimatedMultiplication');

  var AnimatedNode = _require2(_dependencyMap[7], './nodes/AnimatedNode');

  var AnimatedProps = _require2(_dependencyMap[8], './nodes/AnimatedProps');

  var AnimatedTracking = _require2(_dependencyMap[9], './nodes/AnimatedTracking');

  var AnimatedValue = _require2(_dependencyMap[10], './nodes/AnimatedValue');

  var AnimatedValueXY = _require2(_dependencyMap[11], './nodes/AnimatedValueXY');

  var DecayAnimation = _require2(_dependencyMap[12], './animations/DecayAnimation');

  var SpringAnimation = _require2(_dependencyMap[13], './animations/SpringAnimation');

  var TimingAnimation = _require2(_dependencyMap[14], './animations/TimingAnimation');

  var createAnimatedComponent = _require2(_dependencyMap[15], './createAnimatedComponent');

  var add = function add(a, b) {
    return new AnimatedAddition(a, b);
  };

  var divide = function divide(a, b) {
    return new AnimatedDivision(a, b);
  };

  var multiply = function multiply(a, b) {
    return new AnimatedMultiplication(a, b);
  };

  var modulo = function modulo(a, modulus) {
    return new AnimatedModulo(a, modulus);
  };

  var diffClamp = function diffClamp(a, min, max) {
    return new AnimatedDiffClamp(a, min, max);
  };

  var _combineCallbacks = function _combineCallbacks(callback, config) {
    if (callback && config.onComplete) {
      return function () {
        config.onComplete && config.onComplete.apply(config, arguments);
        callback && callback.apply(undefined, arguments);
      };
    } else {
      return callback || config.onComplete;
    }
  };

  var maybeVectorAnim = function maybeVectorAnim(value, config, anim) {
    if (value instanceof AnimatedValueXY) {
      var configX = babelHelpers.extends({}, config);
      var configY = babelHelpers.extends({}, config);

      for (var key in config) {
        var _config$key = config[key],
            x = _config$key.x,
            y = _config$key.y;

        if (x !== undefined && y !== undefined) {
          configX[key] = x;
          configY[key] = y;
        }
      }

      var aX = anim(value.x, configX);
      var aY = anim(value.y, configY);
      return parallel([aX, aY], {
        stopTogether: false
      });
    }

    return null;
  };

  var spring = function spring(value, config) {
    var start = function start(animatedValue, configuration, callback) {
      callback = _combineCallbacks(callback, configuration);
      var singleValue = animatedValue;
      var singleConfig = configuration;
      singleValue.stopTracking();

      if (configuration.toValue instanceof AnimatedNode) {
        singleValue.track(new AnimatedTracking(singleValue, configuration.toValue, SpringAnimation, singleConfig, callback));
      } else {
        singleValue.animate(new SpringAnimation(singleConfig), callback);
      }
    };

    return maybeVectorAnim(value, config, spring) || {
      start: function (_start) {
        function start(_x) {
          return _start.apply(this, arguments);
        }

        start.toString = function () {
          return _start.toString();
        };

        return start;
      }(function (callback) {
        start(value, config, callback);
      }),
      stop: function stop() {
        value.stopAnimation();
      },
      reset: function reset() {
        value.resetAnimation();
      },
      _startNativeLoop: function _startNativeLoop(iterations) {
        var singleConfig = babelHelpers.extends({}, config, {
          iterations: iterations
        });
        start(value, singleConfig);
      },
      _isUsingNativeDriver: function _isUsingNativeDriver() {
        return config.useNativeDriver || false;
      }
    };
  };

  var timing = function timing(value, config) {
    var start = function start(animatedValue, configuration, callback) {
      callback = _combineCallbacks(callback, configuration);
      var singleValue = animatedValue;
      var singleConfig = configuration;
      singleValue.stopTracking();

      if (configuration.toValue instanceof AnimatedNode) {
        singleValue.track(new AnimatedTracking(singleValue, configuration.toValue, TimingAnimation, singleConfig, callback));
      } else {
        singleValue.animate(new TimingAnimation(singleConfig), callback);
      }
    };

    return maybeVectorAnim(value, config, timing) || {
      start: function (_start2) {
        function start(_x2) {
          return _start2.apply(this, arguments);
        }

        start.toString = function () {
          return _start2.toString();
        };

        return start;
      }(function (callback) {
        start(value, config, callback);
      }),
      stop: function stop() {
        value.stopAnimation();
      },
      reset: function reset() {
        value.resetAnimation();
      },
      _startNativeLoop: function _startNativeLoop(iterations) {
        var singleConfig = babelHelpers.extends({}, config, {
          iterations: iterations
        });
        start(value, singleConfig);
      },
      _isUsingNativeDriver: function _isUsingNativeDriver() {
        return config.useNativeDriver || false;
      }
    };
  };

  var decay = function decay(value, config) {
    var start = function start(animatedValue, configuration, callback) {
      callback = _combineCallbacks(callback, configuration);
      var singleValue = animatedValue;
      var singleConfig = configuration;
      singleValue.stopTracking();
      singleValue.animate(new DecayAnimation(singleConfig), callback);
    };

    return maybeVectorAnim(value, config, decay) || {
      start: function (_start3) {
        function start(_x3) {
          return _start3.apply(this, arguments);
        }

        start.toString = function () {
          return _start3.toString();
        };

        return start;
      }(function (callback) {
        start(value, config, callback);
      }),
      stop: function stop() {
        value.stopAnimation();
      },
      reset: function reset() {
        value.resetAnimation();
      },
      _startNativeLoop: function _startNativeLoop(iterations) {
        var singleConfig = babelHelpers.extends({}, config, {
          iterations: iterations
        });
        start(value, singleConfig);
      },
      _isUsingNativeDriver: function _isUsingNativeDriver() {
        return config.useNativeDriver || false;
      }
    };
  };

  var sequence = function sequence(animations) {
    var current = 0;
    return {
      start: function start(callback) {
        var onComplete = function onComplete(result) {
          if (!result.finished) {
            callback && callback(result);
            return;
          }

          current++;

          if (current === animations.length) {
            callback && callback(result);
            return;
          }

          animations[current].start(onComplete);
        };

        if (animations.length === 0) {
          callback && callback({
            finished: true
          });
        } else {
          animations[current].start(onComplete);
        }
      },
      stop: function stop() {
        if (current < animations.length) {
          animations[current].stop();
        }
      },
      reset: function reset() {
        animations.forEach(function (animation, idx) {
          if (idx <= current) {
            animation.reset();
          }
        });
        current = 0;
      },
      _startNativeLoop: function _startNativeLoop() {
        throw new Error('Loops run using the native driver cannot contain Animated.sequence animations');
      },
      _isUsingNativeDriver: function _isUsingNativeDriver() {
        return false;
      }
    };
  };

  var parallel = function parallel(animations, config) {
    var doneCount = 0;
    var hasEnded = {};
    var stopTogether = !(config && config.stopTogether === false);
    var result = {
      start: function start(callback) {
        if (doneCount === animations.length) {
          callback && callback({
            finished: true
          });
          return;
        }

        animations.forEach(function (animation, idx) {
          var cb = function cb(endResult) {
            hasEnded[idx] = true;
            doneCount++;

            if (doneCount === animations.length) {
              doneCount = 0;
              callback && callback(endResult);
              return;
            }

            if (!endResult.finished && stopTogether) {
              result.stop();
            }
          };

          if (!animation) {
            cb({
              finished: true
            });
          } else {
            animation.start(cb);
          }
        });
      },
      stop: function stop() {
        animations.forEach(function (animation, idx) {
          !hasEnded[idx] && animation.stop();
          hasEnded[idx] = true;
        });
      },
      reset: function reset() {
        animations.forEach(function (animation, idx) {
          animation.reset();
          hasEnded[idx] = false;
          doneCount = 0;
        });
      },
      _startNativeLoop: function _startNativeLoop() {
        throw new Error('Loops run using the native driver cannot contain Animated.parallel animations');
      },
      _isUsingNativeDriver: function _isUsingNativeDriver() {
        return false;
      }
    };
    return result;
  };

  var delay = function delay(time) {
    return timing(new AnimatedValue(0), {
      toValue: 0,
      delay: time,
      duration: 0
    });
  };

  var stagger = function stagger(time, animations) {
    return parallel(animations.map(function (animation, i) {
      return sequence([delay(time * i), animation]);
    }));
  };

  var loop = function loop(animation) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$iterations = _ref.iterations,
        iterations = _ref$iterations === undefined ? -1 : _ref$iterations;

    var isFinished = false;
    var iterationsSoFar = 0;
    return {
      start: function start(callback) {
        var restart = function restart() {
          var result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
            finished: true
          };

          if (isFinished || iterationsSoFar === iterations || result.finished === false) {
            callback && callback(result);
          } else {
            iterationsSoFar++;
            animation.reset();
            animation.start(restart);
          }
        };

        if (!animation || iterations === 0) {
          callback && callback({
            finished: true
          });
        } else {
          if (animation._isUsingNativeDriver()) {
            animation._startNativeLoop(iterations);
          } else {
            restart();
          }
        }
      },
      stop: function stop() {
        isFinished = true;
        animation.stop();
      },
      reset: function reset() {
        iterationsSoFar = 0;
        isFinished = false;
        animation.reset();
      },
      _startNativeLoop: function _startNativeLoop() {
        throw new Error('Loops run using the native driver cannot contain Animated.loop animations');
      },
      _isUsingNativeDriver: function _isUsingNativeDriver() {
        return animation._isUsingNativeDriver();
      }
    };
  };

  function forkEvent(event, listener) {
    if (!event) {
      return listener;
    } else if (event instanceof AnimatedEvent) {
      event.__addListener(listener);

      return event;
    } else {
      return function () {
        typeof event === 'function' && event.apply(undefined, arguments);
        listener.apply(undefined, arguments);
      };
    }
  }

  function unforkEvent(event, listener) {
    if (event && event instanceof AnimatedEvent) {
      event.__removeListener(listener);
    }
  }

  var event = function event(argMapping, config) {
    var animatedEvent = new AnimatedEvent(argMapping, config);

    if (animatedEvent.__isNative) {
      return animatedEvent;
    } else {
      return animatedEvent.__getHandler();
    }
  };

  module.exports = {
    Value: AnimatedValue,
    ValueXY: AnimatedValueXY,
    Interpolation: AnimatedInterpolation,
    Node: AnimatedNode,
    decay: decay,
    timing: timing,
    spring: spring,
    add: add,
    divide: divide,
    multiply: multiply,
    modulo: modulo,
    diffClamp: diffClamp,
    delay: delay,
    sequence: sequence,
    parallel: parallel,
    stagger: stagger,
    loop: loop,
    event: event,
    createAnimatedComponent: createAnimatedComponent,
    attachNativeEvent: attachNativeEvent,
    forkEvent: forkEvent,
    unforkEvent: unforkEvent,
    __PropsOnlyForTests: AnimatedProps
  };
},197,[198,206,207,208,200,209,210,201,211,214,199,215,216,218,220,223],"AnimatedImplementation");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var AnimatedValue = _require2(_dependencyMap[0], './nodes/AnimatedValue');

  var NativeAnimatedHelper = _require2(_dependencyMap[1], './NativeAnimatedHelper');

  var ReactNative = _require2(_dependencyMap[2], 'ReactNative');

  var invariant = _require2(_dependencyMap[3], 'fbjs/lib/invariant');

  var _require = _require2(_dependencyMap[1], './NativeAnimatedHelper'),
      shouldUseNativeDriver = _require.shouldUseNativeDriver;

  function attachNativeEvent(viewRef, eventName, argMapping) {
    var eventMappings = [];

    var traverse = function traverse(value, path) {
      if (value instanceof AnimatedValue) {
        value.__makeNative();

        eventMappings.push({
          nativeEventPath: path,
          animatedValueTag: value.__getNativeTag()
        });
      } else if (typeof value === 'object') {
        for (var _key in value) {
          traverse(value[_key], path.concat(_key));
        }
      }
    };

    invariant(argMapping[0] && argMapping[0].nativeEvent, 'Native driven events only support animated values contained inside `nativeEvent`.');
    traverse(argMapping[0].nativeEvent, []);
    var viewTag = ReactNative.findNodeHandle(viewRef);
    eventMappings.forEach(function (mapping) {
      NativeAnimatedHelper.API.addAnimatedEventToView(viewTag, eventName, mapping);
    });
    return {
      detach: function detach() {
        eventMappings.forEach(function (mapping) {
          NativeAnimatedHelper.API.removeAnimatedEventFromView(viewTag, eventName, mapping.animatedValueTag);
        });
      }
    };
  }

  var AnimatedEvent = function () {
    function AnimatedEvent(argMapping) {
      var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      babelHelpers.classCallCheck(this, AnimatedEvent);
      this._listeners = [];
      this._argMapping = argMapping;

      if (config.listener) {
        this.__addListener(config.listener);
      }

      this._callListeners = this._callListeners.bind(this);
      this._attachedEvent = null;
      this.__isNative = shouldUseNativeDriver(config);

      if (__DEV__) {
        this._validateMapping();
      }
    }

    babelHelpers.createClass(AnimatedEvent, [{
      key: "__addListener",
      value: function __addListener(callback) {
        this._listeners.push(callback);
      }
    }, {
      key: "__removeListener",
      value: function __removeListener(callback) {
        this._listeners = this._listeners.filter(function (listener) {
          return listener !== callback;
        });
      }
    }, {
      key: "__attach",
      value: function __attach(viewRef, eventName) {
        invariant(this.__isNative, 'Only native driven events need to be attached.');
        this._attachedEvent = attachNativeEvent(viewRef, eventName, this._argMapping);
      }
    }, {
      key: "__detach",
      value: function __detach(viewTag, eventName) {
        invariant(this.__isNative, 'Only native driven events need to be detached.');
        this._attachedEvent && this._attachedEvent.detach();
      }
    }, {
      key: "__getHandler",
      value: function __getHandler() {
        var _this = this;

        if (this.__isNative) {
          return this._callListeners;
        }

        return function () {
          for (var _len = arguments.length, args = Array(_len), _key2 = 0; _key2 < _len; _key2++) {
            args[_key2] = arguments[_key2];
          }

          var traverse = function traverse(recMapping, recEvt, key) {
            if (typeof recEvt === 'number' && recMapping instanceof AnimatedValue) {
              recMapping.setValue(recEvt);
            } else if (typeof recMapping === 'object') {
              for (var mappingKey in recMapping) {
                traverse(recMapping[mappingKey], recEvt[mappingKey], mappingKey);
              }
            }
          };

          if (!_this.__isNative) {
            _this._argMapping.forEach(function (mapping, idx) {
              traverse(mapping, args[idx], 'arg' + idx);
            });
          }

          _this._callListeners.apply(_this, babelHelpers.toConsumableArray(args));
        };
      }
    }, {
      key: "_callListeners",
      value: function _callListeners() {
        for (var _len2 = arguments.length, args = Array(_len2), _key3 = 0; _key3 < _len2; _key3++) {
          args[_key3] = arguments[_key3];
        }

        this._listeners.forEach(function (listener) {
          return listener.apply(undefined, args);
        });
      }
    }, {
      key: "_validateMapping",
      value: function _validateMapping() {
        var traverse = function traverse(recMapping, recEvt, key) {
          if (typeof recEvt === 'number') {
            invariant(recMapping instanceof AnimatedValue, 'Bad mapping of type ' + typeof recMapping + ' for key ' + key + ', event value must map to AnimatedValue');
            return;
          }

          invariant(typeof recMapping === 'object', 'Bad mapping of type ' + typeof recMapping + ' for key ' + key);
          invariant(typeof recEvt === 'object', 'Bad event of type ' + typeof recEvt + ' for key ' + key);

          for (var mappingKey in recMapping) {
            traverse(recMapping[mappingKey], recEvt[mappingKey], mappingKey);
          }
        };
      }
    }]);
    return AnimatedEvent;
  }();

  module.exports = {
    AnimatedEvent: AnimatedEvent,
    attachNativeEvent: attachNativeEvent
  };
},198,[199,202,21,13],"AnimatedEvent");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var AnimatedInterpolation = _require(_dependencyMap[0], './AnimatedInterpolation');

  var AnimatedNode = _require(_dependencyMap[1], './AnimatedNode');

  var AnimatedWithChildren = _require(_dependencyMap[2], './AnimatedWithChildren');

  var InteractionManager = _require(_dependencyMap[3], 'InteractionManager');

  var NativeAnimatedHelper = _require(_dependencyMap[4], '../NativeAnimatedHelper');

  var NativeAnimatedAPI = NativeAnimatedHelper.API;
  var _uniqueId = 1;

  function _flush(rootNode) {
    var animatedStyles = new Set();

    function findAnimatedStyles(node) {
      if (typeof node.update === 'function') {
        animatedStyles.add(node);
      } else {
        node.__getChildren().forEach(findAnimatedStyles);
      }
    }

    findAnimatedStyles(rootNode);
    animatedStyles.forEach(function (animatedStyle) {
      return animatedStyle.update();
    });
  }

  var AnimatedValue = function (_AnimatedWithChildren) {
    babelHelpers.inherits(AnimatedValue, _AnimatedWithChildren);

    function AnimatedValue(value) {
      babelHelpers.classCallCheck(this, AnimatedValue);

      var _this = babelHelpers.possibleConstructorReturn(this, (AnimatedValue.__proto__ || Object.getPrototypeOf(AnimatedValue)).call(this));

      _this._startingValue = _this._value = value;
      _this._offset = 0;
      _this._animation = null;
      _this._listeners = {};
      return _this;
    }

    babelHelpers.createClass(AnimatedValue, [{
      key: "__detach",
      value: function __detach() {
        this.stopAnimation();
        babelHelpers.get(AnimatedValue.prototype.__proto__ || Object.getPrototypeOf(AnimatedValue.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return this._value + this._offset;
      }
    }, {
      key: "__makeNative",
      value: function __makeNative() {
        babelHelpers.get(AnimatedValue.prototype.__proto__ || Object.getPrototypeOf(AnimatedValue.prototype), "__makeNative", this).call(this);

        if (Object.keys(this._listeners).length) {
          this._startListeningToNativeValueUpdates();
        }
      }
    }, {
      key: "setValue",
      value: function setValue(value) {
        if (this._animation) {
          this._animation.stop();

          this._animation = null;
        }

        this._updateValue(value, !this.__isNative);

        if (this.__isNative) {
          NativeAnimatedAPI.setAnimatedNodeValue(this.__getNativeTag(), value);
        }
      }
    }, {
      key: "setOffset",
      value: function setOffset(offset) {
        this._offset = offset;

        if (this.__isNative) {
          NativeAnimatedAPI.setAnimatedNodeOffset(this.__getNativeTag(), offset);
        }
      }
    }, {
      key: "flattenOffset",
      value: function flattenOffset() {
        this._value += this._offset;
        this._offset = 0;

        if (this.__isNative) {
          NativeAnimatedAPI.flattenAnimatedNodeOffset(this.__getNativeTag());
        }
      }
    }, {
      key: "extractOffset",
      value: function extractOffset() {
        this._offset += this._value;
        this._value = 0;

        if (this.__isNative) {
          NativeAnimatedAPI.extractAnimatedNodeOffset(this.__getNativeTag());
        }
      }
    }, {
      key: "addListener",
      value: function addListener(callback) {
        var id = String(_uniqueId++);
        this._listeners[id] = callback;

        if (this.__isNative) {
          this._startListeningToNativeValueUpdates();
        }

        return id;
      }
    }, {
      key: "removeListener",
      value: function removeListener(id) {
        delete this._listeners[id];

        if (this.__isNative && Object.keys(this._listeners).length === 0) {
          this._stopListeningForNativeValueUpdates();
        }
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners() {
        this._listeners = {};

        if (this.__isNative) {
          this._stopListeningForNativeValueUpdates();
        }
      }
    }, {
      key: "_startListeningToNativeValueUpdates",
      value: function _startListeningToNativeValueUpdates() {
        var _this2 = this;

        if (this.__nativeAnimatedValueListener) {
          return;
        }

        NativeAnimatedAPI.startListeningToAnimatedNodeValue(this.__getNativeTag());
        this.__nativeAnimatedValueListener = NativeAnimatedHelper.nativeEventEmitter.addListener('onAnimatedValueUpdate', function (data) {
          if (data.tag !== _this2.__getNativeTag()) {
            return;
          }

          _this2._updateValue(data.value, false);
        });
      }
    }, {
      key: "_stopListeningForNativeValueUpdates",
      value: function _stopListeningForNativeValueUpdates() {
        if (!this.__nativeAnimatedValueListener) {
          return;
        }

        this.__nativeAnimatedValueListener.remove();

        this.__nativeAnimatedValueListener = null;
        NativeAnimatedAPI.stopListeningToAnimatedNodeValue(this.__getNativeTag());
      }
    }, {
      key: "stopAnimation",
      value: function stopAnimation(callback) {
        this.stopTracking();
        this._animation && this._animation.stop();
        this._animation = null;
        callback && callback(this.__getValue());
      }
    }, {
      key: "resetAnimation",
      value: function resetAnimation(callback) {
        this.stopAnimation(callback);
        this._value = this._startingValue;
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new AnimatedInterpolation(this, config);
      }
    }, {
      key: "animate",
      value: function animate(animation, callback) {
        var _this3 = this;

        var handle = null;

        if (animation.__isInteraction) {
          handle = InteractionManager.createInteractionHandle();
        }

        var previousAnimation = this._animation;
        this._animation && this._animation.stop();
        this._animation = animation;
        animation.start(this._value, function (value) {
          _this3._updateValue(value, true);
        }, function (result) {
          _this3._animation = null;

          if (handle !== null) {
            InteractionManager.clearInteractionHandle(handle);
          }

          callback && callback(result);
        }, previousAnimation, this);
      }
    }, {
      key: "stopTracking",
      value: function stopTracking() {
        this._tracking && this._tracking.__detach();
        this._tracking = null;
      }
    }, {
      key: "track",
      value: function track(tracking) {
        this.stopTracking();
        this._tracking = tracking;
      }
    }, {
      key: "_updateValue",
      value: function _updateValue(value, flush) {
        this._value = value;

        if (flush) {
          _flush(this);
        }

        for (var _key in this._listeners) {
          this._listeners[_key]({
            value: this.__getValue()
          });
        }
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'value',
          value: this._value,
          offset: this._offset
        };
      }
    }]);
    return AnimatedValue;
  }(AnimatedWithChildren);

  module.exports = AnimatedValue;
},199,[200,201,203,204,202],"AnimatedValue");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _class, _temp;

  var AnimatedNode = _require(_dependencyMap[0], './AnimatedNode');

  var AnimatedWithChildren = _require(_dependencyMap[1], './AnimatedWithChildren');

  var NativeAnimatedHelper = _require(_dependencyMap[2], '../NativeAnimatedHelper');

  var invariant = _require(_dependencyMap[3], 'fbjs/lib/invariant');

  var normalizeColor = _require(_dependencyMap[4], 'normalizeColor');

  var linear = function linear(t) {
    return t;
  };

  function createInterpolation(config) {
    if (config.outputRange && typeof config.outputRange[0] === 'string') {
      return createInterpolationFromStringOutputRange(config);
    }

    var outputRange = config.outputRange;
    checkInfiniteRange('outputRange', outputRange);
    var inputRange = config.inputRange;
    checkInfiniteRange('inputRange', inputRange);
    checkValidInputRange(inputRange);
    invariant(inputRange.length === outputRange.length, 'inputRange (' + inputRange.length + ') and outputRange (' + outputRange.length + ') must have the same length');
    var easing = config.easing || linear;
    var extrapolateLeft = 'extend';

    if (config.extrapolateLeft !== undefined) {
      extrapolateLeft = config.extrapolateLeft;
    } else if (config.extrapolate !== undefined) {
      extrapolateLeft = config.extrapolate;
    }

    var extrapolateRight = 'extend';

    if (config.extrapolateRight !== undefined) {
      extrapolateRight = config.extrapolateRight;
    } else if (config.extrapolate !== undefined) {
      extrapolateRight = config.extrapolate;
    }

    return function (input) {
      invariant(typeof input === 'number', 'Cannot interpolation an input which is not a number');
      var range = findRange(input, inputRange);
      return interpolate(input, inputRange[range], inputRange[range + 1], outputRange[range], outputRange[range + 1], easing, extrapolateLeft, extrapolateRight);
    };
  }

  function interpolate(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight) {
    var result = input;

    if (result < inputMin) {
      if (extrapolateLeft === 'identity') {
        return result;
      } else if (extrapolateLeft === 'clamp') {
        result = inputMin;
      } else if (extrapolateLeft === 'extend') {}
    }

    if (result > inputMax) {
      if (extrapolateRight === 'identity') {
        return result;
      } else if (extrapolateRight === 'clamp') {
        result = inputMax;
      } else if (extrapolateRight === 'extend') {}
    }

    if (outputMin === outputMax) {
      return outputMin;
    }

    if (inputMin === inputMax) {
      if (input <= inputMin) {
        return outputMin;
      }

      return outputMax;
    }

    if (inputMin === -Infinity) {
      result = -result;
    } else if (inputMax === Infinity) {
      result = result - inputMin;
    } else {
      result = (result - inputMin) / (inputMax - inputMin);
    }

    result = easing(result);

    if (outputMin === -Infinity) {
      result = -result;
    } else if (outputMax === Infinity) {
      result = result + outputMin;
    } else {
      result = result * (outputMax - outputMin) + outputMin;
    }

    return result;
  }

  function colorToRgba(input) {
    var int32Color = normalizeColor(input);

    if (int32Color === null) {
      return input;
    }

    int32Color = int32Color || 0;
    var r = (int32Color & 0xff000000) >>> 24;
    var g = (int32Color & 0x00ff0000) >>> 16;
    var b = (int32Color & 0x0000ff00) >>> 8;
    var a = (int32Color & 0x000000ff) / 255;
    return "rgba(" + r + ", " + g + ", " + b + ", " + a + ")";
  }

  var stringShapeRegex = /[0-9\.-]+/g;

  function createInterpolationFromStringOutputRange(config) {
    var outputRange = config.outputRange;
    invariant(outputRange.length >= 2, 'Bad output range');
    outputRange = outputRange.map(colorToRgba);
    checkPattern(outputRange);
    var outputRanges = outputRange[0].match(stringShapeRegex).map(function () {
      return [];
    });
    outputRange.forEach(function (value) {
      value.match(stringShapeRegex).forEach(function (number, i) {
        outputRanges[i].push(+number);
      });
    });
    var interpolations = outputRange[0].match(stringShapeRegex).map(function (value, i) {
      return createInterpolation(babelHelpers.extends({}, config, {
        outputRange: outputRanges[i]
      }));
    });
    var shouldRound = isRgbOrRgba(outputRange[0]);
    return function (input) {
      var i = 0;
      return outputRange[0].replace(stringShapeRegex, function () {
        var val = +interpolations[i++](input);
        var rounded = shouldRound && i < 4 ? Math.round(val) : Math.round(val * 1000) / 1000;
        return String(rounded);
      });
    };
  }

  function isRgbOrRgba(range) {
    return typeof range === 'string' && range.startsWith('rgb');
  }

  function checkPattern(arr) {
    var pattern = arr[0].replace(stringShapeRegex, '');

    for (var i = 1; i < arr.length; ++i) {
      invariant(pattern === arr[i].replace(stringShapeRegex, ''), 'invalid pattern ' + arr[0] + ' and ' + arr[i]);
    }
  }

  function findRange(input, inputRange) {
    var i = void 0;

    for (i = 1; i < inputRange.length - 1; ++i) {
      if (inputRange[i] >= input) {
        break;
      }
    }

    return i - 1;
  }

  function checkValidInputRange(arr) {
    invariant(arr.length >= 2, 'inputRange must have at least 2 elements');

    for (var i = 1; i < arr.length; ++i) {
      invariant(arr[i] >= arr[i - 1], 'inputRange must be monotonically increasing ' + arr);
    }
  }

  function checkInfiniteRange(name, arr) {
    invariant(arr.length >= 2, name + ' must have at least 2 elements');
    invariant(arr.length !== 2 || arr[0] !== -Infinity || arr[1] !== Infinity, name + 'cannot be ]-infinity;+infinity[ ' + arr);
  }

  var AnimatedInterpolation = (_temp = _class = function (_AnimatedWithChildren) {
    babelHelpers.inherits(AnimatedInterpolation, _AnimatedWithChildren);

    function AnimatedInterpolation(parent, config) {
      babelHelpers.classCallCheck(this, AnimatedInterpolation);

      var _this = babelHelpers.possibleConstructorReturn(this, (AnimatedInterpolation.__proto__ || Object.getPrototypeOf(AnimatedInterpolation)).call(this));

      _this._parent = parent;
      _this._config = config;
      _this._interpolation = createInterpolation(config);
      return _this;
    }

    babelHelpers.createClass(AnimatedInterpolation, [{
      key: "__makeNative",
      value: function __makeNative() {
        this._parent.__makeNative();

        babelHelpers.get(AnimatedInterpolation.prototype.__proto__ || Object.getPrototypeOf(AnimatedInterpolation.prototype), "__makeNative", this).call(this);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        var parentValue = this._parent.__getValue();

        invariant(typeof parentValue === 'number', 'Cannot interpolate an input which is not a number.');
        return this._interpolation(parentValue);
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new AnimatedInterpolation(this, config);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._parent.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._parent.__removeChild(this);

        babelHelpers.get(AnimatedInterpolation.prototype.__proto__ || Object.getPrototypeOf(AnimatedInterpolation.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__transformDataType",
      value: function __transformDataType(range) {
        return range.map(function (value) {
          if (typeof value !== 'string') {
            return value;
          }

          if (/deg$/.test(value)) {
            var degrees = parseFloat(value) || 0;
            var radians = degrees * Math.PI / 180.0;
            return radians;
          } else {
            return parseFloat(value) || 0;
          }
        });
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        if (__DEV__) {
          NativeAnimatedHelper.validateInterpolation(this._config);
        }

        return {
          inputRange: this._config.inputRange,
          outputRange: this.__transformDataType(this._config.outputRange),
          extrapolateLeft: this._config.extrapolateLeft || this._config.extrapolate || 'extend',
          extrapolateRight: this._config.extrapolateRight || this._config.extrapolate || 'extend',
          type: 'interpolation'
        };
      }
    }]);
    return AnimatedInterpolation;
  }(AnimatedWithChildren), _class.__createInterpolation = createInterpolation, _temp);
  module.exports = AnimatedInterpolation;
},200,[201,203,202,13,101],"AnimatedInterpolation");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var NativeAnimatedHelper = _require(_dependencyMap[0], '../NativeAnimatedHelper');

  var invariant = _require(_dependencyMap[1], 'fbjs/lib/invariant');

  var AnimatedNode = function () {
    function AnimatedNode() {
      babelHelpers.classCallCheck(this, AnimatedNode);
    }

    babelHelpers.createClass(AnimatedNode, [{
      key: "__attach",
      value: function __attach() {}
    }, {
      key: "__detach",
      value: function __detach() {
        if (this.__isNative && this.__nativeTag != null) {
          NativeAnimatedHelper.API.dropAnimatedNode(this.__nativeTag);
          this.__nativeTag = undefined;
        }
      }
    }, {
      key: "__getValue",
      value: function __getValue() {}
    }, {
      key: "__getAnimatedValue",
      value: function __getAnimatedValue() {
        return this.__getValue();
      }
    }, {
      key: "__addChild",
      value: function __addChild(child) {}
    }, {
      key: "__removeChild",
      value: function __removeChild(child) {}
    }, {
      key: "__getChildren",
      value: function __getChildren() {
        return [];
      }
    }, {
      key: "__makeNative",
      value: function __makeNative() {
        if (!this.__isNative) {
          throw new Error('This node cannot be made a "native" animated node');
        }
      }
    }, {
      key: "__getNativeTag",
      value: function __getNativeTag() {
        NativeAnimatedHelper.assertNativeAnimatedModule();
        invariant(this.__isNative, 'Attempt to get native tag from node not marked as "native"');

        if (this.__nativeTag == null) {
          var nativeTag = NativeAnimatedHelper.generateNewNodeTag();
          NativeAnimatedHelper.API.createAnimatedNode(nativeTag, this.__getNativeConfig());
          this.__nativeTag = nativeTag;
        }

        return this.__nativeTag;
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        throw new Error('This JS animated node type cannot be used as native animated node');
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        return this.__getValue();
      }
    }]);
    return AnimatedNode;
  }();

  module.exports = AnimatedNode;
},201,[202,13],"AnimatedNode");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var NativeAnimatedModule = _require(_dependencyMap[0], 'NativeModules').NativeAnimatedModule;

  var NativeEventEmitter = _require(_dependencyMap[1], 'NativeEventEmitter');

  var invariant = _require(_dependencyMap[2], 'fbjs/lib/invariant');

  var __nativeAnimatedNodeTagCount = 1;
  var __nativeAnimationIdCount = 1;
  var nativeEventEmitter = void 0;
  var API = {
    createAnimatedNode: function createAnimatedNode(tag, config) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.createAnimatedNode(tag, config);
    },
    startListeningToAnimatedNodeValue: function startListeningToAnimatedNodeValue(tag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.startListeningToAnimatedNodeValue(tag);
    },
    stopListeningToAnimatedNodeValue: function stopListeningToAnimatedNodeValue(tag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.stopListeningToAnimatedNodeValue(tag);
    },
    connectAnimatedNodes: function connectAnimatedNodes(parentTag, childTag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.connectAnimatedNodes(parentTag, childTag);
    },
    disconnectAnimatedNodes: function disconnectAnimatedNodes(parentTag, childTag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.disconnectAnimatedNodes(parentTag, childTag);
    },
    startAnimatingNode: function startAnimatingNode(animationId, nodeTag, config, endCallback) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.startAnimatingNode(animationId, nodeTag, config, endCallback);
    },
    stopAnimation: function stopAnimation(animationId) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.stopAnimation(animationId);
    },
    setAnimatedNodeValue: function setAnimatedNodeValue(nodeTag, value) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.setAnimatedNodeValue(nodeTag, value);
    },
    setAnimatedNodeOffset: function setAnimatedNodeOffset(nodeTag, offset) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.setAnimatedNodeOffset(nodeTag, offset);
    },
    flattenAnimatedNodeOffset: function flattenAnimatedNodeOffset(nodeTag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.flattenAnimatedNodeOffset(nodeTag);
    },
    extractAnimatedNodeOffset: function extractAnimatedNodeOffset(nodeTag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.extractAnimatedNodeOffset(nodeTag);
    },
    connectAnimatedNodeToView: function connectAnimatedNodeToView(nodeTag, viewTag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.connectAnimatedNodeToView(nodeTag, viewTag);
    },
    disconnectAnimatedNodeFromView: function disconnectAnimatedNodeFromView(nodeTag, viewTag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.disconnectAnimatedNodeFromView(nodeTag, viewTag);
    },
    dropAnimatedNode: function dropAnimatedNode(tag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.dropAnimatedNode(tag);
    },
    addAnimatedEventToView: function addAnimatedEventToView(viewTag, eventName, eventMapping) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.addAnimatedEventToView(viewTag, eventName, eventMapping);
    },
    removeAnimatedEventFromView: function removeAnimatedEventFromView(viewTag, eventName, animatedNodeTag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.removeAnimatedEventFromView(viewTag, eventName, animatedNodeTag);
    }
  };
  var STYLES_WHITELIST = {
    opacity: true,
    transform: true,
    shadowOpacity: true,
    shadowRadius: true,
    scaleX: true,
    scaleY: true,
    translateX: true,
    translateY: true
  };
  var TRANSFORM_WHITELIST = {
    translateX: true,
    translateY: true,
    scale: true,
    scaleX: true,
    scaleY: true,
    rotate: true,
    rotateX: true,
    rotateY: true,
    perspective: true
  };
  var SUPPORTED_INTERPOLATION_PARAMS = {
    inputRange: true,
    outputRange: true,
    extrapolate: true,
    extrapolateRight: true,
    extrapolateLeft: true
  };

  function addWhitelistedStyleProp(prop) {
    STYLES_WHITELIST[prop] = true;
  }

  function addWhitelistedTransformProp(prop) {
    TRANSFORM_WHITELIST[prop] = true;
  }

  function addWhitelistedInterpolationParam(param) {
    SUPPORTED_INTERPOLATION_PARAMS[param] = true;
  }

  function validateTransform(configs) {
    configs.forEach(function (config) {
      if (!TRANSFORM_WHITELIST.hasOwnProperty(config.property)) {
        throw new Error("Property '" + config.property + "' is not supported by native animated module");
      }
    });
  }

  function validateStyles(styles) {
    for (var key in styles) {
      if (!STYLES_WHITELIST.hasOwnProperty(key)) {
        throw new Error("Style property '" + key + "' is not supported by native animated module");
      }
    }
  }

  function validateInterpolation(config) {
    for (var key in config) {
      if (!SUPPORTED_INTERPOLATION_PARAMS.hasOwnProperty(key)) {
        throw new Error("Interpolation property '" + key + "' is not supported by native animated module");
      }
    }
  }

  function generateNewNodeTag() {
    return __nativeAnimatedNodeTagCount++;
  }

  function generateNewAnimationId() {
    return __nativeAnimationIdCount++;
  }

  function assertNativeAnimatedModule() {
    invariant(NativeAnimatedModule, 'Native animated module is not available');
  }

  var _warnedMissingNativeAnimated = false;

  function shouldUseNativeDriver(config) {
    if (config.useNativeDriver && !NativeAnimatedModule) {
      if (!_warnedMissingNativeAnimated) {
        console.warn('Animated: `useNativeDriver` is not supported because the native ' + 'animated module is missing. Falling back to JS-based animation. To ' + 'resolve this, add `RCTAnimation` module to this app, or remove ' + '`useNativeDriver`. ' + 'More info: https://github.com/facebook/react-native/issues/11094#issuecomment-263240420');
        _warnedMissingNativeAnimated = true;
      }

      return false;
    }

    return config.useNativeDriver || false;
  }

  module.exports = {
    API: API,
    addWhitelistedStyleProp: addWhitelistedStyleProp,
    addWhitelistedTransformProp: addWhitelistedTransformProp,
    addWhitelistedInterpolationParam: addWhitelistedInterpolationParam,
    validateStyles: validateStyles,
    validateTransform: validateTransform,
    validateInterpolation: validateInterpolation,
    generateNewNodeTag: generateNewNodeTag,
    generateNewAnimationId: generateNewAnimationId,
    assertNativeAnimatedModule: assertNativeAnimatedModule,
    shouldUseNativeDriver: shouldUseNativeDriver,

    get nativeEventEmitter() {
      if (!nativeEventEmitter) {
        nativeEventEmitter = new NativeEventEmitter(NativeAnimatedModule);
      }

      return nativeEventEmitter;
    }

  };
},202,[15,69,13],"NativeAnimatedHelper");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var AnimatedNode = _require(_dependencyMap[0], './AnimatedNode');

  var NativeAnimatedHelper = _require(_dependencyMap[1], '../NativeAnimatedHelper');

  var AnimatedWithChildren = function (_AnimatedNode) {
    babelHelpers.inherits(AnimatedWithChildren, _AnimatedNode);

    function AnimatedWithChildren() {
      babelHelpers.classCallCheck(this, AnimatedWithChildren);

      var _this = babelHelpers.possibleConstructorReturn(this, (AnimatedWithChildren.__proto__ || Object.getPrototypeOf(AnimatedWithChildren)).call(this));

      _this._children = [];
      return _this;
    }

    babelHelpers.createClass(AnimatedWithChildren, [{
      key: "__makeNative",
      value: function __makeNative() {
        if (!this.__isNative) {
          this.__isNative = true;

          for (var _iterator = this._children, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
            var _ref;

            if (_isArray) {
              if (_i >= _iterator.length) break;
              _ref = _iterator[_i++];
            } else {
              _i = _iterator.next();
              if (_i.done) break;
              _ref = _i.value;
            }

            var child = _ref;

            child.__makeNative();

            NativeAnimatedHelper.API.connectAnimatedNodes(this.__getNativeTag(), child.__getNativeTag());
          }
        }
      }
    }, {
      key: "__addChild",
      value: function __addChild(child) {
        if (this._children.length === 0) {
          this.__attach();
        }

        this._children.push(child);

        if (this.__isNative) {
          child.__makeNative();

          NativeAnimatedHelper.API.connectAnimatedNodes(this.__getNativeTag(), child.__getNativeTag());
        }
      }
    }, {
      key: "__removeChild",
      value: function __removeChild(child) {
        var index = this._children.indexOf(child);

        if (index === -1) {
          console.warn("Trying to remove a child that doesn't exist");
          return;
        }

        if (this.__isNative && child.__isNative) {
          NativeAnimatedHelper.API.disconnectAnimatedNodes(this.__getNativeTag(), child.__getNativeTag());
        }

        this._children.splice(index, 1);

        if (this._children.length === 0) {
          this.__detach();
        }
      }
    }, {
      key: "__getChildren",
      value: function __getChildren() {
        return this._children;
      }
    }]);
    return AnimatedWithChildren;
  }(AnimatedNode);

  module.exports = AnimatedWithChildren;
},203,[201,202],"AnimatedWithChildren");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var BatchedBridge = _require(_dependencyMap[0], 'BatchedBridge');

  var EventEmitter = _require(_dependencyMap[1], 'EventEmitter');

  var Set = _require(_dependencyMap[2], 'Set');

  var TaskQueue = _require(_dependencyMap[3], 'TaskQueue');

  var infoLog = _require(_dependencyMap[4], 'infoLog');

  var invariant = _require(_dependencyMap[5], 'fbjs/lib/invariant');

  var keyMirror = _require(_dependencyMap[6], 'fbjs/lib/keyMirror');

  var _emitter = new EventEmitter();

  var DEBUG_DELAY = 0;
  var DEBUG = false;
  var InteractionManager = {
    Events: keyMirror({
      interactionStart: true,
      interactionComplete: true
    }),
    runAfterInteractions: function runAfterInteractions(task) {
      var tasks = [];
      var promise = new Promise(function (resolve) {
        _scheduleUpdate();

        if (task) {
          tasks.push(task);
        }

        tasks.push({
          run: resolve,
          name: 'resolve ' + (task && task.name || '?')
        });

        _taskQueue.enqueueTasks(tasks);
      });
      return {
        then: promise.then.bind(promise),
        done: function done() {
          if (promise.done) {
            return promise.done.apply(promise, arguments);
          } else {
            console.warn('Tried to call done when not supported by current Promise implementation.');
          }
        },
        cancel: function cancel() {
          _taskQueue.cancelTasks(tasks);
        }
      };
    },
    createInteractionHandle: function createInteractionHandle() {
      DEBUG && infoLog('create interaction handle');

      _scheduleUpdate();

      var handle = ++_inc;

      _addInteractionSet.add(handle);

      return handle;
    },
    clearInteractionHandle: function clearInteractionHandle(handle) {
      DEBUG && infoLog('clear interaction handle');
      invariant(!!handle, 'Must provide a handle to clear.');

      _scheduleUpdate();

      _addInteractionSet.delete(handle);

      _deleteInteractionSet.add(handle);
    },
    addListener: _emitter.addListener.bind(_emitter),
    setDeadline: function setDeadline(deadline) {
      _deadline = deadline;
    }
  };

  var _interactionSet = new Set();

  var _addInteractionSet = new Set();

  var _deleteInteractionSet = new Set();

  var _taskQueue = new TaskQueue({
    onMoreTasks: _scheduleUpdate
  });

  var _nextUpdateHandle = 0;
  var _inc = 0;

  var _deadline = -1;

  function _scheduleUpdate() {
    if (!_nextUpdateHandle) {
      if (_deadline > 0) {
        _nextUpdateHandle = setTimeout(_processUpdate, 0 + DEBUG_DELAY);
      } else {
        _nextUpdateHandle = setImmediate(_processUpdate);
      }
    }
  }

  function _processUpdate() {
    _nextUpdateHandle = 0;
    var interactionCount = _interactionSet.size;

    _addInteractionSet.forEach(function (handle) {
      return _interactionSet.add(handle);
    });

    _deleteInteractionSet.forEach(function (handle) {
      return _interactionSet.delete(handle);
    });

    var nextInteractionCount = _interactionSet.size;

    if (interactionCount !== 0 && nextInteractionCount === 0) {
      _emitter.emit(InteractionManager.Events.interactionComplete);
    } else if (interactionCount === 0 && nextInteractionCount !== 0) {
      _emitter.emit(InteractionManager.Events.interactionStart);
    }

    if (nextInteractionCount === 0) {
      while (_taskQueue.hasTasksToProcess()) {
        _taskQueue.processNext();

        if (_deadline > 0 && BatchedBridge.getEventLoopRunningTime() >= _deadline) {
          _scheduleUpdate();

          break;
        }
      }
    }

    _addInteractionSet.clear();

    _deleteInteractionSet.clear();
  }

  module.exports = InteractionManager;
},204,[16,67,30,205,93,13,139],"InteractionManager");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var infoLog = _require(_dependencyMap[0], 'infoLog');

  var invariant = _require(_dependencyMap[1], 'fbjs/lib/invariant');

  var DEBUG = false;

  var TaskQueue = function () {
    function TaskQueue(_ref) {
      var onMoreTasks = _ref.onMoreTasks;
      babelHelpers.classCallCheck(this, TaskQueue);
      this._onMoreTasks = onMoreTasks;
      this._queueStack = [{
        tasks: [],
        popable: false
      }];
    }

    babelHelpers.createClass(TaskQueue, [{
      key: "enqueue",
      value: function enqueue(task) {
        this._getCurrentQueue().push(task);
      }
    }, {
      key: "enqueueTasks",
      value: function enqueueTasks(tasks) {
        var _this = this;

        tasks.forEach(function (task) {
          return _this.enqueue(task);
        });
      }
    }, {
      key: "cancelTasks",
      value: function cancelTasks(tasksToCancel) {
        this._queueStack = this._queueStack.map(function (queue) {
          return babelHelpers.extends({}, queue, {
            tasks: queue.tasks.filter(function (task) {
              return tasksToCancel.indexOf(task) === -1;
            })
          });
        }).filter(function (queue, idx) {
          return queue.tasks.length > 0 || idx === 0;
        });
      }
    }, {
      key: "hasTasksToProcess",
      value: function hasTasksToProcess() {
        return this._getCurrentQueue().length > 0;
      }
    }, {
      key: "processNext",
      value: function processNext() {
        var queue = this._getCurrentQueue();

        if (queue.length) {
          var task = queue.shift();

          try {
            if (task.gen) {
              DEBUG && infoLog('genPromise for task ' + task.name);

              this._genPromise(task);
            } else if (task.run) {
              DEBUG && infoLog('run task ' + task.name);
              task.run();
            } else {
              invariant(typeof task === 'function', 'Expected Function, SimpleTask, or PromiseTask, but got:\n' + JSON.stringify(task, null, 2));
              DEBUG && infoLog('run anonymous task');
              task();
            }
          } catch (e) {
            e.message = 'TaskQueue: Error with task ' + (task.name || '') + ': ' + e.message;
            throw e;
          }
        }
      }
    }, {
      key: "_getCurrentQueue",
      value: function _getCurrentQueue() {
        var stackIdx = this._queueStack.length - 1;
        var queue = this._queueStack[stackIdx];

        if (queue.popable && queue.tasks.length === 0 && this._queueStack.length > 1) {
          this._queueStack.pop();

          DEBUG && infoLog('popped queue: ', {
            stackIdx: stackIdx,
            queueStackSize: this._queueStack.length
          });
          return this._getCurrentQueue();
        } else {
          return queue.tasks;
        }
      }
    }, {
      key: "_genPromise",
      value: function _genPromise(task) {
        var _this2 = this;

        this._queueStack.push({
          tasks: [],
          popable: false
        });

        var stackIdx = this._queueStack.length - 1;
        DEBUG && infoLog('push new queue: ', {
          stackIdx: stackIdx
        });
        DEBUG && infoLog('exec gen task ' + task.name);
        task.gen().then(function () {
          DEBUG && infoLog('onThen for gen task ' + task.name, {
            stackIdx: stackIdx,
            queueStackSize: _this2._queueStack.length
          });
          _this2._queueStack[stackIdx].popable = true;
          _this2.hasTasksToProcess() && _this2._onMoreTasks();
        }).catch(function (ex) {
          ex.message = "TaskQueue: Error resolving Promise in task " + task.name + ": " + ex.message;
          throw ex;
        }).done();
      }
    }]);
    return TaskQueue;
  }();

  module.exports = TaskQueue;
},205,[93,13],"TaskQueue");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var AnimatedInterpolation = _require(_dependencyMap[0], './AnimatedInterpolation');

  var AnimatedNode = _require(_dependencyMap[1], './AnimatedNode');

  var AnimatedValue = _require(_dependencyMap[2], './AnimatedValue');

  var AnimatedWithChildren = _require(_dependencyMap[3], './AnimatedWithChildren');

  var AnimatedAddition = function (_AnimatedWithChildren) {
    babelHelpers.inherits(AnimatedAddition, _AnimatedWithChildren);

    function AnimatedAddition(a, b) {
      babelHelpers.classCallCheck(this, AnimatedAddition);

      var _this = babelHelpers.possibleConstructorReturn(this, (AnimatedAddition.__proto__ || Object.getPrototypeOf(AnimatedAddition)).call(this));

      _this._a = typeof a === 'number' ? new AnimatedValue(a) : a;
      _this._b = typeof b === 'number' ? new AnimatedValue(b) : b;
      return _this;
    }

    babelHelpers.createClass(AnimatedAddition, [{
      key: "__makeNative",
      value: function __makeNative() {
        this._a.__makeNative();

        this._b.__makeNative();

        babelHelpers.get(AnimatedAddition.prototype.__proto__ || Object.getPrototypeOf(AnimatedAddition.prototype), "__makeNative", this).call(this);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return this._a.__getValue() + this._b.__getValue();
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new AnimatedInterpolation(this, config);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._a.__addChild(this);

        this._b.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._a.__removeChild(this);

        this._b.__removeChild(this);

        babelHelpers.get(AnimatedAddition.prototype.__proto__ || Object.getPrototypeOf(AnimatedAddition.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'addition',
          input: [this._a.__getNativeTag(), this._b.__getNativeTag()]
        };
      }
    }]);
    return AnimatedAddition;
  }(AnimatedWithChildren);

  module.exports = AnimatedAddition;
},206,[200,201,199,203],"AnimatedAddition");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var AnimatedInterpolation = _require(_dependencyMap[0], './AnimatedInterpolation');

  var AnimatedNode = _require(_dependencyMap[1], './AnimatedNode');

  var AnimatedWithChildren = _require(_dependencyMap[2], './AnimatedWithChildren');

  var AnimatedDiffClamp = function (_AnimatedWithChildren) {
    babelHelpers.inherits(AnimatedDiffClamp, _AnimatedWithChildren);

    function AnimatedDiffClamp(a, min, max) {
      babelHelpers.classCallCheck(this, AnimatedDiffClamp);

      var _this = babelHelpers.possibleConstructorReturn(this, (AnimatedDiffClamp.__proto__ || Object.getPrototypeOf(AnimatedDiffClamp)).call(this));

      _this._a = a;
      _this._min = min;
      _this._max = max;
      _this._value = _this._lastValue = _this._a.__getValue();
      return _this;
    }

    babelHelpers.createClass(AnimatedDiffClamp, [{
      key: "__makeNative",
      value: function __makeNative() {
        this._a.__makeNative();

        babelHelpers.get(AnimatedDiffClamp.prototype.__proto__ || Object.getPrototypeOf(AnimatedDiffClamp.prototype), "__makeNative", this).call(this);
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new AnimatedInterpolation(this, config);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        var value = this._a.__getValue();

        var diff = value - this._lastValue;
        this._lastValue = value;
        this._value = Math.min(Math.max(this._value + diff, this._min), this._max);
        return this._value;
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._a.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._a.__removeChild(this);

        babelHelpers.get(AnimatedDiffClamp.prototype.__proto__ || Object.getPrototypeOf(AnimatedDiffClamp.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'diffclamp',
          input: this._a.__getNativeTag(),
          min: this._min,
          max: this._max
        };
      }
    }]);
    return AnimatedDiffClamp;
  }(AnimatedWithChildren);

  module.exports = AnimatedDiffClamp;
},207,[200,201,203],"AnimatedDiffClamp");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var AnimatedInterpolation = _require(_dependencyMap[0], './AnimatedInterpolation');

  var AnimatedNode = _require(_dependencyMap[1], './AnimatedNode');

  var AnimatedValue = _require(_dependencyMap[2], './AnimatedValue');

  var AnimatedWithChildren = _require(_dependencyMap[3], './AnimatedWithChildren');

  var AnimatedDivision = function (_AnimatedWithChildren) {
    babelHelpers.inherits(AnimatedDivision, _AnimatedWithChildren);

    function AnimatedDivision(a, b) {
      babelHelpers.classCallCheck(this, AnimatedDivision);

      var _this = babelHelpers.possibleConstructorReturn(this, (AnimatedDivision.__proto__ || Object.getPrototypeOf(AnimatedDivision)).call(this));

      _this._a = typeof a === 'number' ? new AnimatedValue(a) : a;
      _this._b = typeof b === 'number' ? new AnimatedValue(b) : b;
      return _this;
    }

    babelHelpers.createClass(AnimatedDivision, [{
      key: "__makeNative",
      value: function __makeNative() {
        this._a.__makeNative();

        this._b.__makeNative();

        babelHelpers.get(AnimatedDivision.prototype.__proto__ || Object.getPrototypeOf(AnimatedDivision.prototype), "__makeNative", this).call(this);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        var a = this._a.__getValue();

        var b = this._b.__getValue();

        if (b === 0) {
          console.error('Detected division by zero in AnimatedDivision');
        }

        return a / b;
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new AnimatedInterpolation(this, config);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._a.__addChild(this);

        this._b.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._a.__removeChild(this);

        this._b.__removeChild(this);

        babelHelpers.get(AnimatedDivision.prototype.__proto__ || Object.getPrototypeOf(AnimatedDivision.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'division',
          input: [this._a.__getNativeTag(), this._b.__getNativeTag()]
        };
      }
    }]);
    return AnimatedDivision;
  }(AnimatedWithChildren);

  module.exports = AnimatedDivision;
},208,[200,201,199,203],"AnimatedDivision");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var AnimatedInterpolation = _require(_dependencyMap[0], './AnimatedInterpolation');

  var AnimatedNode = _require(_dependencyMap[1], './AnimatedNode');

  var AnimatedWithChildren = _require(_dependencyMap[2], './AnimatedWithChildren');

  var AnimatedModulo = function (_AnimatedWithChildren) {
    babelHelpers.inherits(AnimatedModulo, _AnimatedWithChildren);

    function AnimatedModulo(a, modulus) {
      babelHelpers.classCallCheck(this, AnimatedModulo);

      var _this = babelHelpers.possibleConstructorReturn(this, (AnimatedModulo.__proto__ || Object.getPrototypeOf(AnimatedModulo)).call(this));

      _this._a = a;
      _this._modulus = modulus;
      return _this;
    }

    babelHelpers.createClass(AnimatedModulo, [{
      key: "__makeNative",
      value: function __makeNative() {
        this._a.__makeNative();

        babelHelpers.get(AnimatedModulo.prototype.__proto__ || Object.getPrototypeOf(AnimatedModulo.prototype), "__makeNative", this).call(this);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return (this._a.__getValue() % this._modulus + this._modulus) % this._modulus;
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new AnimatedInterpolation(this, config);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._a.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._a.__removeChild(this);

        babelHelpers.get(AnimatedModulo.prototype.__proto__ || Object.getPrototypeOf(AnimatedModulo.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'modulus',
          input: this._a.__getNativeTag(),
          modulus: this._modulus
        };
      }
    }]);
    return AnimatedModulo;
  }(AnimatedWithChildren);

  module.exports = AnimatedModulo;
},209,[200,201,203],"AnimatedModulo");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var AnimatedInterpolation = _require(_dependencyMap[0], './AnimatedInterpolation');

  var AnimatedNode = _require(_dependencyMap[1], './AnimatedNode');

  var AnimatedValue = _require(_dependencyMap[2], './AnimatedValue');

  var AnimatedWithChildren = _require(_dependencyMap[3], './AnimatedWithChildren');

  var AnimatedMultiplication = function (_AnimatedWithChildren) {
    babelHelpers.inherits(AnimatedMultiplication, _AnimatedWithChildren);

    function AnimatedMultiplication(a, b) {
      babelHelpers.classCallCheck(this, AnimatedMultiplication);

      var _this = babelHelpers.possibleConstructorReturn(this, (AnimatedMultiplication.__proto__ || Object.getPrototypeOf(AnimatedMultiplication)).call(this));

      _this._a = typeof a === 'number' ? new AnimatedValue(a) : a;
      _this._b = typeof b === 'number' ? new AnimatedValue(b) : b;
      return _this;
    }

    babelHelpers.createClass(AnimatedMultiplication, [{
      key: "__makeNative",
      value: function __makeNative() {
        this._a.__makeNative();

        this._b.__makeNative();

        babelHelpers.get(AnimatedMultiplication.prototype.__proto__ || Object.getPrototypeOf(AnimatedMultiplication.prototype), "__makeNative", this).call(this);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return this._a.__getValue() * this._b.__getValue();
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new AnimatedInterpolation(this, config);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._a.__addChild(this);

        this._b.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._a.__removeChild(this);

        this._b.__removeChild(this);

        babelHelpers.get(AnimatedMultiplication.prototype.__proto__ || Object.getPrototypeOf(AnimatedMultiplication.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'multiplication',
          input: [this._a.__getNativeTag(), this._b.__getNativeTag()]
        };
      }
    }]);
    return AnimatedMultiplication;
  }(AnimatedWithChildren);

  module.exports = AnimatedMultiplication;
},210,[200,201,199,203],"AnimatedMultiplication");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _require = _require2(_dependencyMap[0], '../AnimatedEvent'),
      AnimatedEvent = _require.AnimatedEvent;

  var AnimatedNode = _require2(_dependencyMap[1], './AnimatedNode');

  var AnimatedStyle = _require2(_dependencyMap[2], './AnimatedStyle');

  var NativeAnimatedHelper = _require2(_dependencyMap[3], '../NativeAnimatedHelper');

  var ReactNative = _require2(_dependencyMap[4], 'ReactNative');

  var invariant = _require2(_dependencyMap[5], 'fbjs/lib/invariant');

  var AnimatedProps = function (_AnimatedNode) {
    babelHelpers.inherits(AnimatedProps, _AnimatedNode);

    function AnimatedProps(props, callback) {
      babelHelpers.classCallCheck(this, AnimatedProps);

      var _this = babelHelpers.possibleConstructorReturn(this, (AnimatedProps.__proto__ || Object.getPrototypeOf(AnimatedProps)).call(this));

      if (props.style) {
        props = babelHelpers.extends({}, props, {
          style: new AnimatedStyle(props.style)
        });
      }

      _this._props = props;
      _this._callback = callback;

      _this.__attach();

      return _this;
    }

    babelHelpers.createClass(AnimatedProps, [{
      key: "__getValue",
      value: function __getValue() {
        var props = {};

        for (var key in this._props) {
          var value = this._props[key];

          if (value instanceof AnimatedNode) {
            if (!value.__isNative || value instanceof AnimatedStyle) {
              props[key] = value.__getValue();
            }
          } else if (value instanceof AnimatedEvent) {
            props[key] = value.__getHandler();
          } else {
            props[key] = value;
          }
        }

        return props;
      }
    }, {
      key: "__getAnimatedValue",
      value: function __getAnimatedValue() {
        var props = {};

        for (var key in this._props) {
          var value = this._props[key];

          if (value instanceof AnimatedNode) {
            props[key] = value.__getAnimatedValue();
          }
        }

        return props;
      }
    }, {
      key: "__attach",
      value: function __attach() {
        for (var key in this._props) {
          var value = this._props[key];

          if (value instanceof AnimatedNode) {
            value.__addChild(this);
          }
        }
      }
    }, {
      key: "__detach",
      value: function __detach() {
        if (this.__isNative && this._animatedView) {
          this.__disconnectAnimatedView();
        }

        for (var key in this._props) {
          var value = this._props[key];

          if (value instanceof AnimatedNode) {
            value.__removeChild(this);
          }
        }

        babelHelpers.get(AnimatedProps.prototype.__proto__ || Object.getPrototypeOf(AnimatedProps.prototype), "__detach", this).call(this);
      }
    }, {
      key: "update",
      value: function update() {
        this._callback();
      }
    }, {
      key: "__makeNative",
      value: function __makeNative() {
        if (!this.__isNative) {
          this.__isNative = true;

          for (var key in this._props) {
            var value = this._props[key];

            if (value instanceof AnimatedNode) {
              value.__makeNative();
            }
          }

          if (this._animatedView) {
            this.__connectAnimatedView();
          }
        }
      }
    }, {
      key: "setNativeView",
      value: function setNativeView(animatedView) {
        if (this._animatedView === animatedView) {
          return;
        }

        this._animatedView = animatedView;

        if (this.__isNative) {
          this.__connectAnimatedView();
        }
      }
    }, {
      key: "__connectAnimatedView",
      value: function __connectAnimatedView() {
        invariant(this.__isNative, 'Expected node to be marked as "native"');
        var nativeViewTag = ReactNative.findNodeHandle(this._animatedView);
        invariant(nativeViewTag != null, 'Unable to locate attached view in the native tree');
        NativeAnimatedHelper.API.connectAnimatedNodeToView(this.__getNativeTag(), nativeViewTag);
      }
    }, {
      key: "__disconnectAnimatedView",
      value: function __disconnectAnimatedView() {
        invariant(this.__isNative, 'Expected node to be marked as "native"');
        var nativeViewTag = ReactNative.findNodeHandle(this._animatedView);
        invariant(nativeViewTag != null, 'Unable to locate attached view in the native tree');
        NativeAnimatedHelper.API.disconnectAnimatedNodeFromView(this.__getNativeTag(), nativeViewTag);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        var propsConfig = {};

        for (var propKey in this._props) {
          var value = this._props[propKey];

          if (value instanceof AnimatedNode) {
            propsConfig[propKey] = value.__getNativeTag();
          }
        }

        return {
          type: 'props',
          props: propsConfig
        };
      }
    }]);
    return AnimatedProps;
  }(AnimatedNode);

  module.exports = AnimatedProps;
},211,[198,201,212,202,21,13],"AnimatedProps");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var AnimatedNode = _require(_dependencyMap[0], './AnimatedNode');

  var AnimatedTransform = _require(_dependencyMap[1], './AnimatedTransform');

  var AnimatedWithChildren = _require(_dependencyMap[2], './AnimatedWithChildren');

  var NativeAnimatedHelper = _require(_dependencyMap[3], '../NativeAnimatedHelper');

  var flattenStyle = _require(_dependencyMap[4], 'flattenStyle');

  var AnimatedStyle = function (_AnimatedWithChildren) {
    babelHelpers.inherits(AnimatedStyle, _AnimatedWithChildren);

    function AnimatedStyle(style) {
      babelHelpers.classCallCheck(this, AnimatedStyle);

      var _this = babelHelpers.possibleConstructorReturn(this, (AnimatedStyle.__proto__ || Object.getPrototypeOf(AnimatedStyle)).call(this));

      style = flattenStyle(style) || {};

      if (style.transform) {
        style = babelHelpers.extends({}, style, {
          transform: new AnimatedTransform(style.transform)
        });
      }

      _this._style = style;
      return _this;
    }

    babelHelpers.createClass(AnimatedStyle, [{
      key: "_walkStyleAndGetValues",
      value: function _walkStyleAndGetValues(style) {
        var updatedStyle = {};

        for (var key in style) {
          var value = style[key];

          if (value instanceof AnimatedNode) {
            if (!value.__isNative) {
              updatedStyle[key] = value.__getValue();
            }
          } else if (value && !Array.isArray(value) && typeof value === 'object') {
            updatedStyle[key] = this._walkStyleAndGetValues(value);
          } else {
            updatedStyle[key] = value;
          }
        }

        return updatedStyle;
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return this._walkStyleAndGetValues(this._style);
      }
    }, {
      key: "_walkStyleAndGetAnimatedValues",
      value: function _walkStyleAndGetAnimatedValues(style) {
        var updatedStyle = {};

        for (var key in style) {
          var value = style[key];

          if (value instanceof AnimatedNode) {
            updatedStyle[key] = value.__getAnimatedValue();
          } else if (value && !Array.isArray(value) && typeof value === 'object') {
            updatedStyle[key] = this._walkStyleAndGetAnimatedValues(value);
          }
        }

        return updatedStyle;
      }
    }, {
      key: "__getAnimatedValue",
      value: function __getAnimatedValue() {
        return this._walkStyleAndGetAnimatedValues(this._style);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        for (var key in this._style) {
          var value = this._style[key];

          if (value instanceof AnimatedNode) {
            value.__addChild(this);
          }
        }
      }
    }, {
      key: "__detach",
      value: function __detach() {
        for (var key in this._style) {
          var value = this._style[key];

          if (value instanceof AnimatedNode) {
            value.__removeChild(this);
          }
        }

        babelHelpers.get(AnimatedStyle.prototype.__proto__ || Object.getPrototypeOf(AnimatedStyle.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__makeNative",
      value: function __makeNative() {
        babelHelpers.get(AnimatedStyle.prototype.__proto__ || Object.getPrototypeOf(AnimatedStyle.prototype), "__makeNative", this).call(this);

        for (var key in this._style) {
          var value = this._style[key];

          if (value instanceof AnimatedNode) {
            value.__makeNative();
          }
        }
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        var styleConfig = {};

        for (var styleKey in this._style) {
          if (this._style[styleKey] instanceof AnimatedNode) {
            styleConfig[styleKey] = this._style[styleKey].__getNativeTag();
          }
        }

        NativeAnimatedHelper.validateStyles(styleConfig);
        return {
          type: 'style',
          style: styleConfig
        };
      }
    }]);
    return AnimatedStyle;
  }(AnimatedWithChildren);

  module.exports = AnimatedStyle;
},212,[201,213,203,202,105],"AnimatedStyle");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var AnimatedNode = _require(_dependencyMap[0], './AnimatedNode');

  var AnimatedWithChildren = _require(_dependencyMap[1], './AnimatedWithChildren');

  var NativeAnimatedHelper = _require(_dependencyMap[2], '../NativeAnimatedHelper');

  var AnimatedTransform = function (_AnimatedWithChildren) {
    babelHelpers.inherits(AnimatedTransform, _AnimatedWithChildren);

    function AnimatedTransform(transforms) {
      babelHelpers.classCallCheck(this, AnimatedTransform);

      var _this = babelHelpers.possibleConstructorReturn(this, (AnimatedTransform.__proto__ || Object.getPrototypeOf(AnimatedTransform)).call(this));

      _this._transforms = transforms;
      return _this;
    }

    babelHelpers.createClass(AnimatedTransform, [{
      key: "__makeNative",
      value: function __makeNative() {
        babelHelpers.get(AnimatedTransform.prototype.__proto__ || Object.getPrototypeOf(AnimatedTransform.prototype), "__makeNative", this).call(this);

        this._transforms.forEach(function (transform) {
          for (var key in transform) {
            var value = transform[key];

            if (value instanceof AnimatedNode) {
              value.__makeNative();
            }
          }
        });
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return this._transforms.map(function (transform) {
          var result = {};

          for (var key in transform) {
            var value = transform[key];

            if (value instanceof AnimatedNode) {
              result[key] = value.__getValue();
            } else {
              result[key] = value;
            }
          }

          return result;
        });
      }
    }, {
      key: "__getAnimatedValue",
      value: function __getAnimatedValue() {
        return this._transforms.map(function (transform) {
          var result = {};

          for (var key in transform) {
            var value = transform[key];

            if (value instanceof AnimatedNode) {
              result[key] = value.__getAnimatedValue();
            } else {
              result[key] = value;
            }
          }

          return result;
        });
      }
    }, {
      key: "__attach",
      value: function __attach() {
        var _this2 = this;

        this._transforms.forEach(function (transform) {
          for (var key in transform) {
            var value = transform[key];

            if (value instanceof AnimatedNode) {
              value.__addChild(_this2);
            }
          }
        });
      }
    }, {
      key: "__detach",
      value: function __detach() {
        var _this3 = this;

        this._transforms.forEach(function (transform) {
          for (var key in transform) {
            var value = transform[key];

            if (value instanceof AnimatedNode) {
              value.__removeChild(_this3);
            }
          }
        });

        babelHelpers.get(AnimatedTransform.prototype.__proto__ || Object.getPrototypeOf(AnimatedTransform.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        var transConfigs = [];

        this._transforms.forEach(function (transform) {
          for (var key in transform) {
            var value = transform[key];

            if (value instanceof AnimatedNode) {
              transConfigs.push({
                type: 'animated',
                property: key,
                nodeTag: value.__getNativeTag()
              });
            } else {
              transConfigs.push({
                type: 'static',
                property: key,
                value: value
              });
            }
          }
        });

        NativeAnimatedHelper.validateTransform(transConfigs);
        return {
          type: 'transform',
          transforms: transConfigs
        };
      }
    }]);
    return AnimatedTransform;
  }(AnimatedWithChildren);

  module.exports = AnimatedTransform;
},213,[201,203,202],"AnimatedTransform");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var AnimatedValue = _require(_dependencyMap[0], './AnimatedValue');

  var AnimatedNode = _require(_dependencyMap[1], './AnimatedNode');

  var AnimatedTracking = function (_AnimatedNode) {
    babelHelpers.inherits(AnimatedTracking, _AnimatedNode);

    function AnimatedTracking(value, parent, animationClass, animationConfig, callback) {
      babelHelpers.classCallCheck(this, AnimatedTracking);

      var _this = babelHelpers.possibleConstructorReturn(this, (AnimatedTracking.__proto__ || Object.getPrototypeOf(AnimatedTracking)).call(this));

      _this._value = value;
      _this._parent = parent;
      _this._animationClass = animationClass;
      _this._animationConfig = animationConfig;
      _this._callback = callback;

      _this.__attach();

      return _this;
    }

    babelHelpers.createClass(AnimatedTracking, [{
      key: "__getValue",
      value: function __getValue() {
        return this._parent.__getValue();
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._parent.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._parent.__removeChild(this);

        babelHelpers.get(AnimatedTracking.prototype.__proto__ || Object.getPrototypeOf(AnimatedTracking.prototype), "__detach", this).call(this);
      }
    }, {
      key: "update",
      value: function update() {
        this._value.animate(new this._animationClass(babelHelpers.extends({}, this._animationConfig, {
          toValue: this._animationConfig.toValue.__getValue()
        })), this._callback);
      }
    }]);
    return AnimatedTracking;
  }(AnimatedNode);

  module.exports = AnimatedTracking;
},214,[199,201],"AnimatedTracking");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var AnimatedValue = _require(_dependencyMap[0], './AnimatedValue');

  var AnimatedWithChildren = _require(_dependencyMap[1], './AnimatedWithChildren');

  var invariant = _require(_dependencyMap[2], 'fbjs/lib/invariant');

  var _uniqueId = 1;

  var AnimatedValueXY = function (_AnimatedWithChildren) {
    babelHelpers.inherits(AnimatedValueXY, _AnimatedWithChildren);

    function AnimatedValueXY(valueIn) {
      babelHelpers.classCallCheck(this, AnimatedValueXY);

      var _this = babelHelpers.possibleConstructorReturn(this, (AnimatedValueXY.__proto__ || Object.getPrototypeOf(AnimatedValueXY)).call(this));

      var value = valueIn || {
        x: 0,
        y: 0
      };

      if (typeof value.x === 'number' && typeof value.y === 'number') {
        _this.x = new AnimatedValue(value.x);
        _this.y = new AnimatedValue(value.y);
      } else {
        invariant(value.x instanceof AnimatedValue && value.y instanceof AnimatedValue, 'AnimatedValueXY must be initialized with an object of numbers or ' + 'AnimatedValues.');
        _this.x = value.x;
        _this.y = value.y;
      }

      _this._listeners = {};
      return _this;
    }

    babelHelpers.createClass(AnimatedValueXY, [{
      key: "setValue",
      value: function setValue(value) {
        this.x.setValue(value.x);
        this.y.setValue(value.y);
      }
    }, {
      key: "setOffset",
      value: function setOffset(offset) {
        this.x.setOffset(offset.x);
        this.y.setOffset(offset.y);
      }
    }, {
      key: "flattenOffset",
      value: function flattenOffset() {
        this.x.flattenOffset();
        this.y.flattenOffset();
      }
    }, {
      key: "extractOffset",
      value: function extractOffset() {
        this.x.extractOffset();
        this.y.extractOffset();
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return {
          x: this.x.__getValue(),
          y: this.y.__getValue()
        };
      }
    }, {
      key: "resetAnimation",
      value: function resetAnimation(callback) {
        this.x.resetAnimation();
        this.y.resetAnimation();
        callback && callback(this.__getValue());
      }
    }, {
      key: "stopAnimation",
      value: function stopAnimation(callback) {
        this.x.stopAnimation();
        this.y.stopAnimation();
        callback && callback(this.__getValue());
      }
    }, {
      key: "addListener",
      value: function addListener(callback) {
        var _this2 = this;

        var id = String(_uniqueId++);

        var jointCallback = function jointCallback(_ref) {
          var number = _ref.value;
          callback(_this2.__getValue());
        };

        this._listeners[id] = {
          x: this.x.addListener(jointCallback),
          y: this.y.addListener(jointCallback)
        };
        return id;
      }
    }, {
      key: "removeListener",
      value: function removeListener(id) {
        this.x.removeListener(this._listeners[id].x);
        this.y.removeListener(this._listeners[id].y);
        delete this._listeners[id];
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners() {
        this.x.removeAllListeners();
        this.y.removeAllListeners();
        this._listeners = {};
      }
    }, {
      key: "getLayout",
      value: function getLayout() {
        return {
          left: this.x,
          top: this.y
        };
      }
    }, {
      key: "getTranslateTransform",
      value: function getTranslateTransform() {
        return [{
          translateX: this.x
        }, {
          translateY: this.y
        }];
      }
    }]);
    return AnimatedValueXY;
  }(AnimatedWithChildren);

  module.exports = AnimatedValueXY;
},215,[199,203,13],"AnimatedValueXY");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var Animation = _require2(_dependencyMap[0], './Animation');

  var _require = _require2(_dependencyMap[1], '../NativeAnimatedHelper'),
      shouldUseNativeDriver = _require.shouldUseNativeDriver;

  var DecayAnimation = function (_Animation) {
    babelHelpers.inherits(DecayAnimation, _Animation);

    function DecayAnimation(config) {
      babelHelpers.classCallCheck(this, DecayAnimation);

      var _this = babelHelpers.possibleConstructorReturn(this, (DecayAnimation.__proto__ || Object.getPrototypeOf(DecayAnimation)).call(this));

      _this._deceleration = config.deceleration !== undefined ? config.deceleration : 0.998;
      _this._velocity = config.velocity;
      _this._useNativeDriver = shouldUseNativeDriver(config);
      _this.__isInteraction = config.isInteraction !== undefined ? config.isInteraction : true;
      _this.__iterations = config.iterations !== undefined ? config.iterations : 1;
      return _this;
    }

    babelHelpers.createClass(DecayAnimation, [{
      key: "__getNativeAnimationConfig",
      value: function __getNativeAnimationConfig() {
        return {
          type: 'decay',
          deceleration: this._deceleration,
          velocity: this._velocity,
          iterations: this.__iterations
        };
      }
    }, {
      key: "start",
      value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {
        this.__active = true;
        this._lastValue = fromValue;
        this._fromValue = fromValue;
        this._onUpdate = onUpdate;
        this.__onEnd = onEnd;
        this._startTime = Date.now();

        if (this._useNativeDriver) {
          this.__startNativeAnimation(animatedValue);
        } else {
          this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
        }
      }
    }, {
      key: "onUpdate",
      value: function onUpdate() {
        var now = Date.now();
        var value = this._fromValue + this._velocity / (1 - this._deceleration) * (1 - Math.exp(-(1 - this._deceleration) * (now - this._startTime)));

        this._onUpdate(value);

        if (Math.abs(this._lastValue - value) < 0.1) {
          this.__debouncedOnEnd({
            finished: true
          });

          return;
        }

        this._lastValue = value;

        if (this.__active) {
          this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
        }
      }
    }, {
      key: "stop",
      value: function stop() {
        babelHelpers.get(DecayAnimation.prototype.__proto__ || Object.getPrototypeOf(DecayAnimation.prototype), "stop", this).call(this);
        this.__active = false;
        global.cancelAnimationFrame(this._animationFrame);

        this.__debouncedOnEnd({
          finished: false
        });
      }
    }]);
    return DecayAnimation;
  }(Animation);

  module.exports = DecayAnimation;
},216,[217,202],"DecayAnimation");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var NativeAnimatedHelper = _require(_dependencyMap[0], 'NativeAnimatedHelper');

  var Animation = function () {
    function Animation() {
      babelHelpers.classCallCheck(this, Animation);
    }

    babelHelpers.createClass(Animation, [{
      key: "start",
      value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {}
    }, {
      key: "stop",
      value: function stop() {
        if (this.__nativeId) {
          NativeAnimatedHelper.API.stopAnimation(this.__nativeId);
        }
      }
    }, {
      key: "__getNativeAnimationConfig",
      value: function __getNativeAnimationConfig() {
        throw new Error('This animation type cannot be offloaded to native');
      }
    }, {
      key: "__debouncedOnEnd",
      value: function __debouncedOnEnd(result) {
        var onEnd = this.__onEnd;
        this.__onEnd = null;
        onEnd && onEnd(result);
      }
    }, {
      key: "__startNativeAnimation",
      value: function __startNativeAnimation(animatedValue) {
        animatedValue.__makeNative();

        this.__nativeId = NativeAnimatedHelper.generateNewAnimationId();
        NativeAnimatedHelper.API.startAnimatingNode(this.__nativeId, animatedValue.__getNativeTag(), this.__getNativeAnimationConfig(), this.__debouncedOnEnd.bind(this));
      }
    }]);
    return Animation;
  }();

  module.exports = Animation;
},217,[202],"Animation");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var AnimatedValue = _require2(_dependencyMap[0], '../nodes/AnimatedValue');

  var AnimatedValueXY = _require2(_dependencyMap[1], '../nodes/AnimatedValueXY');

  var Animation = _require2(_dependencyMap[2], './Animation');

  var SpringConfig = _require2(_dependencyMap[3], '../SpringConfig');

  var invariant = _require2(_dependencyMap[4], 'fbjs/lib/invariant');

  var _require = _require2(_dependencyMap[5], '../NativeAnimatedHelper'),
      shouldUseNativeDriver = _require.shouldUseNativeDriver;

  function withDefault(value, defaultValue) {
    if (value === undefined || value === null) {
      return defaultValue;
    }

    return value;
  }

  var SpringAnimation = function (_Animation) {
    babelHelpers.inherits(SpringAnimation, _Animation);

    function SpringAnimation(config) {
      babelHelpers.classCallCheck(this, SpringAnimation);

      var _this = babelHelpers.possibleConstructorReturn(this, (SpringAnimation.__proto__ || Object.getPrototypeOf(SpringAnimation)).call(this));

      _this._overshootClamping = withDefault(config.overshootClamping, false);
      _this._restDisplacementThreshold = withDefault(config.restDisplacementThreshold, 0.001);
      _this._restSpeedThreshold = withDefault(config.restSpeedThreshold, 0.001);
      _this._initialVelocity = withDefault(config.velocity, 0);
      _this._lastVelocity = withDefault(config.velocity, 0);
      _this._toValue = config.toValue;
      _this._delay = withDefault(config.delay, 0);
      _this._useNativeDriver = shouldUseNativeDriver(config);
      _this.__isInteraction = config.isInteraction !== undefined ? config.isInteraction : true;
      _this.__iterations = config.iterations !== undefined ? config.iterations : 1;

      if (config.stiffness !== undefined || config.damping !== undefined || config.mass !== undefined) {
        invariant(config.bounciness === undefined && config.speed === undefined && config.tension === undefined && config.friction === undefined, 'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one');
        _this._stiffness = withDefault(config.stiffness, 100);
        _this._damping = withDefault(config.damping, 10);
        _this._mass = withDefault(config.mass, 1);
      } else if (config.bounciness !== undefined || config.speed !== undefined) {
        invariant(config.tension === undefined && config.friction === undefined && config.stiffness === undefined && config.damping === undefined && config.mass === undefined, 'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one');
        var springConfig = SpringConfig.fromBouncinessAndSpeed(withDefault(config.bounciness, 8), withDefault(config.speed, 12));
        _this._stiffness = springConfig.stiffness;
        _this._damping = springConfig.damping;
        _this._mass = 1;
      } else {
        var _springConfig = SpringConfig.fromOrigamiTensionAndFriction(withDefault(config.tension, 40), withDefault(config.friction, 7));

        _this._stiffness = _springConfig.stiffness;
        _this._damping = _springConfig.damping;
        _this._mass = 1;
      }

      invariant(_this._stiffness > 0, 'Stiffness value must be greater than 0');
      invariant(_this._damping > 0, 'Damping value must be greater than 0');
      invariant(_this._mass > 0, 'Mass value must be greater than 0');
      return _this;
    }

    babelHelpers.createClass(SpringAnimation, [{
      key: "__getNativeAnimationConfig",
      value: function __getNativeAnimationConfig() {
        return {
          type: 'spring',
          overshootClamping: this._overshootClamping,
          restDisplacementThreshold: this._restDisplacementThreshold,
          restSpeedThreshold: this._restSpeedThreshold,
          stiffness: this._stiffness,
          damping: this._damping,
          mass: this._mass,
          initialVelocity: withDefault(this._initialVelocity, this._lastVelocity),
          toValue: this._toValue,
          iterations: this.__iterations
        };
      }
    }, {
      key: "start",
      value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {
        var _this2 = this;

        this.__active = true;
        this._startPosition = fromValue;
        this._lastPosition = this._startPosition;
        this._onUpdate = onUpdate;
        this.__onEnd = onEnd;
        this._lastTime = Date.now();
        this._frameTime = 0.0;

        if (previousAnimation instanceof SpringAnimation) {
          var internalState = previousAnimation.getInternalState();
          this._lastPosition = internalState.lastPosition;
          this._lastVelocity = internalState.lastVelocity;
          this._initialVelocity = this._lastVelocity;
          this._lastTime = internalState.lastTime;
        }

        var start = function start() {
          if (_this2._useNativeDriver) {
            _this2.__startNativeAnimation(animatedValue);
          } else {
            _this2.onUpdate();
          }
        };

        if (this._delay) {
          this._timeout = setTimeout(start, this._delay);
        } else {
          start();
        }
      }
    }, {
      key: "getInternalState",
      value: function getInternalState() {
        return {
          lastPosition: this._lastPosition,
          lastVelocity: this._lastVelocity,
          lastTime: this._lastTime
        };
      }
    }, {
      key: "onUpdate",
      value: function onUpdate() {
        var MAX_STEPS = 64;
        var now = Date.now();

        if (now > this._lastTime + MAX_STEPS) {
          now = this._lastTime + MAX_STEPS;
        }

        var deltaTime = (now - this._lastTime) / 1000;
        this._frameTime += deltaTime;
        var c = this._damping;
        var m = this._mass;
        var k = this._stiffness;
        var v0 = -this._initialVelocity;
        var zeta = c / (2 * Math.sqrt(k * m));
        var omega0 = Math.sqrt(k / m);
        var omega1 = omega0 * Math.sqrt(1.0 - zeta * zeta);
        var x0 = this._toValue - this._startPosition;
        var position = 0.0;
        var velocity = 0.0;
        var t = this._frameTime;

        if (zeta < 1) {
          var envelope = Math.exp(-zeta * omega0 * t);
          position = this._toValue - envelope * ((v0 + zeta * omega0 * x0) / omega1 * Math.sin(omega1 * t) + x0 * Math.cos(omega1 * t));
          velocity = zeta * omega0 * envelope * (Math.sin(omega1 * t) * (v0 + zeta * omega0 * x0) / omega1 + x0 * Math.cos(omega1 * t)) - envelope * (Math.cos(omega1 * t) * (v0 + zeta * omega0 * x0) - omega1 * x0 * Math.sin(omega1 * t));
        } else {
          var _envelope = Math.exp(-omega0 * t);

          position = this._toValue - _envelope * (x0 + (v0 + omega0 * x0) * t);
          velocity = _envelope * (v0 * (t * omega0 - 1) + t * x0 * (omega0 * omega0));
        }

        this._lastTime = now;
        this._lastPosition = position;
        this._lastVelocity = velocity;

        this._onUpdate(position);

        if (!this.__active) {
          return;
        }

        var isOvershooting = false;

        if (this._overshootClamping && this._stiffness !== 0) {
          if (this._startPosition < this._toValue) {
            isOvershooting = position > this._toValue;
          } else {
            isOvershooting = position < this._toValue;
          }
        }

        var isVelocity = Math.abs(velocity) <= this._restSpeedThreshold;

        var isDisplacement = true;

        if (this._stiffness !== 0) {
          isDisplacement = Math.abs(this._toValue - position) <= this._restDisplacementThreshold;
        }

        if (isOvershooting || isVelocity && isDisplacement) {
          if (this._stiffness !== 0) {
            this._lastPosition = this._toValue;
            this._lastVelocity = 0;

            this._onUpdate(this._toValue);
          }

          this.__debouncedOnEnd({
            finished: true
          });

          return;
        }

        this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
      }
    }, {
      key: "stop",
      value: function stop() {
        babelHelpers.get(SpringAnimation.prototype.__proto__ || Object.getPrototypeOf(SpringAnimation.prototype), "stop", this).call(this);
        this.__active = false;
        clearTimeout(this._timeout);
        global.cancelAnimationFrame(this._animationFrame);

        this.__debouncedOnEnd({
          finished: false
        });
      }
    }]);
    return SpringAnimation;
  }(Animation);

  module.exports = SpringAnimation;
},218,[199,215,217,219,13,202],"SpringAnimation");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  function stiffnessFromOrigamiValue(oValue) {
    return (oValue - 30) * 3.62 + 194;
  }

  function dampingFromOrigamiValue(oValue) {
    return (oValue - 8) * 3 + 25;
  }

  function fromOrigamiTensionAndFriction(tension, friction) {
    return {
      stiffness: stiffnessFromOrigamiValue(tension),
      damping: dampingFromOrigamiValue(friction)
    };
  }

  function fromBouncinessAndSpeed(bounciness, speed) {
    function normalize(value, startValue, endValue) {
      return (value - startValue) / (endValue - startValue);
    }

    function projectNormal(n, start, end) {
      return start + n * (end - start);
    }

    function linearInterpolation(t, start, end) {
      return t * end + (1 - t) * start;
    }

    function quadraticOutInterpolation(t, start, end) {
      return linearInterpolation(2 * t - t * t, start, end);
    }

    function b3Friction1(x) {
      return 0.0007 * Math.pow(x, 3) - 0.031 * Math.pow(x, 2) + 0.64 * x + 1.28;
    }

    function b3Friction2(x) {
      return 0.000044 * Math.pow(x, 3) - 0.006 * Math.pow(x, 2) + 0.36 * x + 2;
    }

    function b3Friction3(x) {
      return 0.00000045 * Math.pow(x, 3) - 0.000332 * Math.pow(x, 2) + 0.1078 * x + 5.84;
    }

    function b3Nobounce(tension) {
      if (tension <= 18) {
        return b3Friction1(tension);
      } else if (tension > 18 && tension <= 44) {
        return b3Friction2(tension);
      } else {
        return b3Friction3(tension);
      }
    }

    var b = normalize(bounciness / 1.7, 0, 20);
    b = projectNormal(b, 0, 0.8);
    var s = normalize(speed / 1.7, 0, 20);
    var bouncyTension = projectNormal(s, 0.5, 200);
    var bouncyFriction = quadraticOutInterpolation(b, b3Nobounce(bouncyTension), 0.01);
    return {
      stiffness: stiffnessFromOrigamiValue(bouncyTension),
      damping: dampingFromOrigamiValue(bouncyFriction)
    };
  }

  module.exports = {
    fromOrigamiTensionAndFriction: fromOrigamiTensionAndFriction,
    fromBouncinessAndSpeed: fromBouncinessAndSpeed
  };
},219,[],"SpringConfig");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var AnimatedValue = _require2(_dependencyMap[0], '../nodes/AnimatedValue');

  var AnimatedValueXY = _require2(_dependencyMap[1], '../nodes/AnimatedValueXY');

  var Animation = _require2(_dependencyMap[2], './Animation');

  var _require = _require2(_dependencyMap[3], '../NativeAnimatedHelper'),
      shouldUseNativeDriver = _require.shouldUseNativeDriver;

  var _easeInOut = void 0;

  function easeInOut() {
    if (!_easeInOut) {
      var Easing = _require2(_dependencyMap[4], 'Easing');

      _easeInOut = Easing.inOut(Easing.ease);
    }

    return _easeInOut;
  }

  var TimingAnimation = function (_Animation) {
    babelHelpers.inherits(TimingAnimation, _Animation);

    function TimingAnimation(config) {
      babelHelpers.classCallCheck(this, TimingAnimation);

      var _this = babelHelpers.possibleConstructorReturn(this, (TimingAnimation.__proto__ || Object.getPrototypeOf(TimingAnimation)).call(this));

      _this._toValue = config.toValue;
      _this._easing = config.easing !== undefined ? config.easing : easeInOut();
      _this._duration = config.duration !== undefined ? config.duration : 500;
      _this._delay = config.delay !== undefined ? config.delay : 0;
      _this.__iterations = config.iterations !== undefined ? config.iterations : 1;
      _this.__isInteraction = config.isInteraction !== undefined ? config.isInteraction : true;
      _this._useNativeDriver = shouldUseNativeDriver(config);
      return _this;
    }

    babelHelpers.createClass(TimingAnimation, [{
      key: "__getNativeAnimationConfig",
      value: function __getNativeAnimationConfig() {
        var frameDuration = 1000.0 / 60.0;
        var frames = [];

        for (var dt = 0.0; dt < this._duration; dt += frameDuration) {
          frames.push(this._easing(dt / this._duration));
        }

        frames.push(this._easing(1));
        return {
          type: 'frames',
          frames: frames,
          toValue: this._toValue,
          iterations: this.__iterations
        };
      }
    }, {
      key: "start",
      value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {
        var _this2 = this;

        this.__active = true;
        this._fromValue = fromValue;
        this._onUpdate = onUpdate;
        this.__onEnd = onEnd;

        var start = function start() {
          if (_this2._duration === 0 && !_this2._useNativeDriver) {
            _this2._onUpdate(_this2._toValue);

            _this2.__debouncedOnEnd({
              finished: true
            });
          } else {
            _this2._startTime = Date.now();

            if (_this2._useNativeDriver) {
              _this2.__startNativeAnimation(animatedValue);
            } else {
              _this2._animationFrame = requestAnimationFrame(_this2.onUpdate.bind(_this2));
            }
          }
        };

        if (this._delay) {
          this._timeout = setTimeout(start, this._delay);
        } else {
          start();
        }
      }
    }, {
      key: "onUpdate",
      value: function onUpdate() {
        var now = Date.now();

        if (now >= this._startTime + this._duration) {
          if (this._duration === 0) {
            this._onUpdate(this._toValue);
          } else {
            this._onUpdate(this._fromValue + this._easing(1) * (this._toValue - this._fromValue));
          }

          this.__debouncedOnEnd({
            finished: true
          });

          return;
        }

        this._onUpdate(this._fromValue + this._easing((now - this._startTime) / this._duration) * (this._toValue - this._fromValue));

        if (this.__active) {
          this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
        }
      }
    }, {
      key: "stop",
      value: function stop() {
        babelHelpers.get(TimingAnimation.prototype.__proto__ || Object.getPrototypeOf(TimingAnimation.prototype), "stop", this).call(this);
        this.__active = false;
        clearTimeout(this._timeout);
        global.cancelAnimationFrame(this._animationFrame);

        this.__debouncedOnEnd({
          finished: false
        });
      }
    }]);
    return TimingAnimation;
  }(Animation);

  module.exports = TimingAnimation;
},220,[199,215,217,202,221],"TimingAnimation");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _ease = void 0;

  var Easing = function () {
    function Easing() {
      babelHelpers.classCallCheck(this, Easing);
    }

    babelHelpers.createClass(Easing, null, [{
      key: "step0",
      value: function step0(n) {
        return n > 0 ? 1 : 0;
      }
    }, {
      key: "step1",
      value: function step1(n) {
        return n >= 1 ? 1 : 0;
      }
    }, {
      key: "linear",
      value: function linear(t) {
        return t;
      }
    }, {
      key: "ease",
      value: function ease(t) {
        if (!_ease) {
          _ease = Easing.bezier(0.42, 0, 1, 1);
        }

        return _ease(t);
      }
    }, {
      key: "quad",
      value: function quad(t) {
        return t * t;
      }
    }, {
      key: "cubic",
      value: function cubic(t) {
        return t * t * t;
      }
    }, {
      key: "poly",
      value: function poly(n) {
        return function (t) {
          return Math.pow(t, n);
        };
      }
    }, {
      key: "sin",
      value: function sin(t) {
        return 1 - Math.cos(t * Math.PI / 2);
      }
    }, {
      key: "circle",
      value: function circle(t) {
        return 1 - Math.sqrt(1 - t * t);
      }
    }, {
      key: "exp",
      value: function exp(t) {
        return Math.pow(2, 10 * (t - 1));
      }
    }, {
      key: "elastic",
      value: function elastic() {
        var bounciness = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
        var p = bounciness * Math.PI;
        return function (t) {
          return 1 - Math.pow(Math.cos(t * Math.PI / 2), 3) * Math.cos(t * p);
        };
      }
    }, {
      key: "back",
      value: function back(s) {
        if (s === undefined) {
          s = 1.70158;
        }

        return function (t) {
          return t * t * ((s + 1) * t - s);
        };
      }
    }, {
      key: "bounce",
      value: function bounce(t) {
        if (t < 1 / 2.75) {
          return 7.5625 * t * t;
        }

        if (t < 2 / 2.75) {
          t -= 1.5 / 2.75;
          return 7.5625 * t * t + 0.75;
        }

        if (t < 2.5 / 2.75) {
          t -= 2.25 / 2.75;
          return 7.5625 * t * t + 0.9375;
        }

        t -= 2.625 / 2.75;
        return 7.5625 * t * t + 0.984375;
      }
    }, {
      key: "bezier",
      value: function bezier(x1, y1, x2, y2) {
        var _bezier = _require(_dependencyMap[0], 'bezier');

        return _bezier(x1, y1, x2, y2);
      }
    }, {
      key: "in",
      value: function _in(easing) {
        return easing;
      }
    }, {
      key: "out",
      value: function out(easing) {
        return function (t) {
          return 1 - easing(1 - t);
        };
      }
    }, {
      key: "inOut",
      value: function inOut(easing) {
        return function (t) {
          if (t < 0.5) {
            return easing(t * 2) / 2;
          }

          return 1 - easing((1 - t) * 2) / 2;
        };
      }
    }]);
    return Easing;
  }();

  module.exports = Easing;
},221,[222],"Easing");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var NEWTON_ITERATIONS = 4;
  var NEWTON_MIN_SLOPE = 0.001;
  var SUBDIVISION_PRECISION = 0.0000001;
  var SUBDIVISION_MAX_ITERATIONS = 10;
  var kSplineTableSize = 11;
  var kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);
  var float32ArraySupported = typeof Float32Array === 'function';

  function A(aA1, aA2) {
    return 1.0 - 3.0 * aA2 + 3.0 * aA1;
  }

  function B(aA1, aA2) {
    return 3.0 * aA2 - 6.0 * aA1;
  }

  function C(aA1) {
    return 3.0 * aA1;
  }

  function calcBezier(aT, aA1, aA2) {
    return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;
  }

  function getSlope(aT, aA1, aA2) {
    return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);
  }

  function binarySubdivide(aX, aA, aB, mX1, mX2) {
    var currentX,
        currentT,
        i = 0;

    do {
      currentT = aA + (aB - aA) / 2.0;
      currentX = calcBezier(currentT, mX1, mX2) - aX;

      if (currentX > 0.0) {
        aB = currentT;
      } else {
        aA = currentT;
      }
    } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);

    return currentT;
  }

  function newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {
    for (var i = 0; i < NEWTON_ITERATIONS; ++i) {
      var currentSlope = getSlope(aGuessT, mX1, mX2);

      if (currentSlope === 0.0) {
        return aGuessT;
      }

      var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
      aGuessT -= currentX / currentSlope;
    }

    return aGuessT;
  }

  module.exports = function bezier(mX1, mY1, mX2, mY2) {
    if (!(0 <= mX1 && mX1 <= 1 && 0 <= mX2 && mX2 <= 1)) {
      throw new Error('bezier x values must be in [0, 1] range');
    }

    var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);

    if (mX1 !== mY1 || mX2 !== mY2) {
      for (var i = 0; i < kSplineTableSize; ++i) {
        sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);
      }
    }

    function getTForX(aX) {
      var intervalStart = 0.0;
      var currentSample = 1;
      var lastSample = kSplineTableSize - 1;

      for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {
        intervalStart += kSampleStepSize;
      }

      --currentSample;
      var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);
      var guessForT = intervalStart + dist * kSampleStepSize;
      var initialSlope = getSlope(guessForT, mX1, mX2);

      if (initialSlope >= NEWTON_MIN_SLOPE) {
        return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
      } else if (initialSlope === 0.0) {
        return guessForT;
      } else {
        return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);
      }
    }

    return function BezierEasing(x) {
      if (mX1 === mY1 && mX2 === mY2) {
        return x;
      }

      if (x === 0) {
        return 0;
      }

      if (x === 1) {
        return 1;
      }

      return calcBezier(getTForX(x), mY1, mY2);
    };
  };
},222,[],"bezier");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-native/Libraries/Animated/src/createAnimatedComponent.js";

  var _require = _require2(_dependencyMap[0], './AnimatedEvent'),
      AnimatedEvent = _require.AnimatedEvent;

  var AnimatedProps = _require2(_dependencyMap[1], './nodes/AnimatedProps');

  var React = _require2(_dependencyMap[2], 'React');

  var ViewStylePropTypes = _require2(_dependencyMap[3], 'ViewStylePropTypes');

  function createAnimatedComponent(Component) {
    var _class, _temp;

    var AnimatedComponent = (_temp = _class = function (_React$Component) {
      babelHelpers.inherits(AnimatedComponent, _React$Component);

      function AnimatedComponent(props) {
        babelHelpers.classCallCheck(this, AnimatedComponent);

        var _this = babelHelpers.possibleConstructorReturn(this, (AnimatedComponent.__proto__ || Object.getPrototypeOf(AnimatedComponent)).call(this, props));

        _this._invokeAnimatedPropsCallbackOnMount = false;
        _this._eventDetachers = [];

        _this._animatedPropsCallback = function () {
          if (_this._component == null) {
            _this._invokeAnimatedPropsCallbackOnMount = true;
          } else if (AnimatedComponent.__skipSetNativeProps_FOR_TESTS_ONLY || typeof _this._component.setNativeProps !== 'function') {
            _this.forceUpdate();
          } else if (!_this._propsAnimated.__isNative) {
            _this._component.setNativeProps(_this._propsAnimated.__getAnimatedValue());
          } else {
            throw new Error('Attempting to run JS driven animation on animated ' + 'node that has been moved to "native" earlier by starting an ' + 'animation with `useNativeDriver: true`');
          }
        };

        _this._setComponentRef = _this._setComponentRef.bind(_this);
        return _this;
      }

      babelHelpers.createClass(AnimatedComponent, [{
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this._propsAnimated && this._propsAnimated.__detach();

          this._detachNativeEvents();
        }
      }, {
        key: "setNativeProps",
        value: function setNativeProps(props) {
          this._component.setNativeProps(props);
        }
      }, {
        key: "UNSAFE_componentWillMount",
        value: function UNSAFE_componentWillMount() {
          this._attachProps(this.props);
        }
      }, {
        key: "componentDidMount",
        value: function componentDidMount() {
          if (this._invokeAnimatedPropsCallbackOnMount) {
            this._invokeAnimatedPropsCallbackOnMount = false;

            this._animatedPropsCallback();
          }

          this._propsAnimated.setNativeView(this._component);

          this._attachNativeEvents();
        }
      }, {
        key: "_attachNativeEvents",
        value: function _attachNativeEvents() {
          var _this2 = this;

          var scrollableNode = this._component.getScrollableNode ? this._component.getScrollableNode() : this._component;

          var _loop = function _loop(key) {
            var prop = _this2.props[key];

            if (prop instanceof AnimatedEvent && prop.__isNative) {
              prop.__attach(scrollableNode, key);

              _this2._eventDetachers.push(function () {
                return prop.__detach(scrollableNode, key);
              });
            }
          };

          for (var key in this.props) {
            _loop(key);
          }
        }
      }, {
        key: "_detachNativeEvents",
        value: function _detachNativeEvents() {
          this._eventDetachers.forEach(function (remove) {
            return remove();
          });

          this._eventDetachers = [];
        }
      }, {
        key: "_attachProps",
        value: function _attachProps(nextProps) {
          var oldPropsAnimated = this._propsAnimated;
          this._propsAnimated = new AnimatedProps(nextProps, this._animatedPropsCallback);
          oldPropsAnimated && oldPropsAnimated.__detach();
        }
      }, {
        key: "UNSAFE_componentWillReceiveProps",
        value: function UNSAFE_componentWillReceiveProps(newProps) {
          this._attachProps(newProps);
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate(prevProps) {
          if (this._component !== this._prevComponent) {
            this._propsAnimated.setNativeView(this._component);
          }

          if (this._component !== this._prevComponent || prevProps !== this.props) {
            this._detachNativeEvents();

            this._attachNativeEvents();
          }
        }
      }, {
        key: "render",
        value: function render() {
          var props = this._propsAnimated.__getValue();

          return React.createElement(Component, babelHelpers.extends({}, props, {
            ref: this._setComponentRef,
            collapsable: this._propsAnimated.__isNative ? false : props.collapsable,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 147
            }
          }));
        }
      }, {
        key: "_setComponentRef",
        value: function _setComponentRef(c) {
          this._prevComponent = this._component;
          this._component = c;
        }
      }, {
        key: "getNode",
        value: function getNode() {
          return this._component;
        }
      }]);
      return AnimatedComponent;
    }(React.Component), _class.__skipSetNativeProps_FOR_TESTS_ONLY = false, _temp);
    var propTypes = Component.propTypes;
    AnimatedComponent.propTypes = {
      style: function style(props, propName, componentName) {
        if (!propTypes) {
          return;
        }

        for (var key in ViewStylePropTypes) {
          if (!propTypes[key] && props[key] !== undefined) {
            console.warn('You are setting the style `{ ' + key + ': ... }` as a prop. You ' + 'should nest it in a style object. ' + 'E.g. `{ style: { ' + key + ': ... } }`');
          }
        }
      }
    };
    return AnimatedComponent;
  }

  module.exports = createAnimatedComponent;
},223,[198,211,131,148],"createAnimatedComponent");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-native/Libraries/Image/Image.ios.js";

  var EdgeInsetsPropType = _require(_dependencyMap[0], 'EdgeInsetsPropType');

  var ImageResizeMode = _require(_dependencyMap[1], 'ImageResizeMode');

  var ImageSourcePropType = _require(_dependencyMap[2], 'ImageSourcePropType');

  var ImageStylePropTypes = _require(_dependencyMap[3], 'ImageStylePropTypes');

  var NativeMethodsMixin = _require(_dependencyMap[4], 'NativeMethodsMixin');

  var NativeModules = _require(_dependencyMap[5], 'NativeModules');

  var React = _require(_dependencyMap[6], 'React');

  var PropTypes = _require(_dependencyMap[7], 'prop-types');

  var ReactNativeViewAttributes = _require(_dependencyMap[8], 'ReactNativeViewAttributes');

  var StyleSheet = _require(_dependencyMap[9], 'StyleSheet');

  var StyleSheetPropType = _require(_dependencyMap[10], 'StyleSheetPropType');

  var createReactClass = _require(_dependencyMap[11], 'create-react-class');

  var flattenStyle = _require(_dependencyMap[12], 'flattenStyle');

  var requireNativeComponent = _require(_dependencyMap[13], 'requireNativeComponent');

  var resolveAssetSource = _require(_dependencyMap[14], 'resolveAssetSource');

  var ImageViewManager = NativeModules.ImageViewManager;
  var Image = createReactClass({
    displayName: 'Image',
    propTypes: {
      style: StyleSheetPropType(ImageStylePropTypes),
      source: ImageSourcePropType,
      defaultSource: PropTypes.oneOfType([PropTypes.shape({
        uri: PropTypes.string,
        width: PropTypes.number,
        height: PropTypes.number,
        scale: PropTypes.number
      }), PropTypes.number]),
      accessible: PropTypes.bool,
      accessibilityLabel: PropTypes.node,
      blurRadius: PropTypes.number,
      capInsets: EdgeInsetsPropType,
      resizeMethod: PropTypes.oneOf(['auto', 'resize', 'scale']),
      resizeMode: PropTypes.oneOf(['cover', 'contain', 'stretch', 'repeat', 'center']),
      testID: PropTypes.string,
      onLayout: PropTypes.func,
      onLoadStart: PropTypes.func,
      onProgress: PropTypes.func,
      onError: PropTypes.func,
      onPartialLoad: PropTypes.func,
      onLoad: PropTypes.func,
      onLoadEnd: PropTypes.func
    },
    statics: {
      resizeMode: ImageResizeMode,
      getSize: function getSize(uri, success, failure) {
        ImageViewManager.getSize(uri, success, failure || function () {
          console.warn('Failed to get size for image: ' + uri);
        });
      },
      prefetch: function prefetch(url) {
        return ImageViewManager.prefetchImage(url);
      },
      resolveAssetSource: resolveAssetSource
    },
    mixins: [NativeMethodsMixin],
    viewConfig: {
      uiViewClassName: 'UIView',
      validAttributes: ReactNativeViewAttributes.UIView
    },
    render: function render() {
      var source = resolveAssetSource(this.props.source) || {
        uri: undefined,
        width: undefined,
        height: undefined
      };
      var sources = void 0;
      var style = void 0;

      if (Array.isArray(source)) {
        style = flattenStyle([styles.base, this.props.style]) || {};
        sources = source;
      } else {
        var _width = source.width,
            _height = source.height,
            uri = source.uri;
        style = flattenStyle([{
          width: _width,
          height: _height
        }, styles.base, this.props.style]) || {};
        sources = [source];

        if (uri === '') {
          console.warn('source.uri should not be an empty string');
        }
      }

      var resizeMode = this.props.resizeMode || (style || {}).resizeMode || 'cover';
      var tintColor = (style || {}).tintColor;

      if (this.props.src) {
        console.warn('The <Image> component requires a `source` property rather than `src`.');
      }

      if (this.props.children) {
        throw new Error('The <Image> component cannot contain children. If you want to render content on top of the image, consider using the <ImageBackground> component or absolute positioning.');
      }

      return React.createElement(RCTImageView, babelHelpers.extends({}, this.props, {
        style: style,
        resizeMode: resizeMode,
        tintColor: tintColor,
        source: sources,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 249
        }
      }));
    }
  });
  var styles = StyleSheet.create({
    base: {
      overflow: 'hidden'
    }
  });
  var RCTImageView = requireNativeComponent('RCTImageView', Image);
  module.exports = Image;
},224,[156,138,225,137,128,15,131,141,154,132,163,166,105,168,174],"Image");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var PropTypes = _require(_dependencyMap[0], 'prop-types');

  var ImageURISourcePropType = PropTypes.shape({
    uri: PropTypes.string,
    bundle: PropTypes.string,
    method: PropTypes.string,
    headers: PropTypes.objectOf(PropTypes.string),
    body: PropTypes.string,
    cache: PropTypes.oneOf(['default', 'reload', 'force-cache', 'only-if-cached']),
    width: PropTypes.number,
    height: PropTypes.number,
    scale: PropTypes.number
  });
  var ImageSourcePropType = PropTypes.oneOfType([ImageURISourcePropType, PropTypes.number, PropTypes.arrayOf(ImageURISourcePropType)]);
  module.exports = ImageSourcePropType;
},225,[141],"ImageSourcePropType");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-native/Libraries/Components/ScrollView/ScrollView.js";

  var Animated = _require(_dependencyMap[0], 'Animated');

  var ColorPropType = _require(_dependencyMap[1], 'ColorPropType');

  var EdgeInsetsPropType = _require(_dependencyMap[2], 'EdgeInsetsPropType');

  var Platform = _require(_dependencyMap[3], 'Platform');

  var PointPropType = _require(_dependencyMap[4], 'PointPropType');

  var PropTypes = _require(_dependencyMap[5], 'prop-types');

  var React = _require(_dependencyMap[6], 'React');

  var ReactNative = _require(_dependencyMap[7], 'ReactNative');

  var ScrollResponder = _require(_dependencyMap[8], 'ScrollResponder');

  var ScrollViewStickyHeader = _require(_dependencyMap[9], 'ScrollViewStickyHeader');

  var StyleSheet = _require(_dependencyMap[10], 'StyleSheet');

  var StyleSheetPropType = _require(_dependencyMap[11], 'StyleSheetPropType');

  var View = _require(_dependencyMap[12], 'View');

  var ViewPropTypes = _require(_dependencyMap[13], 'ViewPropTypes');

  var ViewStylePropTypes = _require(_dependencyMap[14], 'ViewStylePropTypes');

  var createReactClass = _require(_dependencyMap[15], 'create-react-class');

  var dismissKeyboard = _require(_dependencyMap[16], 'dismissKeyboard');

  var flattenStyle = _require(_dependencyMap[17], 'flattenStyle');

  var invariant = _require(_dependencyMap[18], 'fbjs/lib/invariant');

  var processDecelerationRate = _require(_dependencyMap[19], 'processDecelerationRate');

  var requireNativeComponent = _require(_dependencyMap[20], 'requireNativeComponent');

  var warning = _require(_dependencyMap[21], 'fbjs/lib/warning');

  var resolveAssetSource = _require(_dependencyMap[22], 'resolveAssetSource');

  var ScrollView = createReactClass({
    displayName: 'ScrollView',
    propTypes: babelHelpers.extends({}, ViewPropTypes, {
      automaticallyAdjustContentInsets: PropTypes.bool,
      contentInset: EdgeInsetsPropType,
      contentOffset: PointPropType,
      bounces: PropTypes.bool,
      bouncesZoom: PropTypes.bool,
      alwaysBounceHorizontal: PropTypes.bool,
      alwaysBounceVertical: PropTypes.bool,
      centerContent: PropTypes.bool,
      contentContainerStyle: StyleSheetPropType(ViewStylePropTypes),
      decelerationRate: PropTypes.oneOfType([PropTypes.oneOf(['fast', 'normal']), PropTypes.number]),
      horizontal: PropTypes.bool,
      indicatorStyle: PropTypes.oneOf(['default', 'black', 'white']),
      invertStickyHeaders: PropTypes.bool,
      directionalLockEnabled: PropTypes.bool,
      canCancelContentTouches: PropTypes.bool,
      keyboardDismissMode: PropTypes.oneOf(['none', 'on-drag', 'interactive']),
      keyboardShouldPersistTaps: PropTypes.oneOf(['always', 'never', 'handled', false, true]),
      maintainVisibleContentPosition: PropTypes.shape({
        minIndexForVisible: PropTypes.number.isRequired,
        autoscrollToTopThreshold: PropTypes.number
      }),
      maximumZoomScale: PropTypes.number,
      minimumZoomScale: PropTypes.number,
      onMomentumScrollBegin: PropTypes.func,
      onMomentumScrollEnd: PropTypes.func,
      onScroll: PropTypes.func,
      onScrollBeginDrag: PropTypes.func,
      onScrollEndDrag: PropTypes.func,
      onContentSizeChange: PropTypes.func,
      pagingEnabled: PropTypes.bool,
      pinchGestureEnabled: PropTypes.bool,
      scrollEnabled: PropTypes.bool,
      scrollEventThrottle: PropTypes.number,
      scrollIndicatorInsets: EdgeInsetsPropType,
      scrollsToTop: PropTypes.bool,
      showsHorizontalScrollIndicator: PropTypes.bool,
      showsVerticalScrollIndicator: PropTypes.bool,
      stickyHeaderIndices: PropTypes.arrayOf(PropTypes.number),
      snapToInterval: PropTypes.number,
      snapToAlignment: PropTypes.oneOf(['start', 'center', 'end']),
      removeClippedSubviews: PropTypes.bool,
      zoomScale: PropTypes.number,
      contentInsetAdjustmentBehavior: PropTypes.oneOf(['automatic', 'scrollableAxes', 'never', 'always']),
      refreshControl: PropTypes.element,
      endFillColor: ColorPropType,
      scrollPerfTag: PropTypes.string,
      overScrollMode: PropTypes.oneOf(['auto', 'always', 'never']),
      DEPRECATED_sendUpdatedChildFrames: PropTypes.bool,
      scrollBarThumbImage: PropTypes.oneOfType([PropTypes.shape({
        uri: PropTypes.string
      }), PropTypes.number])
    }),
    mixins: [ScrollResponder.Mixin],
    _scrollAnimatedValue: new Animated.Value(0),
    _scrollAnimatedValueAttachment: null,
    _stickyHeaderRefs: new Map(),
    _headerLayoutYs: new Map(),
    getInitialState: function getInitialState() {
      return babelHelpers.extends({}, this.scrollResponderMixinGetInitialState(), {
        layoutHeight: null
      });
    },
    UNSAFE_componentWillMount: function UNSAFE_componentWillMount() {
      this._scrollAnimatedValue = new Animated.Value(this.props.contentOffset ? this.props.contentOffset.y : 0);

      this._scrollAnimatedValue.setOffset(this.props.contentInset ? this.props.contentInset.top : 0);

      this._stickyHeaderRefs = new Map();
      this._headerLayoutYs = new Map();
    },
    componentDidMount: function componentDidMount() {
      this._updateAnimatedNodeAttachment();
    },
    componentDidUpdate: function componentDidUpdate() {
      this._updateAnimatedNodeAttachment();
    },
    componentWillUnmount: function componentWillUnmount() {
      if (this._scrollAnimatedValueAttachment) {
        this._scrollAnimatedValueAttachment.detach();
      }
    },
    setNativeProps: function setNativeProps(props) {
      this._scrollViewRef && this._scrollViewRef.setNativeProps(props);
    },
    getScrollResponder: function getScrollResponder() {
      return this;
    },
    getScrollableNode: function getScrollableNode() {
      return ReactNative.findNodeHandle(this._scrollViewRef);
    },
    getInnerViewNode: function getInnerViewNode() {
      return ReactNative.findNodeHandle(this._innerViewRef);
    },
    scrollTo: function scrollTo(y, x, animated) {
      if (typeof y === 'number') {
        console.warn('`scrollTo(y, x, animated)` is deprecated. Use `scrollTo({x: 5, y: 5, ' + 'animated: true})` instead.');
      } else {
        var _ref = y || {};

        x = _ref.x;
        y = _ref.y;
        animated = _ref.animated;
      }

      this.getScrollResponder().scrollResponderScrollTo({
        x: x || 0,
        y: y || 0,
        animated: animated !== false
      });
    },
    scrollToEnd: function scrollToEnd(options) {
      var animated = (options && options.animated) !== false;
      this.getScrollResponder().scrollResponderScrollToEnd({
        animated: animated
      });
    },
    scrollWithoutAnimationTo: function scrollWithoutAnimationTo() {
      var y = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var x = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      console.warn('`scrollWithoutAnimationTo` is deprecated. Use `scrollTo` instead');
      this.scrollTo({
        x: x,
        y: y,
        animated: false
      });
    },
    flashScrollIndicators: function flashScrollIndicators() {
      this.getScrollResponder().scrollResponderFlashScrollIndicators();
    },
    _getKeyForIndex: function _getKeyForIndex(index, childArray) {
      var child = childArray[index];
      return child && child.key;
    },
    _updateAnimatedNodeAttachment: function _updateAnimatedNodeAttachment() {
      if (this._scrollAnimatedValueAttachment) {
        this._scrollAnimatedValueAttachment.detach();
      }

      if (this.props.stickyHeaderIndices && this.props.stickyHeaderIndices.length > 0) {
        this._scrollAnimatedValueAttachment = Animated.attachNativeEvent(this._scrollViewRef, 'onScroll', [{
          nativeEvent: {
            contentOffset: {
              y: this._scrollAnimatedValue
            }
          }
        }]);
      }
    },
    _setStickyHeaderRef: function _setStickyHeaderRef(key, ref) {
      if (ref) {
        this._stickyHeaderRefs.set(key, ref);
      } else {
        this._stickyHeaderRefs.delete(key);
      }
    },
    _onStickyHeaderLayout: function _onStickyHeaderLayout(index, event, key) {
      if (!this.props.stickyHeaderIndices) {
        return;
      }

      var childArray = React.Children.toArray(this.props.children);

      if (key !== this._getKeyForIndex(index, childArray)) {
        return;
      }

      var layoutY = event.nativeEvent.layout.y;

      this._headerLayoutYs.set(key, layoutY);

      var indexOfIndex = this.props.stickyHeaderIndices.indexOf(index);
      var previousHeaderIndex = this.props.stickyHeaderIndices[indexOfIndex - 1];

      if (previousHeaderIndex != null) {
        var previousHeader = this._stickyHeaderRefs.get(this._getKeyForIndex(previousHeaderIndex, childArray));

        previousHeader && previousHeader.setNextHeaderY(layoutY);
      }
    },
    _handleScroll: function _handleScroll(e) {
      if (__DEV__) {
        if (this.props.onScroll && this.props.scrollEventThrottle == null && Platform.OS === 'ios') {
          console.log('You specified `onScroll` on a <ScrollView> but not ' + '`scrollEventThrottle`. You will only receive one event. ' + 'Using `16` you get all the events but be aware that it may ' + 'cause frame drops, use a bigger number if you don\'t need as ' + 'much precision.');
        }
      }

      if (Platform.OS === 'android') {
        if (this.props.keyboardDismissMode === 'on-drag') {
          dismissKeyboard();
        }
      }

      this.scrollResponderHandleScroll(e);
    },
    _handleLayout: function _handleLayout(e) {
      if (this.props.invertStickyHeaders) {
        this.setState({
          layoutHeight: e.nativeEvent.layout.height
        });
      }

      if (this.props.onLayout) {
        this.props.onLayout(e);
      }
    },
    _handleContentOnLayout: function _handleContentOnLayout(e) {
      var _e$nativeEvent$layout = e.nativeEvent.layout,
          width = _e$nativeEvent$layout.width,
          height = _e$nativeEvent$layout.height;
      this.props.onContentSizeChange && this.props.onContentSizeChange(width, height);
    },
    _scrollViewRef: null,
    _setScrollViewRef: function _setScrollViewRef(ref) {
      this._scrollViewRef = ref;
    },
    _innerViewRef: null,
    _setInnerViewRef: function _setInnerViewRef(ref) {
      this._innerViewRef = ref;
    },
    render: function render() {
      var _this = this;

      var ScrollViewClass = void 0;
      var ScrollContentContainerViewClass = void 0;

      if (Platform.OS === 'android') {
        if (this.props.horizontal) {
          ScrollViewClass = AndroidHorizontalScrollView;
          ScrollContentContainerViewClass = AndroidHorizontalScrollContentView;
        } else {
          ScrollViewClass = AndroidScrollView;
          ScrollContentContainerViewClass = View;
        }
      } else {
        ScrollViewClass = RCTScrollView;
        ScrollContentContainerViewClass = RCTScrollContentView;
        warning(!this.props.snapToInterval || !this.props.pagingEnabled, 'snapToInterval is currently ignored when pagingEnabled is true.');
      }

      invariant(ScrollViewClass !== undefined, 'ScrollViewClass must not be undefined');
      invariant(ScrollContentContainerViewClass !== undefined, 'ScrollContentContainerViewClass must not be undefined');
      var contentContainerStyle = [this.props.horizontal && styles.contentContainerHorizontal, this.props.contentContainerStyle];
      var style = void 0,
          childLayoutProps = void 0;

      if (__DEV__ && this.props.style) {
        style = flattenStyle(this.props.style);
        childLayoutProps = ['alignItems', 'justifyContent'].filter(function (prop) {
          return style && style[prop] !== undefined;
        });
        invariant(childLayoutProps.length === 0, 'ScrollView child layout (' + JSON.stringify(childLayoutProps) + ') must be applied through the contentContainerStyle prop.');
      }

      var contentSizeChangeProps = {};

      if (this.props.onContentSizeChange) {
        contentSizeChangeProps = {
          onLayout: this._handleContentOnLayout
        };
      }

      var stickyHeaderIndices = this.props.stickyHeaderIndices;
      var hasStickyHeaders = stickyHeaderIndices && stickyHeaderIndices.length > 0;
      var childArray = hasStickyHeaders && React.Children.toArray(this.props.children);
      var children = hasStickyHeaders ? childArray.map(function (child, index) {
        var indexOfIndex = child ? stickyHeaderIndices.indexOf(index) : -1;

        if (indexOfIndex > -1) {
          var key = child.key;
          var nextIndex = stickyHeaderIndices[indexOfIndex + 1];
          return React.createElement(
            ScrollViewStickyHeader,
            {
              key: key,
              ref: function ref(_ref2) {
                return _this._setStickyHeaderRef(key, _ref2);
              },
              nextHeaderLayoutY: _this._headerLayoutYs.get(_this._getKeyForIndex(nextIndex, childArray)),
              onLayout: function onLayout(event) {
                return _this._onStickyHeaderLayout(index, event, key);
              },
              scrollAnimatedValue: _this._scrollAnimatedValue,
              inverted: _this.props.invertStickyHeaders,
              scrollViewHeight: _this.state.layoutHeight,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 774
              }
            },
            child
          );
        } else {
          return child;
        }
      }) : this.props.children;
      var contentContainer = React.createElement(
        ScrollContentContainerViewClass,
        babelHelpers.extends({}, contentSizeChangeProps, {
          ref: this._setInnerViewRef,
          style: contentContainerStyle,
          removeClippedSubviews: Platform.OS === 'android' && hasStickyHeaders ? false : this.props.removeClippedSubviews,
          collapsable: false,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 793
          }
        }),
        children
      );
      var alwaysBounceHorizontal = this.props.alwaysBounceHorizontal !== undefined ? this.props.alwaysBounceHorizontal : this.props.horizontal;
      var alwaysBounceVertical = this.props.alwaysBounceVertical !== undefined ? this.props.alwaysBounceVertical : !this.props.horizontal;
      var DEPRECATED_sendUpdatedChildFrames = !!this.props.DEPRECATED_sendUpdatedChildFrames;
      var baseStyle = this.props.horizontal ? styles.baseHorizontal : styles.baseVertical;
      var props = babelHelpers.extends({}, this.props, {
        alwaysBounceHorizontal: alwaysBounceHorizontal,
        alwaysBounceVertical: alwaysBounceVertical,
        style: [baseStyle, this.props.style],
        onContentSizeChange: null,
        onLayout: this._handleLayout,
        onMomentumScrollBegin: this.scrollResponderHandleMomentumScrollBegin,
        onMomentumScrollEnd: this.scrollResponderHandleMomentumScrollEnd,
        onResponderGrant: this.scrollResponderHandleResponderGrant,
        onResponderReject: this.scrollResponderHandleResponderReject,
        onResponderRelease: this.scrollResponderHandleResponderRelease,
        onResponderTerminate: this.scrollResponderHandleTerminate,
        onResponderTerminationRequest: this.scrollResponderHandleTerminationRequest,
        onScroll: this._handleScroll,
        onScrollBeginDrag: this.scrollResponderHandleScrollBeginDrag,
        onScrollEndDrag: this.scrollResponderHandleScrollEndDrag,
        onScrollShouldSetResponder: this.scrollResponderHandleScrollShouldSetResponder,
        onStartShouldSetResponder: this.scrollResponderHandleStartShouldSetResponder,
        onStartShouldSetResponderCapture: this.scrollResponderHandleStartShouldSetResponderCapture,
        onTouchEnd: this.scrollResponderHandleTouchEnd,
        onTouchMove: this.scrollResponderHandleTouchMove,
        onTouchStart: this.scrollResponderHandleTouchStart,
        onTouchCancel: this.scrollResponderHandleTouchCancel,
        scrollBarThumbImage: resolveAssetSource(this.props.scrollBarThumbImage),
        scrollEventThrottle: hasStickyHeaders ? 1 : this.props.scrollEventThrottle,
        sendMomentumEvents: this.props.onMomentumScrollBegin || this.props.onMomentumScrollEnd ? true : false,
        DEPRECATED_sendUpdatedChildFrames: DEPRECATED_sendUpdatedChildFrames
      });
      var decelerationRate = this.props.decelerationRate;

      if (decelerationRate) {
        props.decelerationRate = processDecelerationRate(decelerationRate);
      }

      var refreshControl = this.props.refreshControl;

      if (refreshControl) {
        if (Platform.OS === 'ios') {
          return React.createElement(
            ScrollViewClass,
            babelHelpers.extends({}, props, {
              ref: this._setScrollViewRef,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 867
              }
            }),
            Platform.isTVOS ? null : refreshControl,
            contentContainer
          );
        } else if (Platform.OS === 'android') {
          return React.cloneElement(refreshControl, {
            style: props.style
          }, React.createElement(
            ScrollViewClass,
            babelHelpers.extends({}, props, {
              style: baseStyle,
              ref: this._setScrollViewRef,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 882
              }
            }),
            contentContainer
          ));
        }
      }

      return React.createElement(
        ScrollViewClass,
        babelHelpers.extends({}, props, {
          ref: this._setScrollViewRef,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 889
          }
        }),
        contentContainer
      );
    }
  });
  var styles = StyleSheet.create({
    baseVertical: {
      flexGrow: 1,
      flexShrink: 1,
      flexDirection: 'column',
      overflow: 'scroll'
    },
    baseHorizontal: {
      flexGrow: 1,
      flexShrink: 1,
      flexDirection: 'row',
      overflow: 'scroll'
    },
    contentContainerHorizontal: {
      flexDirection: 'row'
    }
  });
  var nativeOnlyProps = void 0,
      AndroidScrollView = void 0,
      AndroidHorizontalScrollContentView = void 0,
      AndroidHorizontalScrollView = void 0,
      RCTScrollView = void 0,
      RCTScrollContentView = void 0;

  if (Platform.OS === 'android') {
    nativeOnlyProps = {
      nativeOnly: {
        sendMomentumEvents: true
      }
    };
    AndroidScrollView = requireNativeComponent('RCTScrollView', ScrollView, nativeOnlyProps);
    AndroidHorizontalScrollView = requireNativeComponent('AndroidHorizontalScrollView', ScrollView, nativeOnlyProps);
    AndroidHorizontalScrollContentView = requireNativeComponent('AndroidHorizontalScrollContentView');
  } else if (Platform.OS === 'ios') {
    nativeOnlyProps = {
      nativeOnly: {
        onMomentumScrollBegin: true,
        onMomentumScrollEnd: true,
        onScrollBeginDrag: true,
        onScrollEndDrag: true
      }
    };
    RCTScrollView = requireNativeComponent('RCTScrollView', ScrollView, nativeOnlyProps);
    RCTScrollContentView = requireNativeComponent('RCTScrollContentView', View);
  } else {
    nativeOnlyProps = {
      nativeOnly: {}
    };
    RCTScrollView = requireNativeComponent('RCTScrollView', null, nativeOnlyProps);
    RCTScrollContentView = requireNativeComponent('RCTScrollContentView', View);
  }

  module.exports = ScrollView;
},226,[196,127,156,52,227,141,131,21,228,236,132,163,153,155,148,166,232,105,13,237,168,56,174],"ScrollView");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var PropTypes = _require(_dependencyMap[0], 'prop-types');

  var createStrictShapeTypeChecker = _require(_dependencyMap[1], 'createStrictShapeTypeChecker');

  var PointPropType = createStrictShapeTypeChecker({
    x: PropTypes.number,
    y: PropTypes.number
  });
  module.exports = PointPropType;
},227,[141,157],"PointPropType");
__d(function (global, _require3, module, exports, _dependencyMap) {
  'use strict';

  var Dimensions = _require3(_dependencyMap[0], 'Dimensions');

  var FrameRateLogger = _require3(_dependencyMap[1], 'FrameRateLogger');

  var Keyboard = _require3(_dependencyMap[2], 'Keyboard');

  var ReactNative = _require3(_dependencyMap[3], 'ReactNative');

  var Subscribable = _require3(_dependencyMap[4], 'Subscribable');

  var TextInputState = _require3(_dependencyMap[5], 'TextInputState');

  var UIManager = _require3(_dependencyMap[6], 'UIManager');

  var invariant = _require3(_dependencyMap[7], 'fbjs/lib/invariant');

  var nullthrows = _require3(_dependencyMap[8], 'fbjs/lib/nullthrows');

  var performanceNow = _require3(_dependencyMap[9], 'fbjs/lib/performanceNow');

  var warning = _require3(_dependencyMap[10], 'fbjs/lib/warning');

  var _require = _require3(_dependencyMap[11], 'NativeModules'),
      ScrollViewManager = _require.ScrollViewManager;

  var _require2 = _require3(_dependencyMap[12], 'ReactNativeComponentTree'),
      getInstanceFromNode = _require2.getInstanceFromNode;

  var IS_ANIMATING_TOUCH_START_THRESHOLD_MS = 16;

  function isTagInstanceOfTextInput(tag) {
    var instance = getInstanceFromNode(tag);
    return instance && instance.viewConfig && (instance.viewConfig.uiViewClassName === 'AndroidTextInput' || instance.viewConfig.uiViewClassName === 'RCTMultilineTextInputView' || instance.viewConfig.uiViewClassName === 'RCTSinglelineTextInputView');
  }

  var ScrollResponderMixin = {
    mixins: [Subscribable.Mixin],
    scrollResponderMixinGetInitialState: function scrollResponderMixinGetInitialState() {
      return {
        isTouching: false,
        lastMomentumScrollBeginTime: 0,
        lastMomentumScrollEndTime: 0,
        observedScrollSinceBecomingResponder: false,
        becameResponderWhileAnimating: false
      };
    },
    scrollResponderHandleScrollShouldSetResponder: function scrollResponderHandleScrollShouldSetResponder() {
      return this.state.isTouching;
    },
    scrollResponderHandleStartShouldSetResponder: function scrollResponderHandleStartShouldSetResponder(e) {
      var currentlyFocusedTextInput = TextInputState.currentlyFocusedField();

      if (this.props.keyboardShouldPersistTaps === 'handled' && currentlyFocusedTextInput != null && e.target !== currentlyFocusedTextInput) {
        return true;
      }

      return false;
    },
    scrollResponderHandleStartShouldSetResponderCapture: function scrollResponderHandleStartShouldSetResponderCapture(e) {
      var currentlyFocusedTextInput = TextInputState.currentlyFocusedField();
      var keyboardShouldPersistTaps = this.props.keyboardShouldPersistTaps;
      var keyboardNeverPersistTaps = !keyboardShouldPersistTaps || keyboardShouldPersistTaps === 'never';

      if (keyboardNeverPersistTaps && currentlyFocusedTextInput != null && !isTagInstanceOfTextInput(e.target)) {
        return true;
      }

      return this.scrollResponderIsAnimating();
    },
    scrollResponderHandleResponderReject: function scrollResponderHandleResponderReject() {},
    scrollResponderHandleTerminationRequest: function scrollResponderHandleTerminationRequest() {
      return !this.state.observedScrollSinceBecomingResponder;
    },
    scrollResponderHandleTouchEnd: function scrollResponderHandleTouchEnd(e) {
      var nativeEvent = e.nativeEvent;
      this.state.isTouching = nativeEvent.touches.length !== 0;
      this.props.onTouchEnd && this.props.onTouchEnd(e);
    },
    scrollResponderHandleTouchCancel: function scrollResponderHandleTouchCancel(e) {
      this.state.isTouching = false;
      this.props.onTouchCancel && this.props.onTouchCancel(e);
    },
    scrollResponderHandleResponderRelease: function scrollResponderHandleResponderRelease(e) {
      this.props.onResponderRelease && this.props.onResponderRelease(e);
      var currentlyFocusedTextInput = TextInputState.currentlyFocusedField();

      if (this.props.keyboardShouldPersistTaps !== true && this.props.keyboardShouldPersistTaps !== 'always' && currentlyFocusedTextInput != null && e.target !== currentlyFocusedTextInput && !this.state.observedScrollSinceBecomingResponder && !this.state.becameResponderWhileAnimating) {
        this.props.onScrollResponderKeyboardDismissed && this.props.onScrollResponderKeyboardDismissed(e);
        TextInputState.blurTextInput(currentlyFocusedTextInput);
      }
    },
    scrollResponderHandleScroll: function scrollResponderHandleScroll(e) {
      this.state.observedScrollSinceBecomingResponder = true;
      this.props.onScroll && this.props.onScroll(e);
    },
    scrollResponderHandleResponderGrant: function scrollResponderHandleResponderGrant(e) {
      this.state.observedScrollSinceBecomingResponder = false;
      this.props.onResponderGrant && this.props.onResponderGrant(e);
      this.state.becameResponderWhileAnimating = this.scrollResponderIsAnimating();
    },
    scrollResponderHandleScrollBeginDrag: function scrollResponderHandleScrollBeginDrag(e) {
      FrameRateLogger.beginScroll();
      this.props.onScrollBeginDrag && this.props.onScrollBeginDrag(e);
    },
    scrollResponderHandleScrollEndDrag: function scrollResponderHandleScrollEndDrag(e) {
      var velocity = e.nativeEvent.velocity;

      if (!this.scrollResponderIsAnimating() && (!velocity || velocity.x === 0 && velocity.y === 0)) {
        FrameRateLogger.endScroll();
      }

      this.props.onScrollEndDrag && this.props.onScrollEndDrag(e);
    },
    scrollResponderHandleMomentumScrollBegin: function scrollResponderHandleMomentumScrollBegin(e) {
      this.state.lastMomentumScrollBeginTime = performanceNow();
      this.props.onMomentumScrollBegin && this.props.onMomentumScrollBegin(e);
    },
    scrollResponderHandleMomentumScrollEnd: function scrollResponderHandleMomentumScrollEnd(e) {
      FrameRateLogger.endScroll();
      this.state.lastMomentumScrollEndTime = performanceNow();
      this.props.onMomentumScrollEnd && this.props.onMomentumScrollEnd(e);
    },
    scrollResponderHandleTouchStart: function scrollResponderHandleTouchStart(e) {
      this.state.isTouching = true;
      this.props.onTouchStart && this.props.onTouchStart(e);
    },
    scrollResponderHandleTouchMove: function scrollResponderHandleTouchMove(e) {
      this.props.onTouchMove && this.props.onTouchMove(e);
    },
    scrollResponderIsAnimating: function scrollResponderIsAnimating() {
      var now = performanceNow();
      var timeSinceLastMomentumScrollEnd = now - this.state.lastMomentumScrollEndTime;
      var isAnimating = timeSinceLastMomentumScrollEnd < IS_ANIMATING_TOUCH_START_THRESHOLD_MS || this.state.lastMomentumScrollEndTime < this.state.lastMomentumScrollBeginTime;
      return isAnimating;
    },
    scrollResponderGetScrollableNode: function scrollResponderGetScrollableNode() {
      return this.getScrollableNode ? this.getScrollableNode() : ReactNative.findNodeHandle(this);
    },
    scrollResponderScrollTo: function scrollResponderScrollTo(x, y, animated) {
      if (typeof x === 'number') {
        console.warn('`scrollResponderScrollTo(x, y, animated)` is deprecated. Use `scrollResponderScrollTo({x: 5, y: 5, animated: true})` instead.');
      } else {
        var _ref = x || {};

        x = _ref.x;
        y = _ref.y;
        animated = _ref.animated;
      }

      UIManager.dispatchViewManagerCommand(nullthrows(this.scrollResponderGetScrollableNode()), UIManager.RCTScrollView.Commands.scrollTo, [x || 0, y || 0, animated !== false]);
    },
    scrollResponderScrollToEnd: function scrollResponderScrollToEnd(options) {
      var animated = (options && options.animated) !== false;
      UIManager.dispatchViewManagerCommand(this.scrollResponderGetScrollableNode(), UIManager.RCTScrollView.Commands.scrollToEnd, [animated]);
    },
    scrollResponderScrollWithoutAnimationTo: function scrollResponderScrollWithoutAnimationTo(offsetX, offsetY) {
      console.warn('`scrollResponderScrollWithoutAnimationTo` is deprecated. Use `scrollResponderScrollTo` instead');
      this.scrollResponderScrollTo({
        x: offsetX,
        y: offsetY,
        animated: false
      });
    },
    scrollResponderZoomTo: function scrollResponderZoomTo(rect, animated) {
      invariant(ScrollViewManager && ScrollViewManager.zoomToRect, 'zoomToRect is not implemented');

      if ('animated' in rect) {
        animated = rect.animated;
        delete rect.animated;
      } else if (typeof animated !== 'undefined') {
        console.warn('`scrollResponderZoomTo` `animated` argument is deprecated. Use `options.animated` instead');
      }

      ScrollViewManager.zoomToRect(this.scrollResponderGetScrollableNode(), rect, animated !== false);
    },
    scrollResponderFlashScrollIndicators: function scrollResponderFlashScrollIndicators() {
      UIManager.dispatchViewManagerCommand(this.scrollResponderGetScrollableNode(), UIManager.RCTScrollView.Commands.flashScrollIndicators, []);
    },
    scrollResponderScrollNativeHandleToKeyboard: function scrollResponderScrollNativeHandleToKeyboard(nodeHandle, additionalOffset, preventNegativeScrollOffset) {
      this.additionalScrollOffset = additionalOffset || 0;
      this.preventNegativeScrollOffset = !!preventNegativeScrollOffset;
      UIManager.measureLayout(nodeHandle, ReactNative.findNodeHandle(this.getInnerViewNode()), this.scrollResponderTextInputFocusError, this.scrollResponderInputMeasureAndScrollToKeyboard);
    },
    scrollResponderInputMeasureAndScrollToKeyboard: function scrollResponderInputMeasureAndScrollToKeyboard(left, top, width, height) {
      var keyboardScreenY = Dimensions.get('window').height;

      if (this.keyboardWillOpenTo) {
        keyboardScreenY = this.keyboardWillOpenTo.endCoordinates.screenY;
      }

      var scrollOffsetY = top - keyboardScreenY + height + this.additionalScrollOffset;

      if (this.preventNegativeScrollOffset) {
        scrollOffsetY = Math.max(0, scrollOffsetY);
      }

      this.scrollResponderScrollTo({
        x: 0,
        y: scrollOffsetY,
        animated: true
      });
      this.additionalOffset = 0;
      this.preventNegativeScrollOffset = false;
    },
    scrollResponderTextInputFocusError: function scrollResponderTextInputFocusError(e) {
      console.error('Error measuring text field: ', e);
    },
    UNSAFE_componentWillMount: function UNSAFE_componentWillMount() {
      var keyboardShouldPersistTaps = this.props.keyboardShouldPersistTaps;
      warning(typeof keyboardShouldPersistTaps !== 'boolean', "'keyboardShouldPersistTaps={" + keyboardShouldPersistTaps + "}' is deprecated. " + ("Use 'keyboardShouldPersistTaps=\"" + (keyboardShouldPersistTaps ? 'always' : 'never') + "\"' instead"));
      this.keyboardWillOpenTo = null;
      this.additionalScrollOffset = 0;
      this.addListenerOn(Keyboard, 'keyboardWillShow', this.scrollResponderKeyboardWillShow);
      this.addListenerOn(Keyboard, 'keyboardWillHide', this.scrollResponderKeyboardWillHide);
      this.addListenerOn(Keyboard, 'keyboardDidShow', this.scrollResponderKeyboardDidShow);
      this.addListenerOn(Keyboard, 'keyboardDidHide', this.scrollResponderKeyboardDidHide);
    },
    scrollResponderKeyboardWillShow: function scrollResponderKeyboardWillShow(e) {
      this.keyboardWillOpenTo = e;
      this.props.onKeyboardWillShow && this.props.onKeyboardWillShow(e);
    },
    scrollResponderKeyboardWillHide: function scrollResponderKeyboardWillHide(e) {
      this.keyboardWillOpenTo = null;
      this.props.onKeyboardWillHide && this.props.onKeyboardWillHide(e);
    },
    scrollResponderKeyboardDidShow: function scrollResponderKeyboardDidShow(e) {
      if (e) {
        this.keyboardWillOpenTo = e;
      }

      this.props.onKeyboardDidShow && this.props.onKeyboardDidShow(e);
    },
    scrollResponderKeyboardDidHide: function scrollResponderKeyboardDidHide(e) {
      this.keyboardWillOpenTo = null;
      this.props.onKeyboardDidHide && this.props.onKeyboardDidHide(e);
    }
  };
  var ScrollResponder = {
    Mixin: ScrollResponderMixin
  };
  module.exports = ScrollResponder;
},228,[134,229,230,21,233,112,110,13,234,53,56,15,235],"ScrollResponder");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var NativeModules = _require(_dependencyMap[0], 'NativeModules');

  var invariant = _require(_dependencyMap[1], 'fbjs/lib/invariant');

  var FrameRateLogger = {
    setGlobalOptions: function setGlobalOptions(options) {
      if (options.debug !== undefined) {
        invariant(NativeModules.FrameRateLogger, 'Trying to debug FrameRateLogger without the native module!');
      }

      NativeModules.FrameRateLogger && NativeModules.FrameRateLogger.setGlobalOptions(options);
    },
    setContext: function setContext(context) {
      NativeModules.FrameRateLogger && NativeModules.FrameRateLogger.setContext(context);
    },
    beginScroll: function beginScroll() {
      NativeModules.FrameRateLogger && NativeModules.FrameRateLogger.beginScroll();
    },
    endScroll: function endScroll() {
      NativeModules.FrameRateLogger && NativeModules.FrameRateLogger.endScroll();
    }
  };
  module.exports = FrameRateLogger;
},229,[15,13],"FrameRateLogger");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var LayoutAnimation = _require(_dependencyMap[0], 'LayoutAnimation');

  var invariant = _require(_dependencyMap[1], 'fbjs/lib/invariant');

  var NativeEventEmitter = _require(_dependencyMap[2], 'NativeEventEmitter');

  var KeyboardObserver = _require(_dependencyMap[3], 'NativeModules').KeyboardObserver;

  var dismissKeyboard = _require(_dependencyMap[4], 'dismissKeyboard');

  var KeyboardEventEmitter = new NativeEventEmitter(KeyboardObserver);
  var Keyboard = {
    addListener: function addListener(eventName, callback) {
      invariant(false, 'Dummy method used for documentation');
    },
    removeListener: function removeListener(eventName, callback) {
      invariant(false, 'Dummy method used for documentation');
    },
    removeAllListeners: function removeAllListeners(eventName) {
      invariant(false, 'Dummy method used for documentation');
    },
    dismiss: function dismiss() {
      invariant(false, 'Dummy method used for documentation');
    },
    scheduleLayoutAnimation: function scheduleLayoutAnimation(event) {
      invariant(false, 'Dummy method used for documentation');
    }
  };
  Keyboard = KeyboardEventEmitter;
  Keyboard.dismiss = dismissKeyboard;

  Keyboard.scheduleLayoutAnimation = function (event) {
    var duration = event.duration,
        easing = event.easing;

    if (duration) {
      LayoutAnimation.configureNext({
        duration: duration,
        update: {
          duration: duration,
          type: easing && LayoutAnimation.Types[easing] || 'keyboard'
        }
      });
    }
  };

  module.exports = Keyboard;
},230,[231,13,69,15,232],"Keyboard");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var PropTypes = _require(_dependencyMap[0], 'prop-types');

  var UIManager = _require(_dependencyMap[1], 'UIManager');

  var keyMirror = _require(_dependencyMap[2], 'fbjs/lib/keyMirror');

  var checkPropTypes = PropTypes.checkPropTypes;
  var TypesEnum = {
    spring: true,
    linear: true,
    easeInEaseOut: true,
    easeIn: true,
    easeOut: true,
    keyboard: true
  };
  var Types = keyMirror(TypesEnum);
  var PropertiesEnum = {
    opacity: true,
    scaleXY: true
  };
  var Properties = keyMirror(PropertiesEnum);
  var animType = PropTypes.shape({
    duration: PropTypes.number,
    delay: PropTypes.number,
    springDamping: PropTypes.number,
    initialVelocity: PropTypes.number,
    type: PropTypes.oneOf(Object.keys(Types)).isRequired,
    property: PropTypes.oneOf(Object.keys(Properties))
  });
  var configType = PropTypes.shape({
    duration: PropTypes.number.isRequired,
    create: animType,
    update: animType,
    delete: animType
  });

  function checkConfig(config, location, name) {
    checkPropTypes({
      config: configType
    }, {
      config: config
    }, location, name);
  }

  function configureNext(config, onAnimationDidEnd) {
    if (__DEV__) {
      checkConfig(config, 'config', 'LayoutAnimation.configureNext');
    }

    UIManager.configureNextLayoutAnimation(config, onAnimationDidEnd || function () {}, function () {});
  }

  function create(duration, type, creationProp) {
    return {
      duration: duration,
      create: {
        type: type,
        property: creationProp
      },
      update: {
        type: type
      },
      delete: {
        type: type,
        property: creationProp
      }
    };
  }

  var Presets = {
    easeInEaseOut: create(300, Types.easeInEaseOut, Properties.opacity),
    linear: create(500, Types.linear, Properties.opacity),
    spring: {
      duration: 700,
      create: {
        type: Types.linear,
        property: Properties.opacity
      },
      update: {
        type: Types.spring,
        springDamping: 0.4
      },
      delete: {
        type: Types.linear,
        property: Properties.opacity
      }
    }
  };
  var LayoutAnimation = {
    configureNext: configureNext,
    create: create,
    Types: Types,
    Properties: Properties,
    checkConfig: checkConfig,
    Presets: Presets,
    easeInEaseOut: configureNext.bind(null, Presets.easeInEaseOut),
    linear: configureNext.bind(null, Presets.linear),
    spring: configureNext.bind(null, Presets.spring)
  };
  module.exports = LayoutAnimation;
},231,[141,110,139],"LayoutAnimation");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var TextInputState = _require(_dependencyMap[0], 'TextInputState');

  function dismissKeyboard() {
    TextInputState.blurTextInput(TextInputState.currentlyFocusedField());
  }

  module.exports = dismissKeyboard;
},232,[112],"dismissKeyboard");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var Subscribable = {};
  Subscribable.Mixin = {
    UNSAFE_componentWillMount: function UNSAFE_componentWillMount() {
      this._subscribableSubscriptions = [];
    },
    componentWillUnmount: function componentWillUnmount() {
      this._subscribableSubscriptions.forEach(function (subscription) {
        return subscription.remove();
      });

      this._subscribableSubscriptions = null;
    },
    addListenerOn: function addListenerOn(eventEmitter, eventType, listener, context) {
      this._subscribableSubscriptions.push(eventEmitter.addListener(eventType, listener, context));
    }
  };
  module.exports = Subscribable;
},233,[],"Subscribable");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var nullthrows = function nullthrows(x) {
    if (x != null) {
      return x;
    }

    throw new Error("Got unexpected null or undefined");
  };

  module.exports = nullthrows;
},234,[],"node_modules/fbjs/lib/nullthrows.js");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _require = _require2(_dependencyMap[0], 'ReactNative'),
      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = _require.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

  module.exports = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactNativeComponentTree;
},235,[21],"ReactNativeComponentTree");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-native/Libraries/Components/ScrollView/ScrollViewStickyHeader.js";

  var Animated = _require(_dependencyMap[0], 'Animated');

  var React = _require(_dependencyMap[1], 'React');

  var StyleSheet = _require(_dependencyMap[2], 'StyleSheet');

  var ScrollViewStickyHeader = function (_React$Component) {
    babelHelpers.inherits(ScrollViewStickyHeader, _React$Component);

    function ScrollViewStickyHeader() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, ScrollViewStickyHeader);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = ScrollViewStickyHeader.__proto__ || Object.getPrototypeOf(ScrollViewStickyHeader)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
        measured: false,
        layoutY: 0,
        layoutHeight: 0,
        nextHeaderLayoutY: _this.props.nextHeaderLayoutY
      }, _this._onLayout = function (event) {
        _this.setState({
          measured: true,
          layoutY: event.nativeEvent.layout.y,
          layoutHeight: event.nativeEvent.layout.height
        });

        _this.props.onLayout(event);

        var child = React.Children.only(_this.props.children);

        if (child.props.onLayout) {
          child.props.onLayout(event);
        }
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(ScrollViewStickyHeader, [{
      key: "setNextHeaderY",
      value: function setNextHeaderY(y) {
        this.setState({
          nextHeaderLayoutY: y
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _props = this.props,
            inverted = _props.inverted,
            scrollViewHeight = _props.scrollViewHeight;
        var _state = this.state,
            measured = _state.measured,
            layoutHeight = _state.layoutHeight,
            layoutY = _state.layoutY,
            nextHeaderLayoutY = _state.nextHeaderLayoutY;
        var inputRange = [-1, 0];
        var outputRange = [0, 0];

        if (measured) {
          if (inverted) {
            if (scrollViewHeight != null) {
              var stickStartPoint = layoutY + layoutHeight - scrollViewHeight;

              if (stickStartPoint > 0) {
                inputRange.push(stickStartPoint);
                outputRange.push(0);
                inputRange.push(stickStartPoint + 1);
                outputRange.push(1);
                var collisionPoint = (nextHeaderLayoutY || 0) - layoutHeight - scrollViewHeight;

                if (collisionPoint > stickStartPoint) {
                  inputRange.push(collisionPoint, collisionPoint + 1);
                  outputRange.push(collisionPoint - stickStartPoint, collisionPoint - stickStartPoint);
                }
              }
            }
          } else {
            inputRange.push(layoutY);
            outputRange.push(0);

            var _collisionPoint = (nextHeaderLayoutY || 0) - layoutHeight;

            if (_collisionPoint >= layoutY) {
              inputRange.push(_collisionPoint, _collisionPoint + 1);
              outputRange.push(_collisionPoint - layoutY, _collisionPoint - layoutY);
            } else {
              inputRange.push(layoutY + 1);
              outputRange.push(1);
            }
          }
        }

        var translateY = this.props.scrollAnimatedValue.interpolate({
          inputRange: inputRange,
          outputRange: outputRange
        });
        var child = React.Children.only(this.props.children);
        return React.createElement(
          Animated.View,
          {
            collapsable: false,
            onLayout: this._onLayout,
            style: [child.props.style, styles.header, {
              transform: [{
                translateY: translateY
              }]
            }],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 141
            }
          },
          React.cloneElement(child, {
            style: styles.fill,
            onLayout: undefined
          })
        );
      }
    }]);
    return ScrollViewStickyHeader;
  }(React.Component);

  var styles = StyleSheet.create({
    header: {
      zIndex: 10
    },
    fill: {
      flex: 1
    }
  });
  module.exports = ScrollViewStickyHeader;
},236,[196,131,132],"ScrollViewStickyHeader");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  function processDecelerationRate(decelerationRate) {
    if (decelerationRate === 'normal') {
      decelerationRate = 0.998;
    } else if (decelerationRate === 'fast') {
      decelerationRate = 0.99;
    }

    return decelerationRate;
  }

  module.exports = processDecelerationRate;
},237,[],"processDecelerationRate");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var GLOBAL = typeof window === 'undefined' ? global : window;

  var setter = function setter(_setter, _clearer, array) {
    return function (callback, delta) {
      var id = _setter(function () {
        _clearer.call(this, id);

        callback.apply(this, arguments);
      }.bind(this), delta);

      if (!this[array]) {
        this[array] = [id];
      } else {
        this[array].push(id);
      }

      return id;
    };
  };

  var clearer = function clearer(_clearer, array) {
    return function (id) {
      if (this[array]) {
        var index = this[array].indexOf(id);

        if (index !== -1) {
          this[array].splice(index, 1);
        }
      }

      _clearer(id);
    };
  };

  var _timeouts = 'TimerMixin_timeouts';

  var _clearTimeout = clearer(GLOBAL.clearTimeout, _timeouts);

  var _setTimeout = setter(GLOBAL.setTimeout, _clearTimeout, _timeouts);

  var _intervals = 'TimerMixin_intervals';

  var _clearInterval = clearer(GLOBAL.clearInterval, _intervals);

  var _setInterval = setter(GLOBAL.setInterval, function () {}, _intervals);

  var _immediates = 'TimerMixin_immediates';

  var _clearImmediate = clearer(GLOBAL.clearImmediate, _immediates);

  var _setImmediate = setter(GLOBAL.setImmediate, _clearImmediate, _immediates);

  var _rafs = 'TimerMixin_rafs';

  var _cancelAnimationFrame = clearer(GLOBAL.cancelAnimationFrame, _rafs);

  var _requestAnimationFrame = setter(GLOBAL.requestAnimationFrame, _cancelAnimationFrame, _rafs);

  var TimerMixin = {
    componentWillUnmount: function componentWillUnmount() {
      this[_timeouts] && this[_timeouts].forEach(function (id) {
        GLOBAL.clearTimeout(id);
      });
      this[_timeouts] = null;
      this[_intervals] && this[_intervals].forEach(function (id) {
        GLOBAL.clearInterval(id);
      });
      this[_intervals] = null;
      this[_immediates] && this[_immediates].forEach(function (id) {
        GLOBAL.clearImmediate(id);
      });
      this[_immediates] = null;
      this[_rafs] && this[_rafs].forEach(function (id) {
        GLOBAL.cancelAnimationFrame(id);
      });
      this[_rafs] = null;
    },
    setTimeout: _setTimeout,
    clearTimeout: _clearTimeout,
    setInterval: _setInterval,
    clearInterval: _clearInterval,
    setImmediate: _setImmediate,
    clearImmediate: _clearImmediate,
    requestAnimationFrame: _requestAnimationFrame,
    cancelAnimationFrame: _cancelAnimationFrame
  };
  module.exports = TimerMixin;
},238,[],"node_modules/react-timer-mixin/TimerMixin.js");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var EdgeInsetsPropType = _require2(_dependencyMap[0], 'EdgeInsetsPropType');

  var React = _require2(_dependencyMap[1], 'React');

  var PropTypes = _require2(_dependencyMap[2], 'prop-types');

  var TimerMixin = _require2(_dependencyMap[3], 'react-timer-mixin');

  var Touchable = _require2(_dependencyMap[4], 'Touchable');

  var createReactClass = _require2(_dependencyMap[5], 'create-react-class');

  var ensurePositiveDelayProps = _require2(_dependencyMap[6], 'ensurePositiveDelayProps');

  var warning = _require2(_dependencyMap[7], 'fbjs/lib/warning');

  var _require = _require2(_dependencyMap[8], 'ViewAccessibility'),
      AccessibilityComponentTypes = _require.AccessibilityComponentTypes,
      AccessibilityTraits = _require.AccessibilityTraits;

  var PRESS_RETENTION_OFFSET = {
    top: 20,
    left: 20,
    right: 20,
    bottom: 30
  };
  var TouchableWithoutFeedback = createReactClass({
    displayName: 'TouchableWithoutFeedback',
    mixins: [TimerMixin, Touchable.Mixin],
    propTypes: {
      accessible: PropTypes.bool,
      accessibilityComponentType: PropTypes.oneOf(AccessibilityComponentTypes),
      accessibilityTraits: PropTypes.oneOfType([PropTypes.oneOf(AccessibilityTraits), PropTypes.arrayOf(PropTypes.oneOf(AccessibilityTraits))]),
      disabled: PropTypes.bool,
      onPress: PropTypes.func,
      onPressIn: PropTypes.func,
      onPressOut: PropTypes.func,
      onLayout: PropTypes.func,
      onLongPress: PropTypes.func,
      delayPressIn: PropTypes.number,
      delayPressOut: PropTypes.number,
      delayLongPress: PropTypes.number,
      pressRetentionOffset: EdgeInsetsPropType,
      hitSlop: EdgeInsetsPropType
    },
    getInitialState: function getInitialState() {
      return this.touchableGetInitialState();
    },
    componentDidMount: function componentDidMount() {
      ensurePositiveDelayProps(this.props);
    },
    UNSAFE_componentWillReceiveProps: function UNSAFE_componentWillReceiveProps(nextProps) {
      ensurePositiveDelayProps(nextProps);
    },
    touchableHandlePress: function touchableHandlePress(e) {
      this.props.onPress && this.props.onPress(e);
    },
    touchableHandleActivePressIn: function touchableHandleActivePressIn(e) {
      this.props.onPressIn && this.props.onPressIn(e);
    },
    touchableHandleActivePressOut: function touchableHandleActivePressOut(e) {
      this.props.onPressOut && this.props.onPressOut(e);
    },
    touchableHandleLongPress: function touchableHandleLongPress(e) {
      this.props.onLongPress && this.props.onLongPress(e);
    },
    touchableGetPressRectOffset: function touchableGetPressRectOffset() {
      return this.props.pressRetentionOffset || PRESS_RETENTION_OFFSET;
    },
    touchableGetHitSlop: function touchableGetHitSlop() {
      return this.props.hitSlop;
    },
    touchableGetHighlightDelayMS: function touchableGetHighlightDelayMS() {
      return this.props.delayPressIn || 0;
    },
    touchableGetLongPressDelayMS: function touchableGetLongPressDelayMS() {
      return this.props.delayLongPress === 0 ? 0 : this.props.delayLongPress || 500;
    },
    touchableGetPressOutDelayMS: function touchableGetPressOutDelayMS() {
      return this.props.delayPressOut || 0;
    },
    render: function render() {
      var child = React.Children.only(this.props.children);
      var children = child.props.children;
      warning(!child.type || child.type.displayName !== 'Text', 'TouchableWithoutFeedback does not work well with Text children. Wrap children in a View instead. See ' + (child._owner && child._owner.getName && child._owner.getName() || '<unknown>'));

      if (Touchable.TOUCH_TARGET_DEBUG && child.type && child.type.displayName === 'View') {
        children = React.Children.toArray(children);
        children.push(Touchable.renderDebugView({
          color: 'red',
          hitSlop: this.props.hitSlop
        }));
      }

      var style = Touchable.TOUCH_TARGET_DEBUG && child.type && child.type.displayName === 'Text' ? [child.props.style, {
        color: 'red'
      }] : child.props.style;
      return React.cloneElement(child, {
        accessible: this.props.accessible !== false,
        accessibilityLabel: this.props.accessibilityLabel,
        accessibilityComponentType: this.props.accessibilityComponentType,
        accessibilityTraits: this.props.accessibilityTraits,
        nativeID: this.props.nativeID,
        testID: this.props.testID,
        onLayout: this.props.onLayout,
        hitSlop: this.props.hitSlop,
        onStartShouldSetResponder: this.touchableHandleStartShouldSetResponder,
        onResponderTerminationRequest: this.touchableHandleResponderTerminationRequest,
        onResponderGrant: this.touchableHandleResponderGrant,
        onResponderMove: this.touchableHandleResponderMove,
        onResponderRelease: this.touchableHandleResponderRelease,
        onResponderTerminate: this.touchableHandleResponderTerminate,
        style: style,
        children: children
      });
    }
  });
  module.exports = TouchableWithoutFeedback;
},239,[156,131,141,238,187,166,240,56,164],"TouchableWithoutFeedback");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = _require(_dependencyMap[0], 'fbjs/lib/invariant');

  var ensurePositiveDelayProps = function ensurePositiveDelayProps(props) {
    invariant(!(props.delayPressIn < 0 || props.delayPressOut < 0 || props.delayLongPress < 0), 'Touchable components cannot have negative delay properties');
  };

  module.exports = ensurePositiveDelayProps;
},240,[13],"ensurePositiveDelayProps");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  module.exports = _require(_dependencyMap[0], 'UnimplementedView');
},241,[130],"CheckBox");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-native/Libraries/Components/DatePicker/DatePickerIOS.ios.js";

  var NativeMethodsMixin = _require(_dependencyMap[0], 'NativeMethodsMixin');

  var React = _require(_dependencyMap[1], 'React');

  var PropTypes = _require(_dependencyMap[2], 'prop-types');

  var StyleSheet = _require(_dependencyMap[3], 'StyleSheet');

  var View = _require(_dependencyMap[4], 'View');

  var ViewPropTypes = _require(_dependencyMap[5], 'ViewPropTypes');

  var createReactClass = _require(_dependencyMap[6], 'create-react-class');

  var requireNativeComponent = _require(_dependencyMap[7], 'requireNativeComponent');

  var DatePickerIOS = createReactClass({
    displayName: 'DatePickerIOS',
    _picker: undefined,
    mixins: [NativeMethodsMixin],
    propTypes: babelHelpers.extends({}, ViewPropTypes, {
      date: PropTypes.instanceOf(Date).isRequired,
      onDateChange: PropTypes.func.isRequired,
      maximumDate: PropTypes.instanceOf(Date),
      minimumDate: PropTypes.instanceOf(Date),
      mode: PropTypes.oneOf(['date', 'time', 'datetime']),
      locale: PropTypes.string,
      minuteInterval: PropTypes.oneOf([1, 2, 3, 4, 5, 6, 10, 12, 15, 20, 30]),
      timeZoneOffsetInMinutes: PropTypes.number
    }),
    getDefaultProps: function getDefaultProps() {
      return {
        mode: 'datetime'
      };
    },
    _onChange: function _onChange(event) {
      var nativeTimeStamp = event.nativeEvent.timestamp;
      this.props.onDateChange && this.props.onDateChange(new Date(nativeTimeStamp));
      this.props.onChange && this.props.onChange(event);
      var propsTimeStamp = this.props.date.getTime();

      if (this._picker && nativeTimeStamp !== propsTimeStamp) {
        this._picker.setNativeProps({
          date: propsTimeStamp
        });
      }
    },
    render: function render() {
      var _this = this;

      var props = this.props;
      return React.createElement(
        View,
        {
          style: props.style,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 130
          }
        },
        React.createElement(RCTDatePickerIOS, {
          ref: function ref(picker) {
            _this._picker = picker;
          },
          style: styles.datePickerIOS,
          date: props.date.getTime(),
          locale: props.locale ? props.locale : undefined,
          maximumDate: props.maximumDate ? props.maximumDate.getTime() : undefined,
          minimumDate: props.minimumDate ? props.minimumDate.getTime() : undefined,
          mode: props.mode,
          minuteInterval: props.minuteInterval,
          timeZoneOffsetInMinutes: props.timeZoneOffsetInMinutes,
          onChange: this._onChange,
          onStartShouldSetResponder: function onStartShouldSetResponder() {
            return true;
          },
          onResponderTerminationRequest: function onResponderTerminationRequest() {
            return false;
          },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 131
          }
        })
      );
    }
  });
  var styles = StyleSheet.create({
    datePickerIOS: {
      height: 216
    }
  });
  var RCTDatePickerIOS = requireNativeComponent('RCTDatePicker', {
    propTypes: babelHelpers.extends({}, DatePickerIOS.propTypes, {
      date: PropTypes.number,
      locale: PropTypes.string,
      minimumDate: PropTypes.number,
      maximumDate: PropTypes.number,
      onDateChange: function onDateChange() {
        return null;
      },
      onChange: PropTypes.func
    })
  });
  module.exports = DatePickerIOS;
},242,[128,131,141,132,153,155,166,168],"DatePickerIOS");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  module.exports = _require(_dependencyMap[0], 'UnimplementedView');
},243,[130],"DrawerLayoutAndroid");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _class,
      _temp,
      _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-native/Libraries/Lists/FlatList.js";

  var MetroListView = _require(_dependencyMap[0], 'MetroListView');

  var React = _require(_dependencyMap[1], 'React');

  var View = _require(_dependencyMap[2], 'View');

  var VirtualizedList = _require(_dependencyMap[3], 'VirtualizedList');

  var ListView = _require(_dependencyMap[4], 'ListView');

  var invariant = _require(_dependencyMap[5], 'fbjs/lib/invariant');

  var defaultProps = babelHelpers.extends({}, VirtualizedList.defaultProps, {
    numColumns: 1
  });
  var FlatList = (_temp = _class = function (_React$PureComponent) {
    babelHelpers.inherits(FlatList, _React$PureComponent);
    babelHelpers.createClass(FlatList, [{
      key: "scrollToEnd",
      value: function scrollToEnd(params) {
        if (this._listRef) {
          this._listRef.scrollToEnd(params);
        }
      }
    }, {
      key: "scrollToIndex",
      value: function scrollToIndex(params) {
        if (this._listRef) {
          this._listRef.scrollToIndex(params);
        }
      }
    }, {
      key: "scrollToItem",
      value: function scrollToItem(params) {
        if (this._listRef) {
          this._listRef.scrollToItem(params);
        }
      }
    }, {
      key: "scrollToOffset",
      value: function scrollToOffset(params) {
        if (this._listRef) {
          this._listRef.scrollToOffset(params);
        }
      }
    }, {
      key: "recordInteraction",
      value: function recordInteraction() {
        if (this._listRef) {
          this._listRef.recordInteraction();
        }
      }
    }, {
      key: "flashScrollIndicators",
      value: function flashScrollIndicators() {
        if (this._listRef) {
          this._listRef.flashScrollIndicators();
        }
      }
    }, {
      key: "getScrollResponder",
      value: function getScrollResponder() {
        if (this._listRef) {
          return this._listRef.getScrollResponder();
        }
      }
    }, {
      key: "getScrollableNode",
      value: function getScrollableNode() {
        if (this._listRef) {
          return this._listRef.getScrollableNode();
        }
      }
    }, {
      key: "setNativeProps",
      value: function setNativeProps(props) {
        if (this._listRef) {
          this._listRef.setNativeProps(props);
        }
      }
    }, {
      key: "UNSAFE_componentWillMount",
      value: function UNSAFE_componentWillMount() {
        this._checkProps(this.props);
      }
    }, {
      key: "UNSAFE_componentWillReceiveProps",
      value: function UNSAFE_componentWillReceiveProps(nextProps) {
        invariant(nextProps.numColumns === this.props.numColumns, 'Changing numColumns on the fly is not supported. Change the key prop on FlatList when ' + 'changing the number of columns to force a fresh render of the component.');
        invariant(nextProps.onViewableItemsChanged === this.props.onViewableItemsChanged, 'Changing onViewableItemsChanged on the fly is not supported');
        invariant(nextProps.viewabilityConfig === this.props.viewabilityConfig, 'Changing viewabilityConfig on the fly is not supported');
        invariant(nextProps.viewabilityConfigCallbackPairs === this.props.viewabilityConfigCallbackPairs, 'Changing viewabilityConfigCallbackPairs on the fly is not supported');

        this._checkProps(nextProps);
      }
    }]);

    function FlatList(props) {
      babelHelpers.classCallCheck(this, FlatList);

      var _this = babelHelpers.possibleConstructorReturn(this, (FlatList.__proto__ || Object.getPrototypeOf(FlatList)).call(this, props));

      _this._hasWarnedLegacy = false;
      _this._virtualizedListPairs = [];

      _this._captureRef = function (ref) {
        _this._listRef = ref;
      };

      _this._getItem = function (data, index) {
        var numColumns = _this.props.numColumns;

        if (numColumns > 1) {
          var ret = [];

          for (var kk = 0; kk < numColumns; kk++) {
            var _item = data[index * numColumns + kk];
            _item && ret.push(_item);
          }

          return ret;
        } else {
          return data[index];
        }
      };

      _this._getItemCount = function (data) {
        return data ? Math.ceil(data.length / _this.props.numColumns) : 0;
      };

      _this._keyExtractor = function (items, index) {
        var _this$props = _this.props,
            keyExtractor = _this$props.keyExtractor,
            numColumns = _this$props.numColumns;

        if (numColumns > 1) {
          invariant(Array.isArray(items), 'FlatList: Encountered internal consistency error, expected each item to consist of an ' + 'array with 1-%s columns; instead, received a single item.', numColumns);
          return items.map(function (it, kk) {
            return keyExtractor(it, index * numColumns + kk);
          }).join(':');
        } else {
          return keyExtractor(items, index);
        }
      };

      _this._renderItem = function (info) {
        var _this$props2 = _this.props,
            renderItem = _this$props2.renderItem,
            numColumns = _this$props2.numColumns,
            columnWrapperStyle = _this$props2.columnWrapperStyle;

        if (numColumns > 1) {
          var _item2 = info.item,
              _index = info.index;
          invariant(Array.isArray(_item2), 'Expected array of items with numColumns > 1');
          return React.createElement(
            View,
            {
              style: [{
                flexDirection: 'row'
              }, columnWrapperStyle],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 613
              }
            },
            _item2.map(function (it, kk) {
              var element = renderItem({
                item: it,
                index: _index * numColumns + kk,
                separators: info.separators
              });
              return element && React.cloneElement(element, {
                key: kk
              });
            })
          );
        } else {
          return renderItem(info);
        }
      };

      if (_this.props.viewabilityConfigCallbackPairs) {
        _this._virtualizedListPairs = _this.props.viewabilityConfigCallbackPairs.map(function (pair) {
          return {
            viewabilityConfig: pair.viewabilityConfig,
            onViewableItemsChanged: _this._createOnViewableItemsChanged(pair.onViewableItemsChanged)
          };
        });
      } else if (_this.props.onViewableItemsChanged) {
        _this._virtualizedListPairs.push({
          viewabilityConfig: _this.props.viewabilityConfig,
          onViewableItemsChanged: _this._createOnViewableItemsChanged(_this.props.onViewableItemsChanged)
        });
      }

      return _this;
    }

    babelHelpers.createClass(FlatList, [{
      key: "_checkProps",
      value: function _checkProps(props) {
        var getItem = props.getItem,
            getItemCount = props.getItemCount,
            horizontal = props.horizontal,
            legacyImplementation = props.legacyImplementation,
            numColumns = props.numColumns,
            columnWrapperStyle = props.columnWrapperStyle,
            onViewableItemsChanged = props.onViewableItemsChanged,
            viewabilityConfigCallbackPairs = props.viewabilityConfigCallbackPairs;
        invariant(!getItem && !getItemCount, 'FlatList does not support custom data formats.');

        if (numColumns > 1) {
          invariant(!horizontal, 'numColumns does not support horizontal.');
        } else {
          invariant(!columnWrapperStyle, 'columnWrapperStyle not supported for single column lists');
        }

        if (legacyImplementation) {
          invariant(numColumns === 1, 'Legacy list does not support multiple columns.');

          if (!this._hasWarnedLegacy) {
            console.warn('FlatList: Using legacyImplementation - some features not supported and performance ' + 'may suffer');
            this._hasWarnedLegacy = true;
          }
        }

        invariant(!(onViewableItemsChanged && viewabilityConfigCallbackPairs), 'FlatList does not support setting both onViewableItemsChanged and ' + 'viewabilityConfigCallbackPairs.');
      }
    }, {
      key: "_pushMultiColumnViewable",
      value: function _pushMultiColumnViewable(arr, v) {
        var _props = this.props,
            numColumns = _props.numColumns,
            keyExtractor = _props.keyExtractor;
        v.item.forEach(function (item, ii) {
          invariant(v.index != null, 'Missing index!');
          var index = v.index * numColumns + ii;
          arr.push(babelHelpers.extends({}, v, {
            item: item,
            key: keyExtractor(item, index),
            index: index
          }));
        });
      }
    }, {
      key: "_createOnViewableItemsChanged",
      value: function _createOnViewableItemsChanged(onViewableItemsChanged) {
        var _this2 = this;

        return function (info) {
          var numColumns = _this2.props.numColumns;

          if (onViewableItemsChanged) {
            if (numColumns > 1) {
              var _changed = [];
              var _viewableItems = [];
              info.viewableItems.forEach(function (v) {
                return _this2._pushMultiColumnViewable(_viewableItems, v);
              });
              info.changed.forEach(function (v) {
                return _this2._pushMultiColumnViewable(_changed, v);
              });
              onViewableItemsChanged({
                viewableItems: _viewableItems,
                changed: _changed
              });
            } else {
              onViewableItemsChanged(info);
            }
          }
        };
      }
    }, {
      key: "render",
      value: function render() {
        if (this.props.legacyImplementation) {
          return React.createElement(MetroListView, babelHelpers.extends({}, this.props, {
            items: this.props.data,
            ref: this._captureRef,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 632
            }
          }));
        } else {
          return React.createElement(VirtualizedList, babelHelpers.extends({}, this.props, {
            renderItem: this._renderItem,
            getItem: this._getItem,
            getItemCount: this._getItemCount,
            keyExtractor: this._keyExtractor,
            ref: this._captureRef,
            viewabilityConfigCallbackPairs: this._virtualizedListPairs,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 640
            }
          }));
        }
      }
    }]);
    return FlatList;
  }(React.PureComponent), _class.defaultProps = defaultProps, _temp);
  module.exports = FlatList;
},244,[245,131,153,252,246,13],"FlatList");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _class,
      _temp2,
      _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-native/Libraries/Lists/MetroListView.js";

  var ListView = _require(_dependencyMap[0], 'ListView');

  var React = _require(_dependencyMap[1], 'React');

  var RefreshControl = _require(_dependencyMap[2], 'RefreshControl');

  var ScrollView = _require(_dependencyMap[3], 'ScrollView');

  var invariant = _require(_dependencyMap[4], 'fbjs/lib/invariant');

  var MetroListView = (_temp2 = _class = function (_React$Component) {
    babelHelpers.inherits(MetroListView, _React$Component);

    function MetroListView() {
      var _ref,
          _this2 = this;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, MetroListView);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = MetroListView.__proto__ || Object.getPrototypeOf(MetroListView)).call.apply(_ref, [this].concat(args))), _this), _this.state = _this._computeState(_this.props, {
        ds: new ListView.DataSource({
          rowHasChanged: function rowHasChanged(itemA, itemB) {
            return true;
          },
          sectionHeaderHasChanged: function sectionHeaderHasChanged() {
            return true;
          },
          getSectionHeaderData: function getSectionHeaderData(dataBlob, sectionID) {
            return _this.state.sectionHeaderData[sectionID];
          }
        }),
        sectionHeaderData: {}
      }), _this._captureRef = function (ref) {
        _this._listRef = ref;
      }, _this._renderFooter = function () {
        return React.createElement(_this2.props.FooterComponent, {
          key: "$footer",
          __source: {
            fileName: _jsxFileName,
            lineNumber: 183
          }
        });
      }, _this._renderRow = function (item, sectionID, rowID, highlightRow) {
        return _this.props.renderItem({
          item: item,
          index: rowID
        });
      }, _this._renderSectionHeader = function (section, sectionID) {
        var renderSectionHeader = _this.props.renderSectionHeader;
        invariant(renderSectionHeader, 'Must provide renderSectionHeader with sections prop');
        return renderSectionHeader({
          section: section
        });
      }, _this._renderSeparator = function (sID, rID) {
        return React.createElement(_this2.props.SeparatorComponent, {
          key: sID + rID,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 199
          }
        });
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(MetroListView, [{
      key: "scrollToEnd",
      value: function scrollToEnd(params) {
        throw new Error('scrollToEnd not supported in legacy ListView.');
      }
    }, {
      key: "scrollToIndex",
      value: function scrollToIndex(params) {
        throw new Error('scrollToIndex not supported in legacy ListView.');
      }
    }, {
      key: "scrollToItem",
      value: function scrollToItem(params) {
        throw new Error('scrollToItem not supported in legacy ListView.');
      }
    }, {
      key: "scrollToLocation",
      value: function scrollToLocation(params) {
        throw new Error('scrollToLocation not supported in legacy ListView.');
      }
    }, {
      key: "scrollToOffset",
      value: function scrollToOffset(params) {
        var animated = params.animated,
            offset = params.offset;

        this._listRef.scrollTo(this.props.horizontal ? {
          x: offset,
          animated: animated
        } : {
          y: offset,
          animated: animated
        });
      }
    }, {
      key: "getListRef",
      value: function getListRef() {
        return this._listRef;
      }
    }, {
      key: "setNativeProps",
      value: function setNativeProps(props) {
        if (this._listRef) {
          this._listRef.setNativeProps(props);
        }
      }
    }, {
      key: "UNSAFE_componentWillReceiveProps",
      value: function UNSAFE_componentWillReceiveProps(newProps) {
        var _this3 = this;

        this.setState(function (state) {
          return _this3._computeState(newProps, state);
        });
      }
    }, {
      key: "render",
      value: function render() {
        return React.createElement(ListView, babelHelpers.extends({}, this.props, {
          dataSource: this.state.ds,
          ref: this._captureRef,
          renderRow: this._renderRow,
          renderFooter: this.props.FooterComponent && this._renderFooter,
          renderSectionHeader: this.props.sections && this._renderSectionHeader,
          renderSeparator: this.props.SeparatorComponent && this._renderSeparator,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 143
          }
        }));
      }
    }, {
      key: "_computeState",
      value: function _computeState(props, state) {
        var sectionHeaderData = {};

        if (props.sections) {
          invariant(!props.items, 'Cannot have both sections and items props.');
          var _sections = {};
          props.sections.forEach(function (sectionIn, ii) {
            var sectionID = 's' + ii;
            _sections[sectionID] = sectionIn.data;
            sectionHeaderData[sectionID] = sectionIn;
          });
          return {
            ds: state.ds.cloneWithRowsAndSections(_sections),
            sectionHeaderData: sectionHeaderData
          };
        } else {
          invariant(!props.sections, 'Cannot have both sections and items props.');
          return {
            ds: state.ds.cloneWithRows(props.items),
            sectionHeaderData: sectionHeaderData
          };
        }
      }
    }]);
    return MetroListView;
  }(React.Component), _class.defaultProps = {
    keyExtractor: function keyExtractor(item, index) {
      return item.key || String(index);
    },
    renderScrollComponent: function renderScrollComponent(props) {
      if (props.onRefresh) {
        return React.createElement(ScrollView, babelHelpers.extends({}, props, {
          refreshControl: React.createElement(RefreshControl, {
            refreshing: props.refreshing,
            onRefresh: props.onRefresh,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 117
            }
          }),
          __source: {
            fileName: _jsxFileName,
            lineNumber: 110
          }
        }));
      } else {
        return React.createElement(ScrollView, babelHelpers.extends({}, props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 125
          }
        }));
      }
    }
  }, _temp2);
  module.exports = MetroListView;
},245,[246,131,251,226,13],"MetroListView");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-native/Libraries/Lists/ListView/ListView.js";

  var ListViewDataSource = _require(_dependencyMap[0], 'ListViewDataSource');

  var Platform = _require(_dependencyMap[1], 'Platform');

  var React = _require(_dependencyMap[2], 'React');

  var PropTypes = _require(_dependencyMap[3], 'prop-types');

  var ReactNative = _require(_dependencyMap[4], 'ReactNative');

  var RCTScrollViewManager = _require(_dependencyMap[5], 'NativeModules').ScrollViewManager;

  var ScrollView = _require(_dependencyMap[6], 'ScrollView');

  var ScrollResponder = _require(_dependencyMap[7], 'ScrollResponder');

  var StaticRenderer = _require(_dependencyMap[8], 'StaticRenderer');

  var TimerMixin = _require(_dependencyMap[9], 'react-timer-mixin');

  var View = _require(_dependencyMap[10], 'View');

  var cloneReferencedElement = _require(_dependencyMap[11], 'react-clone-referenced-element');

  var createReactClass = _require(_dependencyMap[12], 'create-react-class');

  var isEmpty = _require(_dependencyMap[13], 'isEmpty');

  var merge = _require(_dependencyMap[14], 'merge');

  var DEFAULT_PAGE_SIZE = 1;
  var DEFAULT_INITIAL_ROWS = 10;
  var DEFAULT_SCROLL_RENDER_AHEAD = 1000;
  var DEFAULT_END_REACHED_THRESHOLD = 1000;
  var DEFAULT_SCROLL_CALLBACK_THROTTLE = 50;
  var ListView = createReactClass({
    displayName: 'ListView',
    _childFrames: [],
    _sentEndForContentLength: null,
    _scrollComponent: null,
    _prevRenderedRowsCount: 0,
    _visibleRows: {},
    scrollProperties: {},
    mixins: [ScrollResponder.Mixin, TimerMixin],
    statics: {
      DataSource: ListViewDataSource
    },
    propTypes: babelHelpers.extends({}, ScrollView.propTypes, {
      dataSource: PropTypes.instanceOf(ListViewDataSource).isRequired,
      renderSeparator: PropTypes.func,
      renderRow: PropTypes.func.isRequired,
      initialListSize: PropTypes.number.isRequired,
      onEndReached: PropTypes.func,
      onEndReachedThreshold: PropTypes.number.isRequired,
      pageSize: PropTypes.number.isRequired,
      renderFooter: PropTypes.func,
      renderHeader: PropTypes.func,
      renderSectionHeader: PropTypes.func,
      renderScrollComponent: PropTypes.func.isRequired,
      scrollRenderAheadDistance: PropTypes.number.isRequired,
      onChangeVisibleRows: PropTypes.func,
      removeClippedSubviews: PropTypes.bool,
      stickySectionHeadersEnabled: PropTypes.bool,
      stickyHeaderIndices: PropTypes.arrayOf(PropTypes.number).isRequired,
      enableEmptySections: PropTypes.bool
    }),
    getMetrics: function getMetrics() {
      return {
        contentLength: this.scrollProperties.contentLength,
        totalRows: this.props.enableEmptySections ? this.props.dataSource.getRowAndSectionCount() : this.props.dataSource.getRowCount(),
        renderedRows: this.state.curRenderedRowsCount,
        visibleRows: Object.keys(this._visibleRows).length
      };
    },
    getScrollResponder: function getScrollResponder() {
      if (this._scrollComponent && this._scrollComponent.getScrollResponder) {
        return this._scrollComponent.getScrollResponder();
      }
    },
    getScrollableNode: function getScrollableNode() {
      if (this._scrollComponent && this._scrollComponent.getScrollableNode) {
        return this._scrollComponent.getScrollableNode();
      } else {
        return ReactNative.findNodeHandle(this._scrollComponent);
      }
    },
    scrollTo: function scrollTo() {
      if (this._scrollComponent && this._scrollComponent.scrollTo) {
        var _scrollComponent;

        (_scrollComponent = this._scrollComponent).scrollTo.apply(_scrollComponent, arguments);
      }
    },
    scrollToEnd: function scrollToEnd(options) {
      if (this._scrollComponent) {
        if (this._scrollComponent.scrollToEnd) {
          this._scrollComponent.scrollToEnd(options);
        } else {
          console.warn('The scroll component used by the ListView does not support ' + 'scrollToEnd. Check the renderScrollComponent prop of your ListView.');
        }
      }
    },
    flashScrollIndicators: function flashScrollIndicators() {
      if (this._scrollComponent && this._scrollComponent.flashScrollIndicators) {
        this._scrollComponent.flashScrollIndicators();
      }
    },
    setNativeProps: function setNativeProps(props) {
      if (this._scrollComponent) {
        this._scrollComponent.setNativeProps(props);
      }
    },
    getDefaultProps: function getDefaultProps() {
      return {
        initialListSize: DEFAULT_INITIAL_ROWS,
        pageSize: DEFAULT_PAGE_SIZE,
        renderScrollComponent: function renderScrollComponent(props) {
          return React.createElement(ScrollView, babelHelpers.extends({}, props, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 338
            }
          }));
        },
        scrollRenderAheadDistance: DEFAULT_SCROLL_RENDER_AHEAD,
        onEndReachedThreshold: DEFAULT_END_REACHED_THRESHOLD,
        stickySectionHeadersEnabled: Platform.OS === 'ios',
        stickyHeaderIndices: []
      };
    },
    getInitialState: function getInitialState() {
      return {
        curRenderedRowsCount: this.props.initialListSize,
        highlightedRow: {}
      };
    },
    getInnerViewNode: function getInnerViewNode() {
      return this._scrollComponent.getInnerViewNode();
    },
    UNSAFE_componentWillMount: function UNSAFE_componentWillMount() {
      this.scrollProperties = {
        visibleLength: null,
        contentLength: null,
        offset: 0
      };
      this._childFrames = [];
      this._visibleRows = {};
      this._prevRenderedRowsCount = 0;
      this._sentEndForContentLength = null;
    },
    componentDidMount: function componentDidMount() {
      var _this = this;

      this.requestAnimationFrame(function () {
        _this._measureAndUpdateScrollProps();
      });
    },
    UNSAFE_componentWillReceiveProps: function UNSAFE_componentWillReceiveProps(nextProps) {
      var _this2 = this;

      if (this.props.dataSource !== nextProps.dataSource || this.props.initialListSize !== nextProps.initialListSize) {
        this.setState(function (state, props) {
          _this2._prevRenderedRowsCount = 0;
          return {
            curRenderedRowsCount: Math.min(Math.max(state.curRenderedRowsCount, props.initialListSize), props.enableEmptySections ? props.dataSource.getRowAndSectionCount() : props.dataSource.getRowCount())
          };
        }, function () {
          return _this2._renderMoreRowsIfNeeded();
        });
      }
    },
    componentDidUpdate: function componentDidUpdate() {
      var _this3 = this;

      this.requestAnimationFrame(function () {
        _this3._measureAndUpdateScrollProps();
      });
    },
    _onRowHighlighted: function _onRowHighlighted(sectionID, rowID) {
      this.setState({
        highlightedRow: {
          sectionID: sectionID,
          rowID: rowID
        }
      });
    },
    render: function render() {
      var bodyComponents = [];
      var dataSource = this.props.dataSource;
      var allRowIDs = dataSource.rowIdentities;
      var rowCount = 0;
      var stickySectionHeaderIndices = [];
      var renderSectionHeader = this.props.renderSectionHeader;
      var header = this.props.renderHeader && this.props.renderHeader();
      var footer = this.props.renderFooter && this.props.renderFooter();
      var totalIndex = header ? 1 : 0;

      for (var sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {
        var sectionID = dataSource.sectionIdentities[sectionIdx];
        var rowIDs = allRowIDs[sectionIdx];

        if (rowIDs.length === 0) {
          if (this.props.enableEmptySections === undefined) {
            var warning = _require(_dependencyMap[15], 'fbjs/lib/warning');

            warning(false, 'In next release empty section headers will be rendered.' + " In this release you can use 'enableEmptySections' flag to render empty section headers.");
            continue;
          } else {
            var invariant = _require(_dependencyMap[16], 'fbjs/lib/invariant');

            invariant(this.props.enableEmptySections, "In next release 'enableEmptySections' flag will be deprecated, empty section headers will always be rendered." + ' If empty section headers are not desirable their indices should be excluded from sectionIDs object.' + " In this release 'enableEmptySections' may only have value 'true' to allow empty section headers rendering.");
          }
        }

        if (renderSectionHeader) {
          var element = renderSectionHeader(dataSource.getSectionHeaderData(sectionIdx), sectionID);

          if (element) {
            bodyComponents.push(React.cloneElement(element, {
              key: 's_' + sectionID
            }));

            if (this.props.stickySectionHeadersEnabled) {
              stickySectionHeaderIndices.push(totalIndex);
            }

            totalIndex++;
          }
        }

        for (var rowIdx = 0; rowIdx < rowIDs.length; rowIdx++) {
          var rowID = rowIDs[rowIdx];
          var comboID = sectionID + '_' + rowID;
          var shouldUpdateRow = rowCount >= this._prevRenderedRowsCount && dataSource.rowShouldUpdate(sectionIdx, rowIdx);
          var row = React.createElement(StaticRenderer, {
            key: 'r_' + comboID,
            shouldUpdate: !!shouldUpdateRow,
            render: this.props.renderRow.bind(null, dataSource.getRowData(sectionIdx, rowIdx), sectionID, rowID, this._onRowHighlighted),
            __source: {
              fileName: _jsxFileName,
              lineNumber: 473
            }
          });
          bodyComponents.push(row);
          totalIndex++;

          if (this.props.renderSeparator && (rowIdx !== rowIDs.length - 1 || sectionIdx === allRowIDs.length - 1)) {
            var adjacentRowHighlighted = this.state.highlightedRow.sectionID === sectionID && (this.state.highlightedRow.rowID === rowID || this.state.highlightedRow.rowID === rowIDs[rowIdx + 1]);
            var separator = this.props.renderSeparator(sectionID, rowID, adjacentRowHighlighted);

            if (separator) {
              bodyComponents.push(React.createElement(
                View,
                {
                  key: 's_' + comboID,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 502
                  }
                },
                separator
              ));
              totalIndex++;
            }
          }

          if (++rowCount === this.state.curRenderedRowsCount) {
            break;
          }
        }

        if (rowCount >= this.state.curRenderedRowsCount) {
          break;
        }
      }

      var _props = this.props,
          renderScrollComponent = _props.renderScrollComponent,
          props = babelHelpers.objectWithoutProperties(_props, ["renderScrollComponent"]);

      if (!props.scrollEventThrottle) {
        props.scrollEventThrottle = DEFAULT_SCROLL_CALLBACK_THROTTLE;
      }

      if (props.removeClippedSubviews === undefined) {
        props.removeClippedSubviews = true;
      }

      babelHelpers.extends(props, {
        onScroll: this._onScroll,
        stickyHeaderIndices: this.props.stickyHeaderIndices.concat(stickySectionHeaderIndices),
        onKeyboardWillShow: undefined,
        onKeyboardWillHide: undefined,
        onKeyboardDidShow: undefined,
        onKeyboardDidHide: undefined
      });
      return cloneReferencedElement(renderScrollComponent(props), {
        ref: this._setScrollComponentRef,
        onContentSizeChange: this._onContentSizeChange,
        onLayout: this._onLayout,
        DEPRECATED_sendUpdatedChildFrames: typeof props.onChangeVisibleRows !== undefined
      }, header, bodyComponents, footer);
    },
    _measureAndUpdateScrollProps: function _measureAndUpdateScrollProps() {
      var scrollComponent = this.getScrollResponder();

      if (!scrollComponent || !scrollComponent.getInnerViewNode) {
        return;
      }

      RCTScrollViewManager && RCTScrollViewManager.calculateChildFrames && RCTScrollViewManager.calculateChildFrames(ReactNative.findNodeHandle(scrollComponent), this._updateVisibleRows);
    },
    _setScrollComponentRef: function _setScrollComponentRef(scrollComponent) {
      this._scrollComponent = scrollComponent;
    },
    _onContentSizeChange: function _onContentSizeChange(width, height) {
      var contentLength = !this.props.horizontal ? height : width;

      if (contentLength !== this.scrollProperties.contentLength) {
        this.scrollProperties.contentLength = contentLength;

        this._updateVisibleRows();

        this._renderMoreRowsIfNeeded();
      }

      this.props.onContentSizeChange && this.props.onContentSizeChange(width, height);
    },
    _onLayout: function _onLayout(event) {
      var _event$nativeEvent$la = event.nativeEvent.layout,
          width = _event$nativeEvent$la.width,
          height = _event$nativeEvent$la.height;
      var visibleLength = !this.props.horizontal ? height : width;

      if (visibleLength !== this.scrollProperties.visibleLength) {
        this.scrollProperties.visibleLength = visibleLength;

        this._updateVisibleRows();

        this._renderMoreRowsIfNeeded();
      }

      this.props.onLayout && this.props.onLayout(event);
    },
    _maybeCallOnEndReached: function _maybeCallOnEndReached(event) {
      if (this.props.onEndReached && this.scrollProperties.contentLength !== this._sentEndForContentLength && this._getDistanceFromEnd(this.scrollProperties) < this.props.onEndReachedThreshold && this.state.curRenderedRowsCount === (this.props.enableEmptySections ? this.props.dataSource.getRowAndSectionCount() : this.props.dataSource.getRowCount())) {
        this._sentEndForContentLength = this.scrollProperties.contentLength;
        this.props.onEndReached(event);
        return true;
      }

      return false;
    },
    _renderMoreRowsIfNeeded: function _renderMoreRowsIfNeeded() {
      if (this.scrollProperties.contentLength === null || this.scrollProperties.visibleLength === null || this.state.curRenderedRowsCount === (this.props.enableEmptySections ? this.props.dataSource.getRowAndSectionCount() : this.props.dataSource.getRowCount())) {
        this._maybeCallOnEndReached();

        return;
      }

      var distanceFromEnd = this._getDistanceFromEnd(this.scrollProperties);

      if (distanceFromEnd < this.props.scrollRenderAheadDistance) {
        this._pageInNewRows();
      }
    },
    _pageInNewRows: function _pageInNewRows() {
      var _this4 = this;

      this.setState(function (state, props) {
        var rowsToRender = Math.min(state.curRenderedRowsCount + props.pageSize, props.enableEmptySections ? props.dataSource.getRowAndSectionCount() : props.dataSource.getRowCount());
        _this4._prevRenderedRowsCount = state.curRenderedRowsCount;
        return {
          curRenderedRowsCount: rowsToRender
        };
      }, function () {
        _this4._measureAndUpdateScrollProps();

        _this4._prevRenderedRowsCount = _this4.state.curRenderedRowsCount;
      });
    },
    _getDistanceFromEnd: function _getDistanceFromEnd(scrollProperties) {
      return scrollProperties.contentLength - scrollProperties.visibleLength - scrollProperties.offset;
    },
    _updateVisibleRows: function _updateVisibleRows(updatedFrames) {
      var _this5 = this;

      if (!this.props.onChangeVisibleRows) {
        return;
      }

      if (updatedFrames) {
        updatedFrames.forEach(function (newFrame) {
          _this5._childFrames[newFrame.index] = merge(newFrame);
        });
      }

      var isVertical = !this.props.horizontal;
      var dataSource = this.props.dataSource;
      var visibleMin = this.scrollProperties.offset;
      var visibleMax = visibleMin + this.scrollProperties.visibleLength;
      var allRowIDs = dataSource.rowIdentities;
      var header = this.props.renderHeader && this.props.renderHeader();
      var totalIndex = header ? 1 : 0;
      var visibilityChanged = false;
      var changedRows = {};

      for (var sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {
        var rowIDs = allRowIDs[sectionIdx];

        if (rowIDs.length === 0) {
          continue;
        }

        var sectionID = dataSource.sectionIdentities[sectionIdx];

        if (this.props.renderSectionHeader) {
          totalIndex++;
        }

        var visibleSection = this._visibleRows[sectionID];

        if (!visibleSection) {
          visibleSection = {};
        }

        for (var rowIdx = 0; rowIdx < rowIDs.length; rowIdx++) {
          var rowID = rowIDs[rowIdx];
          var frame = this._childFrames[totalIndex];
          totalIndex++;

          if (this.props.renderSeparator && (rowIdx !== rowIDs.length - 1 || sectionIdx === allRowIDs.length - 1)) {
            totalIndex++;
          }

          if (!frame) {
            break;
          }

          var rowVisible = visibleSection[rowID];
          var min = isVertical ? frame.y : frame.x;
          var max = min + (isVertical ? frame.height : frame.width);

          if (!min && !max || min === max) {
            break;
          }

          if (min > visibleMax || max < visibleMin) {
            if (rowVisible) {
              visibilityChanged = true;
              delete visibleSection[rowID];

              if (!changedRows[sectionID]) {
                changedRows[sectionID] = {};
              }

              changedRows[sectionID][rowID] = false;
            }
          } else if (!rowVisible) {
            visibilityChanged = true;
            visibleSection[rowID] = true;

            if (!changedRows[sectionID]) {
              changedRows[sectionID] = {};
            }

            changedRows[sectionID][rowID] = true;
          }
        }

        if (!isEmpty(visibleSection)) {
          this._visibleRows[sectionID] = visibleSection;
        } else if (this._visibleRows[sectionID]) {
          delete this._visibleRows[sectionID];
        }
      }

      visibilityChanged && this.props.onChangeVisibleRows(this._visibleRows, changedRows);
    },
    _onScroll: function _onScroll(e) {
      var isVertical = !this.props.horizontal;
      this.scrollProperties.visibleLength = e.nativeEvent.layoutMeasurement[isVertical ? 'height' : 'width'];
      this.scrollProperties.contentLength = e.nativeEvent.contentSize[isVertical ? 'height' : 'width'];
      this.scrollProperties.offset = e.nativeEvent.contentOffset[isVertical ? 'y' : 'x'];

      this._updateVisibleRows(e.nativeEvent.updatedChildFrames);

      if (!this._maybeCallOnEndReached(e)) {
        this._renderMoreRowsIfNeeded();
      }

      if (this.props.onEndReached && this._getDistanceFromEnd(this.scrollProperties) > this.props.onEndReachedThreshold) {
        this._sentEndForContentLength = null;
      }

      this.props.onScroll && this.props.onScroll(e);
    }
  });
  module.exports = ListView;
},246,[247,52,131,141,21,15,226,228,249,238,153,250,166,248,158,56,13],"ListView");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = _require(_dependencyMap[0], 'fbjs/lib/invariant');

  var isEmpty = _require(_dependencyMap[1], 'isEmpty');

  var warning = _require(_dependencyMap[2], 'fbjs/lib/warning');

  function defaultGetRowData(dataBlob, sectionID, rowID) {
    return dataBlob[sectionID][rowID];
  }

  function defaultGetSectionHeaderData(dataBlob, sectionID) {
    return dataBlob[sectionID];
  }

  var ListViewDataSource = function () {
    function ListViewDataSource(params) {
      babelHelpers.classCallCheck(this, ListViewDataSource);
      invariant(params && typeof params.rowHasChanged === 'function', 'Must provide a rowHasChanged function.');
      this._rowHasChanged = params.rowHasChanged;
      this._getRowData = params.getRowData || defaultGetRowData;
      this._sectionHeaderHasChanged = params.sectionHeaderHasChanged;
      this._getSectionHeaderData = params.getSectionHeaderData || defaultGetSectionHeaderData;
      this._dataBlob = null;
      this._dirtyRows = [];
      this._dirtySections = [];
      this._cachedRowCount = 0;
      this.rowIdentities = [];
      this.sectionIdentities = [];
    }

    babelHelpers.createClass(ListViewDataSource, [{
      key: "cloneWithRows",
      value: function cloneWithRows(dataBlob, rowIdentities) {
        var rowIds = rowIdentities ? [[].concat(babelHelpers.toConsumableArray(rowIdentities))] : null;

        if (!this._sectionHeaderHasChanged) {
          this._sectionHeaderHasChanged = function () {
            return false;
          };
        }

        return this.cloneWithRowsAndSections({
          s1: dataBlob
        }, ['s1'], rowIds);
      }
    }, {
      key: "cloneWithRowsAndSections",
      value: function cloneWithRowsAndSections(dataBlob, sectionIdentities, rowIdentities) {
        invariant(typeof this._sectionHeaderHasChanged === 'function', 'Must provide a sectionHeaderHasChanged function with section data.');
        invariant(!sectionIdentities || !rowIdentities || sectionIdentities.length === rowIdentities.length, 'row and section ids lengths must be the same');
        var newSource = new ListViewDataSource({
          getRowData: this._getRowData,
          getSectionHeaderData: this._getSectionHeaderData,
          rowHasChanged: this._rowHasChanged,
          sectionHeaderHasChanged: this._sectionHeaderHasChanged
        });
        newSource._dataBlob = dataBlob;

        if (sectionIdentities) {
          newSource.sectionIdentities = sectionIdentities;
        } else {
          newSource.sectionIdentities = Object.keys(dataBlob);
        }

        if (rowIdentities) {
          newSource.rowIdentities = rowIdentities;
        } else {
          newSource.rowIdentities = [];
          newSource.sectionIdentities.forEach(function (sectionID) {
            newSource.rowIdentities.push(Object.keys(dataBlob[sectionID]));
          });
        }

        newSource._cachedRowCount = countRows(newSource.rowIdentities);

        newSource._calculateDirtyArrays(this._dataBlob, this.sectionIdentities, this.rowIdentities);

        return newSource;
      }
    }, {
      key: "getRowCount",
      value: function getRowCount() {
        return this._cachedRowCount;
      }
    }, {
      key: "getRowAndSectionCount",
      value: function getRowAndSectionCount() {
        return this._cachedRowCount + this.sectionIdentities.length;
      }
    }, {
      key: "rowShouldUpdate",
      value: function rowShouldUpdate(sectionIndex, rowIndex) {
        var needsUpdate = this._dirtyRows[sectionIndex][rowIndex];
        warning(needsUpdate !== undefined, 'missing dirtyBit for section, row: ' + sectionIndex + ', ' + rowIndex);
        return needsUpdate;
      }
    }, {
      key: "getRowData",
      value: function getRowData(sectionIndex, rowIndex) {
        var sectionID = this.sectionIdentities[sectionIndex];
        var rowID = this.rowIdentities[sectionIndex][rowIndex];
        warning(sectionID !== undefined && rowID !== undefined, 'rendering invalid section, row: ' + sectionIndex + ', ' + rowIndex);
        return this._getRowData(this._dataBlob, sectionID, rowID);
      }
    }, {
      key: "getRowIDForFlatIndex",
      value: function getRowIDForFlatIndex(index) {
        var accessIndex = index;

        for (var ii = 0; ii < this.sectionIdentities.length; ii++) {
          if (accessIndex >= this.rowIdentities[ii].length) {
            accessIndex -= this.rowIdentities[ii].length;
          } else {
            return this.rowIdentities[ii][accessIndex];
          }
        }

        return null;
      }
    }, {
      key: "getSectionIDForFlatIndex",
      value: function getSectionIDForFlatIndex(index) {
        var accessIndex = index;

        for (var ii = 0; ii < this.sectionIdentities.length; ii++) {
          if (accessIndex >= this.rowIdentities[ii].length) {
            accessIndex -= this.rowIdentities[ii].length;
          } else {
            return this.sectionIdentities[ii];
          }
        }

        return null;
      }
    }, {
      key: "getSectionLengths",
      value: function getSectionLengths() {
        var results = [];

        for (var ii = 0; ii < this.sectionIdentities.length; ii++) {
          results.push(this.rowIdentities[ii].length);
        }

        return results;
      }
    }, {
      key: "sectionHeaderShouldUpdate",
      value: function sectionHeaderShouldUpdate(sectionIndex) {
        var needsUpdate = this._dirtySections[sectionIndex];
        warning(needsUpdate !== undefined, 'missing dirtyBit for section: ' + sectionIndex);
        return needsUpdate;
      }
    }, {
      key: "getSectionHeaderData",
      value: function getSectionHeaderData(sectionIndex) {
        if (!this._getSectionHeaderData) {
          return null;
        }

        var sectionID = this.sectionIdentities[sectionIndex];
        warning(sectionID !== undefined, 'renderSection called on invalid section: ' + sectionIndex);
        return this._getSectionHeaderData(this._dataBlob, sectionID);
      }
    }, {
      key: "_calculateDirtyArrays",
      value: function _calculateDirtyArrays(prevDataBlob, prevSectionIDs, prevRowIDs) {
        var prevSectionsHash = keyedDictionaryFromArray(prevSectionIDs);
        var prevRowsHash = {};

        for (var ii = 0; ii < prevRowIDs.length; ii++) {
          var sectionID = prevSectionIDs[ii];
          warning(!prevRowsHash[sectionID], 'SectionID appears more than once: ' + sectionID);
          prevRowsHash[sectionID] = keyedDictionaryFromArray(prevRowIDs[ii]);
        }

        this._dirtySections = [];
        this._dirtyRows = [];
        var dirty;

        for (var sIndex = 0; sIndex < this.sectionIdentities.length; sIndex++) {
          var sectionID = this.sectionIdentities[sIndex];
          dirty = !prevSectionsHash[sectionID];
          var sectionHeaderHasChanged = this._sectionHeaderHasChanged;

          if (!dirty && sectionHeaderHasChanged) {
            dirty = sectionHeaderHasChanged(this._getSectionHeaderData(prevDataBlob, sectionID), this._getSectionHeaderData(this._dataBlob, sectionID));
          }

          this._dirtySections.push(!!dirty);

          this._dirtyRows[sIndex] = [];

          for (var rIndex = 0; rIndex < this.rowIdentities[sIndex].length; rIndex++) {
            var rowID = this.rowIdentities[sIndex][rIndex];
            dirty = !prevSectionsHash[sectionID] || !prevRowsHash[sectionID][rowID] || this._rowHasChanged(this._getRowData(prevDataBlob, sectionID, rowID), this._getRowData(this._dataBlob, sectionID, rowID));

            this._dirtyRows[sIndex].push(!!dirty);
          }
        }
      }
    }]);
    return ListViewDataSource;
  }();

  function countRows(allRowIDs) {
    var totalRows = 0;

    for (var sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {
      var rowIDs = allRowIDs[sectionIdx];
      totalRows += rowIDs.length;
    }

    return totalRows;
  }

  function keyedDictionaryFromArray(arr) {
    if (isEmpty(arr)) {
      return {};
    }

    var result = {};

    for (var ii = 0; ii < arr.length; ii++) {
      var key = arr[ii];
      warning(!result[key], 'Value appears more than once in array: ' + key);
      result[key] = true;
    }

    return result;
  }

  module.exports = ListViewDataSource;
},247,[13,248,56],"ListViewDataSource");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  function isEmpty(obj) {
    if (Array.isArray(obj)) {
      return obj.length === 0;
    } else if (typeof obj === 'object') {
      for (var i in obj) {
        return false;
      }

      return true;
    } else {
      return !obj;
    }
  }

  module.exports = isEmpty;
},248,[],"isEmpty");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _class, _temp;

  var React = _require(_dependencyMap[0], 'React');

  var PropTypes = _require(_dependencyMap[1], 'prop-types');

  var StaticRenderer = (_temp = _class = function (_React$Component) {
    babelHelpers.inherits(StaticRenderer, _React$Component);

    function StaticRenderer() {
      babelHelpers.classCallCheck(this, StaticRenderer);
      return babelHelpers.possibleConstructorReturn(this, (StaticRenderer.__proto__ || Object.getPrototypeOf(StaticRenderer)).apply(this, arguments));
    }

    babelHelpers.createClass(StaticRenderer, [{
      key: "shouldComponentUpdate",
      value: function shouldComponentUpdate(nextProps) {
        return nextProps.shouldUpdate;
      }
    }, {
      key: "render",
      value: function render() {
        return this.props.render();
      }
    }]);
    return StaticRenderer;
  }(React.Component), _class.propTypes = {
    shouldUpdate: PropTypes.bool.isRequired,
    render: PropTypes.func.isRequired
  }, _temp);
  module.exports = StaticRenderer;
},249,[131,141],"StaticRenderer");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var React = _require(_dependencyMap[0], 'react');

  function cloneReferencedElement(element, config) {
    var cloneRef = config.ref;
    var originalRef = element.ref;

    for (var _len = arguments.length, children = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      children[_key - 2] = arguments[_key];
    }

    if (originalRef == null || cloneRef == null) {
      return React.cloneElement.apply(React, [element, config].concat(children));
    }

    if (typeof originalRef !== 'function') {
      if (__DEV__) {
        console.warn('Cloning an element with a ref that will be overwritten because it ' + 'is not a function. Use a composable callback-style ref instead. ' + 'Ignoring ref: ' + originalRef);
      }

      return React.cloneElement.apply(React, [element, config].concat(children));
    }

    return React.cloneElement.apply(React, [element, babelHelpers.extends({}, config, {
      ref: function ref(component) {
        cloneRef(component);
        originalRef(component);
      }
    })].concat(children));
  }

  module.exports = cloneReferencedElement;
},250,[114],"node_modules/react-clone-referenced-element/cloneReferencedElement.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-native/Libraries/Components/RefreshControl/RefreshControl.js";

  var ColorPropType = _require(_dependencyMap[0], 'ColorPropType');

  var NativeMethodsMixin = _require(_dependencyMap[1], 'NativeMethodsMixin');

  var Platform = _require(_dependencyMap[2], 'Platform');

  var React = _require(_dependencyMap[3], 'React');

  var PropTypes = _require(_dependencyMap[4], 'prop-types');

  var ViewPropTypes = _require(_dependencyMap[5], 'ViewPropTypes');

  var createReactClass = _require(_dependencyMap[6], 'create-react-class');

  var requireNativeComponent = _require(_dependencyMap[7], 'requireNativeComponent');

  if (Platform.OS === 'android') {
    var RefreshLayoutConsts = _require(_dependencyMap[8], 'UIManager').AndroidSwipeRefreshLayout.Constants;
  } else {
    var RefreshLayoutConsts = {
      SIZE: {}
    };
  }

  var RefreshControl = createReactClass({
    displayName: 'RefreshControl',
    statics: {
      SIZE: RefreshLayoutConsts.SIZE
    },
    mixins: [NativeMethodsMixin],
    propTypes: babelHelpers.extends({}, ViewPropTypes, {
      onRefresh: PropTypes.func,
      refreshing: PropTypes.bool.isRequired,
      tintColor: ColorPropType,
      titleColor: ColorPropType,
      title: PropTypes.string,
      enabled: PropTypes.bool,
      colors: PropTypes.arrayOf(ColorPropType),
      progressBackgroundColor: ColorPropType,
      size: PropTypes.oneOf([RefreshLayoutConsts.SIZE.DEFAULT, RefreshLayoutConsts.SIZE.LARGE]),
      progressViewOffset: PropTypes.number
    }),
    _nativeRef: null,
    _lastNativeRefreshing: false,
    componentDidMount: function componentDidMount() {
      this._lastNativeRefreshing = this.props.refreshing;
    },
    componentDidUpdate: function componentDidUpdate(prevProps) {
      if (this.props.refreshing !== prevProps.refreshing) {
        this._lastNativeRefreshing = this.props.refreshing;
      } else if (this.props.refreshing !== this._lastNativeRefreshing) {
        this._nativeRef.setNativeProps({
          refreshing: this.props.refreshing
        });

        this._lastNativeRefreshing = this.props.refreshing;
      }
    },
    render: function render() {
      var _this = this;

      return React.createElement(NativeRefreshControl, babelHelpers.extends({}, this.props, {
        ref: function ref(_ref) {
          _this._nativeRef = _ref;
        },
        onRefresh: this._onRefresh,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 156
        }
      }));
    },
    _onRefresh: function _onRefresh() {
      this._lastNativeRefreshing = true;
      this.props.onRefresh && this.props.onRefresh();
      this.forceUpdate();
    }
  });

  if (Platform.OS === 'ios') {
    var NativeRefreshControl = requireNativeComponent('RCTRefreshControl', RefreshControl);
  } else if (Platform.OS === 'android') {
    var NativeRefreshControl = requireNativeComponent('AndroidSwipeRefreshLayout', RefreshControl);
  }

  module.exports = RefreshControl;
},251,[127,128,52,131,141,155,166,168,110],"RefreshControl");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _class,
      _temp,
      _initialiseProps,
      _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-native/Libraries/Lists/VirtualizedList.js",
      _class2,
      _temp3,
      _class3,
      _temp4;

  var Batchinator = _require2(_dependencyMap[0], 'Batchinator');

  var FillRateHelper = _require2(_dependencyMap[1], 'FillRateHelper');

  var PropTypes = _require2(_dependencyMap[2], 'prop-types');

  var React = _require2(_dependencyMap[3], 'React');

  var ReactNative = _require2(_dependencyMap[4], 'ReactNative');

  var RefreshControl = _require2(_dependencyMap[5], 'RefreshControl');

  var ScrollView = _require2(_dependencyMap[6], 'ScrollView');

  var StyleSheet = _require2(_dependencyMap[7], 'StyleSheet');

  var UIManager = _require2(_dependencyMap[8], 'UIManager');

  var View = _require2(_dependencyMap[9], 'View');

  var ViewabilityHelper = _require2(_dependencyMap[10], 'ViewabilityHelper');

  var flattenStyle = _require2(_dependencyMap[11], 'flattenStyle');

  var infoLog = _require2(_dependencyMap[12], 'infoLog');

  var invariant = _require2(_dependencyMap[13], 'fbjs/lib/invariant');

  var warning = _require2(_dependencyMap[14], 'fbjs/lib/warning');

  var _require = _require2(_dependencyMap[15], 'VirtualizeUtils'),
      computeWindowedRenderLimits = _require.computeWindowedRenderLimits;

  var _usedIndexForKey = false;
  var VirtualizedList = (_temp = _class = function (_React$PureComponent) {
    babelHelpers.inherits(VirtualizedList, _React$PureComponent);
    babelHelpers.createClass(VirtualizedList, [{
      key: "scrollToEnd",
      value: function scrollToEnd(params) {
        var animated = params ? params.animated : true;
        var veryLast = this.props.getItemCount(this.props.data) - 1;

        var frame = this._getFrameMetricsApprox(veryLast);

        var offset = Math.max(0, frame.offset + frame.length + this._footerLength - this._scrollMetrics.visibleLength);

        this._scrollRef.scrollTo(this.props.horizontal ? {
          x: offset,
          animated: animated
        } : {
          y: offset,
          animated: animated
        });
      }
    }, {
      key: "scrollToIndex",
      value: function scrollToIndex(params) {
        var _props = this.props,
            data = _props.data,
            horizontal = _props.horizontal,
            getItemCount = _props.getItemCount,
            getItemLayout = _props.getItemLayout,
            onScrollToIndexFailed = _props.onScrollToIndexFailed;
        var animated = params.animated,
            index = params.index,
            viewOffset = params.viewOffset,
            viewPosition = params.viewPosition;
        invariant(index >= 0 && index < getItemCount(data), "scrollToIndex out of range: " + index + " vs " + (getItemCount(data) - 1));

        if (!getItemLayout && index > this._highestMeasuredFrameIndex) {
          invariant(!!onScrollToIndexFailed, 'scrollToIndex should be used in conjunction with getItemLayout or onScrollToIndexFailed, ' + 'otherwise there is no way to know the location of offscreen indices or handle failures.');
          onScrollToIndexFailed({
            averageItemLength: this._averageCellLength,
            highestMeasuredFrameIndex: this._highestMeasuredFrameIndex,
            index: index
          });
          return;
        }

        var frame = this._getFrameMetricsApprox(index);

        var offset = Math.max(0, frame.offset - (viewPosition || 0) * (this._scrollMetrics.visibleLength - frame.length)) - (viewOffset || 0);

        this._scrollRef.scrollTo(horizontal ? {
          x: offset,
          animated: animated
        } : {
          y: offset,
          animated: animated
        });
      }
    }, {
      key: "scrollToItem",
      value: function scrollToItem(params) {
        var item = params.item;
        var _props2 = this.props,
            data = _props2.data,
            getItem = _props2.getItem,
            getItemCount = _props2.getItemCount;
        var itemCount = getItemCount(data);

        for (var _index = 0; _index < itemCount; _index++) {
          if (getItem(data, _index) === item) {
            this.scrollToIndex(babelHelpers.extends({}, params, {
              index: _index
            }));
            break;
          }
        }
      }
    }, {
      key: "scrollToOffset",
      value: function scrollToOffset(params) {
        var animated = params.animated,
            offset = params.offset;

        this._scrollRef.scrollTo(this.props.horizontal ? {
          x: offset,
          animated: animated
        } : {
          y: offset,
          animated: animated
        });
      }
    }, {
      key: "recordInteraction",
      value: function recordInteraction() {
        this._nestedChildLists.forEach(function (childList) {
          childList.ref && childList.ref.recordInteraction();
        });

        this._viewabilityTuples.forEach(function (t) {
          t.viewabilityHelper.recordInteraction();
        });

        this._updateViewableItems(this.props.data);
      }
    }, {
      key: "flashScrollIndicators",
      value: function flashScrollIndicators() {
        this._scrollRef.flashScrollIndicators();
      }
    }, {
      key: "getScrollResponder",
      value: function getScrollResponder() {
        if (this._scrollRef && this._scrollRef.getScrollResponder) {
          return this._scrollRef.getScrollResponder();
        }
      }
    }, {
      key: "getScrollableNode",
      value: function getScrollableNode() {
        if (this._scrollRef && this._scrollRef.getScrollableNode) {
          return this._scrollRef.getScrollableNode();
        } else {
          return ReactNative.findNodeHandle(this._scrollRef);
        }
      }
    }, {
      key: "setNativeProps",
      value: function setNativeProps(props) {
        if (this._scrollRef) {
          this._scrollRef.setNativeProps(props);
        }
      }
    }, {
      key: "getChildContext",
      value: function getChildContext() {
        return {
          virtualizedList: {
            getScrollMetrics: this._getScrollMetrics,
            horizontal: this.props.horizontal,
            getOutermostParentListRef: this._getOutermostParentListRef,
            registerAsNestedChild: this._registerAsNestedChild,
            unregisterAsNestedChild: this._unregisterAsNestedChild
          }
        };
      }
    }, {
      key: "_getCellKey",
      value: function _getCellKey() {
        return this.context.virtualizedCell && this.context.virtualizedCell.cellKey || 'rootList';
      }
    }, {
      key: "hasMore",
      value: function hasMore() {
        return this._hasMore;
      }
    }]);

    function VirtualizedList(props, context) {
      babelHelpers.classCallCheck(this, VirtualizedList);

      var _this = babelHelpers.possibleConstructorReturn(this, (VirtualizedList.__proto__ || Object.getPrototypeOf(VirtualizedList)).call(this, props, context));

      _initialiseProps.call(_this);

      invariant(!props.onScroll || !props.onScroll.__isNative, 'Components based on VirtualizedList must be wrapped with Animated.createAnimatedComponent ' + 'to support native onScroll events with useNativeDriver');
      invariant(props.windowSize > 0, 'VirtualizedList: The windowSize prop must be present and set to a value greater than 0.');
      _this._fillRateHelper = new FillRateHelper(_this._getFrameMetrics);
      _this._updateCellsToRenderBatcher = new Batchinator(_this._updateCellsToRender, _this.props.updateCellsBatchingPeriod);

      if (_this.props.viewabilityConfigCallbackPairs) {
        _this._viewabilityTuples = _this.props.viewabilityConfigCallbackPairs.map(function (pair) {
          return {
            viewabilityHelper: new ViewabilityHelper(pair.viewabilityConfig),
            onViewableItemsChanged: pair.onViewableItemsChanged
          };
        });
      } else if (_this.props.onViewableItemsChanged) {
        _this._viewabilityTuples.push({
          viewabilityHelper: new ViewabilityHelper(_this.props.viewabilityConfig),
          onViewableItemsChanged: _this.props.onViewableItemsChanged
        });
      }

      var initialState = {
        first: _this.props.initialScrollIndex || 0,
        last: Math.min(_this.props.getItemCount(_this.props.data), (_this.props.initialScrollIndex || 0) + _this.props.initialNumToRender) - 1
      };

      if (_this._isNestedWithSameOrientation()) {
        var storedState = _this.context.virtualizedList.registerAsNestedChild({
          cellKey: _this._getCellKey(),
          key: _this.props.listKey || _this._getCellKey(),
          ref: _this
        });

        if (storedState) {
          initialState = storedState;
          _this.state = storedState;
          _this._frames = storedState.frames;
        }
      }

      _this.state = initialState;
      return _this;
    }

    babelHelpers.createClass(VirtualizedList, [{
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this._isNestedWithSameOrientation()) {
          this.context.virtualizedList.unregisterAsNestedChild({
            key: this.props.listKey || this._getCellKey(),
            state: {
              first: this.state.first,
              last: this.state.last,
              frames: this._frames
            }
          });
        }

        this._updateViewableItems(null);

        this._updateCellsToRenderBatcher.dispose({
          abort: true
        });

        this._viewabilityTuples.forEach(function (tuple) {
          tuple.viewabilityHelper.dispose();
        });

        this._fillRateHelper.deactivateAndFlush();
      }
    }, {
      key: "UNSAFE_componentWillReceiveProps",
      value: function UNSAFE_componentWillReceiveProps(newProps) {
        var data = newProps.data,
            extraData = newProps.extraData,
            getItemCount = newProps.getItemCount,
            maxToRenderPerBatch = newProps.maxToRenderPerBatch;
        this.setState({
          first: Math.max(0, Math.min(this.state.first, getItemCount(data) - 1 - maxToRenderPerBatch)),
          last: Math.max(0, Math.min(this.state.last, getItemCount(data) - 1))
        });

        if (data !== this.props.data || extraData !== this.props.extraData) {
          this._hasDataChangedSinceEndReached = true;

          this._viewabilityTuples.forEach(function (tuple) {
            tuple.viewabilityHelper.resetViewableIndices();
          });
        }
      }
    }, {
      key: "_pushCells",
      value: function _pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, first, last, inversionStyle) {
        var _this2 = this;

        var _props3 = this.props,
            CellRendererComponent = _props3.CellRendererComponent,
            ItemSeparatorComponent = _props3.ItemSeparatorComponent,
            data = _props3.data,
            getItem = _props3.getItem,
            getItemCount = _props3.getItemCount,
            horizontal = _props3.horizontal,
            keyExtractor = _props3.keyExtractor;
        var stickyOffset = this.props.ListHeaderComponent ? 1 : 0;
        var end = getItemCount(data) - 1;
        var prevCellKey = void 0;
        last = Math.min(end, last);

        var _loop = function _loop(ii) {
          var item = getItem(data, ii);
          var key = keyExtractor(item, ii);

          _this2._indicesToKeys.set(ii, key);

          if (stickyIndicesFromProps.has(ii + stickyOffset)) {
            stickyHeaderIndices.push(cells.length);
          }

          cells.push(React.createElement(CellRenderer, {
            CellRendererComponent: CellRendererComponent,
            ItemSeparatorComponent: ii < end ? ItemSeparatorComponent : undefined,
            cellKey: key,
            fillRateHelper: _this2._fillRateHelper,
            horizontal: horizontal,
            index: ii,
            inversionStyle: inversionStyle,
            item: item,
            key: key,
            prevCellKey: prevCellKey,
            onUpdateSeparators: _this2._onUpdateSeparators,
            onLayout: function onLayout(e) {
              return _this2._onCellLayout(e, key, ii);
            },
            onUnmount: _this2._onCellUnmount,
            parentProps: _this2.props,
            ref: function (_ref) {
              function ref(_x) {
                return _ref.apply(this, arguments);
              }

              ref.toString = function () {
                return _ref.toString();
              };

              return ref;
            }(function (ref) {
              _this2._cellRefs[key] = ref;
            }),
            __source: {
              fileName: _jsxFileName,
              lineNumber: 668
            }
          }));
          prevCellKey = key;
        };

        for (var ii = first; ii <= last; ii++) {
          _loop(ii);
        }
      }
    }, {
      key: "_isVirtualizationDisabled",
      value: function _isVirtualizationDisabled() {
        return this.props.disableVirtualization;
      }
    }, {
      key: "_isNestedWithSameOrientation",
      value: function _isNestedWithSameOrientation() {
        var nestedContext = this.context.virtualizedList;
        return !!(nestedContext && !!nestedContext.horizontal === !!this.props.horizontal);
      }
    }, {
      key: "render",
      value: function render() {
        if (__DEV__) {
          var flatStyles = flattenStyle(this.props.contentContainerStyle);
          warning(flatStyles == null || flatStyles.flexWrap !== 'wrap', '`flexWrap: `wrap`` is not supported with the `VirtualizedList` components.' + 'Consider using `numColumns` with `FlatList` instead.');
        }

        var _props4 = this.props,
            ListEmptyComponent = _props4.ListEmptyComponent,
            ListFooterComponent = _props4.ListFooterComponent,
            ListHeaderComponent = _props4.ListHeaderComponent;
        var _props5 = this.props,
            data = _props5.data,
            horizontal = _props5.horizontal;

        var isVirtualizationDisabled = this._isVirtualizationDisabled();

        var inversionStyle = this.props.inverted ? this.props.horizontal ? styles.horizontallyInverted : styles.verticallyInverted : null;
        var cells = [];
        var stickyIndicesFromProps = new Set(this.props.stickyHeaderIndices);
        var stickyHeaderIndices = [];

        if (ListHeaderComponent) {
          if (stickyIndicesFromProps.has(0)) {
            stickyHeaderIndices.push(0);
          }

          var element = React.isValidElement(ListHeaderComponent) ? ListHeaderComponent : React.createElement(ListHeaderComponent, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 742
            }
          });
          cells.push(React.createElement(
            VirtualizedCellWrapper,
            {
              cellKey: this._getCellKey() + '-header',
              key: "$header",
              __source: {
                fileName: _jsxFileName,
                lineNumber: 745
              }
            },
            React.createElement(
              View,
              {
                onLayout: this._onLayoutHeader,
                style: inversionStyle,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 748
                }
              },
              element
            )
          ));
        }

        var itemCount = this.props.getItemCount(data);

        if (itemCount > 0) {
          _usedIndexForKey = false;
          var spacerKey = !horizontal ? 'height' : 'width';
          var lastInitialIndex = this.props.initialScrollIndex ? -1 : this.props.initialNumToRender - 1;
          var _state = this.state,
              _first = _state.first,
              _last = _state.last;

          this._pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, 0, lastInitialIndex, inversionStyle);

          var firstAfterInitial = Math.max(lastInitialIndex + 1, _first);

          if (!isVirtualizationDisabled && _first > lastInitialIndex + 1) {
            var insertedStickySpacer = false;

            if (stickyIndicesFromProps.size > 0) {
              var stickyOffset = ListHeaderComponent ? 1 : 0;

              for (var ii = firstAfterInitial - 1; ii > lastInitialIndex; ii--) {
                if (stickyIndicesFromProps.has(ii + stickyOffset)) {
                  var initBlock = this._getFrameMetricsApprox(lastInitialIndex);

                  var stickyBlock = this._getFrameMetricsApprox(ii);

                  var leadSpace = stickyBlock.offset - (initBlock.offset + initBlock.length);
                  cells.push(React.createElement(View, {
                    key: "$sticky_lead",
                    style: babelHelpers.defineProperty({}, spacerKey, leadSpace),
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 783
                    }
                  }));

                  this._pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, ii, ii, inversionStyle);

                  var trailSpace = this._getFrameMetricsApprox(_first).offset - (stickyBlock.offset + stickyBlock.length);
                  cells.push(React.createElement(View, {
                    key: "$sticky_trail",
                    style: babelHelpers.defineProperty({}, spacerKey, trailSpace),
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 797
                    }
                  }));
                  insertedStickySpacer = true;
                  break;
                }
              }
            }

            if (!insertedStickySpacer) {
              var _initBlock = this._getFrameMetricsApprox(lastInitialIndex);

              var firstSpace = this._getFrameMetricsApprox(_first).offset - (_initBlock.offset + _initBlock.length);

              cells.push(React.createElement(View, {
                key: "$lead_spacer",
                style: babelHelpers.defineProperty({}, spacerKey, firstSpace),
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 810
                }
              }));
            }
          }

          this._pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, firstAfterInitial, _last, inversionStyle);

          if (!this._hasWarned.keys && _usedIndexForKey) {
            console.warn('VirtualizedList: missing keys for items, make sure to specify a key property on each ' + 'item or provide a custom keyExtractor.');
            this._hasWarned.keys = true;
          }

          if (!isVirtualizationDisabled && _last < itemCount - 1) {
            var lastFrame = this._getFrameMetricsApprox(_last);

            var end = this.props.getItemLayout ? itemCount - 1 : Math.min(itemCount - 1, this._highestMeasuredFrameIndex);

            var endFrame = this._getFrameMetricsApprox(end);

            var tailSpacerLength = endFrame.offset + endFrame.length - (lastFrame.offset + lastFrame.length);
            cells.push(React.createElement(View, {
              key: "$tail_spacer",
              style: babelHelpers.defineProperty({}, spacerKey, tailSpacerLength),
              __source: {
                fileName: _jsxFileName,
                lineNumber: 843
              }
            }));
          }
        } else if (ListEmptyComponent) {
          var _element = React.isValidElement(ListEmptyComponent) ? ListEmptyComponent : React.createElement(ListEmptyComponent, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 851
            }
          });

          cells.push(React.createElement(
            View,
            {
              key: "$empty",
              onLayout: this._onLayoutEmpty,
              style: inversionStyle,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 854
              }
            },
            _element
          ));
        }

        if (ListFooterComponent) {
          var _element2 = React.isValidElement(ListFooterComponent) ? ListFooterComponent : React.createElement(ListFooterComponent, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 867
            }
          });

          cells.push(React.createElement(
            VirtualizedCellWrapper,
            {
              cellKey: this._getCellKey() + '-footer',
              key: "$footer",
              __source: {
                fileName: _jsxFileName,
                lineNumber: 870
              }
            },
            React.createElement(
              View,
              {
                onLayout: this._onLayoutFooter,
                style: inversionStyle,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 873
                }
              },
              _element2
            )
          ));
        }

        var scrollProps = babelHelpers.extends({}, this.props, {
          onContentSizeChange: this._onContentSizeChange,
          onLayout: this._onLayout,
          onScroll: this._onScroll,
          onScrollBeginDrag: this._onScrollBeginDrag,
          onScrollEndDrag: this._onScrollEndDrag,
          onMomentumScrollEnd: this._onMomentumScrollEnd,
          scrollEventThrottle: this.props.scrollEventThrottle,
          invertStickyHeaders: this.props.inverted,
          stickyHeaderIndices: stickyHeaderIndices
        });

        if (inversionStyle) {
          scrollProps.style = [inversionStyle, this.props.style];
        }

        this._hasMore = this.state.last < this.props.getItemCount(this.props.data) - 1;
        var ret = React.cloneElement((this.props.renderScrollComponent || this._defaultRenderScrollComponent)(scrollProps), {
          ref: this._captureScrollRef
        }, cells);

        if (this.props.debug) {
          return React.createElement(
            View,
            {
              style: {
                flex: 1
              },
              __source: {
                fileName: _jsxFileName,
                lineNumber: 909
              }
            },
            ret,
            this._renderDebugOverlay()
          );
        } else {
          return ret;
        }
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate() {
        this._scheduleCellsToRenderUpdate();
      }
    }, {
      key: "_computeBlankness",
      value: function _computeBlankness() {
        this._fillRateHelper.computeBlankness(this.props, this.state, this._scrollMetrics);
      }
    }, {
      key: "_onCellLayout",
      value: function _onCellLayout(e, cellKey, index) {
        var layout = e.nativeEvent.layout;
        var next = {
          offset: this._selectOffset(layout),
          length: this._selectLength(layout),
          index: index,
          inLayout: true
        };
        var curr = this._frames[cellKey];

        if (!curr || next.offset !== curr.offset || next.length !== curr.length || index !== curr.index) {
          this._totalCellLength += next.length - (curr ? curr.length : 0);
          this._totalCellsMeasured += curr ? 0 : 1;
          this._averageCellLength = this._totalCellLength / this._totalCellsMeasured;
          this._frames[cellKey] = next;
          this._highestMeasuredFrameIndex = Math.max(this._highestMeasuredFrameIndex, index);

          this._scheduleCellsToRenderUpdate();
        } else {
          this._frames[cellKey].inLayout = true;
        }

        this._computeBlankness();
      }
    }, {
      key: "_measureLayoutRelativeToContainingList",
      value: function _measureLayoutRelativeToContainingList() {
        var _this3 = this;

        UIManager.measureLayout(ReactNative.findNodeHandle(this), ReactNative.findNodeHandle(this.context.virtualizedList.getOutermostParentListRef()), function (error) {
          console.warn("VirtualizedList: Encountered an error while measuring a list's" + ' offset from its containing VirtualizedList.');
        }, function (x, y, width, height) {
          _this3._offsetFromParentVirtualizedList = _this3._selectOffset({
            x: x,
            y: y
          });
          _this3._scrollMetrics.contentLength = _this3._selectLength({
            width: width,
            height: height
          });

          var scrollMetrics = _this3._convertParentScrollMetrics(_this3.context.virtualizedList.getScrollMetrics());

          _this3._scrollMetrics.visibleLength = scrollMetrics.visibleLength;
          _this3._scrollMetrics.offset = scrollMetrics.offset;
        });
      }
    }, {
      key: "_renderDebugOverlay",
      value: function _renderDebugOverlay() {
        var normalize = this._scrollMetrics.visibleLength / this._scrollMetrics.contentLength;
        var framesInLayout = [];
        var itemCount = this.props.getItemCount(this.props.data);

        for (var ii = 0; ii < itemCount; ii++) {
          var frame = this._getFrameMetricsApprox(ii);

          if (frame.inLayout) {
            framesInLayout.push(frame);
          }
        }

        var windowTop = this._getFrameMetricsApprox(this.state.first).offset;

        var frameLast = this._getFrameMetricsApprox(this.state.last);

        var windowLen = frameLast.offset + frameLast.length - windowTop;
        var visTop = this._scrollMetrics.offset;
        var visLen = this._scrollMetrics.visibleLength;
        var baseStyle = {
          position: 'absolute',
          top: 0,
          right: 0
        };
        return React.createElement(
          View,
          {
            style: babelHelpers.extends({}, baseStyle, {
              bottom: 0,
              width: 20,
              borderColor: 'blue',
              borderWidth: 1
            }),
            __source: {
              fileName: _jsxFileName,
              lineNumber: 1110
            }
          },
          framesInLayout.map(function (f, ii) {
            return React.createElement(View, {
              key: 'f' + ii,
              style: babelHelpers.extends({}, baseStyle, {
                left: 0,
                top: f.offset * normalize,
                height: f.length * normalize,
                backgroundColor: 'orange'
              }),
              __source: {
                fileName: _jsxFileName,
                lineNumber: 1119
              }
            });
          }),
          React.createElement(View, {
            style: babelHelpers.extends({}, baseStyle, {
              left: 0,
              top: windowTop * normalize,
              height: windowLen * normalize,
              borderColor: 'green',
              borderWidth: 2
            }),
            __source: {
              fileName: _jsxFileName,
              lineNumber: 1130
            }
          }),
          React.createElement(View, {
            style: babelHelpers.extends({}, baseStyle, {
              left: 0,
              top: visTop * normalize,
              height: visLen * normalize,
              borderColor: 'red',
              borderWidth: 2
            }),
            __source: {
              fileName: _jsxFileName,
              lineNumber: 1140
            }
          })
        );
      }
    }, {
      key: "_selectLength",
      value: function _selectLength(metrics) {
        return !this.props.horizontal ? metrics.height : metrics.width;
      }
    }, {
      key: "_selectOffset",
      value: function _selectOffset(metrics) {
        return !this.props.horizontal ? metrics.y : metrics.x;
      }
    }, {
      key: "_maybeCallOnEndReached",
      value: function _maybeCallOnEndReached() {
        var _props6 = this.props,
            data = _props6.data,
            getItemCount = _props6.getItemCount,
            onEndReached = _props6.onEndReached,
            onEndReachedThreshold = _props6.onEndReachedThreshold;
        var _scrollMetrics = this._scrollMetrics,
            contentLength = _scrollMetrics.contentLength,
            visibleLength = _scrollMetrics.visibleLength,
            offset = _scrollMetrics.offset;
        var distanceFromEnd = contentLength - visibleLength - offset;

        if (onEndReached && this.state.last === getItemCount(data) - 1 && distanceFromEnd < onEndReachedThreshold * visibleLength && (this._hasDataChangedSinceEndReached || this._scrollMetrics.contentLength !== this._sentEndForContentLength)) {
          this._hasDataChangedSinceEndReached = false;
          this._sentEndForContentLength = this._scrollMetrics.contentLength;
          onEndReached({
            distanceFromEnd: distanceFromEnd
          });
        }
      }
    }, {
      key: "_scheduleCellsToRenderUpdate",
      value: function _scheduleCellsToRenderUpdate() {
        var _state2 = this.state,
            first = _state2.first,
            last = _state2.last;
        var _scrollMetrics2 = this._scrollMetrics,
            offset = _scrollMetrics2.offset,
            visibleLength = _scrollMetrics2.visibleLength,
            velocity = _scrollMetrics2.velocity;
        var itemCount = this.props.getItemCount(this.props.data);
        var hiPri = false;

        if (first > 0 || last < itemCount - 1) {
          var distTop = offset - this._getFrameMetricsApprox(first).offset;

          var distBottom = this._getFrameMetricsApprox(last).offset - (offset + visibleLength);
          var scrollingThreshold = this.props.onEndReachedThreshold * visibleLength / 2;
          hiPri = Math.min(distTop, distBottom) < 0 || velocity < -2 && distTop < scrollingThreshold || velocity > 2 && distBottom < scrollingThreshold;
        }

        if (hiPri && this._averageCellLength) {
          this._updateCellsToRenderBatcher.dispose({
            abort: true
          });

          this._updateCellsToRender();

          return;
        } else {
          this._updateCellsToRenderBatcher.schedule();
        }
      }
    }, {
      key: "_updateViewableItems",
      value: function _updateViewableItems(data) {
        var _this4 = this;

        var getItemCount = this.props.getItemCount;

        this._viewabilityTuples.forEach(function (tuple) {
          tuple.viewabilityHelper.onUpdate(getItemCount(data), _this4._scrollMetrics.offset, _this4._scrollMetrics.visibleLength, _this4._getFrameMetrics, _this4._createViewToken, tuple.onViewableItemsChanged, _this4.state);
        });
      }
    }]);
    return VirtualizedList;
  }(React.PureComponent), _class.defaultProps = {
    disableVirtualization: false,
    horizontal: false,
    initialNumToRender: 10,
    keyExtractor: function keyExtractor(item, index) {
      if (item.key != null) {
        return item.key;
      }

      _usedIndexForKey = true;
      return String(index);
    },
    maxToRenderPerBatch: 10,
    onEndReachedThreshold: 2,
    scrollEventThrottle: 50,
    updateCellsBatchingPeriod: 50,
    windowSize: 21
  }, _class.contextTypes = {
    virtualizedCell: PropTypes.shape({
      cellKey: PropTypes.string
    }),
    virtualizedList: PropTypes.shape({
      getScrollMetrics: PropTypes.func,
      horizontal: PropTypes.bool,
      getOutermostParentListRef: PropTypes.func,
      registerAsNestedChild: PropTypes.func,
      unregisterAsNestedChild: PropTypes.func
    })
  }, _class.childContextTypes = {
    virtualizedList: PropTypes.shape({
      getScrollMetrics: PropTypes.func,
      horizontal: PropTypes.bool,
      getOutermostParentListRef: PropTypes.func,
      registerAsNestedChild: PropTypes.func,
      unregisterAsNestedChild: PropTypes.func
    })
  }, _initialiseProps = function _initialiseProps() {
    var _this5 = this;

    this._getScrollMetrics = function () {
      return _this5._scrollMetrics;
    };

    this._getOutermostParentListRef = function () {
      if (_this5._isNestedWithSameOrientation()) {
        return _this5.context.virtualizedList.getOutermostParentListRef();
      } else {
        return _this5;
      }
    };

    this._registerAsNestedChild = function (childList) {
      var childListsInCell = _this5._cellKeysToChildListKeys.get(childList.cellKey) || new Set();
      childListsInCell.add(childList.key);

      _this5._cellKeysToChildListKeys.set(childList.cellKey, childListsInCell);

      var existingChildData = _this5._nestedChildLists.get(childList.key);

      invariant(!(existingChildData && existingChildData.ref !== null), 'A VirtualizedList contains a cell which itself contains ' + 'more than one VirtualizedList of the same orientation as the parent ' + 'list. You must pass a unique listKey prop to each sibling list.');

      _this5._nestedChildLists.set(childList.key, {
        ref: childList.ref,
        state: null
      });

      if (_this5._hasInteracted) {
        childList.ref.recordInteraction();
      }

      return existingChildData && existingChildData.state;
    };

    this._unregisterAsNestedChild = function (childList) {
      _this5._nestedChildLists.set(childList.key, {
        ref: null,
        state: childList.state
      });
    };

    this._onUpdateSeparators = function (keys, newProps) {
      keys.forEach(function (key) {
        var ref = key != null && _this5._cellRefs[key];
        ref && ref.updateSeparatorProps(newProps);
      });
    };

    this._averageCellLength = 0;
    this._cellKeysToChildListKeys = new Map();
    this._cellRefs = {};
    this._frames = {};
    this._footerLength = 0;
    this._hasDataChangedSinceEndReached = true;
    this._hasInteracted = false;
    this._hasMore = false;
    this._hasWarned = {};
    this._highestMeasuredFrameIndex = 0;
    this._headerLength = 0;
    this._indicesToKeys = new Map();
    this._hasDoneInitialScroll = false;
    this._nestedChildLists = new Map();
    this._offsetFromParentVirtualizedList = 0;
    this._prevParentOffset = 0;
    this._scrollMetrics = {
      contentLength: 0,
      dOffset: 0,
      dt: 10,
      offset: 0,
      timestamp: 0,
      velocity: 0,
      visibleLength: 0
    };
    this._scrollRef = null;
    this._sentEndForContentLength = 0;
    this._totalCellLength = 0;
    this._totalCellsMeasured = 0;
    this._viewabilityTuples = [];

    this._captureScrollRef = function (ref) {
      _this5._scrollRef = ref;
    };

    this._defaultRenderScrollComponent = function (props) {
      if (_this5._isNestedWithSameOrientation()) {
        return React.createElement(View, babelHelpers.extends({}, props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 974
          }
        }));
      } else if (props.onRefresh) {
        invariant(typeof props.refreshing === 'boolean', '`refreshing` prop must be set as a boolean in order to use `onRefresh`, but got `' + JSON.stringify(props.refreshing) + '`');
        return React.createElement(ScrollView, babelHelpers.extends({}, props, {
          refreshControl: React.createElement(RefreshControl, {
            refreshing: props.refreshing,
            onRefresh: props.onRefresh,
            progressViewOffset: props.progressViewOffset,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 989
            }
          }),
          __source: {
            fileName: _jsxFileName,
            lineNumber: 983
          }
        }));
      } else {
        return React.createElement(ScrollView, babelHelpers.extends({}, props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 998
          }
        }));
      }
    };

    this._onCellUnmount = function (cellKey) {
      var curr = _this5._frames[cellKey];

      if (curr) {
        _this5._frames[cellKey] = babelHelpers.extends({}, curr, {
          inLayout: false
        });
      }
    };

    this._onLayout = function (e) {
      if (_this5._isNestedWithSameOrientation()) {
        _this5._measureLayoutRelativeToContainingList();
      } else {
        _this5._scrollMetrics.visibleLength = _this5._selectLength(e.nativeEvent.layout);
      }

      _this5.props.onLayout && _this5.props.onLayout(e);

      _this5._scheduleCellsToRenderUpdate();

      _this5._maybeCallOnEndReached();
    };

    this._onLayoutEmpty = function (e) {
      _this5.props.onLayout && _this5.props.onLayout(e);
    };

    this._onLayoutFooter = function (e) {
      _this5._footerLength = _this5._selectLength(e.nativeEvent.layout);
    };

    this._onLayoutHeader = function (e) {
      _this5._headerLength = _this5._selectLength(e.nativeEvent.layout);
    };

    this._onContentSizeChange = function (width, height) {
      if (width > 0 && height > 0 && _this5.props.initialScrollIndex != null && _this5.props.initialScrollIndex > 0 && !_this5._hasDoneInitialScroll) {
        _this5.scrollToIndex({
          animated: false,
          index: _this5.props.initialScrollIndex
        });

        _this5._hasDoneInitialScroll = true;
      }

      if (_this5.props.onContentSizeChange) {
        _this5.props.onContentSizeChange(width, height);
      }

      _this5._scrollMetrics.contentLength = _this5._selectLength({
        height: height,
        width: width
      });

      _this5._scheduleCellsToRenderUpdate();

      _this5._maybeCallOnEndReached();
    };

    this._convertParentScrollMetrics = function (metrics) {
      var offset = metrics.offset - _this5._offsetFromParentVirtualizedList;
      var visibleLength = metrics.visibleLength;
      var dOffset = offset - _this5._scrollMetrics.offset;
      var contentLength = _this5._scrollMetrics.contentLength;
      return {
        visibleLength: visibleLength,
        contentLength: contentLength,
        offset: offset,
        dOffset: dOffset
      };
    };

    this._onScroll = function (e) {
      _this5._nestedChildLists.forEach(function (childList) {
        childList.ref && childList.ref._onScroll(e);
      });

      if (_this5.props.onScroll) {
        _this5.props.onScroll(e);
      }

      var timestamp = e.timeStamp;

      var visibleLength = _this5._selectLength(e.nativeEvent.layoutMeasurement);

      var contentLength = _this5._selectLength(e.nativeEvent.contentSize);

      var offset = _this5._selectOffset(e.nativeEvent.contentOffset);

      var dOffset = offset - _this5._scrollMetrics.offset;

      if (_this5._isNestedWithSameOrientation()) {
        if (_this5._scrollMetrics.contentLength === 0) {
          return;
        }

        var _convertParentScrollM = _this5._convertParentScrollMetrics({
          visibleLength: visibleLength,
          offset: offset
        });

        visibleLength = _convertParentScrollM.visibleLength;
        contentLength = _convertParentScrollM.contentLength;
        offset = _convertParentScrollM.offset;
        dOffset = _convertParentScrollM.dOffset;
      }

      var dt = _this5._scrollMetrics.timestamp ? Math.max(1, timestamp - _this5._scrollMetrics.timestamp) : 1;
      var velocity = dOffset / dt;

      if (dt > 500 && _this5._scrollMetrics.dt > 500 && contentLength > 5 * visibleLength && !_this5._hasWarned.perf) {
        infoLog('VirtualizedList: You have a large list that is slow to update - make sure your ' + 'renderItem function renders components that follow React performance best practices ' + 'like PureComponent, shouldComponentUpdate, etc.', {
          dt: dt,
          prevDt: _this5._scrollMetrics.dt,
          contentLength: contentLength
        });
        _this5._hasWarned.perf = true;
      }

      _this5._scrollMetrics = {
        contentLength: contentLength,
        dt: dt,
        dOffset: dOffset,
        offset: offset,
        timestamp: timestamp,
        velocity: velocity,
        visibleLength: visibleLength
      };

      _this5._updateViewableItems(_this5.props.data);

      if (!_this5.props) {
        return;
      }

      _this5._maybeCallOnEndReached();

      if (velocity !== 0) {
        _this5._fillRateHelper.activate();
      }

      _this5._computeBlankness();

      _this5._scheduleCellsToRenderUpdate();
    };

    this._onScrollBeginDrag = function (e) {
      _this5._nestedChildLists.forEach(function (childList) {
        childList.ref && childList.ref._onScrollBeginDrag(e);
      });

      _this5._viewabilityTuples.forEach(function (tuple) {
        tuple.viewabilityHelper.recordInteraction();
      });

      _this5._hasInteracted = true;
      _this5.props.onScrollBeginDrag && _this5.props.onScrollBeginDrag(e);
    };

    this._onScrollEndDrag = function (e) {
      var velocity = e.nativeEvent.velocity;

      if (velocity) {
        _this5._scrollMetrics.velocity = _this5._selectOffset(velocity);
      }

      _this5._computeBlankness();

      _this5.props.onScrollEndDrag && _this5.props.onScrollEndDrag(e);
    };

    this._onMomentumScrollEnd = function (e) {
      _this5._scrollMetrics.velocity = 0;

      _this5._computeBlankness();

      _this5.props.onMomentumScrollEnd && _this5.props.onMomentumScrollEnd(e);
    };

    this._updateCellsToRender = function () {
      var _props7 = _this5.props,
          data = _props7.data,
          getItemCount = _props7.getItemCount,
          onEndReachedThreshold = _props7.onEndReachedThreshold;

      var isVirtualizationDisabled = _this5._isVirtualizationDisabled();

      _this5._updateViewableItems(data);

      if (!data) {
        return;
      }

      _this5.setState(function (state) {
        var newState = void 0;

        if (!isVirtualizationDisabled) {
          if (_this5._scrollMetrics.visibleLength) {
            if (!_this5.props.initialScrollIndex || _this5._scrollMetrics.offset) {
              newState = computeWindowedRenderLimits(_this5.props, state, _this5._getFrameMetricsApprox, _this5._scrollMetrics);
            }
          }
        } else {
          var _scrollMetrics3 = _this5._scrollMetrics,
              contentLength = _scrollMetrics3.contentLength,
              _offset = _scrollMetrics3.offset,
              visibleLength = _scrollMetrics3.visibleLength;

          var _distanceFromEnd = contentLength - visibleLength - _offset;

          var renderAhead = _distanceFromEnd < onEndReachedThreshold * visibleLength ? _this5.props.maxToRenderPerBatch : 0;
          newState = {
            first: 0,
            last: Math.min(state.last + renderAhead, getItemCount(data) - 1)
          };
        }

        if (newState && _this5._nestedChildLists.size > 0) {
          var newFirst = newState.first;
          var newLast = newState.last;

          for (var ii = newFirst; ii <= newLast; ii++) {
            var cellKeyForIndex = _this5._indicesToKeys.get(ii);

            var childListKeys = cellKeyForIndex && _this5._cellKeysToChildListKeys.get(cellKeyForIndex);

            if (!childListKeys) {
              continue;
            }

            var someChildHasMore = false;

            for (var _iterator = childListKeys, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
              var _ref6;

              if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref6 = _iterator[_i++];
              } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref6 = _i.value;
              }

              var childKey = _ref6;

              var childList = _this5._nestedChildLists.get(childKey);

              if (childList && childList.ref && childList.ref.hasMore()) {
                someChildHasMore = true;
                break;
              }
            }

            if (someChildHasMore) {
              newState.last = ii;
              break;
            }
          }
        }

        return newState;
      });
    };

    this._createViewToken = function (index, isViewable) {
      var _props8 = _this5.props,
          data = _props8.data,
          getItem = _props8.getItem,
          keyExtractor = _props8.keyExtractor;
      var item = getItem(data, index);
      return {
        index: index,
        item: item,
        key: keyExtractor(item, index),
        isViewable: isViewable
      };
    };

    this._getFrameMetricsApprox = function (index) {
      var frame = _this5._getFrameMetrics(index);

      if (frame && frame.index === index) {
        return frame;
      } else {
        var _getItemLayout = _this5.props.getItemLayout;
        invariant(!_getItemLayout, 'Should not have to estimate frames when a measurement metrics function is provided');
        return {
          length: _this5._averageCellLength,
          offset: _this5._averageCellLength * index
        };
      }
    };

    this._getFrameMetrics = function (index) {
      var _props9 = _this5.props,
          data = _props9.data,
          getItem = _props9.getItem,
          getItemCount = _props9.getItemCount,
          getItemLayout = _props9.getItemLayout,
          keyExtractor = _props9.keyExtractor;
      invariant(getItemCount(data) > index, 'Tried to get frame for out of range index ' + index);
      var item = getItem(data, index);

      var frame = item && _this5._frames[keyExtractor(item, index)];

      if (!frame || frame.index !== index) {
        if (getItemLayout) {
          frame = getItemLayout(data, index);

          if (__DEV__) {
            var frameType = PropTypes.shape({
              length: PropTypes.number.isRequired,
              offset: PropTypes.number.isRequired,
              index: PropTypes.number.isRequired
            }).isRequired;
            PropTypes.checkPropTypes({
              frame: frameType
            }, {
              frame: frame
            }, 'frame', 'VirtualizedList.getItemLayout');
          }
        }
      }

      return frame;
    };
  }, _temp);
  var CellRenderer = (_temp3 = _class2 = function (_React$Component) {
    babelHelpers.inherits(CellRenderer, _React$Component);

    function CellRenderer() {
      var _ref7;

      var _temp2, _this6, _ret2;

      babelHelpers.classCallCheck(this, CellRenderer);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret2 = (_temp2 = (_this6 = babelHelpers.possibleConstructorReturn(this, (_ref7 = CellRenderer.__proto__ || Object.getPrototypeOf(CellRenderer)).call.apply(_ref7, [this].concat(args))), _this6), _this6.state = {
        separatorProps: {
          highlighted: false,
          leadingItem: _this6.props.item
        }
      }, _this6._separators = {
        highlight: function highlight() {
          var _this6$props = _this6.props,
              cellKey = _this6$props.cellKey,
              prevCellKey = _this6$props.prevCellKey;

          _this6.props.onUpdateSeparators([cellKey, prevCellKey], {
            highlighted: true
          });
        },
        unhighlight: function unhighlight() {
          var _this6$props2 = _this6.props,
              cellKey = _this6$props2.cellKey,
              prevCellKey = _this6$props2.prevCellKey;

          _this6.props.onUpdateSeparators([cellKey, prevCellKey], {
            highlighted: false
          });
        },
        updateProps: function updateProps(select, newProps) {
          var _this6$props3 = _this6.props,
              cellKey = _this6$props3.cellKey,
              prevCellKey = _this6$props3.prevCellKey;

          _this6.props.onUpdateSeparators([select === 'leading' ? prevCellKey : cellKey], newProps);
        }
      }, _temp2), babelHelpers.possibleConstructorReturn(_this6, _ret2);
    }

    babelHelpers.createClass(CellRenderer, [{
      key: "getChildContext",
      value: function getChildContext() {
        return {
          virtualizedCell: {
            cellKey: this.props.cellKey
          }
        };
      }
    }, {
      key: "updateSeparatorProps",
      value: function updateSeparatorProps(newProps) {
        this.setState(function (state) {
          return {
            separatorProps: babelHelpers.extends({}, state.separatorProps, newProps)
          };
        });
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.props.onUnmount(this.props.cellKey);
      }
    }, {
      key: "render",
      value: function render() {
        var _props10 = this.props,
            CellRendererComponent = _props10.CellRendererComponent,
            ItemSeparatorComponent = _props10.ItemSeparatorComponent,
            fillRateHelper = _props10.fillRateHelper,
            horizontal = _props10.horizontal,
            item = _props10.item,
            index = _props10.index,
            inversionStyle = _props10.inversionStyle,
            parentProps = _props10.parentProps;
        var renderItem = parentProps.renderItem,
            getItemLayout = parentProps.getItemLayout;
        invariant(renderItem, 'no renderItem!');
        var element = renderItem({
          item: item,
          index: index,
          separators: this._separators
        });
        var onLayout = getItemLayout && !parentProps.debug && !fillRateHelper.enabled() ? undefined : this.props.onLayout;
        var itemSeparator = ItemSeparatorComponent && React.createElement(ItemSeparatorComponent, babelHelpers.extends({}, this.state.separatorProps, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 1629
          }
        }));
        var cellStyle = inversionStyle ? horizontal ? [{
          flexDirection: 'row-reverse'
        }, inversionStyle] : [{
          flexDirection: 'column-reverse'
        }, inversionStyle] : horizontal ? [{
          flexDirection: 'row'
        }, inversionStyle] : inversionStyle;

        if (!CellRendererComponent) {
          return React.createElement(
            View,
            {
              style: cellStyle,
              onLayout: onLayout,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 1638
              }
            },
            element,
            itemSeparator
          );
        }

        return React.createElement(
          CellRendererComponent,
          babelHelpers.extends({}, this.props, {
            style: cellStyle,
            onLayout: onLayout,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 1645
            }
          }),
          element,
          itemSeparator
        );
      }
    }]);
    return CellRenderer;
  }(React.Component), _class2.childContextTypes = {
    virtualizedCell: PropTypes.shape({
      cellKey: PropTypes.string
    })
  }, _temp3);
  var VirtualizedCellWrapper = (_temp4 = _class3 = function (_React$Component2) {
    babelHelpers.inherits(VirtualizedCellWrapper, _React$Component2);

    function VirtualizedCellWrapper() {
      babelHelpers.classCallCheck(this, VirtualizedCellWrapper);
      return babelHelpers.possibleConstructorReturn(this, (VirtualizedCellWrapper.__proto__ || Object.getPrototypeOf(VirtualizedCellWrapper)).apply(this, arguments));
    }

    babelHelpers.createClass(VirtualizedCellWrapper, [{
      key: "getChildContext",
      value: function getChildContext() {
        return {
          virtualizedCell: {
            cellKey: this.props.cellKey
          }
        };
      }
    }, {
      key: "render",
      value: function render() {
        return this.props.children;
      }
    }]);
    return VirtualizedCellWrapper;
  }(React.Component), _class3.childContextTypes = {
    virtualizedCell: PropTypes.shape({
      cellKey: PropTypes.string
    })
  }, _temp4);
  var styles = StyleSheet.create({
    verticallyInverted: {
      transform: [{
        scaleY: -1
      }]
    },
    horizontallyInverted: {
      transform: [{
        scaleX: -1
      }]
    }
  });
  module.exports = VirtualizedList;
},252,[253,254,141,131,21,251,226,132,110,153,255,105,93,13,56,256],"VirtualizedList");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var InteractionManager = _require(_dependencyMap[0], 'InteractionManager');

  var Batchinator = function () {
    function Batchinator(callback, delayMS) {
      babelHelpers.classCallCheck(this, Batchinator);
      this._delay = delayMS;
      this._callback = callback;
    }

    babelHelpers.createClass(Batchinator, [{
      key: "dispose",
      value: function dispose() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
          abort: false
        };

        if (this._taskHandle) {
          this._taskHandle.cancel();

          if (!options.abort) {
            this._callback();
          }

          this._taskHandle = null;
        }
      }
    }, {
      key: "schedule",
      value: function schedule() {
        var _this = this;

        if (this._taskHandle) {
          return;
        }

        var timeoutHandle = setTimeout(function () {
          _this._taskHandle = InteractionManager.runAfterInteractions(function () {
            _this._taskHandle = null;

            _this._callback();
          });
        }, this._delay);
        this._taskHandle = {
          cancel: function cancel() {
            return clearTimeout(timeoutHandle);
          }
        };
      }
    }]);
    return Batchinator;
  }();

  module.exports = Batchinator;
},253,[204],"Batchinator");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var performanceNow = _require(_dependencyMap[0], 'fbjs/lib/performanceNow');

  var warning = _require(_dependencyMap[1], 'fbjs/lib/warning');

  var Info = function Info() {
    babelHelpers.classCallCheck(this, Info);
    this.any_blank_count = 0;
    this.any_blank_ms = 0;
    this.any_blank_speed_sum = 0;
    this.mostly_blank_count = 0;
    this.mostly_blank_ms = 0;
    this.pixels_blank = 0;
    this.pixels_sampled = 0;
    this.pixels_scrolled = 0;
    this.total_time_spent = 0;
    this.sample_count = 0;
  };

  var DEBUG = false;
  var _listeners = [];
  var _minSampleCount = 10;

  var _sampleRate = DEBUG ? 1 : null;

  var FillRateHelper = function () {
    babelHelpers.createClass(FillRateHelper, null, [{
      key: "addListener",
      value: function addListener(callback) {
        warning(_sampleRate !== null, 'Call `FillRateHelper.setSampleRate` before `addListener`.');

        _listeners.push(callback);

        return {
          remove: function remove() {
            _listeners = _listeners.filter(function (listener) {
              return callback !== listener;
            });
          }
        };
      }
    }, {
      key: "setSampleRate",
      value: function setSampleRate(sampleRate) {
        _sampleRate = sampleRate;
      }
    }, {
      key: "setMinSampleCount",
      value: function setMinSampleCount(minSampleCount) {
        _minSampleCount = minSampleCount;
      }
    }]);

    function FillRateHelper(getFrameMetrics) {
      babelHelpers.classCallCheck(this, FillRateHelper);
      this._anyBlankStartTime = null;
      this._enabled = false;
      this._info = new Info();
      this._mostlyBlankStartTime = null;
      this._samplesStartTime = null;
      this._getFrameMetrics = getFrameMetrics;
      this._enabled = (_sampleRate || 0) > Math.random();

      this._resetData();
    }

    babelHelpers.createClass(FillRateHelper, [{
      key: "activate",
      value: function activate() {
        if (this._enabled && this._samplesStartTime == null) {
          DEBUG && console.debug('FillRateHelper: activate');
          this._samplesStartTime = performanceNow();
        }
      }
    }, {
      key: "deactivateAndFlush",
      value: function deactivateAndFlush() {
        if (!this._enabled) {
          return;
        }

        var start = this._samplesStartTime;

        if (start == null) {
          DEBUG && console.debug('FillRateHelper: bail on deactivate with no start time');
          return;
        }

        if (this._info.sample_count < _minSampleCount) {
          this._resetData();

          return;
        }

        var total_time_spent = performanceNow() - start;
        var info = babelHelpers.extends({}, this._info, {
          total_time_spent: total_time_spent
        });

        if (DEBUG) {
          var derived = {
            avg_blankness: this._info.pixels_blank / this._info.pixels_sampled,
            avg_speed: this._info.pixels_scrolled / (total_time_spent / 1000),
            avg_speed_when_any_blank: this._info.any_blank_speed_sum / this._info.any_blank_count,
            any_blank_per_min: this._info.any_blank_count / (total_time_spent / 1000 / 60),
            any_blank_time_frac: this._info.any_blank_ms / total_time_spent,
            mostly_blank_per_min: this._info.mostly_blank_count / (total_time_spent / 1000 / 60),
            mostly_blank_time_frac: this._info.mostly_blank_ms / total_time_spent
          };

          for (var key in derived) {
            derived[key] = Math.round(1000 * derived[key]) / 1000;
          }

          console.debug('FillRateHelper deactivateAndFlush: ', {
            derived: derived,
            info: info
          });
        }

        _listeners.forEach(function (listener) {
          return listener(info);
        });

        this._resetData();
      }
    }, {
      key: "computeBlankness",
      value: function computeBlankness(props, state, scrollMetrics) {
        if (!this._enabled || props.getItemCount(props.data) === 0 || this._samplesStartTime == null) {
          return 0;
        }

        var dOffset = scrollMetrics.dOffset,
            offset = scrollMetrics.offset,
            velocity = scrollMetrics.velocity,
            visibleLength = scrollMetrics.visibleLength;
        this._info.sample_count++;
        this._info.pixels_sampled += Math.round(visibleLength);
        this._info.pixels_scrolled += Math.round(Math.abs(dOffset));
        var scrollSpeed = Math.round(Math.abs(velocity) * 1000);
        var now = performanceNow();

        if (this._anyBlankStartTime != null) {
          this._info.any_blank_ms += now - this._anyBlankStartTime;
        }

        this._anyBlankStartTime = null;

        if (this._mostlyBlankStartTime != null) {
          this._info.mostly_blank_ms += now - this._mostlyBlankStartTime;
        }

        this._mostlyBlankStartTime = null;
        var blankTop = 0;
        var first = state.first;

        var firstFrame = this._getFrameMetrics(first);

        while (first <= state.last && (!firstFrame || !firstFrame.inLayout)) {
          firstFrame = this._getFrameMetrics(first);
          first++;
        }

        if (firstFrame && first > 0) {
          blankTop = Math.min(visibleLength, Math.max(0, firstFrame.offset - offset));
        }

        var blankBottom = 0;
        var last = state.last;

        var lastFrame = this._getFrameMetrics(last);

        while (last >= state.first && (!lastFrame || !lastFrame.inLayout)) {
          lastFrame = this._getFrameMetrics(last);
          last--;
        }

        if (lastFrame && last < props.getItemCount(props.data) - 1) {
          var bottomEdge = lastFrame.offset + lastFrame.length;
          blankBottom = Math.min(visibleLength, Math.max(0, offset + visibleLength - bottomEdge));
        }

        var pixels_blank = Math.round(blankTop + blankBottom);
        var blankness = pixels_blank / visibleLength;

        if (blankness > 0) {
          this._anyBlankStartTime = now;
          this._info.any_blank_speed_sum += scrollSpeed;
          this._info.any_blank_count++;
          this._info.pixels_blank += pixels_blank;

          if (blankness > 0.5) {
            this._mostlyBlankStartTime = now;
            this._info.mostly_blank_count++;
          }
        } else if (scrollSpeed < 0.01 || Math.abs(dOffset) < 1) {
          this.deactivateAndFlush();
        }

        return blankness;
      }
    }, {
      key: "enabled",
      value: function enabled() {
        return this._enabled;
      }
    }, {
      key: "_resetData",
      value: function _resetData() {
        this._anyBlankStartTime = null;
        this._info = new Info();
        this._mostlyBlankStartTime = null;
        this._samplesStartTime = null;
      }
    }]);
    return FillRateHelper;
  }();

  module.exports = FillRateHelper;
},254,[53,56],"FillRateHelper");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = _require(_dependencyMap[0], 'fbjs/lib/invariant');

  var ViewabilityHelper = function () {
    function ViewabilityHelper() {
      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
        viewAreaCoveragePercentThreshold: 0
      };
      babelHelpers.classCallCheck(this, ViewabilityHelper);
      this._hasInteracted = false;
      this._timers = new Set();
      this._viewableIndices = [];
      this._viewableItems = new Map();
      this._config = config;
    }

    babelHelpers.createClass(ViewabilityHelper, [{
      key: "dispose",
      value: function dispose() {
        this._timers.forEach(clearTimeout);
      }
    }, {
      key: "computeViewableItems",
      value: function computeViewableItems(itemCount, scrollOffset, viewportHeight, getFrameMetrics, renderRange) {
        var _config = this._config,
            itemVisiblePercentThreshold = _config.itemVisiblePercentThreshold,
            viewAreaCoveragePercentThreshold = _config.viewAreaCoveragePercentThreshold;
        var viewAreaMode = viewAreaCoveragePercentThreshold != null;
        var viewablePercentThreshold = viewAreaMode ? viewAreaCoveragePercentThreshold : itemVisiblePercentThreshold;
        invariant(viewablePercentThreshold != null && itemVisiblePercentThreshold != null !== (viewAreaCoveragePercentThreshold != null), 'Must set exactly one of itemVisiblePercentThreshold or viewAreaCoveragePercentThreshold');
        var viewableIndices = [];

        if (itemCount === 0) {
          return viewableIndices;
        }

        var firstVisible = -1;

        var _ref = renderRange || {
          first: 0,
          last: itemCount - 1
        },
            first = _ref.first,
            last = _ref.last;

        invariant(last < itemCount, 'Invalid render range ' + JSON.stringify({
          renderRange: renderRange,
          itemCount: itemCount
        }));

        for (var idx = first; idx <= last; idx++) {
          var metrics = getFrameMetrics(idx);

          if (!metrics) {
            continue;
          }

          var top = metrics.offset - scrollOffset;
          var bottom = top + metrics.length;

          if (top < viewportHeight && bottom > 0) {
            firstVisible = idx;

            if (_isViewable(viewAreaMode, viewablePercentThreshold, top, bottom, viewportHeight, metrics.length)) {
              viewableIndices.push(idx);
            }
          } else if (firstVisible >= 0) {
            break;
          }
        }

        return viewableIndices;
      }
    }, {
      key: "onUpdate",
      value: function onUpdate(itemCount, scrollOffset, viewportHeight, getFrameMetrics, createViewToken, onViewableItemsChanged, renderRange) {
        var _this = this;

        if (this._config.waitForInteraction && !this._hasInteracted || itemCount === 0 || !getFrameMetrics(0)) {
          return;
        }

        var viewableIndices = [];

        if (itemCount) {
          viewableIndices = this.computeViewableItems(itemCount, scrollOffset, viewportHeight, getFrameMetrics, renderRange);
        }

        if (this._viewableIndices.length === viewableIndices.length && this._viewableIndices.every(function (v, ii) {
          return v === viewableIndices[ii];
        })) {
          return;
        }

        this._viewableIndices = viewableIndices;

        if (this._config.minimumViewTime) {
          var handle = setTimeout(function () {
            _this._timers.delete(handle);

            _this._onUpdateSync(viewableIndices, onViewableItemsChanged, createViewToken);
          }, this._config.minimumViewTime);

          this._timers.add(handle);
        } else {
          this._onUpdateSync(viewableIndices, onViewableItemsChanged, createViewToken);
        }
      }
    }, {
      key: "resetViewableIndices",
      value: function resetViewableIndices() {
        this._viewableIndices = [];
      }
    }, {
      key: "recordInteraction",
      value: function recordInteraction() {
        this._hasInteracted = true;
      }
    }, {
      key: "_onUpdateSync",
      value: function _onUpdateSync(viewableIndicesToCheck, onViewableItemsChanged, createViewToken) {
        var _this2 = this;

        viewableIndicesToCheck = viewableIndicesToCheck.filter(function (ii) {
          return _this2._viewableIndices.includes(ii);
        });
        var prevItems = this._viewableItems;
        var nextItems = new Map(viewableIndicesToCheck.map(function (ii) {
          var viewable = createViewToken(ii, true);
          return [viewable.key, viewable];
        }));
        var changed = [];

        for (var _iterator = nextItems, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
          var _ref4;

          if (_isArray) {
            if (_i >= _iterator.length) break;
            _ref4 = _iterator[_i++];
          } else {
            _i = _iterator.next();
            if (_i.done) break;
            _ref4 = _i.value;
          }

          var _ref2 = _ref4;

          var _ref3 = babelHelpers.slicedToArray(_ref2, 2);

          var _key = _ref3[0];
          var viewable = _ref3[1];

          if (!prevItems.has(_key)) {
            changed.push(viewable);
          }
        }

        for (var _iterator2 = prevItems, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
          var _ref7;

          if (_isArray2) {
            if (_i2 >= _iterator2.length) break;
            _ref7 = _iterator2[_i2++];
          } else {
            _i2 = _iterator2.next();
            if (_i2.done) break;
            _ref7 = _i2.value;
          }

          var _ref5 = _ref7;

          var _ref6 = babelHelpers.slicedToArray(_ref5, 2);

          var _key2 = _ref6[0];
          var _viewable = _ref6[1];

          if (!nextItems.has(_key2)) {
            changed.push(babelHelpers.extends({}, _viewable, {
              isViewable: false
            }));
          }
        }

        if (changed.length > 0) {
          this._viewableItems = nextItems;
          onViewableItemsChanged({
            viewableItems: Array.from(nextItems.values()),
            changed: changed,
            viewabilityConfig: this._config
          });
        }
      }
    }]);
    return ViewabilityHelper;
  }();

  function _isViewable(viewAreaMode, viewablePercentThreshold, top, bottom, viewportHeight, itemLength) {
    if (_isEntirelyVisible(top, bottom, viewportHeight)) {
      return true;
    } else {
      var pixels = _getPixelsVisible(top, bottom, viewportHeight);

      var percent = 100 * (viewAreaMode ? pixels / viewportHeight : pixels / itemLength);
      return percent >= viewablePercentThreshold;
    }
  }

  function _getPixelsVisible(top, bottom, viewportHeight) {
    var visibleHeight = Math.min(bottom, viewportHeight) - Math.max(top, 0);
    return Math.max(0, visibleHeight);
  }

  function _isEntirelyVisible(top, bottom, viewportHeight) {
    return top >= 0 && bottom <= viewportHeight && bottom > top;
  }

  module.exports = ViewabilityHelper;
},255,[13],"ViewabilityHelper");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = _require(_dependencyMap[0], 'fbjs/lib/invariant');

  function elementsThatOverlapOffsets(offsets, itemCount, getFrameMetrics) {
    var out = [];
    var outLength = 0;

    for (var ii = 0; ii < itemCount; ii++) {
      var frame = getFrameMetrics(ii);
      var trailingOffset = frame.offset + frame.length;

      for (var kk = 0; kk < offsets.length; kk++) {
        if (out[kk] == null && trailingOffset >= offsets[kk]) {
          out[kk] = ii;
          outLength++;

          if (kk === offsets.length - 1) {
            invariant(outLength === offsets.length, 'bad offsets input, should be in increasing order: %s', JSON.stringify(offsets));
            return out;
          }
        }
      }
    }

    return out;
  }

  function newRangeCount(prev, next) {
    return next.last - next.first + 1 - Math.max(0, 1 + Math.min(next.last, prev.last) - Math.max(next.first, prev.first));
  }

  function computeWindowedRenderLimits(props, prev, getFrameMetricsApprox, scrollMetrics) {
    var data = props.data,
        getItemCount = props.getItemCount,
        maxToRenderPerBatch = props.maxToRenderPerBatch,
        windowSize = props.windowSize;
    var itemCount = getItemCount(data);

    if (itemCount === 0) {
      return prev;
    }

    var offset = scrollMetrics.offset,
        velocity = scrollMetrics.velocity,
        visibleLength = scrollMetrics.visibleLength;
    var visibleBegin = Math.max(0, offset);
    var visibleEnd = visibleBegin + visibleLength;
    var overscanLength = (windowSize - 1) * visibleLength;
    var leadFactor = 0.5;
    var fillPreference = velocity > 1 ? 'after' : velocity < -1 ? 'before' : 'none';
    var overscanBegin = Math.max(0, visibleBegin - (1 - leadFactor) * overscanLength);
    var overscanEnd = Math.max(0, visibleEnd + leadFactor * overscanLength);
    var lastItemOffset = getFrameMetricsApprox(itemCount - 1).offset;

    if (lastItemOffset < overscanBegin) {
      return {
        first: Math.max(0, itemCount - 1 - maxToRenderPerBatch),
        last: itemCount - 1
      };
    }

    var _elementsThatOverlapO = elementsThatOverlapOffsets([overscanBegin, visibleBegin, visibleEnd, overscanEnd], props.getItemCount(props.data), getFrameMetricsApprox),
        _elementsThatOverlapO2 = babelHelpers.slicedToArray(_elementsThatOverlapO, 4),
        overscanFirst = _elementsThatOverlapO2[0],
        first = _elementsThatOverlapO2[1],
        last = _elementsThatOverlapO2[2],
        overscanLast = _elementsThatOverlapO2[3];

    overscanFirst = overscanFirst == null ? 0 : overscanFirst;
    first = first == null ? Math.max(0, overscanFirst) : first;
    overscanLast = overscanLast == null ? itemCount - 1 : overscanLast;
    last = last == null ? Math.min(overscanLast, first + maxToRenderPerBatch - 1) : last;
    var visible = {
      first: first,
      last: last
    };
    var newCellCount = newRangeCount(prev, visible);

    while (true) {
      if (first <= overscanFirst && last >= overscanLast) {
        break;
      }

      var maxNewCells = newCellCount >= maxToRenderPerBatch;
      var firstWillAddMore = first <= prev.first || first > prev.last;
      var firstShouldIncrement = first > overscanFirst && (!maxNewCells || !firstWillAddMore);
      var lastWillAddMore = last >= prev.last || last < prev.first;
      var lastShouldIncrement = last < overscanLast && (!maxNewCells || !lastWillAddMore);

      if (maxNewCells && !firstShouldIncrement && !lastShouldIncrement) {
        break;
      }

      if (firstShouldIncrement && !(fillPreference === 'after' && lastShouldIncrement && lastWillAddMore)) {
        if (firstWillAddMore) {
          newCellCount++;
        }

        first--;
      }

      if (lastShouldIncrement && !(fillPreference === 'before' && firstShouldIncrement && firstWillAddMore)) {
        if (lastWillAddMore) {
          newCellCount++;
        }

        last++;
      }
    }

    if (!(last >= first && first >= 0 && last < itemCount && first >= overscanFirst && last <= overscanLast && first <= visible.first && last >= visible.last)) {
      throw new Error('Bad window calculation ' + JSON.stringify({
        first: first,
        last: last,
        itemCount: itemCount,
        overscanFirst: overscanFirst,
        overscanLast: overscanLast,
        visible: visible
      }));
    }

    return {
      first: first,
      last: last
    };
  }

  var VirtualizeUtils = {
    computeWindowedRenderLimits: computeWindowedRenderLimits,
    elementsThatOverlapOffsets: elementsThatOverlapOffsets,
    newRangeCount: newRangeCount
  };
  module.exports = VirtualizeUtils;
},256,[13],"VirtualizeUtils");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-native/Libraries/Image/ImageBackground.js";

  var Image = _require(_dependencyMap[0], 'Image');

  var React = _require(_dependencyMap[1], 'React');

  var StyleSheet = _require(_dependencyMap[2], 'StyleSheet');

  var View = _require(_dependencyMap[3], 'View');

  var ensureComponentIsNative = _require(_dependencyMap[4], 'ensureComponentIsNative');

  var ImageBackground = function (_React$Component) {
    babelHelpers.inherits(ImageBackground, _React$Component);

    function ImageBackground() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, ImageBackground);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = ImageBackground.__proto__ || Object.getPrototypeOf(ImageBackground)).call.apply(_ref, [this].concat(args))), _this), _this._viewRef = null, _this._captureRef = function (ref) {
        _this._viewRef = ref;
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(ImageBackground, [{
      key: "setNativeProps",
      value: function setNativeProps(props) {
        var viewRef = this._viewRef;

        if (viewRef) {
          ensureComponentIsNative(viewRef);
          viewRef.setNativeProps(props);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _props = this.props,
            children = _props.children,
            style = _props.style,
            imageStyle = _props.imageStyle,
            imageRef = _props.imageRef,
            props = babelHelpers.objectWithoutProperties(_props, ["children", "style", "imageStyle", "imageRef"]);
        return React.createElement(
          View,
          {
            style: style,
            ref: this._captureRef,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 68
            }
          },
          React.createElement(Image, babelHelpers.extends({}, props, {
            style: [StyleSheet.absoluteFill, {
              width: style.width,
              height: style.height
            }, imageStyle],
            ref: imageRef,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 69
            }
          })),
          children
        );
      }
    }]);
    return ImageBackground;
  }(React.Component);

  module.exports = ImageBackground;
},257,[224,131,132,153,258],"ImageBackground");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = _require(_dependencyMap[0], 'fbjs/lib/invariant');

  var ensureComponentIsNative = function ensureComponentIsNative(component) {
    invariant(component && typeof component.setNativeProps === 'function', 'Touchable child must either be native or forward setNativeProps to a ' + 'native component');
  };

  module.exports = ensureComponentIsNative;
},258,[13],"ensureComponentIsNative");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var RCTImageEditingManager = _require(_dependencyMap[0], 'NativeModules').ImageEditingManager;

  var ImageEditor = function () {
    function ImageEditor() {
      babelHelpers.classCallCheck(this, ImageEditor);
    }

    babelHelpers.createClass(ImageEditor, null, [{
      key: "cropImage",
      value: function cropImage(uri, cropData, success, failure) {
        RCTImageEditingManager.cropImage(uri, cropData, success, failure);
      }
    }]);
    return ImageEditor;
  }();

  module.exports = ImageEditor;
},259,[15],"ImageEditor");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var RCTImageStoreManager = _require(_dependencyMap[0], 'NativeModules').ImageStoreManager;

  var ImageStore = function () {
    function ImageStore() {
      babelHelpers.classCallCheck(this, ImageStore);
    }

    babelHelpers.createClass(ImageStore, null, [{
      key: "hasImageForTag",
      value: function hasImageForTag(uri, callback) {
        if (RCTImageStoreManager.hasImageForTag) {
          RCTImageStoreManager.hasImageForTag(uri, callback);
        } else {
          console.warn('hasImageForTag() not implemented');
        }
      }
    }, {
      key: "removeImageForTag",
      value: function removeImageForTag(uri) {
        if (RCTImageStoreManager.removeImageForTag) {
          RCTImageStoreManager.removeImageForTag(uri);
        } else {
          console.warn('removeImageForTag() not implemented');
        }
      }
    }, {
      key: "addImageFromBase64",
      value: function addImageFromBase64(base64ImageData, success, failure) {
        RCTImageStoreManager.addImageFromBase64(base64ImageData, success, failure);
      }
    }, {
      key: "getBase64ForTag",
      value: function getBase64ForTag(uri, success, failure) {
        RCTImageStoreManager.getBase64ForTag(uri, success, failure);
      }
    }]);
    return ImageStore;
  }();

  module.exports = ImageStore;
},260,[15],"ImageStore");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-native/Libraries/Components/Keyboard/KeyboardAvoidingView.js";

  var createReactClass = _require(_dependencyMap[0], 'create-react-class');

  var Keyboard = _require(_dependencyMap[1], 'Keyboard');

  var LayoutAnimation = _require(_dependencyMap[2], 'LayoutAnimation');

  var Platform = _require(_dependencyMap[3], 'Platform');

  var PropTypes = _require(_dependencyMap[4], 'prop-types');

  var React = _require(_dependencyMap[5], 'React');

  var TimerMixin = _require(_dependencyMap[6], 'react-timer-mixin');

  var View = _require(_dependencyMap[7], 'View');

  var ViewPropTypes = _require(_dependencyMap[8], 'ViewPropTypes');

  var viewRef = 'VIEW';
  var KeyboardAvoidingView = createReactClass({
    displayName: 'KeyboardAvoidingView',
    mixins: [TimerMixin],
    propTypes: babelHelpers.extends({}, ViewPropTypes, {
      behavior: PropTypes.oneOf(['height', 'position', 'padding']),
      contentContainerStyle: ViewPropTypes.style,
      keyboardVerticalOffset: PropTypes.number.isRequired,
      enabled: PropTypes.bool.isRequired
    }),
    getDefaultProps: function getDefaultProps() {
      return {
        enabled: true,
        keyboardVerticalOffset: 0
      };
    },
    getInitialState: function getInitialState() {
      return {
        bottom: 0
      };
    },
    subscriptions: [],
    frame: null,
    _relativeKeyboardHeight: function _relativeKeyboardHeight(keyboardFrame) {
      var frame = this.frame;

      if (!frame || !keyboardFrame) {
        return 0;
      }

      var keyboardY = keyboardFrame.screenY - this.props.keyboardVerticalOffset;
      return Math.max(frame.y + frame.height - keyboardY, 0);
    },
    _onKeyboardChange: function _onKeyboardChange(event) {
      if (!event) {
        this.setState({
          bottom: 0
        });
        return;
      }

      var duration = event.duration,
          easing = event.easing,
          endCoordinates = event.endCoordinates;

      var height = this._relativeKeyboardHeight(endCoordinates);

      if (this.state.bottom === height) {
        return;
      }

      if (duration && easing) {
        LayoutAnimation.configureNext({
          duration: duration,
          update: {
            duration: duration,
            type: LayoutAnimation.Types[easing] || 'keyboard'
          }
        });
      }

      this.setState({
        bottom: height
      });
    },
    _onLayout: function _onLayout(event) {
      this.frame = event.nativeEvent.layout;
    },
    UNSAFE_componentWillUpdate: function UNSAFE_componentWillUpdate(nextProps, nextState, nextContext) {
      if (nextState.bottom === this.state.bottom && this.props.behavior === 'height' && nextProps.behavior === 'height') {
        nextState.bottom = 0;
      }
    },
    UNSAFE_componentWillMount: function UNSAFE_componentWillMount() {
      if (Platform.OS === 'ios') {
        this.subscriptions = [Keyboard.addListener('keyboardWillChangeFrame', this._onKeyboardChange)];
      } else {
        this.subscriptions = [Keyboard.addListener('keyboardDidHide', this._onKeyboardChange), Keyboard.addListener('keyboardDidShow', this._onKeyboardChange)];
      }
    },
    componentWillUnmount: function componentWillUnmount() {
      this.subscriptions.forEach(function (sub) {
        return sub.remove();
      });
    },
    render: function render() {
      var _props = this.props,
          behavior = _props.behavior,
          children = _props.children,
          style = _props.style,
          props = babelHelpers.objectWithoutProperties(_props, ["behavior", "children", "style"]);
      var bottomHeight = this.props.enabled ? this.state.bottom : 0;

      switch (behavior) {
        case 'height':
          var heightStyle = void 0;

          if (this.frame) {
            heightStyle = {
              height: this.frame.height - bottomHeight,
              flex: 0
            };
          }

          return React.createElement(
            View,
            babelHelpers.extends({
              ref: viewRef,
              style: [style, heightStyle],
              onLayout: this._onLayout
            }, props, {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 178
              }
            }),
            children
          );

        case 'position':
          var positionStyle = {
            bottom: bottomHeight
          };
          var contentContainerStyle = this.props.contentContainerStyle;
          return React.createElement(
            View,
            babelHelpers.extends({
              ref: viewRef,
              style: style,
              onLayout: this._onLayout
            }, props, {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 188
              }
            }),
            React.createElement(
              View,
              {
                style: [contentContainerStyle, positionStyle],
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 189
                }
              },
              children
            )
          );

        case 'padding':
          var paddingStyle = {
            paddingBottom: bottomHeight
          };
          return React.createElement(
            View,
            babelHelpers.extends({
              ref: viewRef,
              style: [style, paddingStyle],
              onLayout: this._onLayout
            }, props, {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 198
              }
            }),
            children
          );

        default:
          return React.createElement(
            View,
            babelHelpers.extends({
              ref: viewRef,
              onLayout: this._onLayout,
              style: style
            }, props, {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 205
              }
            }),
            children
          );
      }
    }
  });
  module.exports = KeyboardAvoidingView;
},261,[166,230,231,52,141,131,238,153,155],"KeyboardAvoidingView");
__d(function (global, _require, module, exports, _dependencyMap) {
  var _class,
      _temp2,
      _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-native/Libraries/Components/MaskedView/MaskedViewIOS.ios.js";

  var PropTypes = _require(_dependencyMap[0], 'prop-types');

  var React = _require(_dependencyMap[1], 'React');

  var StyleSheet = _require(_dependencyMap[2], 'StyleSheet');

  var View = _require(_dependencyMap[3], 'View');

  var ViewPropTypes = _require(_dependencyMap[4], 'ViewPropTypes');

  var requireNativeComponent = _require(_dependencyMap[5], 'requireNativeComponent');

  var MaskedViewIOS = (_temp2 = _class = function (_React$Component) {
    babelHelpers.inherits(MaskedViewIOS, _React$Component);

    function MaskedViewIOS() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, MaskedViewIOS);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = MaskedViewIOS.__proto__ || Object.getPrototypeOf(MaskedViewIOS)).call.apply(_ref, [this].concat(args))), _this), _this._hasWarnedInvalidRenderMask = false, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(MaskedViewIOS, [{
      key: "render",
      value: function render() {
        var _props = this.props,
            maskElement = _props.maskElement,
            children = _props.children,
            otherViewProps = babelHelpers.objectWithoutProperties(_props, ["maskElement", "children"]);

        if (!React.isValidElement(maskElement)) {
          if (!this._hasWarnedInvalidRenderMask) {
            console.warn('MaskedView: Invalid `maskElement` prop was passed to MaskedView. ' + 'Expected a React Element. No mask will render.');
            this._hasWarnedInvalidRenderMask = true;
          }

          return React.createElement(
            View,
            babelHelpers.extends({}, otherViewProps, {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 86
              }
            }),
            children
          );
        }

        return React.createElement(
          RCTMaskedView,
          babelHelpers.extends({}, otherViewProps, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 90
            }
          }),
          React.createElement(
            View,
            {
              pointerEvents: "none",
              style: StyleSheet.absoluteFill,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 91
              }
            },
            maskElement
          ),
          children
        );
      }
    }]);
    return MaskedViewIOS;
  }(React.Component), _class.propTypes = babelHelpers.extends({}, ViewPropTypes, {
    maskElement: PropTypes.element.isRequired
  }), _temp2);
  var RCTMaskedView = requireNativeComponent('RCTMaskedView', {
    name: 'RCTMaskedView',
    displayName: 'RCTMaskedView',
    propTypes: babelHelpers.extends({}, ViewPropTypes)
  });
  module.exports = MaskedViewIOS;
},262,[141,131,132,153,155,168],"MaskedViewIOS");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _class,
      _temp,
      _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-native/Libraries/Modal/Modal.js",
      _container;

  var AppContainer = _require(_dependencyMap[0], 'AppContainer');

  var I18nManager = _require(_dependencyMap[1], 'I18nManager');

  var NativeEventEmitter = _require(_dependencyMap[2], 'NativeEventEmitter');

  var NativeModules = _require(_dependencyMap[3], 'NativeModules');

  var Platform = _require(_dependencyMap[4], 'Platform');

  var React = _require(_dependencyMap[5], 'React');

  var PropTypes = _require(_dependencyMap[6], 'prop-types');

  var StyleSheet = _require(_dependencyMap[7], 'StyleSheet');

  var View = _require(_dependencyMap[8], 'View');

  var deprecatedPropType = _require(_dependencyMap[9], 'deprecatedPropType');

  var requireNativeComponent = _require(_dependencyMap[10], 'requireNativeComponent');

  var RCTModalHostView = requireNativeComponent('RCTModalHostView', null);
  var ModalEventEmitter = Platform.OS === 'ios' && NativeModules.ModalManager ? new NativeEventEmitter(NativeModules.ModalManager) : null;
  var uniqueModalIdentifier = 0;
  var Modal = (_temp = _class = function (_React$Component) {
    babelHelpers.inherits(Modal, _React$Component);

    function Modal(props) {
      babelHelpers.classCallCheck(this, Modal);

      var _this = babelHelpers.possibleConstructorReturn(this, (Modal.__proto__ || Object.getPrototypeOf(Modal)).call(this, props));

      Modal._confirmProps(props);

      _this._identifier = uniqueModalIdentifier++;
      return _this;
    }

    babelHelpers.createClass(Modal, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;

        if (ModalEventEmitter) {
          this._eventSubscription = ModalEventEmitter.addListener('modalDismissed', function (event) {
            if (event.modalID === _this2._identifier && _this2.props.onDismiss) {
              _this2.props.onDismiss();
            }
          });
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this._eventSubscription) {
          this._eventSubscription.remove();
        }
      }
    }, {
      key: "UNSAFE_componentWillReceiveProps",
      value: function UNSAFE_componentWillReceiveProps(nextProps) {
        Modal._confirmProps(nextProps);
      }
    }, {
      key: "render",
      value: function render() {
        if (this.props.visible === false) {
          return null;
        }

        var containerStyles = {
          backgroundColor: this.props.transparent ? 'transparent' : 'white'
        };
        var animationType = this.props.animationType;

        if (!animationType) {
          animationType = 'none';

          if (this.props.animated) {
            animationType = 'slide';
          }
        }

        var presentationStyle = this.props.presentationStyle;

        if (!presentationStyle) {
          presentationStyle = 'fullScreen';

          if (this.props.transparent) {
            presentationStyle = 'overFullScreen';
          }
        }

        var innerChildren = __DEV__ ? React.createElement(
          AppContainer,
          {
            rootTag: this.context.rootTag,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 191
            }
          },
          this.props.children
        ) : this.props.children;
        return React.createElement(
          RCTModalHostView,
          {
            animationType: animationType,
            presentationStyle: presentationStyle,
            transparent: this.props.transparent,
            hardwareAccelerated: this.props.hardwareAccelerated,
            onRequestClose: this.props.onRequestClose,
            onShow: this.props.onShow,
            identifier: this._identifier,
            style: styles.modal,
            onStartShouldSetResponder: this._shouldSetResponder,
            supportedOrientations: this.props.supportedOrientations,
            onOrientationChange: this.props.onOrientationChange,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 197
            }
          },
          React.createElement(
            View,
            {
              style: [styles.container, containerStyles],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 210
              }
            },
            innerChildren
          )
        );
      }
    }, {
      key: "_shouldSetResponder",
      value: function _shouldSetResponder() {
        return true;
      }
    }], [{
      key: "_confirmProps",
      value: function _confirmProps(props) {
        if (props.presentationStyle && props.presentationStyle !== 'overFullScreen' && props.transparent) {
          console.warn("Modal with '" + props.presentationStyle + "' presentation style and 'transparent' value is not supported.");
        }
      }
    }]);
    return Modal;
  }(React.Component), _class.propTypes = {
    animationType: PropTypes.oneOf(['none', 'slide', 'fade']),
    presentationStyle: PropTypes.oneOf(['fullScreen', 'pageSheet', 'formSheet', 'overFullScreen']),
    transparent: PropTypes.bool,
    hardwareAccelerated: PropTypes.bool,
    visible: PropTypes.bool,
    onRequestClose: Platform.isTVOS || Platform.OS === 'android' ? PropTypes.func.isRequired : PropTypes.func,
    onShow: PropTypes.func,
    onDismiss: PropTypes.func,
    animated: deprecatedPropType(PropTypes.bool, 'Use the `animationType` prop instead.'),
    supportedOrientations: PropTypes.arrayOf(PropTypes.oneOf(['portrait', 'portrait-upside-down', 'landscape', 'landscape-left', 'landscape-right'])),
    onOrientationChange: PropTypes.func
  }, _class.defaultProps = {
    visible: true,
    hardwareAccelerated: false
  }, _class.contextTypes = {
    rootTag: PropTypes.number
  }, _temp);
  var side = I18nManager.isRTL ? 'right' : 'left';
  var styles = StyleSheet.create({
    modal: {
      position: 'absolute'
    },
    container: (_container = {
      position: 'absolute'
    }, babelHelpers.defineProperty(_container, side, 0), babelHelpers.defineProperty(_container, "top", 0), _container)
  });
  module.exports = Modal;
},263,[264,283,69,15,52,131,141,132,153,146,168],"Modal");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _class,
      _temp2,
      _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-native/Libraries/ReactNative/AppContainer.js";

  var EmitterSubscription = _require(_dependencyMap[0], 'EmitterSubscription');

  var PropTypes = _require(_dependencyMap[1], 'prop-types');

  var RCTDeviceEventEmitter = _require(_dependencyMap[2], 'RCTDeviceEventEmitter');

  var React = _require(_dependencyMap[3], 'React');

  var ReactNative = _require(_dependencyMap[4], 'ReactNative');

  var StyleSheet = _require(_dependencyMap[5], 'StyleSheet');

  var View = _require(_dependencyMap[6], 'View');

  var AppContainer = (_temp2 = _class = function (_React$Component) {
    babelHelpers.inherits(AppContainer, _React$Component);

    function AppContainer() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, AppContainer);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = AppContainer.__proto__ || Object.getPrototypeOf(AppContainer)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
        inspector: null,
        mainKey: 1
      }, _this._subscription = null, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(AppContainer, [{
      key: "getChildContext",
      value: function getChildContext() {
        return {
          rootTag: this.props.rootTag
        };
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;

        if (__DEV__) {
          if (!global.__RCTProfileIsProfiling) {
            this._subscription = RCTDeviceEventEmitter.addListener('toggleElementInspector', function () {
              var Inspector = _require(_dependencyMap[7], 'Inspector');

              var inspector = _this2.state.inspector ? null : React.createElement(Inspector, {
                inspectedViewTag: ReactNative.findNodeHandle(_this2._mainRef),
                onRequestRerenderApp: function onRequestRerenderApp(updateInspectedViewTag) {
                  _this2.setState(function (s) {
                    return {
                      mainKey: s.mainKey + 1
                    };
                  }, function () {
                    return updateInspectedViewTag(ReactNative.findNodeHandle(_this2._mainRef));
                  });
                },
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 66
                }
              });

              _this2.setState({
                inspector: inspector
              });
            });
          }
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this._subscription) {
          this._subscription.remove();
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;

        var yellowBox = null;

        if (__DEV__) {
          if (!global.__RCTProfileIsProfiling) {
            var YellowBox = _require(_dependencyMap[8], 'YellowBox');

            yellowBox = React.createElement(YellowBox, {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 97
              }
            });
          }
        }

        var innerView = React.createElement(
          View,
          {
            collapsable: !this.state.inspector,
            key: this.state.mainKey,
            pointerEvents: "box-none",
            style: styles.appContainer,
            ref: function ref(_ref2) {
              _this3._mainRef = _ref2;
            },
            __source: {
              fileName: _jsxFileName,
              lineNumber: 102
            }
          },
          this.props.children
        );
        var Wrapper = this.props.WrapperComponent;

        if (Wrapper) {
          innerView = React.createElement(
            Wrapper,
            {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 119
              }
            },
            innerView
          );
        }

        return React.createElement(
          View,
          {
            style: styles.appContainer,
            pointerEvents: "box-none",
            __source: {
              fileName: _jsxFileName,
              lineNumber: 122
            }
          },
          innerView,
          yellowBox,
          this.state.inspector
        );
      }
    }]);
    return AppContainer;
  }(React.Component), _class.childContextTypes = {
    rootTag: PropTypes.number
  }, _temp2);
  var styles = StyleSheet.create({
    appContainer: {
      flex: 1
    }
  });
  module.exports = AppContainer;
},264,[65,141,70,131,21,132,153,265,281],"AppContainer");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _class,
      _temp,
      _initialiseProps,
      _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-native/Libraries/Inspector/Inspector.js";

  var Dimensions = _require(_dependencyMap[0], 'Dimensions');

  var InspectorOverlay = _require(_dependencyMap[1], 'InspectorOverlay');

  var InspectorPanel = _require(_dependencyMap[2], 'InspectorPanel');

  var Platform = _require(_dependencyMap[3], 'Platform');

  var React = _require(_dependencyMap[4], 'React');

  var ReactNative = _require(_dependencyMap[5], 'ReactNative');

  var StyleSheet = _require(_dependencyMap[6], 'StyleSheet');

  var Touchable = _require(_dependencyMap[7], 'Touchable');

  var UIManager = _require(_dependencyMap[8], 'UIManager');

  var View = _require(_dependencyMap[9], 'View');

  var emptyObject = _require(_dependencyMap[10], 'fbjs/lib/emptyObject');

  var invariant = _require(_dependencyMap[11], 'fbjs/lib/invariant');

  var hook = window.__REACT_DEVTOOLS_GLOBAL_HOOK__;
  var renderer = findRenderer();
  hook.resolveRNStyle = _require(_dependencyMap[12], 'flattenStyle');

  function findRenderer() {
    var renderers = hook._renderers;
    var keys = Object.keys(renderers);
    invariant(keys.length === 1, 'Expected to find exactly one React Native renderer on DevTools hook.');
    return renderers[keys[0]];
  }

  var Inspector = (_temp = _class = function (_React$Component) {
    babelHelpers.inherits(Inspector, _React$Component);

    function Inspector(props) {
      babelHelpers.classCallCheck(this, Inspector);

      var _this = babelHelpers.possibleConstructorReturn(this, (Inspector.__proto__ || Object.getPrototypeOf(Inspector)).call(this, props));

      _initialiseProps.call(_this);

      _this.state = {
        devtoolsAgent: null,
        hierarchy: null,
        panelPos: 'bottom',
        inspecting: true,
        perfing: false,
        inspected: null,
        selection: null,
        inspectedViewTag: _this.props.inspectedViewTag,
        networking: false
      };
      return _this;
    }

    babelHelpers.createClass(Inspector, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        hook.on('react-devtools', this.attachToDevtools);

        if (hook.reactDevtoolsAgent) {
          this.attachToDevtools(hook.reactDevtoolsAgent);
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this._subs) {
          this._subs.map(function (fn) {
            return fn();
          });
        }

        hook.off('react-devtools', this.attachToDevtools);
      }
    }, {
      key: "UNSAFE_componentWillReceiveProps",
      value: function UNSAFE_componentWillReceiveProps(newProps) {
        this.setState({
          inspectedViewTag: newProps.inspectedViewTag
        });
      }
    }, {
      key: "setSelection",
      value: function setSelection(i) {
        var _this2 = this;

        var hierarchyItem = this.state.hierarchy[i];

        var _hierarchyItem$getIns = hierarchyItem.getInspectorData(ReactNative.findNodeHandle),
            measure = _hierarchyItem$getIns.measure,
            props = _hierarchyItem$getIns.props,
            source = _hierarchyItem$getIns.source;

        measure(function (x, y, width, height, left, top) {
          _this2.setState({
            inspected: {
              frame: {
                left: left,
                top: top,
                width: width,
                height: height
              },
              style: props.style,
              source: source
            },
            selection: i
          });
        });
      }
    }, {
      key: "onTouchViewTag",
      value: function onTouchViewTag(touchedViewTag, frame, pointerY) {
        var _renderer$getInspecto = renderer.getInspectorDataForViewTag(touchedViewTag),
            hierarchy = _renderer$getInspecto.hierarchy,
            props = _renderer$getInspecto.props,
            selection = _renderer$getInspecto.selection,
            source = _renderer$getInspecto.source;

        if (this.state.devtoolsAgent) {
          var offsetFromLeaf = hierarchy.length - 1 - selection;
          this.state.devtoolsAgent.selectFromDOMNode(touchedViewTag, true, offsetFromLeaf);
        }

        this.setState({
          panelPos: pointerY > Dimensions.get('window').height / 2 ? 'top' : 'bottom',
          selection: selection,
          hierarchy: hierarchy,
          inspected: {
            style: props.style,
            frame: frame,
            source: source
          }
        });
      }
    }, {
      key: "setPerfing",
      value: function setPerfing(val) {
        this.setState({
          perfing: val,
          inspecting: false,
          inspected: null,
          networking: false
        });
      }
    }, {
      key: "setInspecting",
      value: function setInspecting(val) {
        this.setState({
          inspecting: val,
          inspected: null
        });
      }
    }, {
      key: "setTouchTargeting",
      value: function setTouchTargeting(val) {
        var _this3 = this;

        Touchable.TOUCH_TARGET_DEBUG = val;
        this.props.onRequestRerenderApp(function (inspectedViewTag) {
          _this3.setState({
            inspectedViewTag: inspectedViewTag
          });
        });
      }
    }, {
      key: "setNetworking",
      value: function setNetworking(val) {
        this.setState({
          networking: val,
          perfing: false,
          inspecting: false,
          inspected: null
        });
      }
    }, {
      key: "render",
      value: function render() {
        var panelContainerStyle = this.state.panelPos === 'bottom' ? {
          bottom: 0
        } : {
          top: Platform.OS === 'ios' ? 20 : 0
        };
        return React.createElement(
          View,
          {
            style: styles.container,
            pointerEvents: "box-none",
            __source: {
              fileName: _jsxFileName,
              lineNumber: 232
            }
          },
          this.state.inspecting && React.createElement(InspectorOverlay, {
            inspected: this.state.inspected,
            inspectedViewTag: this.state.inspectedViewTag,
            onTouchViewTag: this.onTouchViewTag.bind(this),
            __source: {
              fileName: _jsxFileName,
              lineNumber: 234
            }
          }),
          React.createElement(
            View,
            {
              style: [styles.panelContainer, panelContainerStyle],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 239
              }
            },
            React.createElement(InspectorPanel, {
              devtoolsIsOpen: !!this.state.devtoolsAgent,
              inspecting: this.state.inspecting,
              perfing: this.state.perfing,
              setPerfing: this.setPerfing.bind(this),
              setInspecting: this.setInspecting.bind(this),
              inspected: this.state.inspected,
              hierarchy: this.state.hierarchy,
              selection: this.state.selection,
              setSelection: this.setSelection.bind(this),
              touchTargeting: Touchable.TOUCH_TARGET_DEBUG,
              setTouchTargeting: this.setTouchTargeting.bind(this),
              networking: this.state.networking,
              setNetworking: this.setNetworking.bind(this),
              __source: {
                fileName: _jsxFileName,
                lineNumber: 240
              }
            })
          )
        );
      }
    }]);
    return Inspector;
  }(React.Component), _initialiseProps = function _initialiseProps() {
    var _this4 = this;

    this.attachToDevtools = function (agent) {
      var _hideWait = null;
      var hlSub = agent.sub('highlight', function (_ref) {
        var node = _ref.node,
            name = _ref.name,
            props = _ref.props;
        clearTimeout(_hideWait);

        if (typeof node !== 'number') {
          node = ReactNative.findNodeHandle(node);
        }

        UIManager.measure(node, function (x, y, width, height, left, top) {
          _this4.setState({
            hierarchy: [],
            inspected: {
              frame: {
                left: left,
                top: top,
                width: width,
                height: height
              },
              style: props ? props.style : emptyObject
            }
          });
        });
      });
      var hideSub = agent.sub('hideHighlight', function () {
        if (_this4.state.inspected === null) {
          return;
        }

        _hideWait = setTimeout(function () {
          _this4.setState({
            inspected: null
          });
        }, 100);
      });
      _this4._subs = [hlSub, hideSub];
      agent.on('shutdown', function () {
        _this4.setState({
          devtoolsAgent: null
        });

        _this4._subs = null;
      });

      _this4.setState({
        devtoolsAgent: agent
      });
    };
  }, _temp);
  var styles = StyleSheet.create({
    container: {
      position: 'absolute',
      backgroundColor: 'transparent',
      top: 0,
      left: 0,
      right: 0,
      bottom: 0
    },
    panelContainer: {
      position: 'absolute',
      left: 0,
      right: 0
    }
  });
  module.exports = Inspector;
},265,[134,266,270,52,131,21,132,187,110,153,117,13,105],"Inspector");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _class,
      _temp2,
      _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-native/Libraries/Inspector/InspectorOverlay.js";

  var Dimensions = _require(_dependencyMap[0], 'Dimensions');

  var ElementBox = _require(_dependencyMap[1], 'ElementBox');

  var PropTypes = _require(_dependencyMap[2], 'prop-types');

  var React = _require(_dependencyMap[3], 'React');

  var StyleSheet = _require(_dependencyMap[4], 'StyleSheet');

  var UIManager = _require(_dependencyMap[5], 'UIManager');

  var View = _require(_dependencyMap[6], 'View');

  var InspectorOverlay = (_temp2 = _class = function (_React$Component) {
    babelHelpers.inherits(InspectorOverlay, _React$Component);

    function InspectorOverlay() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, InspectorOverlay);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = InspectorOverlay.__proto__ || Object.getPrototypeOf(InspectorOverlay)).call.apply(_ref, [this].concat(args))), _this), _this.findViewForTouchEvent = function (e) {
        var _e$nativeEvent$touche = e.nativeEvent.touches[0],
            locationX = _e$nativeEvent$touche.locationX,
            locationY = _e$nativeEvent$touche.locationY;
        UIManager.findSubviewIn(_this.props.inspectedViewTag, [locationX, locationY], function (nativeViewTag, left, top, width, height) {
          _this.props.onTouchViewTag(nativeViewTag, {
            left: left,
            top: top,
            width: width,
            height: height
          }, locationY);
        });
      }, _this.shouldSetResponser = function (e) {
        _this.findViewForTouchEvent(e);

        return true;
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(InspectorOverlay, [{
      key: "render",
      value: function render() {
        var content = null;

        if (this.props.inspected) {
          content = React.createElement(ElementBox, {
            frame: this.props.inspected.frame,
            style: this.props.inspected.style,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 62
            }
          });
        }

        return React.createElement(
          View,
          {
            onStartShouldSetResponder: this.shouldSetResponser,
            onResponderMove: this.findViewForTouchEvent,
            style: [styles.inspector, {
              height: Dimensions.get('window').height
            }],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 66
            }
          },
          content
        );
      }
    }]);
    return InspectorOverlay;
  }(React.Component), _class.propTypes = {
    inspected: PropTypes.shape({
      frame: PropTypes.object,
      style: PropTypes.any
    }),
    inspectedViewTag: PropTypes.number,
    onTouchViewTag: PropTypes.func.isRequired
  }, _temp2);
  var styles = StyleSheet.create({
    inspector: {
      backgroundColor: 'transparent',
      position: 'absolute',
      left: 0,
      top: 0,
      right: 0
    }
  });
  module.exports = InspectorOverlay;
},266,[134,267,141,131,132,110,153],"InspectorOverlay");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-native/Libraries/Inspector/ElementBox.js";

  var React = _require(_dependencyMap[0], 'React');

  var View = _require(_dependencyMap[1], 'View');

  var StyleSheet = _require(_dependencyMap[2], 'StyleSheet');

  var BorderBox = _require(_dependencyMap[3], 'BorderBox');

  var resolveBoxStyle = _require(_dependencyMap[4], 'resolveBoxStyle');

  var flattenStyle = _require(_dependencyMap[5], 'flattenStyle');

  var ElementBox = function (_React$Component) {
    babelHelpers.inherits(ElementBox, _React$Component);

    function ElementBox() {
      babelHelpers.classCallCheck(this, ElementBox);
      return babelHelpers.possibleConstructorReturn(this, (ElementBox.__proto__ || Object.getPrototypeOf(ElementBox)).apply(this, arguments));
    }

    babelHelpers.createClass(ElementBox, [{
      key: "render",
      value: function render() {
        var style = flattenStyle(this.props.style) || {};
        var margin = resolveBoxStyle('margin', style);
        var padding = resolveBoxStyle('padding', style);
        var frameStyle = this.props.frame;

        if (margin) {
          frameStyle = {
            top: frameStyle.top - margin.top,
            left: frameStyle.left - margin.left,
            height: frameStyle.height + margin.top + margin.bottom,
            width: frameStyle.width + margin.left + margin.right
          };
        }

        var contentStyle = {
          width: this.props.frame.width,
          height: this.props.frame.height
        };

        if (padding) {
          contentStyle = {
            width: contentStyle.width - padding.left - padding.right,
            height: contentStyle.height - padding.top - padding.bottom
          };
        }

        return React.createElement(
          View,
          {
            style: [styles.frame, frameStyle],
            pointerEvents: "none",
            __source: {
              fileName: _jsxFileName,
              lineNumber: 47
            }
          },
          React.createElement(
            BorderBox,
            {
              box: margin,
              style: styles.margin,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 48
              }
            },
            React.createElement(
              BorderBox,
              {
                box: padding,
                style: styles.padding,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 49
                }
              },
              React.createElement(View, {
                style: [styles.content, contentStyle],
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 50
                }
              })
            )
          )
        );
      }
    }]);
    return ElementBox;
  }(React.Component);

  var styles = StyleSheet.create({
    frame: {
      position: 'absolute'
    },
    content: {
      backgroundColor: 'rgba(200, 230, 255, 0.8)'
    },
    padding: {
      borderColor: 'rgba(77, 255, 0, 0.3)'
    },
    margin: {
      borderColor: 'rgba(255, 132, 0, 0.3)'
    }
  });
  module.exports = ElementBox;
},267,[131,153,132,268,269,105],"ElementBox");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-native/Libraries/Inspector/BorderBox.js";

  var React = _require(_dependencyMap[0], 'React');

  var View = _require(_dependencyMap[1], 'View');

  var BorderBox = function (_React$Component) {
    babelHelpers.inherits(BorderBox, _React$Component);

    function BorderBox() {
      babelHelpers.classCallCheck(this, BorderBox);
      return babelHelpers.possibleConstructorReturn(this, (BorderBox.__proto__ || Object.getPrototypeOf(BorderBox)).apply(this, arguments));
    }

    babelHelpers.createClass(BorderBox, [{
      key: "render",
      value: function render() {
        var box = this.props.box;

        if (!box) {
          return this.props.children;
        }

        var style = {
          borderTopWidth: box.top,
          borderBottomWidth: box.bottom,
          borderLeftWidth: box.left,
          borderRightWidth: box.right
        };
        return React.createElement(
          View,
          {
            style: [style, this.props.style],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 30
            }
          },
          this.props.children
        );
      }
    }]);
    return BorderBox;
  }(React.Component);

  module.exports = BorderBox;
},268,[131,153],"BorderBox");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  function resolveBoxStyle(prefix, style) {
    var res = {};
    var subs = ['top', 'left', 'bottom', 'right'];
    var set = false;
    subs.forEach(function (sub) {
      res[sub] = style[prefix] || 0;
    });

    if (style[prefix]) {
      set = true;
    }

    if (style[prefix + 'Vertical']) {
      res.top = res.bottom = style[prefix + 'Vertical'];
      set = true;
    }

    if (style[prefix + 'Horizontal']) {
      res.left = res.right = style[prefix + 'Horizontal'];
      set = true;
    }

    subs.forEach(function (sub) {
      var val = style[prefix + capFirst(sub)];

      if (val) {
        res[sub] = val;
        set = true;
      }
    });

    if (!set) {
      return;
    }

    return res;
  }

  function capFirst(text) {
    return text[0].toUpperCase() + text.slice(1);
  }

  module.exports = resolveBoxStyle;
},269,[],"resolveBoxStyle");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-native/Libraries/Inspector/InspectorPanel.js";

  var ElementProperties = _require(_dependencyMap[0], 'ElementProperties');

  var NetworkOverlay = _require(_dependencyMap[1], 'NetworkOverlay');

  var PerformanceOverlay = _require(_dependencyMap[2], 'PerformanceOverlay');

  var React = _require(_dependencyMap[3], 'React');

  var PropTypes = _require(_dependencyMap[4], 'prop-types');

  var ScrollView = _require(_dependencyMap[5], 'ScrollView');

  var StyleSheet = _require(_dependencyMap[6], 'StyleSheet');

  var Text = _require(_dependencyMap[7], 'Text');

  var TouchableHighlight = _require(_dependencyMap[8], 'TouchableHighlight');

  var View = _require(_dependencyMap[9], 'View');

  var InspectorPanel = function (_React$Component) {
    babelHelpers.inherits(InspectorPanel, _React$Component);

    function InspectorPanel() {
      babelHelpers.classCallCheck(this, InspectorPanel);
      return babelHelpers.possibleConstructorReturn(this, (InspectorPanel.__proto__ || Object.getPrototypeOf(InspectorPanel)).apply(this, arguments));
    }

    babelHelpers.createClass(InspectorPanel, [{
      key: "renderWaiting",
      value: function renderWaiting() {
        if (this.props.inspecting) {
          return React.createElement(
            Text,
            {
              style: styles.waitingText,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 29
              }
            },
            "Tap something to inspect it"
          );
        }

        return React.createElement(
          Text,
          {
            style: styles.waitingText,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 34
            }
          },
          "Nothing is inspected"
        );
      }
    }, {
      key: "render",
      value: function render() {
        var contents = void 0;

        if (this.props.inspected) {
          contents = React.createElement(
            ScrollView,
            {
              style: styles.properties,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 41
              }
            },
            React.createElement(ElementProperties, {
              style: this.props.inspected.style,
              frame: this.props.inspected.frame,
              source: this.props.inspected.source,
              hierarchy: this.props.hierarchy,
              selection: this.props.selection,
              setSelection: this.props.setSelection,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 42
              }
            })
          );
        } else if (this.props.perfing) {
          contents = React.createElement(PerformanceOverlay, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 54
            }
          });
        } else if (this.props.networking) {
          contents = React.createElement(NetworkOverlay, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 58
            }
          });
        } else {
          contents = React.createElement(
            View,
            {
              style: styles.waiting,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 62
              }
            },
            this.renderWaiting()
          );
        }

        return React.createElement(
          View,
          {
            style: styles.container,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 68
            }
          },
          !this.props.devtoolsIsOpen && contents,
          React.createElement(
            View,
            {
              style: styles.buttonRow,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 70
              }
            },
            React.createElement(Button, {
              title: 'Inspect',
              pressed: this.props.inspecting,
              onClick: this.props.setInspecting,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 71
              }
            }),
            React.createElement(Button, {
              title: 'Perf',
              pressed: this.props.perfing,
              onClick: this.props.setPerfing,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 76
              }
            }),
            React.createElement(Button, {
              title: 'Network',
              pressed: this.props.networking,
              onClick: this.props.setNetworking,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 80
              }
            }),
            React.createElement(Button, {
              title: 'Touchables',
              pressed: this.props.touchTargeting,
              onClick: this.props.setTouchTargeting,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 84
              }
            })
          )
        );
      }
    }]);
    return InspectorPanel;
  }(React.Component);

  InspectorPanel.propTypes = {
    devtoolsIsOpen: PropTypes.bool,
    inspecting: PropTypes.bool,
    setInspecting: PropTypes.func,
    inspected: PropTypes.object,
    perfing: PropTypes.bool,
    setPerfing: PropTypes.func,
    touchTargeting: PropTypes.bool,
    setTouchTargeting: PropTypes.func,
    networking: PropTypes.bool,
    setNetworking: PropTypes.func
  };

  var Button = function (_React$Component2) {
    babelHelpers.inherits(Button, _React$Component2);

    function Button() {
      babelHelpers.classCallCheck(this, Button);
      return babelHelpers.possibleConstructorReturn(this, (Button.__proto__ || Object.getPrototypeOf(Button)).apply(this, arguments));
    }

    babelHelpers.createClass(Button, [{
      key: "render",
      value: function render() {
        var _this3 = this;

        return React.createElement(
          TouchableHighlight,
          {
            onPress: function onPress() {
              return _this3.props.onClick(!_this3.props.pressed);
            },
            style: [styles.button, this.props.pressed && styles.buttonPressed],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 110
            }
          },
          React.createElement(
            Text,
            {
              style: styles.buttonText,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 114
              }
            },
            this.props.title
          )
        );
      }
    }]);
    return Button;
  }(React.Component);

  var styles = StyleSheet.create({
    buttonRow: {
      flexDirection: 'row'
    },
    button: {
      backgroundColor: 'rgba(0, 0, 0, 0.3)',
      margin: 2,
      height: 30,
      justifyContent: 'center',
      alignItems: 'center'
    },
    buttonPressed: {
      backgroundColor: 'rgba(255, 255, 255, 0.3)'
    },
    buttonText: {
      textAlign: 'center',
      color: 'white',
      margin: 5
    },
    container: {
      backgroundColor: 'rgba(0, 0, 0, 0.7)'
    },
    properties: {
      height: 200
    },
    waiting: {
      height: 100
    },
    waitingText: {
      fontSize: 20,
      textAlign: 'center',
      marginVertical: 20,
      color: 'white'
    }
  });
  module.exports = InspectorPanel;
},270,[271,277,280,131,141,226,132,186,274,153],"InspectorPanel");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _class,
      _temp,
      _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-native/Libraries/Inspector/ElementProperties.js";

  var BoxInspector = _require(_dependencyMap[0], 'BoxInspector');

  var PropTypes = _require(_dependencyMap[1], 'prop-types');

  var React = _require(_dependencyMap[2], 'React');

  var StyleInspector = _require(_dependencyMap[3], 'StyleInspector');

  var StyleSheet = _require(_dependencyMap[4], 'StyleSheet');

  var Text = _require(_dependencyMap[5], 'Text');

  var TouchableHighlight = _require(_dependencyMap[6], 'TouchableHighlight');

  var TouchableWithoutFeedback = _require(_dependencyMap[7], 'TouchableWithoutFeedback');

  var View = _require(_dependencyMap[8], 'View');

  var flattenStyle = _require(_dependencyMap[9], 'flattenStyle');

  var mapWithSeparator = _require(_dependencyMap[10], 'mapWithSeparator');

  var openFileInEditor = _require(_dependencyMap[11], 'openFileInEditor');

  var ElementProperties = (_temp = _class = function (_React$Component) {
    babelHelpers.inherits(ElementProperties, _React$Component);

    function ElementProperties() {
      babelHelpers.classCallCheck(this, ElementProperties);
      return babelHelpers.possibleConstructorReturn(this, (ElementProperties.__proto__ || Object.getPrototypeOf(ElementProperties)).apply(this, arguments));
    }

    babelHelpers.createClass(ElementProperties, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        var style = flattenStyle(this.props.style);
        var selection = this.props.selection;
        var openFileButton = void 0;
        var source = this.props.source;

        var _ref = source || {},
            fileName = _ref.fileName,
            lineNumber = _ref.lineNumber;

        if (fileName && lineNumber) {
          var parts = fileName.split('/');
          var fileNameShort = parts[parts.length - 1];
          openFileButton = React.createElement(
            TouchableHighlight,
            {
              style: styles.openButton,
              onPress: openFileInEditor.bind(null, fileName, lineNumber),
              __source: {
                fileName: _jsxFileName,
                lineNumber: 62
              }
            },
            React.createElement(
              Text,
              {
                style: styles.openButtonTitle,
                numberOfLines: 1,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 65
                }
              },
              fileNameShort,
              ":",
              lineNumber
            )
          );
        }

        return React.createElement(
          TouchableWithoutFeedback,
          {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 74
            }
          },
          React.createElement(
            View,
            {
              style: styles.info,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 75
              }
            },
            React.createElement(
              View,
              {
                style: styles.breadcrumb,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 76
                }
              },
              mapWithSeparator(this.props.hierarchy, function (hierarchyItem, i) {
                return React.createElement(
                  TouchableHighlight,
                  {
                    key: 'item-' + i,
                    style: [styles.breadItem, i === selection && styles.selected],
                    onPress: function onPress() {
                      return _this2.props.setSelection(i);
                    },
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 80
                    }
                  },
                  React.createElement(
                    Text,
                    {
                      style: styles.breadItemText,
                      __source: {
                        fileName: _jsxFileName,
                        lineNumber: 85
                      }
                    },
                    hierarchyItem.name
                  )
                );
              }, function (i) {
                return React.createElement(
                  Text,
                  {
                    key: 'sep-' + i,
                    style: styles.breadSep,
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 91
                    }
                  },
                  "\u25B8"
                );
              })
            ),
            React.createElement(
              View,
              {
                style: styles.row,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 97
                }
              },
              React.createElement(
                View,
                {
                  style: styles.col,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 98
                  }
                },
                React.createElement(StyleInspector, {
                  style: style,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 99
                  }
                }),
                openFileButton
              ),
              React.createElement(BoxInspector, {
                style: style,
                frame: this.props.frame,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 104
                }
              })
            )
          )
        );
      }
    }]);
    return ElementProperties;
  }(React.Component), _class.propTypes = {
    hierarchy: PropTypes.array.isRequired,
    style: PropTypes.oneOfType([PropTypes.object, PropTypes.array, PropTypes.number]),
    source: PropTypes.shape({
      fileName: PropTypes.string,
      lineNumber: PropTypes.number
    })
  }, _temp);
  var styles = StyleSheet.create({
    breadSep: {
      fontSize: 8,
      color: 'white'
    },
    breadcrumb: {
      flexDirection: 'row',
      flexWrap: 'wrap',
      alignItems: 'flex-start',
      marginBottom: 5
    },
    selected: {
      borderColor: 'white',
      borderRadius: 5
    },
    breadItem: {
      borderWidth: 1,
      borderColor: 'transparent',
      marginHorizontal: 2
    },
    breadItemText: {
      fontSize: 10,
      color: 'white',
      marginHorizontal: 5
    },
    row: {
      flexDirection: 'row',
      alignItems: 'center',
      justifyContent: 'space-between'
    },
    col: {
      flex: 1
    },
    info: {
      padding: 10
    },
    openButton: {
      padding: 10,
      backgroundColor: '#000',
      marginVertical: 5,
      marginRight: 5,
      borderRadius: 2
    },
    openButtonTitle: {
      color: 'white',
      fontSize: 8
    }
  });
  module.exports = ElementProperties;
},271,[272,141,131,273,132,186,274,239,153,105,275,276],"ElementProperties");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-native/Libraries/Inspector/BoxInspector.js";

  var React = _require(_dependencyMap[0], 'React');

  var StyleSheet = _require(_dependencyMap[1], 'StyleSheet');

  var Text = _require(_dependencyMap[2], 'Text');

  var View = _require(_dependencyMap[3], 'View');

  var resolveBoxStyle = _require(_dependencyMap[4], 'resolveBoxStyle');

  var blank = {
    top: 0,
    left: 0,
    right: 0,
    bottom: 0
  };

  var BoxInspector = function (_React$Component) {
    babelHelpers.inherits(BoxInspector, _React$Component);

    function BoxInspector() {
      babelHelpers.classCallCheck(this, BoxInspector);
      return babelHelpers.possibleConstructorReturn(this, (BoxInspector.__proto__ || Object.getPrototypeOf(BoxInspector)).apply(this, arguments));
    }

    babelHelpers.createClass(BoxInspector, [{
      key: "render",
      value: function render() {
        var frame = this.props.frame;
        var style = this.props.style;
        var margin = style && resolveBoxStyle('margin', style) || blank;
        var padding = style && resolveBoxStyle('padding', style) || blank;
        return React.createElement(
          BoxContainer,
          {
            title: "margin",
            titleStyle: styles.marginLabel,
            box: margin,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 34
            }
          },
          React.createElement(
            BoxContainer,
            {
              title: "padding",
              box: padding,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 35
              }
            },
            React.createElement(
              View,
              {
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 36
                }
              },
              React.createElement(
                Text,
                {
                  style: styles.innerText,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 37
                  }
                },
                "(",
                (frame.left || 0).toFixed(1),
                ", ",
                (frame.top || 0).toFixed(1),
                ")"
              ),
              React.createElement(
                Text,
                {
                  style: styles.innerText,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 40
                  }
                },
                (frame.width || 0).toFixed(1),
                " \xD7 ",
                (frame.height || 0).toFixed(1)
              )
            )
          )
        );
      }
    }]);
    return BoxInspector;
  }(React.Component);

  var BoxContainer = function (_React$Component2) {
    babelHelpers.inherits(BoxContainer, _React$Component2);

    function BoxContainer() {
      babelHelpers.classCallCheck(this, BoxContainer);
      return babelHelpers.possibleConstructorReturn(this, (BoxContainer.__proto__ || Object.getPrototypeOf(BoxContainer)).apply(this, arguments));
    }

    babelHelpers.createClass(BoxContainer, [{
      key: "render",
      value: function render() {
        var box = this.props.box;
        return React.createElement(
          View,
          {
            style: styles.box,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 54
            }
          },
          React.createElement(
            View,
            {
              style: styles.row,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 55
              }
            },
            React.createElement(
              Text,
              {
                style: [this.props.titleStyle, styles.label],
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 58
                }
              },
              this.props.title
            ),
            React.createElement(
              Text,
              {
                style: styles.boxText,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 59
                }
              },
              box.top
            )
          ),
          React.createElement(
            View,
            {
              style: styles.row,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 61
              }
            },
            React.createElement(
              Text,
              {
                style: styles.boxText,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 62
                }
              },
              box.left
            ),
            this.props.children,
            React.createElement(
              Text,
              {
                style: styles.boxText,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 64
                }
              },
              box.right
            )
          ),
          React.createElement(
            Text,
            {
              style: styles.boxText,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 66
              }
            },
            box.bottom
          )
        );
      }
    }]);
    return BoxContainer;
  }(React.Component);

  var styles = StyleSheet.create({
    row: {
      flexDirection: 'row',
      alignItems: 'center',
      justifyContent: 'space-around'
    },
    marginLabel: {
      width: 60
    },
    label: {
      fontSize: 10,
      color: 'rgb(255,100,0)',
      marginLeft: 5,
      flex: 1,
      textAlign: 'left',
      top: -3
    },
    buffer: {
      fontSize: 10,
      color: 'yellow',
      flex: 1,
      textAlign: 'center'
    },
    innerText: {
      color: 'yellow',
      fontSize: 12,
      textAlign: 'center',
      width: 70
    },
    box: {
      borderWidth: 1,
      borderColor: 'grey'
    },
    boxText: {
      color: 'white',
      fontSize: 12,
      marginHorizontal: 3,
      marginVertical: 2,
      textAlign: 'center'
    }
  });
  module.exports = BoxInspector;
},272,[131,132,186,153,269],"BoxInspector");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-native/Libraries/Inspector/StyleInspector.js";

  var React = _require(_dependencyMap[0], 'React');

  var StyleSheet = _require(_dependencyMap[1], 'StyleSheet');

  var Text = _require(_dependencyMap[2], 'Text');

  var View = _require(_dependencyMap[3], 'View');

  var StyleInspector = function (_React$Component) {
    babelHelpers.inherits(StyleInspector, _React$Component);

    function StyleInspector() {
      babelHelpers.classCallCheck(this, StyleInspector);
      return babelHelpers.possibleConstructorReturn(this, (StyleInspector.__proto__ || Object.getPrototypeOf(StyleInspector)).apply(this, arguments));
    }

    babelHelpers.createClass(StyleInspector, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        if (!this.props.style) {
          return React.createElement(
            Text,
            {
              style: styles.noStyle,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 22
              }
            },
            "No style"
          );
        }

        var names = Object.keys(this.props.style);
        return React.createElement(
          View,
          {
            style: styles.container,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 26
            }
          },
          React.createElement(
            View,
            {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 27
              }
            },
            names.map(function (name) {
              return React.createElement(
                Text,
                {
                  key: name,
                  style: styles.attr,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 28
                  }
                },
                name,
                ":"
              );
            })
          ),
          React.createElement(
            View,
            {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 31
              }
            },
            names.map(function (name) {
              var value = typeof _this2.props.style[name] === 'object' ? JSON.stringify(_this2.props.style[name]) : _this2.props.style[name];
              return React.createElement(
                Text,
                {
                  key: name,
                  style: styles.value,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 34
                  }
                },
                value
              );
            })
          )
        );
      }
    }]);
    return StyleInspector;
  }(React.Component);

  var styles = StyleSheet.create({
    container: {
      flexDirection: 'row'
    },
    row: {
      flexDirection: 'row',
      alignItems: 'center',
      justifyContent: 'space-around'
    },
    attr: {
      fontSize: 10,
      color: '#ccc'
    },
    value: {
      fontSize: 10,
      color: 'white',
      marginLeft: 10
    },
    noStyle: {
      color: 'white',
      fontSize: 10
    }
  });
  module.exports = StyleInspector;
},273,[131,132,186,153],"StyleInspector");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-native/Libraries/Components/Touchable/TouchableHighlight.js";

  var ColorPropType = _require(_dependencyMap[0], 'ColorPropType');

  var NativeMethodsMixin = _require(_dependencyMap[1], 'NativeMethodsMixin');

  var PropTypes = _require(_dependencyMap[2], 'prop-types');

  var React = _require(_dependencyMap[3], 'React');

  var ReactNativeViewAttributes = _require(_dependencyMap[4], 'ReactNativeViewAttributes');

  var StyleSheet = _require(_dependencyMap[5], 'StyleSheet');

  var Touchable = _require(_dependencyMap[6], 'Touchable');

  var TouchableWithoutFeedback = _require(_dependencyMap[7], 'TouchableWithoutFeedback');

  var View = _require(_dependencyMap[8], 'View');

  var ViewPropTypes = _require(_dependencyMap[9], 'ViewPropTypes');

  var createReactClass = _require(_dependencyMap[10], 'create-react-class');

  var ensurePositiveDelayProps = _require(_dependencyMap[11], 'ensurePositiveDelayProps');

  var DEFAULT_PROPS = {
    activeOpacity: 0.85,
    delayPressOut: 100,
    underlayColor: 'black'
  };
  var PRESS_RETENTION_OFFSET = {
    top: 20,
    left: 20,
    right: 20,
    bottom: 30
  };
  var TouchableHighlight = createReactClass({
    displayName: 'TouchableHighlight',
    propTypes: babelHelpers.extends({}, TouchableWithoutFeedback.propTypes, {
      activeOpacity: PropTypes.number,
      underlayColor: ColorPropType,
      style: ViewPropTypes.style,
      onShowUnderlay: PropTypes.func,
      onHideUnderlay: PropTypes.func,
      hasTVPreferredFocus: PropTypes.bool,
      tvParallaxProperties: PropTypes.object
    }),
    mixins: [NativeMethodsMixin, Touchable.Mixin],
    getDefaultProps: function getDefaultProps() {
      return DEFAULT_PROPS;
    },
    getInitialState: function getInitialState() {
      this._isMounted = false;
      return babelHelpers.extends({}, this.touchableGetInitialState(), {
        extraChildStyle: null,
        extraUnderlayStyle: null
      });
    },
    componentDidMount: function componentDidMount() {
      this._isMounted = true;
      ensurePositiveDelayProps(this.props);
    },
    componentWillUnmount: function componentWillUnmount() {
      this._isMounted = false;
      clearTimeout(this._hideTimeout);
    },
    UNSAFE_componentWillReceiveProps: function UNSAFE_componentWillReceiveProps(nextProps) {
      ensurePositiveDelayProps(nextProps);
    },
    viewConfig: {
      uiViewClassName: 'RCTView',
      validAttributes: ReactNativeViewAttributes.RCTView
    },
    touchableHandleActivePressIn: function touchableHandleActivePressIn(e) {
      clearTimeout(this._hideTimeout);
      this._hideTimeout = null;

      this._showUnderlay();

      this.props.onPressIn && this.props.onPressIn(e);
    },
    touchableHandleActivePressOut: function touchableHandleActivePressOut(e) {
      if (!this._hideTimeout) {
        this._hideUnderlay();
      }

      this.props.onPressOut && this.props.onPressOut(e);
    },
    touchableHandlePress: function touchableHandlePress(e) {
      clearTimeout(this._hideTimeout);

      this._showUnderlay();

      this._hideTimeout = setTimeout(this._hideUnderlay, this.props.delayPressOut);
      this.props.onPress && this.props.onPress(e);
    },
    touchableHandleLongPress: function touchableHandleLongPress(e) {
      this.props.onLongPress && this.props.onLongPress(e);
    },
    touchableGetPressRectOffset: function touchableGetPressRectOffset() {
      return this.props.pressRetentionOffset || PRESS_RETENTION_OFFSET;
    },
    touchableGetHitSlop: function touchableGetHitSlop() {
      return this.props.hitSlop;
    },
    touchableGetHighlightDelayMS: function touchableGetHighlightDelayMS() {
      return this.props.delayPressIn;
    },
    touchableGetLongPressDelayMS: function touchableGetLongPressDelayMS() {
      return this.props.delayLongPress;
    },
    touchableGetPressOutDelayMS: function touchableGetPressOutDelayMS() {
      return this.props.delayPressOut;
    },
    _showUnderlay: function _showUnderlay() {
      if (!this._isMounted || !this._hasPressHandler()) {
        return;
      }

      this.setState({
        extraChildStyle: {
          opacity: this.props.activeOpacity
        },
        extraUnderlayStyle: {
          backgroundColor: this.props.underlayColor
        }
      });
      this.props.onShowUnderlay && this.props.onShowUnderlay();
    },
    _hideUnderlay: function _hideUnderlay() {
      clearTimeout(this._hideTimeout);
      this._hideTimeout = null;

      if (this._hasPressHandler()) {
        this.setState({
          extraChildStyle: null,
          extraUnderlayStyle: null
        });
        this.props.onHideUnderlay && this.props.onHideUnderlay();
      }
    },
    _hasPressHandler: function _hasPressHandler() {
      return !!(this.props.onPress || this.props.onPressIn || this.props.onPressOut || this.props.onLongPress);
    },
    render: function render() {
      var child = React.Children.only(this.props.children);
      return React.createElement(
        View,
        {
          accessible: this.props.accessible !== false,
          accessibilityLabel: this.props.accessibilityLabel,
          accessibilityComponentType: this.props.accessibilityComponentType,
          accessibilityTraits: this.props.accessibilityTraits,
          style: StyleSheet.compose(this.props.style, this.state.extraUnderlayStyle),
          onLayout: this.props.onLayout,
          hitSlop: this.props.hitSlop,
          isTVSelectable: true,
          tvParallaxProperties: this.props.tvParallaxProperties,
          hasTVPreferredFocus: this.props.hasTVPreferredFocus,
          onStartShouldSetResponder: this.touchableHandleStartShouldSetResponder,
          onResponderTerminationRequest: this.touchableHandleResponderTerminationRequest,
          onResponderGrant: this.touchableHandleResponderGrant,
          onResponderMove: this.touchableHandleResponderMove,
          onResponderRelease: this.touchableHandleResponderRelease,
          onResponderTerminate: this.touchableHandleResponderTerminate,
          nativeID: this.props.nativeID,
          testID: this.props.testID,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 306
          }
        },
        React.cloneElement(child, {
          style: StyleSheet.compose(child.props.style, this.state.extraChildStyle)
        }),
        Touchable.renderDebugView({
          color: 'green',
          hitSlop: this.props.hitSlop
        })
      );
    }
  });
  module.exports = TouchableHighlight;
},274,[127,128,141,131,154,132,187,239,153,155,166,240],"TouchableHighlight");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  function mapWithSeparator(items, itemRenderer, spacerRenderer) {
    var mapped = [];

    if (items.length > 0) {
      mapped.push(itemRenderer(items[0], 0, items));

      for (var ii = 1; ii < items.length; ii++) {
        mapped.push(spacerRenderer(ii - 1), itemRenderer(items[ii], ii, items));
      }
    }

    return mapped;
  }

  module.exports = mapWithSeparator;
},275,[],"mapWithSeparator");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var getDevServer = _require(_dependencyMap[0], 'getDevServer');

  function openFileInEditor(file, lineNumber) {
    fetch(getDevServer().url + 'open-stack-frame', {
      method: 'POST',
      body: JSON.stringify({
        file: file,
        lineNumber: lineNumber
      })
    });
  }

  module.exports = openFileInEditor;
},276,[36],"openFileInEditor");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-native/Libraries/Inspector/NetworkOverlay.js";

  var ListView = _require(_dependencyMap[0], 'ListView');

  var React = _require(_dependencyMap[1], 'React');

  var ScrollView = _require(_dependencyMap[2], 'ScrollView');

  var StyleSheet = _require(_dependencyMap[3], 'StyleSheet');

  var Text = _require(_dependencyMap[4], 'Text');

  var TouchableHighlight = _require(_dependencyMap[5], 'TouchableHighlight');

  var View = _require(_dependencyMap[6], 'View');

  var WebSocketInterceptor = _require(_dependencyMap[7], 'WebSocketInterceptor');

  var XHRInterceptor = _require(_dependencyMap[8], 'XHRInterceptor');

  var LISTVIEW_CELL_HEIGHT = 15;
  var SEPARATOR_THICKNESS = 2;
  var nextXHRId = 0;

  var NetworkOverlay = function (_React$Component) {
    babelHelpers.inherits(NetworkOverlay, _React$Component);

    function NetworkOverlay(props) {
      babelHelpers.classCallCheck(this, NetworkOverlay);

      var _this = babelHelpers.possibleConstructorReturn(this, (NetworkOverlay.__proto__ || Object.getPrototypeOf(NetworkOverlay)).call(this, props));

      _this._requests = [];
      _this._detailViewItems = [];
      _this._listViewDataSource = new ListView.DataSource({
        rowHasChanged: function rowHasChanged(r1, r2) {
          return r1 !== r2;
        }
      });
      _this.state = {
        dataSource: _this._listViewDataSource.cloneWithRows([]),
        newDetailInfo: false,
        detailRowID: null
      };
      _this._listViewHighlighted = false;
      _this._listViewHeight = 0;
      _this._captureRequestListView = _this._captureRequestListView.bind(_this);
      _this._captureDetailScrollView = _this._captureDetailScrollView.bind(_this);
      _this._listViewOnLayout = _this._listViewOnLayout.bind(_this);
      _this._renderRow = _this._renderRow.bind(_this);
      _this._closeButtonClicked = _this._closeButtonClicked.bind(_this);
      _this._socketIdMap = {};
      _this._xhrIdMap = {};
      return _this;
    }

    babelHelpers.createClass(NetworkOverlay, [{
      key: "_enableXHRInterception",
      value: function _enableXHRInterception() {
        var _this2 = this;

        if (XHRInterceptor.isInterceptorEnabled()) {
          return;
        }

        XHRInterceptor.setOpenCallback(function (method, url, xhr) {
          xhr._index = nextXHRId++;
          var xhrIndex = _this2._requests.length;
          _this2._xhrIdMap[xhr._index] = xhrIndex;
          var _xhr = {
            'type': 'XMLHttpRequest',
            'method': method,
            'url': url
          };

          _this2._requests.push(_xhr);

          _this2._detailViewItems.push([]);

          _this2._genDetailViewItem(xhrIndex);

          _this2.setState({
            dataSource: _this2._listViewDataSource.cloneWithRows(_this2._requests)
          }, _this2._scrollToBottom());
        });
        XHRInterceptor.setRequestHeaderCallback(function (header, value, xhr) {
          var xhrIndex = _this2._getRequestIndexByXHRID(xhr._index);

          if (xhrIndex === -1) {
            return;
          }

          var networkInfo = _this2._requests[xhrIndex];

          if (!networkInfo.requestHeaders) {
            networkInfo.requestHeaders = {};
          }

          networkInfo.requestHeaders[header] = value;

          _this2._genDetailViewItem(xhrIndex);
        });
        XHRInterceptor.setSendCallback(function (data, xhr) {
          var xhrIndex = _this2._getRequestIndexByXHRID(xhr._index);

          if (xhrIndex === -1) {
            return;
          }

          _this2._requests[xhrIndex].dataSent = data;

          _this2._genDetailViewItem(xhrIndex);
        });
        XHRInterceptor.setHeaderReceivedCallback(function (type, size, responseHeaders, xhr) {
          var xhrIndex = _this2._getRequestIndexByXHRID(xhr._index);

          if (xhrIndex === -1) {
            return;
          }

          var networkInfo = _this2._requests[xhrIndex];
          networkInfo.responseContentType = type;
          networkInfo.responseSize = size;
          networkInfo.responseHeaders = responseHeaders;

          _this2._genDetailViewItem(xhrIndex);
        });
        XHRInterceptor.setResponseCallback(function (status, timeout, response, responseURL, responseType, xhr) {
          var xhrIndex = _this2._getRequestIndexByXHRID(xhr._index);

          if (xhrIndex === -1) {
            return;
          }

          var networkInfo = _this2._requests[xhrIndex];
          networkInfo.status = status;
          networkInfo.timeout = timeout;
          networkInfo.response = response;
          networkInfo.responseURL = responseURL;
          networkInfo.responseType = responseType;

          _this2._genDetailViewItem(xhrIndex);
        });
        XHRInterceptor.enableInterception();
      }
    }, {
      key: "_enableWebSocketInterception",
      value: function _enableWebSocketInterception() {
        var _this3 = this;

        if (WebSocketInterceptor.isInterceptorEnabled()) {
          return;
        }

        WebSocketInterceptor.setConnectCallback(function (url, protocols, options, socketId) {
          var socketIndex = _this3._requests.length;
          _this3._socketIdMap[socketId] = socketIndex;
          var _webSocket = {
            'type': 'WebSocket',
            'url': url,
            'protocols': protocols
          };

          _this3._requests.push(_webSocket);

          _this3._detailViewItems.push([]);

          _this3._genDetailViewItem(socketIndex);

          _this3.setState({
            dataSource: _this3._listViewDataSource.cloneWithRows(_this3._requests)
          }, _this3._scrollToBottom());
        });
        WebSocketInterceptor.setCloseCallback(function (statusCode, closeReason, socketId) {
          var socketIndex = _this3._socketIdMap[socketId];

          if (socketIndex === undefined) {
            return;
          }

          if (statusCode !== null && closeReason !== null) {
            _this3._requests[socketIndex].status = statusCode;
            _this3._requests[socketIndex].closeReason = closeReason;
          }

          _this3._genDetailViewItem(socketIndex);
        });
        WebSocketInterceptor.setSendCallback(function (data, socketId) {
          var socketIndex = _this3._socketIdMap[socketId];

          if (socketIndex === undefined) {
            return;
          }

          if (!_this3._requests[socketIndex].messages) {
            _this3._requests[socketIndex].messages = '';
          }

          _this3._requests[socketIndex].messages += 'Sent: ' + JSON.stringify(data) + '\n';

          _this3._genDetailViewItem(socketIndex);
        });
        WebSocketInterceptor.setOnMessageCallback(function (socketId, message) {
          var socketIndex = _this3._socketIdMap[socketId];

          if (socketIndex === undefined) {
            return;
          }

          if (!_this3._requests[socketIndex].messages) {
            _this3._requests[socketIndex].messages = '';
          }

          _this3._requests[socketIndex].messages += 'Received: ' + JSON.stringify(message) + '\n';

          _this3._genDetailViewItem(socketIndex);
        });
        WebSocketInterceptor.setOnCloseCallback(function (socketId, message) {
          var socketIndex = _this3._socketIdMap[socketId];

          if (socketIndex === undefined) {
            return;
          }

          _this3._requests[socketIndex].serverClose = message;

          _this3._genDetailViewItem(socketIndex);
        });
        WebSocketInterceptor.setOnErrorCallback(function (socketId, message) {
          var socketIndex = _this3._socketIdMap[socketId];

          if (socketIndex === undefined) {
            return;
          }

          _this3._requests[socketIndex].serverError = message;

          _this3._genDetailViewItem(socketIndex);
        });
        WebSocketInterceptor.enableInterception();
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        this._enableXHRInterception();

        this._enableWebSocketInterception();
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        XHRInterceptor.disableInterception();
        WebSocketInterceptor.disableInterception();
      }
    }, {
      key: "_renderRow",
      value: function _renderRow(rowData, sectionID, rowID, highlightRow) {
        var _this4 = this;

        var urlCellViewStyle = styles.urlEvenCellView;
        var methodCellViewStyle = styles.methodEvenCellView;

        if (rowID % 2 === 1) {
          urlCellViewStyle = styles.urlOddCellView;
          methodCellViewStyle = styles.methodOddCellView;
        }

        return React.createElement(
          TouchableHighlight,
          {
            onPress: function onPress() {
              _this4._pressRow(rowID);

              highlightRow(sectionID, rowID);
            },
            __source: {
              fileName: _jsxFileName,
              lineNumber: 300
            }
          },
          React.createElement(
            View,
            {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 304
              }
            },
            React.createElement(
              View,
              {
                style: styles.tableRow,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 305
                }
              },
              React.createElement(
                View,
                {
                  style: urlCellViewStyle,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 306
                  }
                },
                React.createElement(
                  Text,
                  {
                    style: styles.cellText,
                    numberOfLines: 1,
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 307
                    }
                  },
                  rowData.url
                )
              ),
              React.createElement(
                View,
                {
                  style: methodCellViewStyle,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 311
                  }
                },
                React.createElement(
                  Text,
                  {
                    style: styles.cellText,
                    numberOfLines: 1,
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 312
                    }
                  },
                  this._getTypeShortName(rowData.type)
                )
              )
            )
          )
        );
      }
    }, {
      key: "_renderSeperator",
      value: function _renderSeperator(sectionID, rowID, adjacentRowHighlighted) {
        return React.createElement(View, {
          key: sectionID + "-" + rowID,
          style: {
            height: adjacentRowHighlighted ? SEPARATOR_THICKNESS : 0,
            backgroundColor: adjacentRowHighlighted ? '#3B5998' : '#CCCCCC'
          },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 327
          }
        });
      }
    }, {
      key: "_scrollToBottom",
      value: function _scrollToBottom() {
        if (this._listView) {
          var scrollResponder = this._listView.getScrollResponder();

          if (scrollResponder) {
            var scrollY = Math.max(this._requests.length * LISTVIEW_CELL_HEIGHT + (this._listViewHighlighted ? 2 * SEPARATOR_THICKNESS : 0) - this._listViewHeight, 0);
            scrollResponder.scrollResponderScrollTo({
              x: 0,
              y: scrollY,
              animated: true
            });
          }
        }
      }
    }, {
      key: "_captureRequestListView",
      value: function _captureRequestListView(listRef) {
        this._listView = listRef;
      }
    }, {
      key: "_listViewOnLayout",
      value: function _listViewOnLayout(event) {
        var height = event.nativeEvent.layout.height;
        this._listViewHeight = height;
      }
    }, {
      key: "_pressRow",
      value: function _pressRow(rowID) {
        this._listViewHighlighted = true;
        this.setState({
          detailRowID: rowID
        }, this._scrollToTop());
      }
    }, {
      key: "_scrollToTop",
      value: function _scrollToTop() {
        if (this._scrollView) {
          this._scrollView.scrollTo({
            y: 0,
            animated: false
          });
        }
      }
    }, {
      key: "_captureDetailScrollView",
      value: function _captureDetailScrollView(scrollRef) {
        this._scrollView = scrollRef;
      }
    }, {
      key: "_closeButtonClicked",
      value: function _closeButtonClicked() {
        this.setState({
          detailRowID: null
        });
      }
    }, {
      key: "_getStringByValue",
      value: function _getStringByValue(value) {
        if (value === undefined) {
          return 'undefined';
        }

        if (typeof value === 'object') {
          return JSON.stringify(value);
        }

        if (typeof value === 'string' && value.length > 500) {
          return String(value).substr(0, 500).concat('\n***TRUNCATED TO 500 CHARACTERS***');
        }

        return value;
      }
    }, {
      key: "_getRequestIndexByXHRID",
      value: function _getRequestIndexByXHRID(index) {
        if (index === undefined) {
          return -1;
        }

        var xhrIndex = this._xhrIdMap[index];

        if (xhrIndex === undefined) {
          return -1;
        } else {
          return xhrIndex;
        }
      }
    }, {
      key: "_getTypeShortName",
      value: function _getTypeShortName(type) {
        if (type === 'XMLHttpRequest') {
          return 'XHR';
        } else if (type === 'WebSocket') {
          return 'WS';
        }

        return '';
      }
    }, {
      key: "_genDetailViewItem",
      value: function _genDetailViewItem(index) {
        this._detailViewItems[index] = [];
        var detailViewItem = this._detailViewItems[index];
        var requestItem = this._requests[index];

        for (var _key in requestItem) {
          detailViewItem.push(React.createElement(
            View,
            {
              style: styles.detailViewRow,
              key: _key,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 442
              }
            },
            React.createElement(
              Text,
              {
                style: [styles.detailViewText, styles.detailKeyCellView],
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 443
                }
              },
              _key
            ),
            React.createElement(
              Text,
              {
                style: [styles.detailViewText, styles.detailValueCellView],
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 446
                }
              },
              this._getStringByValue(requestItem[_key])
            )
          ));
        }

        if (this.state.detailRowID != null && Number(this.state.detailRowID) === index) {
          this.setState({
            newDetailInfo: true
          });
        }
      }
    }, {
      key: "render",
      value: function render() {
        return React.createElement(
          View,
          {
            style: styles.container,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 461
            }
          },
          this.state.detailRowID != null && React.createElement(
            TouchableHighlight,
            {
              style: styles.closeButton,
              onPress: this._closeButtonClicked,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 463
              }
            },
            React.createElement(
              View,
              {
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 466
                }
              },
              React.createElement(
                Text,
                {
                  style: styles.clostButtonText,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 467
                  }
                },
                "v"
              )
            )
          ),
          this.state.detailRowID != null && React.createElement(
            ScrollView,
            {
              style: styles.detailScrollView,
              ref: this._captureDetailScrollView,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 471
              }
            },
            this._detailViewItems[this.state.detailRowID]
          ),
          React.createElement(
            View,
            {
              style: styles.listViewTitle,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 476
              }
            },
            this._requests.length > 0 && React.createElement(
              View,
              {
                style: styles.tableRow,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 478
                }
              },
              React.createElement(
                View,
                {
                  style: styles.urlTitleCellView,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 479
                  }
                },
                React.createElement(
                  Text,
                  {
                    style: styles.cellText,
                    numberOfLines: 1,
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 480
                    }
                  },
                  "URL"
                )
              ),
              React.createElement(
                View,
                {
                  style: styles.methodTitleCellView,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 482
                  }
                },
                React.createElement(
                  Text,
                  {
                    style: styles.cellText,
                    numberOfLines: 1,
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 483
                    }
                  },
                  "Type"
                )
              )
            )
          ),
          React.createElement(ListView, {
            style: styles.listView,
            ref: this._captureRequestListView,
            dataSource: this.state.dataSource,
            renderRow: this._renderRow,
            enableEmptySections: true,
            renderSeparator: this._renderSeperator,
            onLayout: this._listViewOnLayout,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 487
            }
          })
        );
      }
    }]);
    return NetworkOverlay;
  }(React.Component);

  var styles = StyleSheet.create({
    container: {
      paddingTop: 10,
      paddingBottom: 10,
      paddingLeft: 5,
      paddingRight: 5
    },
    listViewTitle: {
      height: 20
    },
    listView: {
      flex: 1,
      height: 60
    },
    tableRow: {
      flexDirection: 'row',
      flex: 1
    },
    cellText: {
      color: 'white',
      fontSize: 12
    },
    methodTitleCellView: {
      height: 18,
      borderColor: '#DCD7CD',
      borderTopWidth: 1,
      borderBottomWidth: 1,
      borderRightWidth: 1,
      alignItems: 'center',
      justifyContent: 'center',
      backgroundColor: '#444',
      flex: 1
    },
    urlTitleCellView: {
      height: 18,
      borderColor: '#DCD7CD',
      borderTopWidth: 1,
      borderBottomWidth: 1,
      borderLeftWidth: 1,
      borderRightWidth: 1,
      justifyContent: 'center',
      backgroundColor: '#444',
      flex: 5,
      paddingLeft: 3
    },
    methodOddCellView: {
      height: 15,
      borderColor: '#DCD7CD',
      borderRightWidth: 1,
      alignItems: 'center',
      justifyContent: 'center',
      backgroundColor: '#000',
      flex: 1
    },
    urlOddCellView: {
      height: 15,
      borderColor: '#DCD7CD',
      borderLeftWidth: 1,
      borderRightWidth: 1,
      justifyContent: 'center',
      backgroundColor: '#000',
      flex: 5,
      paddingLeft: 3
    },
    methodEvenCellView: {
      height: 15,
      borderColor: '#DCD7CD',
      borderRightWidth: 1,
      alignItems: 'center',
      justifyContent: 'center',
      backgroundColor: '#888',
      flex: 1
    },
    urlEvenCellView: {
      height: 15,
      borderColor: '#DCD7CD',
      borderLeftWidth: 1,
      borderRightWidth: 1,
      justifyContent: 'center',
      backgroundColor: '#888',
      flex: 5,
      paddingLeft: 3
    },
    detailScrollView: {
      flex: 1,
      height: 180,
      marginTop: 5,
      marginBottom: 5
    },
    detailKeyCellView: {
      flex: 1.3
    },
    detailValueCellView: {
      flex: 2
    },
    detailViewRow: {
      flexDirection: 'row',
      paddingHorizontal: 3
    },
    detailViewText: {
      color: 'white',
      fontSize: 11
    },
    clostButtonText: {
      color: 'white',
      fontSize: 10
    },
    closeButton: {
      marginTop: 5,
      backgroundColor: '#888',
      justifyContent: 'center',
      alignItems: 'center'
    }
  });
  module.exports = NetworkOverlay;
},277,[246,131,226,132,186,274,153,278,279],"NetworkOverlay");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var RCTWebSocketModule = _require(_dependencyMap[0], 'NativeModules').WebSocketModule;

  var NativeEventEmitter = _require(_dependencyMap[1], 'NativeEventEmitter');

  var base64 = _require(_dependencyMap[2], 'base64-js');

  var originalRCTWebSocketConnect = RCTWebSocketModule.connect;
  var originalRCTWebSocketSend = RCTWebSocketModule.send;
  var originalRCTWebSocketSendBinary = RCTWebSocketModule.sendBinary;
  var originalRCTWebSocketClose = RCTWebSocketModule.close;
  var eventEmitter = void 0;
  var subscriptions = void 0;
  var closeCallback = void 0;
  var sendCallback = void 0;
  var connectCallback = void 0;
  var onOpenCallback = void 0;
  var onMessageCallback = void 0;
  var onErrorCallback = void 0;
  var onCloseCallback = void 0;
  var _isInterceptorEnabled = false;
  var WebSocketInterceptor = {
    setCloseCallback: function setCloseCallback(callback) {
      closeCallback = callback;
    },
    setSendCallback: function setSendCallback(callback) {
      sendCallback = callback;
    },
    setConnectCallback: function setConnectCallback(callback) {
      connectCallback = callback;
    },
    setOnOpenCallback: function setOnOpenCallback(callback) {
      onOpenCallback = callback;
    },
    setOnMessageCallback: function setOnMessageCallback(callback) {
      onMessageCallback = callback;
    },
    setOnErrorCallback: function setOnErrorCallback(callback) {
      onErrorCallback = callback;
    },
    setOnCloseCallback: function setOnCloseCallback(callback) {
      onCloseCallback = callback;
    },
    isInterceptorEnabled: function isInterceptorEnabled() {
      return _isInterceptorEnabled;
    },
    _unregisterEvents: function _unregisterEvents() {
      subscriptions.forEach(function (e) {
        return e.remove();
      });
      subscriptions = [];
    },
    _registerEvents: function _registerEvents() {
      subscriptions = [eventEmitter.addListener('websocketMessage', function (ev) {
        if (onMessageCallback) {
          onMessageCallback(ev.id, ev.type === 'binary' ? WebSocketInterceptor._arrayBufferToString(ev.data) : ev.data);
        }
      }), eventEmitter.addListener('websocketOpen', function (ev) {
        if (onOpenCallback) {
          onOpenCallback(ev.id);
        }
      }), eventEmitter.addListener('websocketClosed', function (ev) {
        if (onCloseCallback) {
          onCloseCallback(ev.id, {
            code: ev.code,
            reason: ev.reason
          });
        }
      }), eventEmitter.addListener('websocketFailed', function (ev) {
        if (onErrorCallback) {
          onErrorCallback(ev.id, {
            message: ev.message
          });
        }
      })];
    },
    enableInterception: function enableInterception() {
      if (_isInterceptorEnabled) {
        return;
      }

      eventEmitter = new NativeEventEmitter(RCTWebSocketModule);

      WebSocketInterceptor._registerEvents();

      RCTWebSocketModule.connect = function (url, protocols, options, socketId) {
        if (connectCallback) {
          connectCallback(url, protocols, options, socketId);
        }

        originalRCTWebSocketConnect.apply(this, arguments);
      };

      RCTWebSocketModule.send = function (data, socketId) {
        if (sendCallback) {
          sendCallback(data, socketId);
        }

        originalRCTWebSocketSend.apply(this, arguments);
      };

      RCTWebSocketModule.sendBinary = function (data, socketId) {
        if (sendCallback) {
          sendCallback(WebSocketInterceptor._arrayBufferToString(data), socketId);
        }

        originalRCTWebSocketSendBinary.apply(this, arguments);
      };

      RCTWebSocketModule.close = function () {
        if (closeCallback) {
          if (arguments.length === 3) {
            closeCallback(arguments[0], arguments[1], arguments[2]);
          } else {
            closeCallback(null, null, arguments[0]);
          }
        }

        originalRCTWebSocketClose.apply(this, arguments);
      };

      _isInterceptorEnabled = true;
    },
    _arrayBufferToString: function _arrayBufferToString(data) {
      var value = base64.toByteArray(data).buffer;

      if (value === undefined || value === null) {
        return '(no value)';
      }

      if (typeof ArrayBuffer !== 'undefined' && typeof Uint8Array !== 'undefined' && value instanceof ArrayBuffer) {
        return "ArrayBuffer {" + String(Array.from(new Uint8Array(value))) + "}";
      }

      return value;
    },
    disableInterception: function disableInterception() {
      if (!_isInterceptorEnabled) {
        return;
      }

      _isInterceptorEnabled = false;
      RCTWebSocketModule.send = originalRCTWebSocketSend;
      RCTWebSocketModule.sendBinary = originalRCTWebSocketSendBinary;
      RCTWebSocketModule.close = originalRCTWebSocketClose;
      RCTWebSocketModule.connect = originalRCTWebSocketConnect;
      connectCallback = null;
      closeCallback = null;
      sendCallback = null;
      onOpenCallback = null;
      onMessageCallback = null;
      onCloseCallback = null;
      onErrorCallback = null;

      WebSocketInterceptor._unregisterEvents();
    }
  };
  module.exports = WebSocketInterceptor;
},278,[15,69,73],"WebSocketInterceptor");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var XMLHttpRequest = _require(_dependencyMap[0], 'XMLHttpRequest');

  var originalXHROpen = XMLHttpRequest.prototype.open;
  var originalXHRSend = XMLHttpRequest.prototype.send;
  var originalXHRSetRequestHeader = XMLHttpRequest.prototype.setRequestHeader;
  var openCallback;
  var sendCallback;
  var requestHeaderCallback;
  var headerReceivedCallback;
  var responseCallback;
  var _isInterceptorEnabled = false;
  var XHRInterceptor = {
    setOpenCallback: function setOpenCallback(callback) {
      openCallback = callback;
    },
    setSendCallback: function setSendCallback(callback) {
      sendCallback = callback;
    },
    setHeaderReceivedCallback: function setHeaderReceivedCallback(callback) {
      headerReceivedCallback = callback;
    },
    setResponseCallback: function setResponseCallback(callback) {
      responseCallback = callback;
    },
    setRequestHeaderCallback: function setRequestHeaderCallback(callback) {
      requestHeaderCallback = callback;
    },
    isInterceptorEnabled: function isInterceptorEnabled() {
      return _isInterceptorEnabled;
    },
    enableInterception: function enableInterception() {
      if (_isInterceptorEnabled) {
        return;
      }

      XMLHttpRequest.prototype.open = function (method, url) {
        if (openCallback) {
          openCallback(method, url, this);
        }

        originalXHROpen.apply(this, arguments);
      };

      XMLHttpRequest.prototype.setRequestHeader = function (header, value) {
        if (requestHeaderCallback) {
          requestHeaderCallback(header, value, this);
        }

        originalXHRSetRequestHeader.apply(this, arguments);
      };

      XMLHttpRequest.prototype.send = function (data) {
        var _this = this;

        if (sendCallback) {
          sendCallback(data, this);
        }

        if (this.addEventListener) {
          this.addEventListener('readystatechange', function () {
            if (!_isInterceptorEnabled) {
              return;
            }

            if (_this.readyState === _this.HEADERS_RECEIVED) {
              var contentTypeString = _this.getResponseHeader('Content-Type');

              var contentLengthString = _this.getResponseHeader('Content-Length');

              var responseContentType = void 0,
                  responseSize = void 0;

              if (contentTypeString) {
                responseContentType = contentTypeString.split(';')[0];
              }

              if (contentLengthString) {
                responseSize = parseInt(contentLengthString, 10);
              }

              if (headerReceivedCallback) {
                headerReceivedCallback(responseContentType, responseSize, _this.getAllResponseHeaders(), _this);
              }
            }

            if (_this.readyState === _this.DONE) {
              if (responseCallback) {
                responseCallback(_this.status, _this.timeout, _this.response, _this.responseURL, _this.responseType, _this);
              }
            }
          }, false);
        }

        originalXHRSend.apply(this, arguments);
      };

      _isInterceptorEnabled = true;
    },
    disableInterception: function disableInterception() {
      if (!_isInterceptorEnabled) {
        return;
      }

      _isInterceptorEnabled = false;
      XMLHttpRequest.prototype.send = originalXHRSend;
      XMLHttpRequest.prototype.open = originalXHROpen;
      XMLHttpRequest.prototype.setRequestHeader = originalXHRSetRequestHeader;
      responseCallback = null;
      openCallback = null;
      sendCallback = null;
      headerReceivedCallback = null;
      requestHeaderCallback = null;
    }
  };
  module.exports = XHRInterceptor;
},279,[58],"XHRInterceptor");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-native/Libraries/Inspector/PerformanceOverlay.js";

  var PerformanceLogger = _require(_dependencyMap[0], 'PerformanceLogger');

  var React = _require(_dependencyMap[1], 'React');

  var StyleSheet = _require(_dependencyMap[2], 'StyleSheet');

  var Text = _require(_dependencyMap[3], 'Text');

  var View = _require(_dependencyMap[4], 'View');

  var PerformanceOverlay = function (_React$Component) {
    babelHelpers.inherits(PerformanceOverlay, _React$Component);

    function PerformanceOverlay() {
      babelHelpers.classCallCheck(this, PerformanceOverlay);
      return babelHelpers.possibleConstructorReturn(this, (PerformanceOverlay.__proto__ || Object.getPrototypeOf(PerformanceOverlay)).apply(this, arguments));
    }

    babelHelpers.createClass(PerformanceOverlay, [{
      key: "render",
      value: function render() {
        var perfLogs = PerformanceLogger.getTimespans();
        var items = [];

        for (var key in perfLogs) {
          if (perfLogs[key].totalTime) {
            var unit = key === 'BundleSize' ? 'b' : 'ms';
            items.push(React.createElement(
              View,
              {
                style: styles.row,
                key: key,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 29
                }
              },
              React.createElement(
                Text,
                {
                  style: [styles.text, styles.label],
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 30
                  }
                },
                key
              ),
              React.createElement(
                Text,
                {
                  style: [styles.text, styles.totalTime],
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 31
                  }
                },
                perfLogs[key].totalTime + unit
              )
            ));
          }
        }

        return React.createElement(
          View,
          {
            style: styles.container,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 40
            }
          },
          items
        );
      }
    }]);
    return PerformanceOverlay;
  }(React.Component);

  var styles = StyleSheet.create({
    container: {
      height: 100,
      paddingTop: 10
    },
    label: {
      flex: 1
    },
    row: {
      flexDirection: 'row',
      paddingHorizontal: 10
    },
    text: {
      color: 'white',
      fontSize: 12
    },
    totalTime: {
      paddingRight: 100
    }
  });
  module.exports = PerformanceOverlay;
},280,[92,131,132,186,153],"PerformanceOverlay");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-native/Libraries/ReactNative/YellowBox.js";

  var EventEmitter = _require(_dependencyMap[0], 'EventEmitter');

  var Platform = _require(_dependencyMap[1], 'Platform');

  var React = _require(_dependencyMap[2], 'React');

  var SafeAreaView = _require(_dependencyMap[3], 'SafeAreaView');

  var StyleSheet = _require(_dependencyMap[4], 'StyleSheet');

  var RCTLog = _require(_dependencyMap[5], 'RCTLog');

  var infoLog = _require(_dependencyMap[6], 'infoLog');

  var openFileInEditor = _require(_dependencyMap[7], 'openFileInEditor');

  var parseErrorStack = _require(_dependencyMap[8], 'parseErrorStack');

  var stringifySafe = _require(_dependencyMap[9], 'stringifySafe');

  var symbolicateStackTrace = _require(_dependencyMap[10], 'symbolicateStackTrace');

  var _warningEmitter = new EventEmitter();

  var _warningMap = new Map();

  var IGNORED_WARNINGS = [];

  if (__DEV__) {
    var _console = console,
        error = _console.error,
        warn = _console.warn;

    console.error = function () {
      error.apply(console, arguments);

      if (typeof arguments[0] === 'string' && arguments[0].startsWith('Warning: ')) {
        updateWarningMap.apply(null, arguments);
      }
    };

    console.warn = function () {
      warn.apply(console, arguments);
      updateWarningMap.apply(null, arguments);
    };

    if (Platform.isTesting) {
      console.disableYellowBox = true;
    }

    RCTLog.setWarningHandler(function () {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      updateWarningMap.apply(null, args);
    });
  }

  function sprintf(format) {
    for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      args[_key2 - 1] = arguments[_key2];
    }

    var index = 0;
    return format.replace(/%s/g, function (match) {
      return args[index++];
    });
  }

  function updateWarningMap() {
    if (console.disableYellowBox) {
      return;
    }

    var warning = void 0;

    for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }

    if (typeof args[0] === 'string') {
      var format = args[0],
          formatArgs = args.slice(1);
      var argCount = (format.match(/%s/g) || []).length;
      warning = [sprintf.apply(undefined, [format].concat(babelHelpers.toConsumableArray(formatArgs.slice(0, argCount).map(stringifySafe))))].concat(babelHelpers.toConsumableArray(formatArgs.slice(argCount).map(stringifySafe))).join(' ');
    } else {
      warning = args.map(stringifySafe).join(' ');
    }

    if (warning.startsWith('(ADVICE)')) {
      return;
    }

    var warningInfo = _warningMap.get(warning);

    if (warningInfo) {
      warningInfo.count += 1;
    } else {
      var _error = new Error();

      _error.framesToPop = 2;

      _warningMap.set(warning, {
        count: 1,
        stacktrace: parseErrorStack(_error),
        symbolicated: false
      });
    }

    _warningEmitter.emit('warning', _warningMap);
  }

  function ensureSymbolicatedWarning(warning) {
    var prevWarningInfo = _warningMap.get(warning);

    if (!prevWarningInfo || prevWarningInfo.symbolicated) {
      return;
    }

    prevWarningInfo.symbolicated = true;
    symbolicateStackTrace(prevWarningInfo.stacktrace).then(function (stack) {
      var nextWarningInfo = _warningMap.get(warning);

      if (nextWarningInfo) {
        nextWarningInfo.stacktrace = stack;

        _warningEmitter.emit('warning', _warningMap);
      }
    }, function (error) {
      var nextWarningInfo = _warningMap.get(warning);

      if (nextWarningInfo) {
        infoLog('Failed to symbolicate warning, "%s":', warning, error);

        _warningEmitter.emit('warning', _warningMap);
      }
    });
  }

  function isWarningIgnored(warning) {
    var isIgnored = IGNORED_WARNINGS.some(function (ignoredWarning) {
      return warning.startsWith(ignoredWarning);
    });

    if (isIgnored) {
      return true;
    }

    return Array.isArray(console.ignoredYellowBox) && console.ignoredYellowBox.some(function (ignorePrefix) {
      return warning.startsWith(String(ignorePrefix));
    });
  }

  var WarningRow = function WarningRow(_ref) {
    var count = _ref.count,
        warning = _ref.warning,
        onPress = _ref.onPress;

    var Text = _require(_dependencyMap[11], 'Text');

    var TouchableHighlight = _require(_dependencyMap[12], 'TouchableHighlight');

    var View = _require(_dependencyMap[13], 'View');

    var countText = count > 1 ? React.createElement(
      Text,
      {
        style: styles.listRowCount,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 197
        }
      },
      '(' + count + ') '
    ) : null;
    return React.createElement(
      View,
      {
        style: styles.listRow,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 201
        }
      },
      React.createElement(
        TouchableHighlight,
        {
          activeOpacity: 0.5,
          onPress: onPress,
          style: styles.listRowContent,
          underlayColor: "transparent",
          __source: {
            fileName: _jsxFileName,
            lineNumber: 202
          }
        },
        React.createElement(
          Text,
          {
            style: styles.listRowText,
            numberOfLines: 2,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 207
            }
          },
          countText,
          warning
        )
      )
    );
  };

  var StackRow = function StackRow(_ref2) {
    var frame = _ref2.frame;

    var Text = _require(_dependencyMap[11], 'Text');

    var TouchableHighlight = _require(_dependencyMap[12], 'TouchableHighlight');

    var file = frame.file,
        lineNumber = frame.lineNumber;
    var fileName = void 0;

    if (file) {
      var fileParts = file.split('/');
      fileName = fileParts[fileParts.length - 1];
    } else {
      fileName = '<unknown file>';
    }

    return React.createElement(
      TouchableHighlight,
      {
        activeOpacity: 0.5,
        style: styles.openInEditorButton,
        underlayColor: "transparent",
        onPress: openFileInEditor.bind(null, file, lineNumber),
        __source: {
          fileName: _jsxFileName,
          lineNumber: 230
        }
      },
      React.createElement(
        Text,
        {
          style: styles.inspectorCountText,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 235
          }
        },
        fileName,
        ":",
        lineNumber
      )
    );
  };

  var WarningInspector = function WarningInspector(_ref3) {
    var warningInfo = _ref3.warningInfo,
        warning = _ref3.warning,
        stacktraceVisible = _ref3.stacktraceVisible,
        onDismiss = _ref3.onDismiss,
        onDismissAll = _ref3.onDismissAll,
        onMinimize = _ref3.onMinimize,
        toggleStacktrace = _ref3.toggleStacktrace;

    var ScrollView = _require(_dependencyMap[14], 'ScrollView');

    var Text = _require(_dependencyMap[11], 'Text');

    var TouchableHighlight = _require(_dependencyMap[12], 'TouchableHighlight');

    var View = _require(_dependencyMap[13], 'View');

    var _ref4 = warningInfo || {},
        count = _ref4.count,
        stacktrace = _ref4.stacktrace;

    var countSentence = 'Warning encountered ' + count + ' time' + (count - 1 ? 's' : '') + '.';
    var stacktraceList = void 0;

    if (stacktraceVisible && stacktrace) {
      stacktraceList = React.createElement(
        View,
        {
          style: styles.stacktraceList,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 263
          }
        },
        stacktrace.map(function (frame, ii) {
          return React.createElement(StackRow, {
            frame: frame,
            key: ii,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 264
            }
          });
        })
      );
    }

    return React.createElement(
      View,
      {
        style: styles.inspector,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 270
        }
      },
      React.createElement(
        SafeAreaView,
        {
          style: styles.safeArea,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 271
          }
        },
        React.createElement(
          View,
          {
            style: styles.inspectorCount,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 272
            }
          },
          React.createElement(
            Text,
            {
              style: styles.inspectorCountText,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 273
              }
            },
            countSentence
          ),
          React.createElement(
            TouchableHighlight,
            {
              onPress: toggleStacktrace,
              underlayColor: "transparent",
              __source: {
                fileName: _jsxFileName,
                lineNumber: 274
              }
            },
            React.createElement(
              Text,
              {
                style: styles.inspectorButtonText,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 277
                }
              },
              stacktraceVisible ? "\u25BC" : "\u25B6",
              " Stacktrace"
            )
          )
        ),
        React.createElement(
          ScrollView,
          {
            style: styles.inspectorWarning,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 282
            }
          },
          stacktraceList,
          React.createElement(
            Text,
            {
              style: styles.inspectorWarningText,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 284
              }
            },
            warning
          )
        ),
        React.createElement(
          View,
          {
            style: styles.inspectorButtons,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 286
            }
          },
          React.createElement(
            TouchableHighlight,
            {
              activeOpacity: 0.5,
              onPress: onMinimize,
              style: styles.inspectorButton,
              underlayColor: "transparent",
              __source: {
                fileName: _jsxFileName,
                lineNumber: 287
              }
            },
            React.createElement(
              Text,
              {
                style: styles.inspectorButtonText,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 292
                }
              },
              "Minimize"
            )
          ),
          React.createElement(
            TouchableHighlight,
            {
              activeOpacity: 0.5,
              onPress: onDismiss,
              style: styles.inspectorButton,
              underlayColor: "transparent",
              __source: {
                fileName: _jsxFileName,
                lineNumber: 294
              }
            },
            React.createElement(
              Text,
              {
                style: styles.inspectorButtonText,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 299
                }
              },
              "Dismiss"
            )
          ),
          React.createElement(
            TouchableHighlight,
            {
              activeOpacity: 0.5,
              onPress: onDismissAll,
              style: styles.inspectorButton,
              underlayColor: "transparent",
              __source: {
                fileName: _jsxFileName,
                lineNumber: 301
              }
            },
            React.createElement(
              Text,
              {
                style: styles.inspectorButtonText,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 306
                }
              },
              "Dismiss All"
            )
          )
        )
      )
    );
  };

  var YellowBox = function (_React$Component) {
    babelHelpers.inherits(YellowBox, _React$Component);

    function YellowBox(props, context) {
      babelHelpers.classCallCheck(this, YellowBox);

      var _this = babelHelpers.possibleConstructorReturn(this, (YellowBox.__proto__ || Object.getPrototypeOf(YellowBox)).call(this, props, context));

      _this.state = {
        inspecting: null,
        stacktraceVisible: false,
        warningMap: _warningMap
      };

      _this.dismissWarning = function (warning) {
        var _this$state = _this.state,
            inspecting = _this$state.inspecting,
            warningMap = _this$state.warningMap;

        if (warning) {
          warningMap.delete(warning);
        } else {
          warningMap.clear();
        }

        _this.setState({
          inspecting: warning && inspecting !== warning ? inspecting : null,
          warningMap: warningMap
        });
      };

      return _this;
    }

    babelHelpers.createClass(YellowBox, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;

        var scheduled = null;
        this._listener = _warningEmitter.addListener('warning', function (warningMap) {
          scheduled = scheduled || setImmediate(function () {
            scheduled = null;

            _this2.setState({
              warningMap: warningMap
            });
          });
        });
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate() {
        var inspecting = this.state.inspecting;

        if (inspecting != null) {
          ensureSymbolicatedWarning(inspecting);
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this._listener) {
          this._listener.remove();
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;

        if (console.disableYellowBox || this.state.warningMap.size === 0) {
          return null;
        }

        var ScrollView = _require(_dependencyMap[14], 'ScrollView');

        var View = _require(_dependencyMap[13], 'View');

        var _state = this.state,
            inspecting = _state.inspecting,
            stacktraceVisible = _state.stacktraceVisible;
        var inspector = inspecting !== null ? React.createElement(WarningInspector, {
          warningInfo: this.state.warningMap.get(inspecting),
          warning: inspecting,
          stacktraceVisible: stacktraceVisible,
          onDismiss: function onDismiss() {
            return _this3.dismissWarning(inspecting);
          },
          onDismissAll: function onDismissAll() {
            return _this3.dismissWarning(null);
          },
          onMinimize: function onMinimize() {
            return _this3.setState({
              inspecting: null
            });
          },
          toggleStacktrace: function toggleStacktrace() {
            return _this3.setState({
              stacktraceVisible: !stacktraceVisible
            });
          },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 393
          }
        }) : null;
        var rows = [];
        this.state.warningMap.forEach(function (warningInfo, warning) {
          if (!isWarningIgnored(warning)) {
            rows.push(React.createElement(WarningRow, {
              key: warning,
              count: warningInfo.count,
              warning: warning,
              onPress: function onPress() {
                return _this3.setState({
                  inspecting: warning
                });
              },
              onDismiss: function onDismiss() {
                return _this3.dismissWarning(warning);
              },
              __source: {
                fileName: _jsxFileName,
                lineNumber: 410
              }
            }));
          }
        });
        var listStyle = [styles.list, {
          height: Math.min(rows.length, 4.4) * (rowGutter + rowHeight)
        }];
        return React.createElement(
          View,
          {
            style: inspector ? styles.fullScreen : listStyle,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 427
            }
          },
          React.createElement(
            ScrollView,
            {
              style: listStyle,
              scrollsToTop: false,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 428
              }
            },
            rows
          ),
          inspector
        );
      }
    }], [{
      key: "ignoreWarnings",
      value: function ignoreWarnings(warnings) {
        warnings.forEach(function (warning) {
          if (IGNORED_WARNINGS.indexOf(warning) === -1) {
            IGNORED_WARNINGS.push(warning);
          }
        });
      }
    }]);
    return YellowBox;
  }(React.Component);

  var backgroundColor = function backgroundColor(opacity) {
    return 'rgba(250, 186, 48, ' + opacity + ')';
  };

  var textColor = 'white';
  var rowGutter = 1;
  var rowHeight = 46;
  var elevation = Platform.OS === 'android' ? Number.MAX_SAFE_INTEGER : undefined;
  var styles = StyleSheet.create({
    fullScreen: {
      height: '100%',
      width: '100%',
      elevation: elevation,
      position: 'absolute'
    },
    inspector: {
      backgroundColor: backgroundColor(0.95),
      height: '100%',
      paddingTop: 5,
      elevation: elevation
    },
    inspectorButtons: {
      flexDirection: 'row'
    },
    inspectorButton: {
      flex: 1,
      paddingVertical: 22,
      backgroundColor: backgroundColor(1)
    },
    safeArea: {
      flex: 1
    },
    stacktraceList: {
      paddingBottom: 5
    },
    inspectorButtonText: {
      color: textColor,
      fontSize: 14,
      opacity: 0.8,
      textAlign: 'center'
    },
    openInEditorButton: {
      paddingTop: 5,
      paddingBottom: 5
    },
    inspectorCount: {
      padding: 15,
      paddingBottom: 0,
      flexDirection: 'row',
      justifyContent: 'space-between'
    },
    inspectorCountText: {
      color: textColor,
      fontSize: 14
    },
    inspectorWarning: {
      flex: 1,
      paddingHorizontal: 15
    },
    inspectorWarningText: {
      color: textColor,
      fontSize: 16,
      fontWeight: '600'
    },
    list: {
      backgroundColor: 'transparent',
      position: 'absolute',
      left: 0,
      right: 0,
      bottom: 0,
      elevation: elevation
    },
    listRow: {
      backgroundColor: backgroundColor(0.95),
      height: rowHeight,
      marginTop: rowGutter
    },
    listRowContent: {
      flex: 1
    },
    listRowCount: {
      color: 'rgba(255, 255, 255, 0.5)'
    },
    listRowText: {
      color: textColor,
      position: 'absolute',
      left: 0,
      top: Platform.OS === 'android' ? 5 : 7,
      marginLeft: 15,
      marginRight: 15
    }
  });
  module.exports = YellowBox;
},281,[67,52,131,282,132,90,93,276,32,39,35,186,274,153,226],"YellowBox");
__d(function (global, _require, module, exports, _dependencyMap) {
  var _class,
      _temp,
      _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-native/Libraries/Components/SafeAreaView/SafeAreaView.ios.js";

  var React = _require(_dependencyMap[0], 'React');

  var ViewPropTypes = _require(_dependencyMap[1], 'ViewPropTypes');

  var requireNativeComponent = _require(_dependencyMap[2], 'requireNativeComponent');

  var SafeAreaView = (_temp = _class = function (_React$Component) {
    babelHelpers.inherits(SafeAreaView, _React$Component);

    function SafeAreaView() {
      babelHelpers.classCallCheck(this, SafeAreaView);
      return babelHelpers.possibleConstructorReturn(this, (SafeAreaView.__proto__ || Object.getPrototypeOf(SafeAreaView)).apply(this, arguments));
    }

    babelHelpers.createClass(SafeAreaView, [{
      key: "render",
      value: function render() {
        return React.createElement(RCTSafeAreaView, babelHelpers.extends({}, this.props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 36
          }
        }));
      }
    }]);
    return SafeAreaView;
  }(React.Component), _class.propTypes = babelHelpers.extends({}, ViewPropTypes), _temp);
  var RCTSafeAreaView = requireNativeComponent('RCTSafeAreaView', {
    name: 'RCTSafeAreaView',
    displayName: 'RCTSafeAreaView',
    propTypes: babelHelpers.extends({}, ViewPropTypes)
  });
  module.exports = SafeAreaView;
},282,[131,155,168],"SafeAreaView");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var I18nManager = _require(_dependencyMap[0], 'NativeModules').I18nManager || {
    isRTL: false,
    doLeftAndRightSwapInRTL: true,
    allowRTL: function allowRTL() {},
    forceRTL: function forceRTL() {},
    swapLeftAndRightInRTL: function swapLeftAndRightInRTL() {}
  };
  module.exports = I18nManager;
},283,[15],"I18nManager");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-native/Libraries/Components/Navigation/NavigatorIOS.ios.js";

  var EventEmitter = _require(_dependencyMap[0], 'EventEmitter');

  var Image = _require(_dependencyMap[1], 'Image');

  var RCTNavigatorManager = _require(_dependencyMap[2], 'NativeModules').NavigatorManager;

  var React = _require(_dependencyMap[3], 'React');

  var PropTypes = _require(_dependencyMap[4], 'prop-types');

  var ReactNative = _require(_dependencyMap[5], 'ReactNative');

  var StaticContainer = _require(_dependencyMap[6], 'StaticContainer.react');

  var StyleSheet = _require(_dependencyMap[7], 'StyleSheet');

  var TVEventHandler = _require(_dependencyMap[8], 'TVEventHandler');

  var View = _require(_dependencyMap[9], 'View');

  var ViewPropTypes = _require(_dependencyMap[10], 'ViewPropTypes');

  var createReactClass = _require(_dependencyMap[11], 'create-react-class');

  var invariant = _require(_dependencyMap[12], 'fbjs/lib/invariant');

  var requireNativeComponent = _require(_dependencyMap[13], 'requireNativeComponent');

  var keyMirror = _require(_dependencyMap[14], 'fbjs/lib/keyMirror');

  var TRANSITIONER_REF = 'transitionerRef';
  var __uid = 0;

  function getuid() {
    return __uid++;
  }

  var NavigatorTransitionerIOS = function (_React$Component) {
    babelHelpers.inherits(NavigatorTransitionerIOS, _React$Component);

    function NavigatorTransitionerIOS() {
      babelHelpers.classCallCheck(this, NavigatorTransitionerIOS);
      return babelHelpers.possibleConstructorReturn(this, (NavigatorTransitionerIOS.__proto__ || Object.getPrototypeOf(NavigatorTransitionerIOS)).apply(this, arguments));
    }

    babelHelpers.createClass(NavigatorTransitionerIOS, [{
      key: "requestSchedulingNavigation",
      value: function requestSchedulingNavigation(cb) {
        RCTNavigatorManager.requestSchedulingJavaScriptNavigation(ReactNative.findNodeHandle(this), cb);
      }
    }, {
      key: "render",
      value: function render() {
        return React.createElement(RCTNavigator, babelHelpers.extends({}, this.props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 52
          }
        }));
      }
    }]);
    return NavigatorTransitionerIOS;
  }(React.Component);

  var SystemIconLabels = {
    done: true,
    cancel: true,
    edit: true,
    save: true,
    add: true,
    compose: true,
    reply: true,
    action: true,
    organize: true,
    bookmarks: true,
    search: true,
    refresh: true,
    stop: true,
    camera: true,
    trash: true,
    play: true,
    pause: true,
    rewind: true,
    'fast-forward': true,
    undo: true,
    redo: true,
    'page-curl': true
  };
  var SystemIcons = keyMirror(SystemIconLabels);
  var NavigatorIOS = createReactClass({
    displayName: 'NavigatorIOS',
    propTypes: {
      initialRoute: PropTypes.shape({
        component: PropTypes.func.isRequired,
        title: PropTypes.string.isRequired,
        titleImage: Image.propTypes.source,
        passProps: PropTypes.object,
        backButtonIcon: Image.propTypes.source,
        backButtonTitle: PropTypes.string,
        leftButtonIcon: Image.propTypes.source,
        leftButtonTitle: PropTypes.string,
        leftButtonSystemIcon: PropTypes.oneOf(Object.keys(SystemIcons)),
        onLeftButtonPress: PropTypes.func,
        rightButtonIcon: Image.propTypes.source,
        rightButtonTitle: PropTypes.string,
        rightButtonSystemIcon: PropTypes.oneOf(Object.keys(SystemIcons)),
        onRightButtonPress: PropTypes.func,
        wrapperStyle: ViewPropTypes.style,
        navigationBarHidden: PropTypes.bool,
        shadowHidden: PropTypes.bool,
        tintColor: PropTypes.string,
        barTintColor: PropTypes.string,
        barStyle: PropTypes.oneOf(['default', 'black']),
        titleTextColor: PropTypes.string,
        translucent: PropTypes.bool
      }).isRequired,
      navigationBarHidden: PropTypes.bool,
      shadowHidden: PropTypes.bool,
      itemWrapperStyle: ViewPropTypes.style,
      tintColor: PropTypes.string,
      barTintColor: PropTypes.string,
      barStyle: PropTypes.oneOf(['default', 'black']),
      titleTextColor: PropTypes.string,
      translucent: PropTypes.bool,
      interactivePopGestureEnabled: PropTypes.bool
    },
    navigator: undefined,
    UNSAFE_componentWillMount: function UNSAFE_componentWillMount() {
      this.navigator = {
        push: this.push,
        pop: this.pop,
        popN: this.popN,
        replace: this.replace,
        replaceAtIndex: this.replaceAtIndex,
        replacePrevious: this.replacePrevious,
        replacePreviousAndPop: this.replacePreviousAndPop,
        resetTo: this.resetTo,
        popToRoute: this.popToRoute,
        popToTop: this.popToTop
      };
    },
    componentDidMount: function componentDidMount() {
      this._enableTVEventHandler();
    },
    componentWillUnmount: function componentWillUnmount() {
      this._disableTVEventHandler();
    },
    getDefaultProps: function getDefaultProps() {
      return {
        translucent: true
      };
    },
    getInitialState: function getInitialState() {
      return {
        idStack: [getuid()],
        routeStack: [this.props.initialRoute],
        requestedTopOfStack: 0,
        observedTopOfStack: 0,
        progress: 1,
        fromIndex: 0,
        toIndex: 0,
        makingNavigatorRequest: false,
        updatingAllIndicesAtOrBeyond: 0
      };
    },
    _toFocusOnNavigationComplete: undefined,
    _handleFocusRequest: function _handleFocusRequest(item) {
      if (this.state.makingNavigatorRequest) {
        this._toFocusOnNavigationComplete = item;
      } else {
        this._getFocusEmitter().emit('focus', item);
      }
    },
    _focusEmitter: undefined,
    _getFocusEmitter: function _getFocusEmitter() {
      var focusEmitter = this._focusEmitter;

      if (!focusEmitter) {
        focusEmitter = new EventEmitter();
        this._focusEmitter = focusEmitter;
      }

      return focusEmitter;
    },
    getChildContext: function getChildContext() {
      return {
        onFocusRequested: this._handleFocusRequest,
        focusEmitter: this._getFocusEmitter()
      };
    },
    childContextTypes: {
      onFocusRequested: PropTypes.func,
      focusEmitter: PropTypes.instanceOf(EventEmitter)
    },
    _tryLockNavigator: function _tryLockNavigator(cb) {
      this.refs[TRANSITIONER_REF].requestSchedulingNavigation(function (acquiredLock) {
        return acquiredLock && cb();
      });
    },
    _handleNavigatorStackChanged: function _handleNavigatorStackChanged(e) {
      var newObservedTopOfStack = e.nativeEvent.stackLength - 1;
      invariant(newObservedTopOfStack <= this.state.requestedTopOfStack, 'No navigator item should be pushed without JS knowing about it %s %s', newObservedTopOfStack, this.state.requestedTopOfStack);
      var wasWaitingForConfirmation = this.state.requestedTopOfStack !== this.state.observedTopOfStack;

      if (wasWaitingForConfirmation) {
        invariant(newObservedTopOfStack === this.state.requestedTopOfStack, 'If waiting for observedTopOfStack to reach requestedTopOfStack, ' + 'the only valid observedTopOfStack should be requestedTopOfStack.');
      }

      var nextState = {
        observedTopOfStack: newObservedTopOfStack,
        makingNavigatorRequest: false,
        updatingAllIndicesAtOrBeyond: null,
        progress: 1,
        toIndex: newObservedTopOfStack,
        fromIndex: newObservedTopOfStack
      };
      this.setState(nextState, this._eliminateUnneededChildren);
    },
    _eliminateUnneededChildren: function _eliminateUnneededChildren() {
      var updatingAllIndicesAtOrBeyond = this.state.routeStack.length > this.state.observedTopOfStack + 1 ? this.state.observedTopOfStack + 1 : null;
      this.setState({
        idStack: this.state.idStack.slice(0, this.state.observedTopOfStack + 1),
        routeStack: this.state.routeStack.slice(0, this.state.observedTopOfStack + 1),
        requestedTopOfStack: this.state.observedTopOfStack,
        makingNavigatorRequest: true,
        updatingAllIndicesAtOrBeyond: updatingAllIndicesAtOrBeyond
      });
    },
    push: function push(route) {
      var _this2 = this;

      invariant(!!route, 'Must supply route to push');

      if (this.state.requestedTopOfStack === this.state.observedTopOfStack) {
        this._tryLockNavigator(function () {
          var nextStack = _this2.state.routeStack.concat([route]);

          var nextIDStack = _this2.state.idStack.concat([getuid()]);

          _this2.setState({
            idStack: nextIDStack,
            routeStack: nextStack,
            requestedTopOfStack: nextStack.length - 1,
            makingNavigatorRequest: true,
            updatingAllIndicesAtOrBeyond: nextStack.length - 1
          });
        });
      }
    },
    popN: function popN(n) {
      var _this3 = this;

      if (n === 0) {
        return;
      }

      if (this.state.requestedTopOfStack === this.state.observedTopOfStack) {
        if (this.state.requestedTopOfStack > 0) {
          this._tryLockNavigator(function () {
            var newRequestedTopOfStack = _this3.state.requestedTopOfStack - n;
            invariant(newRequestedTopOfStack >= 0, 'Cannot pop below 0');

            _this3.setState({
              requestedTopOfStack: newRequestedTopOfStack,
              makingNavigatorRequest: true,
              updatingAllIndicesAtOrBeyond: _this3.state.requestedTopOfStack - n
            });
          });
        }
      }
    },
    pop: function pop() {
      this.popN(1);
    },
    replaceAtIndex: function replaceAtIndex(route, index) {
      invariant(!!route, 'Must supply route to replace');

      if (index < 0) {
        index += this.state.routeStack.length;
      }

      if (this.state.routeStack.length <= index) {
        return;
      }

      var nextIDStack = this.state.idStack.slice();
      var nextRouteStack = this.state.routeStack.slice();
      nextIDStack[index] = getuid();
      nextRouteStack[index] = route;
      this.setState({
        idStack: nextIDStack,
        routeStack: nextRouteStack,
        makingNavigatorRequest: false,
        updatingAllIndicesAtOrBeyond: index
      });
    },
    replace: function replace(route) {
      this.replaceAtIndex(route, -1);
    },
    replacePrevious: function replacePrevious(route) {
      this.replaceAtIndex(route, -2);
    },
    popToTop: function popToTop() {
      this.popToRoute(this.state.routeStack[0]);
    },
    popToRoute: function popToRoute(route) {
      var indexOfRoute = this.state.routeStack.indexOf(route);
      invariant(indexOfRoute !== -1, 'Calling pop to route for a route that doesn\'t exist!');
      var numToPop = this.state.routeStack.length - indexOfRoute - 1;
      this.popN(numToPop);
    },
    replacePreviousAndPop: function replacePreviousAndPop(route) {
      var _this4 = this;

      if (this.state.requestedTopOfStack !== this.state.observedTopOfStack) {
        return;
      }

      if (this.state.routeStack.length < 2) {
        return;
      }

      this._tryLockNavigator(function () {
        _this4.replacePrevious(route);

        _this4.setState({
          requestedTopOfStack: _this4.state.requestedTopOfStack - 1,
          makingNavigatorRequest: true
        });
      });
    },
    resetTo: function resetTo(route) {
      invariant(!!route, 'Must supply route to push');

      if (this.state.requestedTopOfStack !== this.state.observedTopOfStack) {
        return;
      }

      this.replaceAtIndex(route, 0);
      this.popToRoute(route);
    },
    _handleNavigationComplete: function _handleNavigationComplete(e) {
      e.stopPropagation();

      if (this._toFocusOnNavigationComplete) {
        this._getFocusEmitter().emit('focus', this._toFocusOnNavigationComplete);

        this._toFocusOnNavigationComplete = null;
      }

      this._handleNavigatorStackChanged(e);
    },
    _routeToStackItem: function _routeToStackItem(routeArg, i) {
      var component = routeArg.component,
          wrapperStyle = routeArg.wrapperStyle,
          passProps = routeArg.passProps,
          route = babelHelpers.objectWithoutProperties(routeArg, ["component", "wrapperStyle", "passProps"]);
      var _props = this.props,
          itemWrapperStyle = _props.itemWrapperStyle,
          props = babelHelpers.objectWithoutProperties(_props, ["itemWrapperStyle"]);
      var shouldUpdateChild = this.state.updatingAllIndicesAtOrBeyond != null && this.state.updatingAllIndicesAtOrBeyond >= i;
      var Component = component;
      return React.createElement(
        StaticContainer,
        {
          key: 'nav' + i,
          shouldUpdate: shouldUpdateChild,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 853
          }
        },
        React.createElement(
          RCTNavigatorItem,
          babelHelpers.extends({}, props, route, {
            style: [styles.stackItem, itemWrapperStyle, wrapperStyle],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 854
            }
          }),
          React.createElement(Component, babelHelpers.extends({
            navigator: this.navigator,
            route: route
          }, passProps, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 862
            }
          }))
        )
      );
    },
    _renderNavigationStackItems: function _renderNavigationStackItems() {
      var shouldRecurseToNavigator = this.state.makingNavigatorRequest || this.state.updatingAllIndicesAtOrBeyond !== null;
      var items = shouldRecurseToNavigator ? this.state.routeStack.map(this._routeToStackItem) : null;
      return React.createElement(
        StaticContainer,
        {
          shouldUpdate: shouldRecurseToNavigator,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 881
          }
        },
        React.createElement(
          NavigatorTransitionerIOS,
          {
            ref: TRANSITIONER_REF,
            style: styles.transitioner,
            vertical: this.props.vertical,
            requestedTopOfStack: this.state.requestedTopOfStack,
            onNavigationComplete: this._handleNavigationComplete,
            interactivePopGestureEnabled: this.props.interactivePopGestureEnabled,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 882
            }
          },
          items
        )
      );
    },
    _tvEventHandler: undefined,
    _enableTVEventHandler: function _enableTVEventHandler() {
      this._tvEventHandler = new TVEventHandler();

      this._tvEventHandler.enable(this, function (cmp, evt) {
        if (evt && evt.eventType === 'menu') {
          cmp.pop();
        }
      });
    },
    _disableTVEventHandler: function _disableTVEventHandler() {
      if (this._tvEventHandler) {
        this._tvEventHandler.disable();

        delete this._tvEventHandler;
      }
    },
    render: function render() {
      return React.createElement(
        View,
        {
          style: this.props.style,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 917
          }
        },
        this._renderNavigationStackItems()
      );
    }
  });
  var styles = StyleSheet.create({
    stackItem: {
      backgroundColor: 'white',
      overflow: 'hidden',
      position: 'absolute',
      top: 0,
      left: 0,
      right: 0,
      bottom: 0
    },
    transitioner: {
      flex: 1
    }
  });
  var RCTNavigator = requireNativeComponent('RCTNavigator');
  var RCTNavigatorItem = requireNativeComponent('RCTNavItem');
  module.exports = NavigatorIOS;
},284,[67,224,15,131,141,21,285,132,191,153,155,166,13,168,139],"NavigatorIOS");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var React = _require(_dependencyMap[0], 'React');

  var StaticContainer = function (_React$Component) {
    babelHelpers.inherits(StaticContainer, _React$Component);

    function StaticContainer() {
      babelHelpers.classCallCheck(this, StaticContainer);
      return babelHelpers.possibleConstructorReturn(this, (StaticContainer.__proto__ || Object.getPrototypeOf(StaticContainer)).apply(this, arguments));
    }

    babelHelpers.createClass(StaticContainer, [{
      key: "shouldComponentUpdate",
      value: function shouldComponentUpdate(nextProps) {
        return !!nextProps.shouldUpdate;
      }
    }, {
      key: "render",
      value: function render() {
        var child = this.props.children;
        return child === null || child === false ? null : React.Children.only(child);
      }
    }]);
    return StaticContainer;
  }(React.Component);

  module.exports = StaticContainer;
},285,[131],"StaticContainer.react");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _class,
      _temp,
      _class2,
      _temp2,
      _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-native/Libraries/Components/Picker/Picker.js";

  var ColorPropType = _require(_dependencyMap[0], 'ColorPropType');

  var PickerIOS = _require(_dependencyMap[1], 'PickerIOS');

  var PickerAndroid = _require(_dependencyMap[2], 'PickerAndroid');

  var Platform = _require(_dependencyMap[3], 'Platform');

  var React = _require(_dependencyMap[4], 'React');

  var PropTypes = _require(_dependencyMap[5], 'prop-types');

  var StyleSheetPropType = _require(_dependencyMap[6], 'StyleSheetPropType');

  var TextStylePropTypes = _require(_dependencyMap[7], 'TextStylePropTypes');

  var UnimplementedView = _require(_dependencyMap[8], 'UnimplementedView');

  var ViewPropTypes = _require(_dependencyMap[9], 'ViewPropTypes');

  var ViewStylePropTypes = _require(_dependencyMap[10], 'ViewStylePropTypes');

  var itemStylePropType = StyleSheetPropType(TextStylePropTypes);
  var pickerStyleType = StyleSheetPropType(babelHelpers.extends({}, ViewStylePropTypes, {
    color: ColorPropType
  }));
  var MODE_DIALOG = 'dialog';
  var MODE_DROPDOWN = 'dropdown';
  var PickerItem = (_temp = _class = function (_React$Component) {
    babelHelpers.inherits(PickerItem, _React$Component);

    function PickerItem() {
      babelHelpers.classCallCheck(this, PickerItem);
      return babelHelpers.possibleConstructorReturn(this, (PickerItem.__proto__ || Object.getPrototypeOf(PickerItem)).apply(this, arguments));
    }

    babelHelpers.createClass(PickerItem, [{
      key: "render",
      value: function render() {
        throw null;
      }
    }]);
    return PickerItem;
  }(React.Component), _class.propTypes = {
    label: PropTypes.string.isRequired,
    value: PropTypes.any,
    color: ColorPropType,
    testID: PropTypes.string
  }, _temp);
  var Picker = (_temp2 = _class2 = function (_React$Component2) {
    babelHelpers.inherits(Picker, _React$Component2);

    function Picker() {
      babelHelpers.classCallCheck(this, Picker);
      return babelHelpers.possibleConstructorReturn(this, (Picker.__proto__ || Object.getPrototypeOf(Picker)).apply(this, arguments));
    }

    babelHelpers.createClass(Picker, [{
      key: "render",
      value: function render() {
        if (Platform.OS === 'ios') {
          return React.createElement(
            PickerIOS,
            babelHelpers.extends({}, this.props, {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 157
              }
            }),
            this.props.children
          );
        } else if (Platform.OS === 'android') {
          return React.createElement(
            PickerAndroid,
            babelHelpers.extends({}, this.props, {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 160
              }
            }),
            this.props.children
          );
        } else {
          return React.createElement(UnimplementedView, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 162
            }
          });
        }
      }
    }]);
    return Picker;
  }(React.Component), _class2.MODE_DIALOG = MODE_DIALOG, _class2.MODE_DROPDOWN = MODE_DROPDOWN, _class2.Item = PickerItem, _class2.defaultProps = {
    mode: MODE_DIALOG
  }, _class2.propTypes = babelHelpers.extends({}, ViewPropTypes, {
    style: pickerStyleType,
    selectedValue: PropTypes.any,
    onValueChange: PropTypes.func,
    enabled: PropTypes.bool,
    mode: PropTypes.oneOf(['dialog', 'dropdown']),
    itemStyle: itemStylePropType,
    prompt: PropTypes.string,
    testID: PropTypes.string
  }), _temp2);
  module.exports = Picker;
},286,[127,287,288,52,131,141,163,147,130,155,148],"Picker");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-native/Libraries/Components/Picker/PickerIOS.ios.js",
      _class,
      _temp;

  var NativeMethodsMixin = _require(_dependencyMap[0], 'NativeMethodsMixin');

  var React = _require(_dependencyMap[1], 'React');

  var PropTypes = _require(_dependencyMap[2], 'prop-types');

  var StyleSheet = _require(_dependencyMap[3], 'StyleSheet');

  var StyleSheetPropType = _require(_dependencyMap[4], 'StyleSheetPropType');

  var TextStylePropTypes = _require(_dependencyMap[5], 'TextStylePropTypes');

  var View = _require(_dependencyMap[6], 'View');

  var ViewPropTypes = _require(_dependencyMap[7], 'ViewPropTypes');

  var processColor = _require(_dependencyMap[8], 'processColor');

  var createReactClass = _require(_dependencyMap[9], 'create-react-class');

  var itemStylePropType = StyleSheetPropType(TextStylePropTypes);

  var requireNativeComponent = _require(_dependencyMap[10], 'requireNativeComponent');

  var PickerIOS = createReactClass({
    displayName: 'PickerIOS',
    mixins: [NativeMethodsMixin],
    propTypes: babelHelpers.extends({}, ViewPropTypes, {
      itemStyle: itemStylePropType,
      onValueChange: PropTypes.func,
      selectedValue: PropTypes.any
    }),
    getInitialState: function getInitialState() {
      return this._stateFromProps(this.props);
    },
    UNSAFE_componentWillReceiveProps: function UNSAFE_componentWillReceiveProps(nextProps) {
      this.setState(this._stateFromProps(nextProps));
    },
    _stateFromProps: function _stateFromProps(props) {
      var selectedIndex = 0;
      var items = [];
      React.Children.toArray(props.children).forEach(function (child, index) {
        if (child.props.value === props.selectedValue) {
          selectedIndex = index;
        }

        items.push({
          value: child.props.value,
          label: child.props.label,
          textColor: processColor(child.props.color)
        });
      });
      return {
        selectedIndex: selectedIndex,
        items: items
      };
    },
    render: function render() {
      var _this = this;

      return React.createElement(
        View,
        {
          style: this.props.style,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 67
          }
        },
        React.createElement(RCTPickerIOS, {
          ref: function ref(picker) {
            return _this._picker = picker;
          },
          style: [styles.pickerIOS, this.props.itemStyle],
          items: this.state.items,
          selectedIndex: this.state.selectedIndex,
          onChange: this._onChange,
          onStartShouldSetResponder: function onStartShouldSetResponder() {
            return true;
          },
          onResponderTerminationRequest: function onResponderTerminationRequest() {
            return false;
          },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 68
          }
        })
      );
    },
    _onChange: function _onChange(event) {
      if (this.props.onChange) {
        this.props.onChange(event);
      }

      if (this.props.onValueChange) {
        this.props.onValueChange(event.nativeEvent.newValue, event.nativeEvent.newIndex);
      }

      if (this._picker && this.state.selectedIndex !== event.nativeEvent.newIndex) {
        this._picker.setNativeProps({
          selectedIndex: this.state.selectedIndex
        });
      }
    }
  });
  PickerIOS.Item = (_temp = _class = function (_React$Component) {
    babelHelpers.inherits(_class, _React$Component);

    function _class() {
      babelHelpers.classCallCheck(this, _class);
      return babelHelpers.possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));
    }

    babelHelpers.createClass(_class, [{
      key: "render",
      value: function render() {
        return null;
      }
    }]);
    return _class;
  }(React.Component), _class.propTypes = {
    value: PropTypes.any,
    label: PropTypes.string,
    color: PropTypes.string
  }, _temp);
  var styles = StyleSheet.create({
    pickerIOS: {
      height: 216
    }
  });
  var RCTPickerIOS = requireNativeComponent('RCTPicker', {
    propTypes: {
      style: itemStylePropType
    }
  }, {
    nativeOnly: {
      items: true,
      onChange: true,
      selectedIndex: true
    }
  });
  module.exports = PickerIOS;
},287,[128,131,141,132,163,147,153,155,100,166,168],"PickerIOS");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  module.exports = _require(_dependencyMap[0], 'UnimplementedView');
},288,[130],"PickerAndroid");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-native/Libraries/Components/ProgressViewIOS/ProgressViewIOS.ios.js";

  var Image = _require(_dependencyMap[0], 'Image');

  var NativeMethodsMixin = _require(_dependencyMap[1], 'NativeMethodsMixin');

  var React = _require(_dependencyMap[2], 'React');

  var PropTypes = _require(_dependencyMap[3], 'prop-types');

  var StyleSheet = _require(_dependencyMap[4], 'StyleSheet');

  var ViewPropTypes = _require(_dependencyMap[5], 'ViewPropTypes');

  var createReactClass = _require(_dependencyMap[6], 'create-react-class');

  var requireNativeComponent = _require(_dependencyMap[7], 'requireNativeComponent');

  var ProgressViewIOS = createReactClass({
    displayName: 'ProgressViewIOS',
    mixins: [NativeMethodsMixin],
    propTypes: babelHelpers.extends({}, ViewPropTypes, {
      progressViewStyle: PropTypes.oneOf(['default', 'bar']),
      progress: PropTypes.number,
      progressTintColor: PropTypes.string,
      trackTintColor: PropTypes.string,
      progressImage: Image.propTypes.source,
      trackImage: Image.propTypes.source
    }),
    render: function render() {
      return React.createElement(RCTProgressView, babelHelpers.extends({}, this.props, {
        style: [styles.progressView, this.props.style],
        __source: {
          fileName: _jsxFileName,
          lineNumber: 66
        }
      }));
    }
  });
  var styles = StyleSheet.create({
    progressView: {
      height: 2
    }
  });
  var RCTProgressView = requireNativeComponent('RCTProgressView', ProgressViewIOS);
  module.exports = ProgressViewIOS;
},289,[224,128,131,141,132,155,166,168],"ProgressViewIOS");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _class,
      _temp2,
      _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-native/Libraries/Lists/SectionList.js";

  var MetroListView = _require(_dependencyMap[0], 'MetroListView');

  var Platform = _require(_dependencyMap[1], 'Platform');

  var React = _require(_dependencyMap[2], 'React');

  var ScrollView = _require(_dependencyMap[3], 'ScrollView');

  var VirtualizedSectionList = _require(_dependencyMap[4], 'VirtualizedSectionList');

  var defaultProps = babelHelpers.extends({}, VirtualizedSectionList.defaultProps, {
    stickySectionHeadersEnabled: Platform.OS === 'ios'
  });
  var SectionList = (_temp2 = _class = function (_React$PureComponent) {
    babelHelpers.inherits(SectionList, _React$PureComponent);

    function SectionList() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, SectionList);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = SectionList.__proto__ || Object.getPrototypeOf(SectionList)).call.apply(_ref, [this].concat(args))), _this), _this._captureRef = function (ref) {
        _this._wrapperListRef = ref;
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(SectionList, [{
      key: "scrollToLocation",
      value: function scrollToLocation(params) {
        this._wrapperListRef.scrollToLocation(params);
      }
    }, {
      key: "recordInteraction",
      value: function recordInteraction() {
        var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();

        listRef && listRef.recordInteraction();
      }
    }, {
      key: "flashScrollIndicators",
      value: function flashScrollIndicators() {
        var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();

        listRef && listRef.flashScrollIndicators();
      }
    }, {
      key: "getScrollResponder",
      value: function getScrollResponder() {
        var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();

        if (listRef) {
          return listRef.getScrollResponder();
        }
      }
    }, {
      key: "getScrollableNode",
      value: function getScrollableNode() {
        var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();

        if (listRef) {
          return listRef.getScrollableNode();
        }
      }
    }, {
      key: "setNativeProps",
      value: function setNativeProps(props) {
        var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();

        if (listRef) {
          listRef.setNativeProps(props);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var List = this.props.legacyImplementation ? MetroListView : VirtualizedSectionList;
        return React.createElement(List, babelHelpers.extends({}, this.props, {
          ref: this._captureRef,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 331
          }
        }));
      }
    }]);
    return SectionList;
  }(React.PureComponent), _class.defaultProps = defaultProps, _temp2);
  module.exports = SectionList;
},290,[245,52,131,226,291],"SectionList");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _class,
      _temp,
      _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-native/Libraries/Lists/VirtualizedSectionList.js";

  var React = _require(_dependencyMap[0], 'React');

  var View = _require(_dependencyMap[1], 'View');

  var VirtualizedList = _require(_dependencyMap[2], 'VirtualizedList');

  var invariant = _require(_dependencyMap[3], 'fbjs/lib/invariant');

  var VirtualizedSectionList = (_temp = _class = function (_React$PureComponent) {
    babelHelpers.inherits(VirtualizedSectionList, _React$PureComponent);
    babelHelpers.createClass(VirtualizedSectionList, [{
      key: "scrollToLocation",
      value: function scrollToLocation(params) {
        var index = params.itemIndex + 1;

        for (var ii = 0; ii < params.sectionIndex; ii++) {
          index += this.props.sections[ii].data.length + 2;
        }

        var toIndexParams = babelHelpers.extends({}, params, {
          index: index
        });

        this._listRef.scrollToIndex(toIndexParams);
      }
    }, {
      key: "getListRef",
      value: function getListRef() {
        return this._listRef;
      }
    }, {
      key: "_subExtractor",
      value: function _subExtractor(index) {
        var itemIndex = index;
        var defaultKeyExtractor = this.props.keyExtractor;

        for (var ii = 0; ii < this.props.sections.length; ii++) {
          var _section = this.props.sections[ii];

          var _key = _section.key || String(ii);

          itemIndex -= 1;

          if (itemIndex >= _section.data.length + 1) {
            itemIndex -= _section.data.length + 1;
          } else if (itemIndex === -1) {
            return {
              section: _section,
              key: _key + ':header',
              index: null,
              header: true,
              trailingSection: this.props.sections[ii + 1]
            };
          } else if (itemIndex === _section.data.length) {
            return {
              section: _section,
              key: _key + ':footer',
              index: null,
              header: false,
              trailingSection: this.props.sections[ii + 1]
            };
          } else {
            var _keyExtractor = _section.keyExtractor || defaultKeyExtractor;

            return {
              section: _section,
              key: _key + ':' + _keyExtractor(_section.data[itemIndex], itemIndex),
              index: itemIndex,
              leadingItem: _section.data[itemIndex - 1],
              leadingSection: this.props.sections[ii - 1],
              trailingItem: _section.data[itemIndex + 1],
              trailingSection: this.props.sections[ii + 1]
            };
          }
        }
      }
    }, {
      key: "_getSeparatorComponent",
      value: function _getSeparatorComponent(index, info) {
        info = info || this._subExtractor(index);

        if (!info) {
          return null;
        }

        var ItemSeparatorComponent = info.section.ItemSeparatorComponent || this.props.ItemSeparatorComponent;
        var SectionSeparatorComponent = this.props.SectionSeparatorComponent;
        var isLastItemInList = index === this.state.childProps.getItemCount() - 1;
        var isLastItemInSection = info.index === info.section.data.length - 1;

        if (SectionSeparatorComponent && isLastItemInSection) {
          return SectionSeparatorComponent;
        }

        if (ItemSeparatorComponent && !isLastItemInSection && !isLastItemInList) {
          return ItemSeparatorComponent;
        }

        return null;
      }
    }, {
      key: "_computeState",
      value: function _computeState(props) {
        var offset = props.ListHeaderComponent ? 1 : 0;
        var stickyHeaderIndices = [];
        var itemCount = props.sections.reduce(function (v, section) {
          stickyHeaderIndices.push(v + offset);
          return v + section.data.length + 2;
        }, 0);
        return {
          childProps: babelHelpers.extends({}, props, {
            renderItem: this._renderItem,
            ItemSeparatorComponent: undefined,
            data: props.sections,
            getItemCount: function getItemCount() {
              return itemCount;
            },
            getItem: getItem,
            keyExtractor: this._keyExtractor,
            onViewableItemsChanged: props.onViewableItemsChanged ? this._onViewableItemsChanged : undefined,
            stickyHeaderIndices: props.stickySectionHeadersEnabled ? stickyHeaderIndices : undefined
          })
        };
      }
    }]);

    function VirtualizedSectionList(props, context) {
      babelHelpers.classCallCheck(this, VirtualizedSectionList);

      var _this = babelHelpers.possibleConstructorReturn(this, (VirtualizedSectionList.__proto__ || Object.getPrototypeOf(VirtualizedSectionList)).call(this, props, context));

      _this._keyExtractor = function (item, index) {
        var info = _this._subExtractor(index);

        return info && info.key || String(index);
      };

      _this._convertViewable = function (viewable) {
        invariant(viewable.index != null, 'Received a broken ViewToken');

        var info = _this._subExtractor(viewable.index);

        if (!info) {
          return null;
        }

        var keyExtractor = info.section.keyExtractor || _this.props.keyExtractor;
        return babelHelpers.extends({}, viewable, {
          index: info.index,
          key: keyExtractor(viewable.item, info.index),
          section: info.section
        });
      };

      _this._onViewableItemsChanged = function (_ref) {
        var viewableItems = _ref.viewableItems,
            changed = _ref.changed;

        if (_this.props.onViewableItemsChanged) {
          _this.props.onViewableItemsChanged({
            viewableItems: viewableItems.map(_this._convertViewable, _this).filter(Boolean),
            changed: changed.map(_this._convertViewable, _this).filter(Boolean)
          });
        }
      };

      _this._renderItem = function (_ref2) {
        var item = _ref2.item,
            index = _ref2.index;

        var info = _this._subExtractor(index);

        if (!info) {
          return null;
        }

        var infoIndex = info.index;

        if (infoIndex == null) {
          var _section2 = info.section;

          if (info.header === true) {
            var _renderSectionHeader = _this.props.renderSectionHeader;
            return _renderSectionHeader ? _renderSectionHeader({
              section: _section2
            }) : null;
          } else {
            var _renderSectionFooter = _this.props.renderSectionFooter;
            return _renderSectionFooter ? _renderSectionFooter({
              section: _section2
            }) : null;
          }
        } else {
          var _renderItem = info.section.renderItem || _this.props.renderItem;

          var _SeparatorComponent = _this._getSeparatorComponent(index, info);

          invariant(_renderItem, 'no renderItem!');
          return React.createElement(ItemWithSeparator, {
            SeparatorComponent: _SeparatorComponent,
            LeadingSeparatorComponent: infoIndex === 0 ? _this.props.SectionSeparatorComponent : undefined,
            cellKey: info.key,
            index: infoIndex,
            item: item,
            leadingItem: info.leadingItem,
            leadingSection: info.leadingSection,
            onUpdateSeparator: _this._onUpdateSeparator,
            prevCellKey: (_this._subExtractor(index - 1) || {}).key,
            ref: function ref(_ref3) {
              _this._cellRefs[info.key] = _ref3;
            },
            renderItem: _renderItem,
            section: info.section,
            trailingItem: info.trailingItem,
            trailingSection: info.trailingSection,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 281
            }
          });
        }
      };

      _this._onUpdateSeparator = function (key, newProps) {
        var ref = _this._cellRefs[key];
        ref && ref.updateSeparatorProps(newProps);
      };

      _this._cellRefs = {};

      _this._captureRef = function (ref) {
        _this._listRef = ref;
      };

      _this.state = _this._computeState(props);
      return _this;
    }

    babelHelpers.createClass(VirtualizedSectionList, [{
      key: "UNSAFE_componentWillReceiveProps",
      value: function UNSAFE_componentWillReceiveProps(nextProps) {
        this.setState(this._computeState(nextProps));
      }
    }, {
      key: "render",
      value: function render() {
        return React.createElement(VirtualizedList, babelHelpers.extends({}, this.state.childProps, {
          ref: this._captureRef,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 370
          }
        }));
      }
    }]);
    return VirtualizedSectionList;
  }(React.PureComponent), _class.defaultProps = babelHelpers.extends({}, VirtualizedList.defaultProps, {
    data: []
  }), _temp);

  var ItemWithSeparator = function (_React$Component) {
    babelHelpers.inherits(ItemWithSeparator, _React$Component);

    function ItemWithSeparator() {
      var _ref4;

      var _temp2, _this2, _ret;

      babelHelpers.classCallCheck(this, ItemWithSeparator);

      for (var _len = arguments.length, args = Array(_len), _key2 = 0; _key2 < _len; _key2++) {
        args[_key2] = arguments[_key2];
      }

      return _ret = (_temp2 = (_this2 = babelHelpers.possibleConstructorReturn(this, (_ref4 = ItemWithSeparator.__proto__ || Object.getPrototypeOf(ItemWithSeparator)).call.apply(_ref4, [this].concat(args))), _this2), _this2.state = {
        separatorProps: {
          highlighted: false,
          leadingItem: _this2.props.item,
          leadingSection: _this2.props.leadingSection,
          section: _this2.props.section,
          trailingItem: _this2.props.trailingItem,
          trailingSection: _this2.props.trailingSection
        },
        leadingSeparatorProps: {
          highlighted: false,
          leadingItem: _this2.props.leadingItem,
          leadingSection: _this2.props.leadingSection,
          section: _this2.props.section,
          trailingItem: _this2.props.item,
          trailingSection: _this2.props.trailingSection
        }
      }, _this2._separators = {
        highlight: function highlight() {
          ['leading', 'trailing'].forEach(function (s) {
            return _this2._separators.updateProps(s, {
              highlighted: true
            });
          });
        },
        unhighlight: function unhighlight() {
          ['leading', 'trailing'].forEach(function (s) {
            return _this2._separators.updateProps(s, {
              highlighted: false
            });
          });
        },
        updateProps: function updateProps(select, newProps) {
          var _this2$props = _this2.props,
              LeadingSeparatorComponent = _this2$props.LeadingSeparatorComponent,
              cellKey = _this2$props.cellKey,
              prevCellKey = _this2$props.prevCellKey;

          if (select === 'leading' && LeadingSeparatorComponent) {
            _this2.setState(function (state) {
              return {
                leadingSeparatorProps: babelHelpers.extends({}, state.leadingSeparatorProps, newProps)
              };
            });
          } else {
            _this2.props.onUpdateSeparator(select === 'leading' && prevCellKey || cellKey, newProps);
          }
        }
      }, _temp2), babelHelpers.possibleConstructorReturn(_this2, _ret);
    }

    babelHelpers.createClass(ItemWithSeparator, [{
      key: "UNSAFE_componentWillReceiveProps",
      value: function UNSAFE_componentWillReceiveProps(props) {
        var _this3 = this;

        this.setState(function (state) {
          return {
            separatorProps: babelHelpers.extends({}, _this3.state.separatorProps, {
              leadingItem: props.item,
              leadingSection: props.leadingSection,
              section: props.section,
              trailingItem: props.trailingItem,
              trailingSection: props.trailingSection
            }),
            leadingSeparatorProps: babelHelpers.extends({}, _this3.state.leadingSeparatorProps, {
              leadingItem: props.leadingItem,
              leadingSection: props.leadingSection,
              section: props.section,
              trailingItem: props.item,
              trailingSection: props.trailingSection
            })
          };
        });
      }
    }, {
      key: "updateSeparatorProps",
      value: function updateSeparatorProps(newProps) {
        this.setState(function (state) {
          return {
            separatorProps: babelHelpers.extends({}, state.separatorProps, newProps)
          };
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _props = this.props,
            LeadingSeparatorComponent = _props.LeadingSeparatorComponent,
            SeparatorComponent = _props.SeparatorComponent,
            item = _props.item,
            index = _props.index,
            section = _props.section;
        var element = this.props.renderItem({
          item: item,
          index: index,
          section: section,
          separators: this._separators
        });
        var leadingSeparator = LeadingSeparatorComponent && React.createElement(LeadingSeparatorComponent, babelHelpers.extends({}, this.state.leadingSeparatorProps, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 491
          }
        }));
        var separator = SeparatorComponent && React.createElement(SeparatorComponent, babelHelpers.extends({}, this.state.separatorProps, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 494
          }
        }));
        return leadingSeparator || separator ? React.createElement(
          View,
          {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 497
            }
          },
          leadingSeparator,
          element,
          separator
        ) : element;
      }
    }]);
    return ItemWithSeparator;
  }(React.Component);

  function getItem(sections, index) {
    if (!sections) {
      return null;
    }

    var itemIdx = index - 1;

    for (var ii = 0; ii < sections.length; ii++) {
      if (itemIdx === -1 || itemIdx === sections[ii].data.length) {
        return sections[ii];
      } else if (itemIdx < sections[ii].data.length) {
        return sections[ii].data[itemIdx];
      } else {
        itemIdx -= sections[ii].data.length + 2;
      }
    }

    return null;
  }

  module.exports = VirtualizedSectionList;
},291,[131,153,252,13],"VirtualizedSectionList");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-native/Libraries/Components/SegmentedControlIOS/SegmentedControlIOS.ios.js";

  var NativeMethodsMixin = _require(_dependencyMap[0], 'NativeMethodsMixin');

  var React = _require(_dependencyMap[1], 'React');

  var PropTypes = _require(_dependencyMap[2], 'prop-types');

  var StyleSheet = _require(_dependencyMap[3], 'StyleSheet');

  var ViewPropTypes = _require(_dependencyMap[4], 'ViewPropTypes');

  var createReactClass = _require(_dependencyMap[5], 'create-react-class');

  var requireNativeComponent = _require(_dependencyMap[6], 'requireNativeComponent');

  var SEGMENTED_CONTROL_REFERENCE = 'segmentedcontrol';
  var SegmentedControlIOS = createReactClass({
    displayName: 'SegmentedControlIOS',
    mixins: [NativeMethodsMixin],
    propTypes: babelHelpers.extends({}, ViewPropTypes, {
      values: PropTypes.arrayOf(PropTypes.string),
      selectedIndex: PropTypes.number,
      onValueChange: PropTypes.func,
      onChange: PropTypes.func,
      enabled: PropTypes.bool,
      tintColor: PropTypes.string,
      momentary: PropTypes.bool
    }),
    getDefaultProps: function getDefaultProps() {
      return {
        values: [],
        enabled: true
      };
    },
    _onChange: function _onChange(event) {
      this.props.onChange && this.props.onChange(event);
      this.props.onValueChange && this.props.onValueChange(event.nativeEvent.value);
    },
    render: function render() {
      return React.createElement(RCTSegmentedControl, babelHelpers.extends({}, this.props, {
        ref: SEGMENTED_CONTROL_REFERENCE,
        style: [styles.segmentedControl, this.props.style],
        onChange: this._onChange,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 112
        }
      }));
    }
  });
  var styles = StyleSheet.create({
    segmentedControl: {
      height: 28
    }
  });
  var RCTSegmentedControl = requireNativeComponent('RCTSegmentedControl', SegmentedControlIOS);
  module.exports = SegmentedControlIOS;
},292,[128,131,141,132,155,166,168],"SegmentedControlIOS");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-native/Libraries/Components/Slider/Slider.js";

  var Image = _require(_dependencyMap[0], 'Image');

  var ColorPropType = _require(_dependencyMap[1], 'ColorPropType');

  var NativeMethodsMixin = _require(_dependencyMap[2], 'NativeMethodsMixin');

  var ReactNativeViewAttributes = _require(_dependencyMap[3], 'ReactNativeViewAttributes');

  var Platform = _require(_dependencyMap[4], 'Platform');

  var React = _require(_dependencyMap[5], 'React');

  var PropTypes = _require(_dependencyMap[6], 'prop-types');

  var StyleSheet = _require(_dependencyMap[7], 'StyleSheet');

  var ViewPropTypes = _require(_dependencyMap[8], 'ViewPropTypes');

  var createReactClass = _require(_dependencyMap[9], 'create-react-class');

  var requireNativeComponent = _require(_dependencyMap[10], 'requireNativeComponent');

  var Slider = createReactClass({
    displayName: 'Slider',
    mixins: [NativeMethodsMixin],
    propTypes: babelHelpers.extends({}, ViewPropTypes, {
      style: ViewPropTypes.style,
      value: PropTypes.number,
      step: PropTypes.number,
      minimumValue: PropTypes.number,
      maximumValue: PropTypes.number,
      minimumTrackTintColor: ColorPropType,
      maximumTrackTintColor: ColorPropType,
      disabled: PropTypes.bool,
      trackImage: Image.propTypes.source,
      minimumTrackImage: Image.propTypes.source,
      maximumTrackImage: Image.propTypes.source,
      thumbImage: Image.propTypes.source,
      thumbTintColor: ColorPropType,
      onValueChange: PropTypes.func,
      onSlidingComplete: PropTypes.func,
      testID: PropTypes.string
    }),
    getDefaultProps: function getDefaultProps() {
      return {
        disabled: false,
        value: 0,
        minimumValue: 0,
        maximumValue: 1,
        step: 0
      };
    },
    viewConfig: {
      uiViewClassName: 'RCTSlider',
      validAttributes: babelHelpers.extends({}, ReactNativeViewAttributes.RCTView, {
        value: true
      })
    },
    render: function render() {
      var _props = this.props,
          style = _props.style,
          onValueChange = _props.onValueChange,
          onSlidingComplete = _props.onSlidingComplete,
          props = babelHelpers.objectWithoutProperties(_props, ["style", "onValueChange", "onSlidingComplete"]);
      props.style = [styles.slider, style];

      props.onValueChange = onValueChange && function (event) {
        var userEvent = true;

        if (Platform.OS === 'android') {
          userEvent = event.nativeEvent.fromUser;
        }

        onValueChange && userEvent && onValueChange(event.nativeEvent.value);
      };

      props.onChange = props.onValueChange;

      props.onSlidingComplete = onSlidingComplete && function (event) {
        onSlidingComplete && onSlidingComplete(event.nativeEvent.value);
      };

      return React.createElement(RCTSlider, babelHelpers.extends({}, props, {
        enabled: !this.props.disabled,
        onStartShouldSetResponder: function onStartShouldSetResponder() {
          return true;
        },
        onResponderTerminationRequest: function onResponderTerminationRequest() {
          return false;
        },
        __source: {
          fileName: _jsxFileName,
          lineNumber: 248
        }
      }));
    }
  });
  var styles = void 0;

  if (Platform.OS === 'ios') {
    styles = StyleSheet.create({
      slider: {
        height: 40
      }
    });
  } else {
    styles = StyleSheet.create({
      slider: {}
    });
  }

  var options = {};

  if (Platform.OS === 'android') {
    options = {
      nativeOnly: {
        enabled: true
      }
    };
  }

  var RCTSlider = requireNativeComponent('RCTSlider', Slider, options);
  module.exports = Slider;
},293,[224,127,128,154,52,131,141,132,155,166,168],"Slider");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _class,
      _temp2,
      _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-native/Libraries/RCTTest/SnapshotViewIOS.ios.js";

  var React = _require2(_dependencyMap[0], 'React');

  var PropTypes = _require2(_dependencyMap[1], 'prop-types');

  var StyleSheet = _require2(_dependencyMap[2], 'StyleSheet');

  var _require = _require2(_dependencyMap[3], 'NativeModules'),
      TestModule = _require.TestModule;

  var UIManager = _require2(_dependencyMap[4], 'UIManager');

  var View = _require2(_dependencyMap[5], 'View');

  var ViewPropTypes = _require2(_dependencyMap[6], 'ViewPropTypes');

  var requireNativeComponent = _require2(_dependencyMap[7], 'requireNativeComponent');

  var SnapshotViewIOS = (_temp2 = _class = function (_React$Component) {
    babelHelpers.inherits(SnapshotViewIOS, _React$Component);

    function SnapshotViewIOS() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, SnapshotViewIOS);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = SnapshotViewIOS.__proto__ || Object.getPrototypeOf(SnapshotViewIOS)).call.apply(_ref, [this].concat(args))), _this), _this.onDefaultAction = function (event) {
        TestModule.verifySnapshot(TestModule.markTestPassed);
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(SnapshotViewIOS, [{
      key: "render",
      value: function render() {
        var testIdentifier = this.props.testIdentifier || 'test';
        var onSnapshotReady = this.props.onSnapshotReady || this.onDefaultAction;
        return React.createElement(RCTSnapshot, babelHelpers.extends({
          style: style.snapshot
        }, this.props, {
          onSnapshotReady: onSnapshotReady,
          testIdentifier: testIdentifier,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 46
          }
        }));
      }
    }]);
    return SnapshotViewIOS;
  }(React.Component), _class.propTypes = babelHelpers.extends({}, ViewPropTypes, {
    onSnapshotReady: PropTypes.func,
    testIdentifier: PropTypes.string
  }), _temp2);
  var style = StyleSheet.create({
    snapshot: {
      flex: 1
    }
  });
  var RCTSnapshot = UIManager.RCTSnapshot ? requireNativeComponent('RCTSnapshot', SnapshotViewIOS) : View;
  module.exports = SnapshotViewIOS;
},294,[131,141,132,15,110,153,155,168],"SnapshotViewIOS");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-native/Libraries/Components/Switch/Switch.js";

  var ColorPropType = _require(_dependencyMap[0], 'ColorPropType');

  var NativeMethodsMixin = _require(_dependencyMap[1], 'NativeMethodsMixin');

  var Platform = _require(_dependencyMap[2], 'Platform');

  var React = _require(_dependencyMap[3], 'React');

  var PropTypes = _require(_dependencyMap[4], 'prop-types');

  var StyleSheet = _require(_dependencyMap[5], 'StyleSheet');

  var ViewPropTypes = _require(_dependencyMap[6], 'ViewPropTypes');

  var createReactClass = _require(_dependencyMap[7], 'create-react-class');

  var requireNativeComponent = _require(_dependencyMap[8], 'requireNativeComponent');

  var Switch = createReactClass({
    displayName: 'Switch',
    propTypes: babelHelpers.extends({}, ViewPropTypes, {
      value: PropTypes.bool,
      disabled: PropTypes.bool,
      onValueChange: PropTypes.func,
      testID: PropTypes.string,
      tintColor: ColorPropType,
      onTintColor: ColorPropType,
      thumbTintColor: ColorPropType
    }),
    getDefaultProps: function getDefaultProps() {
      return {
        value: false,
        disabled: false
      };
    },
    mixins: [NativeMethodsMixin],
    _rctSwitch: {},
    _onChange: function _onChange(event) {
      if (Platform.OS === 'android') {
        this._rctSwitch.setNativeProps({
          on: this.props.value
        });
      } else {
        this._rctSwitch.setNativeProps({
          value: this.props.value
        });
      }

      this.props.onChange && this.props.onChange(event);
      this.props.onValueChange && this.props.onValueChange(event.nativeEvent.value);
    },
    render: function render() {
      var _this = this;

      var props = babelHelpers.extends({}, this.props);

      props.onStartShouldSetResponder = function () {
        return true;
      };

      props.onResponderTerminationRequest = function () {
        return false;
      };

      if (Platform.OS === 'android') {
        props.enabled = !this.props.disabled;
        props.on = this.props.value;
        props.style = this.props.style;
        props.trackTintColor = this.props.value ? this.props.onTintColor : this.props.tintColor;
      } else if (Platform.OS === 'ios') {
        props.style = [styles.rctSwitchIOS, this.props.style];
      }

      return React.createElement(RCTSwitch, babelHelpers.extends({}, props, {
        ref: function ref(_ref) {
          _this._rctSwitch = _ref;
        },
        onChange: this._onChange,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 115
        }
      }));
    }
  });
  var styles = StyleSheet.create({
    rctSwitchIOS: {
      height: 31,
      width: 51
    }
  });

  if (Platform.OS === 'android') {
    var RCTSwitch = requireNativeComponent('AndroidSwitch', Switch, {
      nativeOnly: {
        onChange: true,
        on: true,
        enabled: true,
        trackTintColor: true
      }
    });
  } else {
    var RCTSwitch = requireNativeComponent('RCTSwitch', Switch, {
      nativeOnly: {
        onChange: true
      }
    });
  }

  module.exports = Switch;
},295,[127,128,52,131,141,132,155,166,168],"Switch");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _class, _temp2;

  var React = _require(_dependencyMap[0], 'React');

  var PropTypes = _require(_dependencyMap[1], 'prop-types');

  var ColorPropType = _require(_dependencyMap[2], 'ColorPropType');

  var Platform = _require(_dependencyMap[3], 'Platform');

  var processColor = _require(_dependencyMap[4], 'processColor');

  var StatusBarManager = _require(_dependencyMap[5], 'NativeModules').StatusBarManager;

  function mergePropsStack(propsStack, defaultValues) {
    return propsStack.reduce(function (prev, cur) {
      for (var prop in cur) {
        if (cur[prop] != null) {
          prev[prop] = cur[prop];
        }
      }

      return prev;
    }, babelHelpers.extends({}, defaultValues));
  }

  function createStackEntry(props) {
    return {
      backgroundColor: props.backgroundColor != null ? {
        value: props.backgroundColor,
        animated: props.animated
      } : null,
      barStyle: props.barStyle != null ? {
        value: props.barStyle,
        animated: props.animated
      } : null,
      translucent: props.translucent,
      hidden: props.hidden != null ? {
        value: props.hidden,
        animated: props.animated,
        transition: props.showHideTransition
      } : null,
      networkActivityIndicatorVisible: props.networkActivityIndicatorVisible
    };
  }

  var StatusBar = (_temp2 = _class = function (_React$Component) {
    babelHelpers.inherits(StatusBar, _React$Component);

    function StatusBar() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, StatusBar);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = StatusBar.__proto__ || Object.getPrototypeOf(StatusBar)).call.apply(_ref, [this].concat(args))), _this), _this._stackEntry = null, _this._updatePropsStack = function () {
        clearImmediate(StatusBar._updateImmediate);
        StatusBar._updateImmediate = setImmediate(function () {
          var oldProps = StatusBar._currentValues;
          var mergedProps = mergePropsStack(StatusBar._propsStack, StatusBar._defaultProps);

          if (Platform.OS === 'ios') {
            if (!oldProps || oldProps.barStyle.value !== mergedProps.barStyle.value) {
              StatusBarManager.setStyle(mergedProps.barStyle.value, mergedProps.barStyle.animated);
            }

            if (!oldProps || oldProps.hidden.value !== mergedProps.hidden.value) {
              StatusBarManager.setHidden(mergedProps.hidden.value, mergedProps.hidden.animated ? mergedProps.hidden.transition : 'none');
            }

            if (!oldProps || oldProps.networkActivityIndicatorVisible !== mergedProps.networkActivityIndicatorVisible) {
              StatusBarManager.setNetworkActivityIndicatorVisible(mergedProps.networkActivityIndicatorVisible);
            }
          } else if (Platform.OS === 'android') {
            if (!oldProps || oldProps.barStyle.value !== mergedProps.barStyle.value) {
              StatusBarManager.setStyle(mergedProps.barStyle.value);
            }

            if (!oldProps || oldProps.backgroundColor.value !== mergedProps.backgroundColor.value) {
              StatusBarManager.setColor(processColor(mergedProps.backgroundColor.value), mergedProps.backgroundColor.animated);
            }

            if (!oldProps || oldProps.hidden.value !== mergedProps.hidden.value) {
              StatusBarManager.setHidden(mergedProps.hidden.value);
            }

            if (!oldProps || oldProps.translucent !== mergedProps.translucent) {
              StatusBarManager.setTranslucent(mergedProps.translucent);
            }
          }

          StatusBar._currentValues = mergedProps;
        });
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(StatusBar, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this._stackEntry = createStackEntry(this.props);

        StatusBar._propsStack.push(this._stackEntry);

        this._updatePropsStack();
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        var index = StatusBar._propsStack.indexOf(this._stackEntry);

        StatusBar._propsStack.splice(index, 1);

        this._updatePropsStack();
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate() {
        var index = StatusBar._propsStack.indexOf(this._stackEntry);

        this._stackEntry = createStackEntry(this.props);
        StatusBar._propsStack[index] = this._stackEntry;

        this._updatePropsStack();
      }
    }, {
      key: "render",
      value: function render() {
        return null;
      }
    }], [{
      key: "setHidden",
      value: function setHidden(hidden, animation) {
        animation = animation || 'none';
        StatusBar._defaultProps.hidden.value = hidden;

        if (Platform.OS === 'ios') {
          StatusBarManager.setHidden(hidden, animation);
        } else if (Platform.OS === 'android') {
          StatusBarManager.setHidden(hidden);
        }
      }
    }, {
      key: "setBarStyle",
      value: function setBarStyle(style, animated) {
        animated = animated || false;
        StatusBar._defaultProps.barStyle.value = style;

        if (Platform.OS === 'ios') {
          StatusBarManager.setStyle(style, animated);
        } else if (Platform.OS === 'android') {
          StatusBarManager.setStyle(style);
        }
      }
    }, {
      key: "setNetworkActivityIndicatorVisible",
      value: function setNetworkActivityIndicatorVisible(visible) {
        if (Platform.OS !== 'ios') {
          console.warn('`setNetworkActivityIndicatorVisible` is only available on iOS');
          return;
        }

        StatusBar._defaultProps.networkActivityIndicatorVisible = visible;
        StatusBarManager.setNetworkActivityIndicatorVisible(visible);
      }
    }, {
      key: "setBackgroundColor",
      value: function setBackgroundColor(color, animated) {
        if (Platform.OS !== 'android') {
          console.warn('`setBackgroundColor` is only available on Android');
          return;
        }

        animated = animated || false;
        StatusBar._defaultProps.backgroundColor.value = color;
        StatusBarManager.setColor(processColor(color), animated);
      }
    }, {
      key: "setTranslucent",
      value: function setTranslucent(translucent) {
        if (Platform.OS !== 'android') {
          console.warn('`setTranslucent` is only available on Android');
          return;
        }

        StatusBar._defaultProps.translucent = translucent;
        StatusBarManager.setTranslucent(translucent);
      }
    }]);
    return StatusBar;
  }(React.Component), _class._propsStack = [], _class._defaultProps = createStackEntry({
    animated: false,
    showHideTransition: 'fade',
    backgroundColor: 'black',
    barStyle: 'default',
    translucent: false,
    hidden: false,
    networkActivityIndicatorVisible: false
  }), _class._updateImmediate = null, _class._currentValues = null, _class.currentHeight = StatusBarManager.HEIGHT, _class.propTypes = {
    hidden: PropTypes.bool,
    animated: PropTypes.bool,
    backgroundColor: ColorPropType,
    translucent: PropTypes.bool,
    barStyle: PropTypes.oneOf(['default', 'light-content', 'dark-content']),
    networkActivityIndicatorVisible: PropTypes.bool,
    showHideTransition: PropTypes.oneOf(['fade', 'slide'])
  }, _class.defaultProps = {
    animated: false,
    showHideTransition: 'fade'
  }, _temp2);
  module.exports = StatusBar;
},296,[131,141,127,52,100,15],"StatusBar");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _class,
      _temp,
      _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-native/Libraries/Experimental/SwipeableRow/SwipeableFlatList.js";

  var PropTypes = _require(_dependencyMap[0], 'prop-types');

  var React = _require(_dependencyMap[1], 'React');

  var SwipeableRow = _require(_dependencyMap[2], 'SwipeableRow');

  var FlatList = _require(_dependencyMap[3], 'FlatList');

  var SwipeableFlatList = (_temp = _class = function (_React$Component) {
    babelHelpers.inherits(SwipeableFlatList, _React$Component);

    function SwipeableFlatList(props, context) {
      babelHelpers.classCallCheck(this, SwipeableFlatList);

      var _this = babelHelpers.possibleConstructorReturn(this, (SwipeableFlatList.__proto__ || Object.getPrototypeOf(SwipeableFlatList)).call(this, props, context));

      _this._flatListRef = null;
      _this._shouldBounceFirstRowOnMount = false;

      _this._onScroll = function (e) {
        if (_this.state.openRowKey) {
          _this.setState({
            openRowKey: null
          });
        }

        _this.props.onScroll && _this.props.onScroll(e);
      };

      _this._renderItem = function (info) {
        var slideoutView = _this.props.renderQuickActions(info);

        var key = _this.props.keyExtractor(info.item, info.index);

        if (!slideoutView) {
          return _this.props.renderItem(info);
        }

        var shouldBounceOnMount = false;

        if (_this._shouldBounceFirstRowOnMount) {
          _this._shouldBounceFirstRowOnMount = false;
          shouldBounceOnMount = true;
        }

        return React.createElement(
          SwipeableRow,
          {
            slideoutView: slideoutView,
            isOpen: key === _this.state.openRowKey,
            maxSwipeDistance: _this._getMaxSwipeDistance(info),
            onOpen: function onOpen() {
              return _this._onOpen(key);
            },
            onClose: function onClose() {
              return _this._onClose(key);
            },
            shouldBounceOnMount: shouldBounceOnMount,
            onSwipeEnd: _this._setListViewScrollable,
            onSwipeStart: _this._setListViewNotScrollable,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 137
            }
          },
          _this.props.renderItem(info)
        );
      };

      _this._setListViewScrollable = function () {
        _this._setListViewScrollableTo(true);
      };

      _this._setListViewNotScrollable = function () {
        _this._setListViewScrollableTo(false);
      };

      _this.state = {
        openRowKey: null
      };
      _this._shouldBounceFirstRowOnMount = _this.props.bounceFirstRowOnMount;
      return _this;
    }

    babelHelpers.createClass(SwipeableFlatList, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        return React.createElement(FlatList, babelHelpers.extends({}, this.props, {
          ref: function ref(_ref) {
            _this2._flatListRef = _ref;
          },
          onScroll: this._onScroll,
          renderItem: this._renderItem,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 99
          }
        }));
      }
    }, {
      key: "_getMaxSwipeDistance",
      value: function _getMaxSwipeDistance(info) {
        if (typeof this.props.maxSwipeDistance === 'function') {
          return this.props.maxSwipeDistance(info);
        }

        return this.props.maxSwipeDistance;
      }
    }, {
      key: "_setListViewScrollableTo",
      value: function _setListViewScrollableTo(value) {
        if (this._flatListRef) {
          this._flatListRef.setNativeProps({
            scrollEnabled: value
          });
        }
      }
    }, {
      key: "_onOpen",
      value: function _onOpen(key) {
        this.setState({
          openRowKey: key
        });
      }
    }, {
      key: "_onClose",
      value: function _onClose(key) {
        this.setState({
          openRowKey: null
        });
      }
    }]);
    return SwipeableFlatList;
  }(React.Component), _class.propTypes = babelHelpers.extends({}, FlatList.propTypes, {
    bounceFirstRowOnMount: PropTypes.bool.isRequired,
    maxSwipeDistance: PropTypes.oneOfType([PropTypes.number, PropTypes.func]).isRequired,
    renderQuickActions: PropTypes.func.isRequired
  }), _class.defaultProps = babelHelpers.extends({}, FlatList.defaultProps, {
    bounceFirstRowOnMount: true,
    renderQuickActions: function renderQuickActions() {
      return null;
    }
  }), _temp);
  module.exports = SwipeableFlatList;
},297,[141,131,298,244],"SwipeableFlatList");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-native/Libraries/Experimental/SwipeableRow/SwipeableRow.js";

  var Animated = _require(_dependencyMap[0], 'Animated');

  var I18nManager = _require(_dependencyMap[1], 'I18nManager');

  var PanResponder = _require(_dependencyMap[2], 'PanResponder');

  var React = _require(_dependencyMap[3], 'React');

  var PropTypes = _require(_dependencyMap[4], 'prop-types');

  var StyleSheet = _require(_dependencyMap[5], 'StyleSheet');

  var TimerMixin = _require(_dependencyMap[6], 'react-timer-mixin');

  var View = _require(_dependencyMap[7], 'View');

  var createReactClass = _require(_dependencyMap[8], 'create-react-class');

  var emptyFunction = _require(_dependencyMap[9], 'fbjs/lib/emptyFunction');

  var IS_RTL = I18nManager.isRTL;
  var CLOSED_LEFT_POSITION = 0;
  var HORIZONTAL_SWIPE_DISTANCE_THRESHOLD = 10;
  var HORIZONTAL_FULL_SWIPE_SPEED_THRESHOLD = 0.3;
  var SLOW_SPEED_SWIPE_FACTOR = 4;
  var SWIPE_DURATION = 300;
  var ON_MOUNT_BOUNCE_DELAY = 700;
  var ON_MOUNT_BOUNCE_DURATION = 400;
  var RIGHT_SWIPE_BOUNCE_BACK_DISTANCE = 30;
  var RIGHT_SWIPE_BOUNCE_BACK_DURATION = 300;
  var RIGHT_SWIPE_THRESHOLD = 30 * SLOW_SPEED_SWIPE_FACTOR;
  var SwipeableRow = createReactClass({
    displayName: 'SwipeableRow',
    _panResponder: {},
    _previousLeft: CLOSED_LEFT_POSITION,
    mixins: [TimerMixin],
    propTypes: {
      children: PropTypes.any,
      isOpen: PropTypes.bool,
      preventSwipeRight: PropTypes.bool,
      maxSwipeDistance: PropTypes.number.isRequired,
      onOpen: PropTypes.func.isRequired,
      onClose: PropTypes.func.isRequired,
      onSwipeEnd: PropTypes.func.isRequired,
      onSwipeStart: PropTypes.func.isRequired,
      shouldBounceOnMount: PropTypes.bool,
      slideoutView: PropTypes.node.isRequired,
      swipeThreshold: PropTypes.number.isRequired
    },
    getInitialState: function getInitialState() {
      return {
        currentLeft: new Animated.Value(this._previousLeft),
        isSwipeableViewRendered: false,
        rowHeight: null
      };
    },
    getDefaultProps: function getDefaultProps() {
      return {
        isOpen: false,
        preventSwipeRight: false,
        maxSwipeDistance: 0,
        onOpen: emptyFunction,
        onClose: emptyFunction,
        onSwipeEnd: emptyFunction,
        onSwipeStart: emptyFunction,
        swipeThreshold: 30
      };
    },
    UNSAFE_componentWillMount: function UNSAFE_componentWillMount() {
      this._panResponder = PanResponder.create({
        onMoveShouldSetPanResponderCapture: this._handleMoveShouldSetPanResponderCapture,
        onPanResponderGrant: this._handlePanResponderGrant,
        onPanResponderMove: this._handlePanResponderMove,
        onPanResponderRelease: this._handlePanResponderEnd,
        onPanResponderTerminationRequest: this._onPanResponderTerminationRequest,
        onPanResponderTerminate: this._handlePanResponderEnd,
        onShouldBlockNativeResponder: function onShouldBlockNativeResponder(event, gestureState) {
          return false;
        }
      });
    },
    componentDidMount: function componentDidMount() {
      var _this = this;

      if (this.props.shouldBounceOnMount) {
        this.setTimeout(function () {
          _this._animateBounceBack(ON_MOUNT_BOUNCE_DURATION);
        }, ON_MOUNT_BOUNCE_DELAY);
      }
    },
    UNSAFE_componentWillReceiveProps: function UNSAFE_componentWillReceiveProps(nextProps) {
      if (this.props.isOpen && !nextProps.isOpen) {
        this._animateToClosedPosition();
      }
    },
    render: function render() {
      var slideOutView = void 0;

      if (this.state.isSwipeableViewRendered && this.state.rowHeight) {
        slideOutView = React.createElement(
          View,
          {
            style: [styles.slideOutContainer, {
              height: this.state.rowHeight
            }],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 167
            }
          },
          this.props.slideoutView
        );
      }

      var swipeableView = React.createElement(
        Animated.View,
        {
          onLayout: this._onSwipeableViewLayout,
          style: {
            transform: [{
              translateX: this.state.currentLeft
            }]
          },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 178
          }
        },
        this.props.children
      );
      return React.createElement(
        View,
        babelHelpers.extends({}, this._panResponder.panHandlers, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 186
          }
        }),
        slideOutView,
        swipeableView
      );
    },
    close: function close() {
      this.props.onClose();

      this._animateToClosedPosition();
    },
    _onSwipeableViewLayout: function _onSwipeableViewLayout(event) {
      this.setState({
        isSwipeableViewRendered: true,
        rowHeight: event.nativeEvent.layout.height
      });
    },
    _handleMoveShouldSetPanResponderCapture: function _handleMoveShouldSetPanResponderCapture(event, gestureState) {
      return gestureState.dy < 10 && this._isValidSwipe(gestureState);
    },
    _handlePanResponderGrant: function _handlePanResponderGrant(event, gestureState) {},
    _handlePanResponderMove: function _handlePanResponderMove(event, gestureState) {
      if (this._isSwipingExcessivelyRightFromClosedPosition(gestureState)) {
        return;
      }

      this.props.onSwipeStart();

      if (this._isSwipingRightFromClosed(gestureState)) {
        this._swipeSlowSpeed(gestureState);
      } else {
        this._swipeFullSpeed(gestureState);
      }
    },
    _isSwipingRightFromClosed: function _isSwipingRightFromClosed(gestureState) {
      var gestureStateDx = IS_RTL ? -gestureState.dx : gestureState.dx;
      return this._previousLeft === CLOSED_LEFT_POSITION && gestureStateDx > 0;
    },
    _swipeFullSpeed: function _swipeFullSpeed(gestureState) {
      this.state.currentLeft.setValue(this._previousLeft + gestureState.dx);
    },
    _swipeSlowSpeed: function _swipeSlowSpeed(gestureState) {
      this.state.currentLeft.setValue(this._previousLeft + gestureState.dx / SLOW_SPEED_SWIPE_FACTOR);
    },
    _isSwipingExcessivelyRightFromClosedPosition: function _isSwipingExcessivelyRightFromClosedPosition(gestureState) {
      var gestureStateDx = IS_RTL ? -gestureState.dx : gestureState.dx;
      return this._isSwipingRightFromClosed(gestureState) && gestureStateDx > RIGHT_SWIPE_THRESHOLD;
    },
    _onPanResponderTerminationRequest: function _onPanResponderTerminationRequest(event, gestureState) {
      return false;
    },
    _animateTo: function _animateTo(toValue) {
      var _this2 = this;

      var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : SWIPE_DURATION;
      var callback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : emptyFunction;
      Animated.timing(this.state.currentLeft, {
        duration: duration,
        toValue: toValue,
        useNativeDriver: true
      }).start(function () {
        _this2._previousLeft = toValue;
        callback();
      });
    },
    _animateToOpenPosition: function _animateToOpenPosition() {
      var maxSwipeDistance = IS_RTL ? -this.props.maxSwipeDistance : this.props.maxSwipeDistance;

      this._animateTo(-maxSwipeDistance);
    },
    _animateToOpenPositionWith: function _animateToOpenPositionWith(speed, distMoved) {
      speed = speed > HORIZONTAL_FULL_SWIPE_SPEED_THRESHOLD ? speed : HORIZONTAL_FULL_SWIPE_SPEED_THRESHOLD;
      var duration = Math.abs((this.props.maxSwipeDistance - Math.abs(distMoved)) / speed);
      var maxSwipeDistance = IS_RTL ? -this.props.maxSwipeDistance : this.props.maxSwipeDistance;

      this._animateTo(-maxSwipeDistance, duration);
    },
    _animateToClosedPosition: function _animateToClosedPosition() {
      var duration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : SWIPE_DURATION;

      this._animateTo(CLOSED_LEFT_POSITION, duration);
    },
    _animateToClosedPositionDuringBounce: function _animateToClosedPositionDuringBounce() {
      this._animateToClosedPosition(RIGHT_SWIPE_BOUNCE_BACK_DURATION);
    },
    _animateBounceBack: function _animateBounceBack(duration) {
      var swipeBounceBackDistance = IS_RTL ? -RIGHT_SWIPE_BOUNCE_BACK_DISTANCE : RIGHT_SWIPE_BOUNCE_BACK_DISTANCE;

      this._animateTo(-swipeBounceBackDistance, duration, this._animateToClosedPositionDuringBounce);
    },
    _isValidSwipe: function _isValidSwipe(gestureState) {
      if (this.props.preventSwipeRight && this._previousLeft === CLOSED_LEFT_POSITION && gestureState.dx > 0) {
        return false;
      }

      return Math.abs(gestureState.dx) > HORIZONTAL_SWIPE_DISTANCE_THRESHOLD;
    },
    _shouldAnimateRemainder: function _shouldAnimateRemainder(gestureState) {
      return Math.abs(gestureState.dx) > this.props.swipeThreshold || gestureState.vx > HORIZONTAL_FULL_SWIPE_SPEED_THRESHOLD;
    },
    _handlePanResponderEnd: function _handlePanResponderEnd(event, gestureState) {
      var horizontalDistance = IS_RTL ? -gestureState.dx : gestureState.dx;

      if (this._isSwipingRightFromClosed(gestureState)) {
        this.props.onOpen();

        this._animateBounceBack(RIGHT_SWIPE_BOUNCE_BACK_DURATION);
      } else if (this._shouldAnimateRemainder(gestureState)) {
        if (horizontalDistance < 0) {
          this.props.onOpen();

          this._animateToOpenPositionWith(gestureState.vx, horizontalDistance);
        } else {
          this.props.onClose();

          this._animateToClosedPosition();
        }
      } else {
        if (this._previousLeft === CLOSED_LEFT_POSITION) {
          this._animateToClosedPosition();
        } else {
          this._animateToOpenPosition();
        }
      }

      this.props.onSwipeEnd();
    }
  });
  var styles = StyleSheet.create({
    slideOutContainer: {
      bottom: 0,
      left: 0,
      position: 'absolute',
      right: 0,
      top: 0
    }
  });
  module.exports = SwipeableRow;
},298,[196,283,299,131,141,132,238,153,166,57],"SwipeableRow");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var InteractionManager = _require(_dependencyMap[0], './InteractionManager');

  var TouchHistoryMath = _require(_dependencyMap[1], 'TouchHistoryMath');

  var currentCentroidXOfTouchesChangedAfter = TouchHistoryMath.currentCentroidXOfTouchesChangedAfter;
  var currentCentroidYOfTouchesChangedAfter = TouchHistoryMath.currentCentroidYOfTouchesChangedAfter;
  var previousCentroidXOfTouchesChangedAfter = TouchHistoryMath.previousCentroidXOfTouchesChangedAfter;
  var previousCentroidYOfTouchesChangedAfter = TouchHistoryMath.previousCentroidYOfTouchesChangedAfter;
  var currentCentroidX = TouchHistoryMath.currentCentroidX;
  var currentCentroidY = TouchHistoryMath.currentCentroidY;
  var PanResponder = {
    _initializeGestureState: function _initializeGestureState(gestureState) {
      gestureState.moveX = 0;
      gestureState.moveY = 0;
      gestureState.x0 = 0;
      gestureState.y0 = 0;
      gestureState.dx = 0;
      gestureState.dy = 0;
      gestureState.vx = 0;
      gestureState.vy = 0;
      gestureState.numberActiveTouches = 0;
      gestureState._accountsForMovesUpTo = 0;
    },
    _updateGestureStateOnMove: function _updateGestureStateOnMove(gestureState, touchHistory) {
      gestureState.numberActiveTouches = touchHistory.numberActiveTouches;
      gestureState.moveX = currentCentroidXOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);
      gestureState.moveY = currentCentroidYOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);
      var movedAfter = gestureState._accountsForMovesUpTo;
      var prevX = previousCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);
      var x = currentCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);
      var prevY = previousCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);
      var y = currentCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);
      var nextDX = gestureState.dx + (x - prevX);
      var nextDY = gestureState.dy + (y - prevY);
      var dt = touchHistory.mostRecentTimeStamp - gestureState._accountsForMovesUpTo;
      gestureState.vx = (nextDX - gestureState.dx) / dt;
      gestureState.vy = (nextDY - gestureState.dy) / dt;
      gestureState.dx = nextDX;
      gestureState.dy = nextDY;
      gestureState._accountsForMovesUpTo = touchHistory.mostRecentTimeStamp;
    },
    create: function create(config) {
      var interactionState = {
        handle: null
      };
      var gestureState = {
        stateID: Math.random()
      };

      PanResponder._initializeGestureState(gestureState);

      var panHandlers = {
        onStartShouldSetResponder: function onStartShouldSetResponder(e) {
          return config.onStartShouldSetPanResponder === undefined ? false : config.onStartShouldSetPanResponder(e, gestureState);
        },
        onMoveShouldSetResponder: function onMoveShouldSetResponder(e) {
          return config.onMoveShouldSetPanResponder === undefined ? false : config.onMoveShouldSetPanResponder(e, gestureState);
        },
        onStartShouldSetResponderCapture: function onStartShouldSetResponderCapture(e) {
          if (e.nativeEvent.touches.length === 1) {
            PanResponder._initializeGestureState(gestureState);
          }

          gestureState.numberActiveTouches = e.touchHistory.numberActiveTouches;
          return config.onStartShouldSetPanResponderCapture !== undefined ? config.onStartShouldSetPanResponderCapture(e, gestureState) : false;
        },
        onMoveShouldSetResponderCapture: function onMoveShouldSetResponderCapture(e) {
          var touchHistory = e.touchHistory;

          if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {
            return false;
          }

          PanResponder._updateGestureStateOnMove(gestureState, touchHistory);

          return config.onMoveShouldSetPanResponderCapture ? config.onMoveShouldSetPanResponderCapture(e, gestureState) : false;
        },
        onResponderGrant: function onResponderGrant(e) {
          if (!interactionState.handle) {
            interactionState.handle = InteractionManager.createInteractionHandle();
          }

          gestureState.x0 = currentCentroidX(e.touchHistory);
          gestureState.y0 = currentCentroidY(e.touchHistory);
          gestureState.dx = 0;
          gestureState.dy = 0;

          if (config.onPanResponderGrant) {
            config.onPanResponderGrant(e, gestureState);
          }

          return config.onShouldBlockNativeResponder === undefined ? true : config.onShouldBlockNativeResponder();
        },
        onResponderReject: function onResponderReject(e) {
          clearInteractionHandle(interactionState, config.onPanResponderReject, e, gestureState);
        },
        onResponderRelease: function onResponderRelease(e) {
          clearInteractionHandle(interactionState, config.onPanResponderRelease, e, gestureState);

          PanResponder._initializeGestureState(gestureState);
        },
        onResponderStart: function onResponderStart(e) {
          var touchHistory = e.touchHistory;
          gestureState.numberActiveTouches = touchHistory.numberActiveTouches;

          if (config.onPanResponderStart) {
            config.onPanResponderStart(e, gestureState);
          }
        },
        onResponderMove: function onResponderMove(e) {
          var touchHistory = e.touchHistory;

          if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {
            return;
          }

          PanResponder._updateGestureStateOnMove(gestureState, touchHistory);

          if (config.onPanResponderMove) {
            config.onPanResponderMove(e, gestureState);
          }
        },
        onResponderEnd: function onResponderEnd(e) {
          var touchHistory = e.touchHistory;
          gestureState.numberActiveTouches = touchHistory.numberActiveTouches;
          clearInteractionHandle(interactionState, config.onPanResponderEnd, e, gestureState);
        },
        onResponderTerminate: function onResponderTerminate(e) {
          clearInteractionHandle(interactionState, config.onPanResponderTerminate, e, gestureState);

          PanResponder._initializeGestureState(gestureState);
        },
        onResponderTerminationRequest: function onResponderTerminationRequest(e) {
          return config.onPanResponderTerminationRequest === undefined ? true : config.onPanResponderTerminationRequest(e, gestureState);
        }
      };
      return {
        panHandlers: panHandlers,
        getInteractionHandle: function getInteractionHandle() {
          return interactionState.handle;
        }
      };
    }
  };

  function clearInteractionHandle(interactionState, callback, event, gestureState) {
    if (interactionState.handle) {
      InteractionManager.clearInteractionHandle(interactionState.handle);
      interactionState.handle = null;
    }

    if (callback) {
      callback(event, gestureState);
    }
  }

  module.exports = PanResponder;
},299,[204,300],"PanResponder");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _require = _require2(_dependencyMap[0], 'ReactNative'),
      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = _require.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

  module.exports = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.TouchHistoryMath;
},300,[21],"TouchHistoryMath");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _class,
      _temp,
      _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-native/Libraries/Experimental/SwipeableRow/SwipeableListView.js";

  var ListView = _require(_dependencyMap[0], 'ListView');

  var PropTypes = _require(_dependencyMap[1], 'prop-types');

  var React = _require(_dependencyMap[2], 'React');

  var SwipeableListViewDataSource = _require(_dependencyMap[3], 'SwipeableListViewDataSource');

  var SwipeableRow = _require(_dependencyMap[4], 'SwipeableRow');

  var SwipeableListView = (_temp = _class = function (_React$Component) {
    babelHelpers.inherits(SwipeableListView, _React$Component);
    babelHelpers.createClass(SwipeableListView, null, [{
      key: "getNewDataSource",
      value: function getNewDataSource() {
        return new SwipeableListViewDataSource({
          getRowData: function getRowData(data, sectionID, rowID) {
            return data[sectionID][rowID];
          },
          getSectionHeaderData: function getSectionHeaderData(data, sectionID) {
            return data[sectionID];
          },
          rowHasChanged: function rowHasChanged(row1, row2) {
            return row1 !== row2;
          },
          sectionHeaderHasChanged: function sectionHeaderHasChanged(s1, s2) {
            return s1 !== s2;
          }
        });
      }
    }]);

    function SwipeableListView(props, context) {
      babelHelpers.classCallCheck(this, SwipeableListView);

      var _this = babelHelpers.possibleConstructorReturn(this, (SwipeableListView.__proto__ || Object.getPrototypeOf(SwipeableListView)).call(this, props, context));

      _this._listViewRef = null;
      _this._shouldBounceFirstRowOnMount = false;

      _this._onScroll = function (e) {
        if (_this.props.dataSource.getOpenRowID()) {
          _this.setState({
            dataSource: _this.state.dataSource.setOpenRowID(null)
          });
        }

        _this.props.onScroll && _this.props.onScroll(e);
      };

      _this._renderRow = function (rowData, sectionID, rowID) {
        var slideoutView = _this.props.renderQuickActions(rowData, sectionID, rowID);

        if (!slideoutView) {
          return _this.props.renderRow(rowData, sectionID, rowID);
        }

        var shouldBounceOnMount = false;

        if (_this._shouldBounceFirstRowOnMount) {
          _this._shouldBounceFirstRowOnMount = false;
          shouldBounceOnMount = rowID === _this.props.dataSource.getFirstRowID();
        }

        return React.createElement(
          SwipeableRow,
          {
            slideoutView: slideoutView,
            isOpen: rowData.id === _this.props.dataSource.getOpenRowID(),
            maxSwipeDistance: _this._getMaxSwipeDistance(rowData, sectionID, rowID),
            key: rowID,
            onOpen: function onOpen() {
              return _this._onOpen(rowData.id);
            },
            onClose: function onClose() {
              return _this._onClose(rowData.id);
            },
            onSwipeEnd: function onSwipeEnd() {
              return _this._setListViewScrollable(true);
            },
            onSwipeStart: function onSwipeStart() {
              return _this._setListViewScrollable(false);
            },
            shouldBounceOnMount: shouldBounceOnMount,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 185
            }
          },
          _this.props.renderRow(rowData, sectionID, rowID)
        );
      };

      _this._shouldBounceFirstRowOnMount = _this.props.bounceFirstRowOnMount;
      _this.state = {
        dataSource: _this.props.dataSource
      };
      return _this;
    }

    babelHelpers.createClass(SwipeableListView, [{
      key: "UNSAFE_componentWillReceiveProps",
      value: function UNSAFE_componentWillReceiveProps(nextProps) {
        if (this.state.dataSource.getDataSource() !== nextProps.dataSource.getDataSource()) {
          this.setState({
            dataSource: nextProps.dataSource
          });
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        return React.createElement(ListView, babelHelpers.extends({}, this.props, {
          ref: function ref(_ref) {
            _this2._listViewRef = _ref;
          },
          dataSource: this.state.dataSource.getDataSource(),
          onScroll: this._onScroll,
          renderRow: this._renderRow,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 118
          }
        }));
      }
    }, {
      key: "_setListViewScrollable",
      value: function _setListViewScrollable(value) {
        if (this._listViewRef && typeof this._listViewRef.setNativeProps === 'function') {
          this._listViewRef.setNativeProps({
            scrollEnabled: value
          });
        }
      }
    }, {
      key: "getScrollResponder",
      value: function getScrollResponder() {
        if (this._listViewRef && typeof this._listViewRef.getScrollResponder === 'function') {
          return this._listViewRef.getScrollResponder();
        }
      }
    }, {
      key: "_getMaxSwipeDistance",
      value: function _getMaxSwipeDistance(rowData, sectionID, rowID) {
        if (typeof this.props.maxSwipeDistance === 'function') {
          return this.props.maxSwipeDistance(rowData, sectionID, rowID);
        }

        return this.props.maxSwipeDistance;
      }
    }, {
      key: "_onOpen",
      value: function _onOpen(rowID) {
        this.setState({
          dataSource: this.state.dataSource.setOpenRowID(rowID)
        });
      }
    }, {
      key: "_onClose",
      value: function _onClose(rowID) {
        this.setState({
          dataSource: this.state.dataSource.setOpenRowID(null)
        });
      }
    }]);
    return SwipeableListView;
  }(React.Component), _class.propTypes = {
    bounceFirstRowOnMount: PropTypes.bool.isRequired,
    dataSource: PropTypes.instanceOf(SwipeableListViewDataSource).isRequired,
    maxSwipeDistance: PropTypes.oneOfType([PropTypes.number, PropTypes.func]).isRequired,
    renderRow: PropTypes.func.isRequired,
    renderQuickActions: PropTypes.func.isRequired
  }, _class.defaultProps = {
    bounceFirstRowOnMount: false,
    renderQuickActions: function renderQuickActions() {
      return null;
    }
  }, _temp);
  module.exports = SwipeableListView;
},301,[246,141,131,302,298],"SwipeableListView");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var ListViewDataSource = _require(_dependencyMap[0], 'ListViewDataSource');

  var SwipeableListViewDataSource = function () {
    function SwipeableListViewDataSource(params) {
      var _this = this;

      babelHelpers.classCallCheck(this, SwipeableListViewDataSource);
      this._dataSource = new ListViewDataSource({
        getRowData: params.getRowData,
        getSectionHeaderData: params.getSectionHeaderData,
        rowHasChanged: function rowHasChanged(row1, row2) {
          return row1.id !== _this._previousOpenRowID && row2.id === _this._openRowID || row1.id === _this._previousOpenRowID && row2.id !== _this._openRowID || params.rowHasChanged(row1, row2);
        },
        sectionHeaderHasChanged: params.sectionHeaderHasChanged
      });
    }

    babelHelpers.createClass(SwipeableListViewDataSource, [{
      key: "cloneWithRowsAndSections",
      value: function cloneWithRowsAndSections(dataBlob, sectionIdentities, rowIdentities) {
        this._dataSource = this._dataSource.cloneWithRowsAndSections(dataBlob, sectionIdentities, rowIdentities);
        this._dataBlob = dataBlob;
        this.rowIdentities = this._dataSource.rowIdentities;
        this.sectionIdentities = this._dataSource.sectionIdentities;
        return this;
      }
    }, {
      key: "getDataSource",
      value: function getDataSource() {
        return this._dataSource;
      }
    }, {
      key: "getOpenRowID",
      value: function getOpenRowID() {
        return this._openRowID;
      }
    }, {
      key: "getFirstRowID",
      value: function getFirstRowID() {
        if (this.rowIdentities) {
          return this.rowIdentities[0] && this.rowIdentities[0][0];
        }

        return Object.keys(this._dataBlob)[0];
      }
    }, {
      key: "getLastRowID",
      value: function getLastRowID() {
        if (this.rowIdentities && this.rowIdentities.length) {
          var lastSection = this.rowIdentities[this.rowIdentities.length - 1];

          if (lastSection && lastSection.length) {
            return lastSection[lastSection.length - 1];
          }
        }

        return Object.keys(this._dataBlob)[this._dataBlob.length - 1];
      }
    }, {
      key: "setOpenRowID",
      value: function setOpenRowID(rowID) {
        this._previousOpenRowID = this._openRowID;
        this._openRowID = rowID;
        this._dataSource = this._dataSource.cloneWithRowsAndSections(this._dataBlob, this.sectionIdentities, this.rowIdentities);
        return this;
      }
    }]);
    return SwipeableListViewDataSource;
  }();

  module.exports = SwipeableListViewDataSource;
},302,[247],"SwipeableListViewDataSource");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _class,
      _temp,
      _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-native/Libraries/Components/TabBarIOS/TabBarIOS.ios.js";

  var ColorPropType = _require(_dependencyMap[0], 'ColorPropType');

  var React = _require(_dependencyMap[1], 'React');

  var PropTypes = _require(_dependencyMap[2], 'prop-types');

  var StyleSheet = _require(_dependencyMap[3], 'StyleSheet');

  var TabBarItemIOS = _require(_dependencyMap[4], 'TabBarItemIOS');

  var ViewPropTypes = _require(_dependencyMap[5], 'ViewPropTypes');

  var requireNativeComponent = _require(_dependencyMap[6], 'requireNativeComponent');

  var TabBarIOS = (_temp = _class = function (_React$Component) {
    babelHelpers.inherits(TabBarIOS, _React$Component);

    function TabBarIOS() {
      babelHelpers.classCallCheck(this, TabBarIOS);
      return babelHelpers.possibleConstructorReturn(this, (TabBarIOS.__proto__ || Object.getPrototypeOf(TabBarIOS)).apply(this, arguments));
    }

    babelHelpers.createClass(TabBarIOS, [{
      key: "render",
      value: function render() {
        return React.createElement(
          RCTTabBar,
          {
            style: [styles.tabGroup, this.props.style],
            unselectedTintColor: this.props.unselectedTintColor,
            unselectedItemTintColor: this.props.unselectedItemTintColor,
            tintColor: this.props.tintColor,
            barTintColor: this.props.barTintColor,
            barStyle: this.props.barStyle,
            itemPositioning: this.props.itemPositioning,
            translucent: this.props.translucent !== false,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 82
            }
          },
          this.props.children
        );
      }
    }]);
    return TabBarIOS;
  }(React.Component), _class.Item = TabBarItemIOS, _class.propTypes = babelHelpers.extends({}, ViewPropTypes, {
    style: ViewPropTypes.style,
    unselectedTintColor: ColorPropType,
    tintColor: ColorPropType,
    unselectedItemTintColor: ColorPropType,
    barTintColor: ColorPropType,
    barStyle: PropTypes.oneOf(['default', 'black']),
    translucent: PropTypes.bool,
    itemPositioning: PropTypes.oneOf(['fill', 'center', 'auto'])
  }), _temp);
  var styles = StyleSheet.create({
    tabGroup: {
      flex: 1
    }
  });
  var RCTTabBar = requireNativeComponent('RCTTabBar', TabBarIOS);
  module.exports = TabBarIOS;
},303,[127,131,141,132,304,155,168],"TabBarIOS");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _class,
      _temp2,
      _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-native/Libraries/Components/TabBarIOS/TabBarItemIOS.ios.js";

  var ColorPropType = _require(_dependencyMap[0], 'ColorPropType');

  var Image = _require(_dependencyMap[1], 'Image');

  var React = _require(_dependencyMap[2], 'React');

  var PropTypes = _require(_dependencyMap[3], 'prop-types');

  var StaticContainer = _require(_dependencyMap[4], 'StaticContainer.react');

  var StyleSheet = _require(_dependencyMap[5], 'StyleSheet');

  var View = _require(_dependencyMap[6], 'View');

  var ViewPropTypes = _require(_dependencyMap[7], 'ViewPropTypes');

  var requireNativeComponent = _require(_dependencyMap[8], 'requireNativeComponent');

  var TabBarItemIOS = (_temp2 = _class = function (_React$Component) {
    babelHelpers.inherits(TabBarItemIOS, _React$Component);

    function TabBarItemIOS() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, TabBarItemIOS);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = TabBarItemIOS.__proto__ || Object.getPrototypeOf(TabBarItemIOS)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
        hasBeenSelected: false
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(TabBarItemIOS, [{
      key: "UNSAFE_componentWillMount",
      value: function UNSAFE_componentWillMount() {
        if (this.props.selected) {
          this.setState({
            hasBeenSelected: true
          });
        }
      }
    }, {
      key: "UNSAFE_componentWillReceiveProps",
      value: function UNSAFE_componentWillReceiveProps(nextProps) {
        if (this.state.hasBeenSelected || nextProps.selected) {
          this.setState({
            hasBeenSelected: true
          });
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _props = this.props,
            style = _props.style,
            children = _props.children,
            props = babelHelpers.objectWithoutProperties(_props, ["style", "children"]);

        if (this.state.hasBeenSelected) {
          var tabContents = React.createElement(
            StaticContainer,
            {
              shouldUpdate: this.props.selected,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 124
              }
            },
            children
          );
        } else {
          var tabContents = React.createElement(View, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 128
            }
          });
        }

        return React.createElement(
          RCTTabBarItem,
          babelHelpers.extends({}, props, {
            style: [styles.tab, style],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 132
            }
          }),
          tabContents
        );
      }
    }]);
    return TabBarItemIOS;
  }(React.Component), _class.propTypes = babelHelpers.extends({}, ViewPropTypes, {
    badge: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
    badgeColor: ColorPropType,
    systemIcon: PropTypes.oneOf(['bookmarks', 'contacts', 'downloads', 'favorites', 'featured', 'history', 'more', 'most-recent', 'most-viewed', 'recents', 'search', 'top-rated']),
    icon: Image.propTypes.source,
    selectedIcon: Image.propTypes.source,
    onPress: PropTypes.func,
    renderAsOriginal: PropTypes.bool,
    selected: PropTypes.bool,
    style: ViewPropTypes.style,
    title: PropTypes.string,
    isTVSelectable: PropTypes.bool
  }), _temp2);
  var styles = StyleSheet.create({
    tab: {
      position: 'absolute',
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    }
  });
  var RCTTabBarItem = requireNativeComponent('RCTTabBarItem', TabBarItemIOS);
  module.exports = TabBarItemIOS;
},304,[127,224,131,141,285,132,153,155,168],"TabBarItemIOS");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-native/Libraries/Components/TextInput/TextInput.js";

  var ColorPropType = _require2(_dependencyMap[0], 'ColorPropType');

  var DocumentSelectionState = _require2(_dependencyMap[1], 'DocumentSelectionState');

  var EventEmitter = _require2(_dependencyMap[2], 'EventEmitter');

  var NativeMethodsMixin = _require2(_dependencyMap[3], 'NativeMethodsMixin');

  var Platform = _require2(_dependencyMap[4], 'Platform');

  var React = _require2(_dependencyMap[5], 'React');

  var createReactClass = _require2(_dependencyMap[6], 'create-react-class');

  var PropTypes = _require2(_dependencyMap[7], 'prop-types');

  var ReactNative = _require2(_dependencyMap[8], 'ReactNative');

  var StyleSheet = _require2(_dependencyMap[9], 'StyleSheet');

  var Text = _require2(_dependencyMap[10], 'Text');

  var TextInputState = _require2(_dependencyMap[11], 'TextInputState');

  var TimerMixin = _require2(_dependencyMap[12], 'react-timer-mixin');

  var TouchableWithoutFeedback = _require2(_dependencyMap[13], 'TouchableWithoutFeedback');

  var UIManager = _require2(_dependencyMap[14], 'UIManager');

  var ViewPropTypes = _require2(_dependencyMap[15], 'ViewPropTypes');

  var _require = _require2(_dependencyMap[16], 'ViewContext'),
      ViewContextTypes = _require.ViewContextTypes;

  var emptyFunction = _require2(_dependencyMap[17], 'fbjs/lib/emptyFunction');

  var invariant = _require2(_dependencyMap[18], 'fbjs/lib/invariant');

  var requireNativeComponent = _require2(_dependencyMap[19], 'requireNativeComponent');

  var warning = _require2(_dependencyMap[20], 'fbjs/lib/warning');

  var onlyMultiline = {
    onTextInput: true,
    children: true
  };

  if (Platform.OS === 'android') {
    var AndroidTextInput = requireNativeComponent('AndroidTextInput', null);
  } else if (Platform.OS === 'ios') {
    var RCTMultilineTextInputView = requireNativeComponent('RCTMultilineTextInputView', null);
    var RCTSinglelineTextInputView = requireNativeComponent('RCTSinglelineTextInputView', null);
  }

  var DataDetectorTypes = ['phoneNumber', 'link', 'address', 'calendarEvent', 'none', 'all'];
  var TextInput = createReactClass({
    displayName: 'TextInput',
    statics: {
      State: TextInputState
    },
    propTypes: babelHelpers.extends({}, ViewPropTypes, {
      autoCapitalize: PropTypes.oneOf(['none', 'sentences', 'words', 'characters']),
      autoCorrect: PropTypes.bool,
      spellCheck: PropTypes.bool,
      autoFocus: PropTypes.bool,
      allowFontScaling: PropTypes.bool,
      editable: PropTypes.bool,
      keyboardType: PropTypes.oneOf(['default', 'email-address', 'numeric', 'phone-pad', 'ascii-capable', 'numbers-and-punctuation', 'url', 'number-pad', 'name-phone-pad', 'decimal-pad', 'twitter', 'web-search', 'visible-password']),
      keyboardAppearance: PropTypes.oneOf(['default', 'light', 'dark']),
      returnKeyType: PropTypes.oneOf(['done', 'go', 'next', 'search', 'send', 'none', 'previous', 'default', 'emergency-call', 'google', 'join', 'route', 'yahoo']),
      returnKeyLabel: PropTypes.string,
      maxLength: PropTypes.number,
      numberOfLines: PropTypes.number,
      disableFullscreenUI: PropTypes.bool,
      enablesReturnKeyAutomatically: PropTypes.bool,
      multiline: PropTypes.bool,
      textBreakStrategy: PropTypes.oneOf(['simple', 'highQuality', 'balanced']),
      onBlur: PropTypes.func,
      onFocus: PropTypes.func,
      onChange: PropTypes.func,
      onChangeText: PropTypes.func,
      onContentSizeChange: PropTypes.func,
      onEndEditing: PropTypes.func,
      onSelectionChange: PropTypes.func,
      onSubmitEditing: PropTypes.func,
      onKeyPress: PropTypes.func,
      onLayout: PropTypes.func,
      onScroll: PropTypes.func,
      placeholder: PropTypes.string,
      placeholderTextColor: ColorPropType,
      secureTextEntry: PropTypes.bool,
      selectionColor: ColorPropType,
      selectionState: PropTypes.instanceOf(DocumentSelectionState),
      selection: PropTypes.shape({
        start: PropTypes.number.isRequired,
        end: PropTypes.number
      }),
      value: PropTypes.string,
      defaultValue: PropTypes.string,
      clearButtonMode: PropTypes.oneOf(['never', 'while-editing', 'unless-editing', 'always']),
      clearTextOnFocus: PropTypes.bool,
      selectTextOnFocus: PropTypes.bool,
      blurOnSubmit: PropTypes.bool,
      style: Text.propTypes.style,
      underlineColorAndroid: ColorPropType,
      inlineImageLeft: PropTypes.string,
      inlineImagePadding: PropTypes.number,
      dataDetectorTypes: PropTypes.oneOfType([PropTypes.oneOf(DataDetectorTypes), PropTypes.arrayOf(PropTypes.oneOf(DataDetectorTypes))]),
      caretHidden: PropTypes.bool
    }),
    getDefaultProps: function getDefaultProps() {
      return {
        allowFontScaling: true
      };
    },
    mixins: [NativeMethodsMixin, TimerMixin],
    isFocused: function isFocused() {
      return TextInputState.currentlyFocusedField() === ReactNative.findNodeHandle(this._inputRef);
    },
    _inputRef: undefined,
    _focusSubscription: undefined,
    _lastNativeText: undefined,
    _lastNativeSelection: undefined,
    componentDidMount: function componentDidMount() {
      var _this = this;

      this._lastNativeText = this.props.value;

      if (!this.context.focusEmitter) {
        if (this.props.autoFocus) {
          this.requestAnimationFrame(this.focus);
        }

        return;
      }

      this._focusSubscription = this.context.focusEmitter.addListener('focus', function (el) {
        if (_this === el) {
          _this.requestAnimationFrame(_this.focus);
        } else if (_this.isFocused()) {
          _this.blur();
        }
      });

      if (this.props.autoFocus) {
        this.context.onFocusRequested(this);
      }
    },
    componentWillUnmount: function componentWillUnmount() {
      this._focusSubscription && this._focusSubscription.remove();

      if (this.isFocused()) {
        this.blur();
      }
    },
    getChildContext: function getChildContext() {
      return {
        isInAParentText: true
      };
    },
    childContextTypes: ViewContextTypes,
    contextTypes: babelHelpers.extends({}, ViewContextTypes, {
      onFocusRequested: PropTypes.func,
      focusEmitter: PropTypes.instanceOf(EventEmitter)
    }),
    clear: function clear() {
      this.setNativeProps({
        text: ''
      });
    },
    render: function render() {
      if (Platform.OS === 'ios') {
        return UIManager.RCTVirtualText ? this._renderIOS() : this._renderIOSLegacy();
      } else if (Platform.OS === 'android') {
        return this._renderAndroid();
      }
    },
    _getText: function _getText() {
      return typeof this.props.value === 'string' ? this.props.value : typeof this.props.defaultValue === 'string' ? this.props.defaultValue : '';
    },
    _setNativeRef: function _setNativeRef(ref) {
      this._inputRef = ref;
    },
    _renderIOSLegacy: function _renderIOSLegacy() {
      var textContainer;
      var props = babelHelpers.extends({}, this.props);
      props.style = [this.props.style];

      if (props.selection && props.selection.end == null) {
        props.selection = {
          start: props.selection.start,
          end: props.selection.start
        };
      }

      if (!props.multiline) {
        if (__DEV__) {
          for (var propKey in onlyMultiline) {
            if (props[propKey]) {
              var error = new Error('TextInput prop `' + propKey + '` is only supported with multiline.');
              warning(false, '%s', error.stack);
            }
          }
        }

        textContainer = React.createElement(RCTSinglelineTextInputView, babelHelpers.extends({
          ref: this._setNativeRef
        }, props, {
          onFocus: this._onFocus,
          onBlur: this._onBlur,
          onChange: this._onChange,
          onSelectionChange: this._onSelectionChange,
          onSelectionChangeShouldSetResponder: emptyFunction.thatReturnsTrue,
          text: this._getText(),
          __source: {
            fileName: _jsxFileName,
            lineNumber: 725
          }
        }));
      } else {
        var children = props.children;
        var childCount = 0;
        React.Children.forEach(children, function () {
          return ++childCount;
        });
        invariant(!(props.value && childCount), 'Cannot specify both value and children.');

        if (childCount >= 1) {
          children = React.createElement(
            Text,
            {
              style: props.style,
              allowFontScaling: props.allowFontScaling,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 746
              }
            },
            children
          );
        }

        if (props.inputView) {
          children = [children, props.inputView];
        }

        props.style.unshift(styles.multilineInput);
        textContainer = React.createElement(RCTMultilineTextInputView, babelHelpers.extends({
          ref: this._setNativeRef
        }, props, {
          children: children,
          onFocus: this._onFocus,
          onBlur: this._onBlur,
          onChange: this._onChange,
          onContentSizeChange: this.props.onContentSizeChange,
          onSelectionChange: this._onSelectionChange,
          onTextInput: this._onTextInput,
          onSelectionChangeShouldSetResponder: emptyFunction.thatReturnsTrue,
          text: this._getText(),
          dataDetectorTypes: this.props.dataDetectorTypes,
          onScroll: this._onScroll,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 756
          }
        }));
      }

      return React.createElement(
        TouchableWithoutFeedback,
        {
          onLayout: props.onLayout,
          onPress: this._onPress,
          rejectResponderTermination: true,
          accessible: props.accessible,
          accessibilityLabel: props.accessibilityLabel,
          accessibilityTraits: props.accessibilityTraits,
          nativeID: this.props.nativeID,
          testID: props.testID,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 775
          }
        },
        textContainer
      );
    },
    _renderIOS: function _renderIOS() {
      var props = babelHelpers.extends({}, this.props);
      props.style = [this.props.style];

      if (props.selection && props.selection.end == null) {
        props.selection = {
          start: props.selection.start,
          end: props.selection.start
        };
      }

      var RCTTextInputView = props.multiline ? RCTMultilineTextInputView : RCTSinglelineTextInputView;

      if (props.multiline) {
        props.style.unshift(styles.multilineInput);
      }

      var textContainer = React.createElement(RCTTextInputView, babelHelpers.extends({
        ref: this._setNativeRef
      }, props, {
        onFocus: this._onFocus,
        onBlur: this._onBlur,
        onChange: this._onChange,
        onContentSizeChange: this.props.onContentSizeChange,
        onSelectionChange: this._onSelectionChange,
        onTextInput: this._onTextInput,
        onSelectionChangeShouldSetResponder: emptyFunction.thatReturnsTrue,
        text: this._getText(),
        dataDetectorTypes: this.props.dataDetectorTypes,
        onScroll: this._onScroll,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 809
        }
      }));
      return React.createElement(
        TouchableWithoutFeedback,
        {
          onLayout: props.onLayout,
          onPress: this._onPress,
          rejectResponderTermination: true,
          accessible: props.accessible,
          accessibilityLabel: props.accessibilityLabel,
          accessibilityTraits: props.accessibilityTraits,
          nativeID: this.props.nativeID,
          testID: props.testID,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 826
          }
        },
        textContainer
      );
    },
    _renderAndroid: function _renderAndroid() {
      var props = babelHelpers.extends({}, this.props);
      props.style = [this.props.style];
      props.autoCapitalize = UIManager.AndroidTextInput.Constants.AutoCapitalizationType[props.autoCapitalize || 'sentences'];
      var children = this.props.children;
      var childCount = 0;
      React.Children.forEach(children, function () {
        return ++childCount;
      });
      invariant(!(this.props.value && childCount), 'Cannot specify both value and children.');

      if (childCount > 1) {
        children = React.createElement(
          Text,
          {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 858
            }
          },
          children
        );
      }

      if (props.selection && props.selection.end == null) {
        props.selection = {
          start: props.selection.start,
          end: props.selection.start
        };
      }

      var textContainer = React.createElement(AndroidTextInput, babelHelpers.extends({
        ref: this._setNativeRef
      }, props, {
        mostRecentEventCount: 0,
        onFocus: this._onFocus,
        onBlur: this._onBlur,
        onChange: this._onChange,
        onSelectionChange: this._onSelectionChange,
        onTextInput: this._onTextInput,
        text: this._getText(),
        children: children,
        disableFullscreenUI: this.props.disableFullscreenUI,
        textBreakStrategy: this.props.textBreakStrategy,
        onScroll: this._onScroll,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 869
        }
      }));
      return React.createElement(
        TouchableWithoutFeedback,
        {
          onLayout: this._onLayout,
          onPress: this._onPress,
          accessible: this.props.accessible,
          accessibilityLabel: this.props.accessibilityLabel,
          accessibilityComponentType: this.props.accessibilityComponentType,
          nativeID: this.props.nativeID,
          testID: this.props.testID,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 887
          }
        },
        textContainer
      );
    },
    _onFocus: function _onFocus(event) {
      if (this.props.onFocus) {
        this.props.onFocus(event);
      }

      if (this.props.selectionState) {
        this.props.selectionState.focus();
      }
    },
    _onPress: function _onPress(event) {
      if (this.props.editable || this.props.editable === undefined) {
        this.focus();
      }
    },
    _onChange: function _onChange(event) {
      if (this._inputRef) {
        this._inputRef.setNativeProps({
          mostRecentEventCount: event.nativeEvent.eventCount
        });
      }

      var text = event.nativeEvent.text;
      this.props.onChange && this.props.onChange(event);
      this.props.onChangeText && this.props.onChangeText(text);

      if (!this._inputRef) {
        return;
      }

      this._lastNativeText = text;
      this.forceUpdate();
    },
    _onSelectionChange: function _onSelectionChange(event) {
      this.props.onSelectionChange && this.props.onSelectionChange(event);

      if (!this._inputRef) {
        return;
      }

      this._lastNativeSelection = event.nativeEvent.selection;

      if (this.props.selection || this.props.selectionState) {
        this.forceUpdate();
      }
    },
    componentDidUpdate: function componentDidUpdate() {
      var nativeProps = {};

      if (this._lastNativeText !== this.props.value && typeof this.props.value === 'string') {
        nativeProps.text = this.props.value;
      }

      var selection = this.props.selection;

      if (this._lastNativeSelection && selection && (this._lastNativeSelection.start !== selection.start || this._lastNativeSelection.end !== selection.end)) {
        nativeProps.selection = this.props.selection;
      }

      if (Object.keys(nativeProps).length > 0 && this._inputRef) {
        this._inputRef.setNativeProps(nativeProps);
      }

      if (this.props.selectionState && selection) {
        this.props.selectionState.update(selection.start, selection.end);
      }
    },
    _onBlur: function _onBlur(event) {
      this.blur();

      if (this.props.onBlur) {
        this.props.onBlur(event);
      }

      if (this.props.selectionState) {
        this.props.selectionState.blur();
      }
    },
    _onTextInput: function _onTextInput(event) {
      this.props.onTextInput && this.props.onTextInput(event);
    },
    _onScroll: function _onScroll(event) {
      this.props.onScroll && this.props.onScroll(event);
    }
  });
  var styles = StyleSheet.create({
    multilineInput: {
      paddingTop: 5
    }
  });
  module.exports = TextInput;
},305,[127,306,67,128,52,131,166,141,21,132,186,112,238,239,110,155,165,57,13,168,56],"TextInput");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var mixInEventEmitter = _require(_dependencyMap[0], 'mixInEventEmitter');

  var DocumentSelectionState = function () {
    function DocumentSelectionState(anchor, focus) {
      babelHelpers.classCallCheck(this, DocumentSelectionState);
      this._anchorOffset = anchor;
      this._focusOffset = focus;
      this._hasFocus = false;
    }

    babelHelpers.createClass(DocumentSelectionState, [{
      key: "update",
      value: function update(anchor, focus) {
        if (this._anchorOffset !== anchor || this._focusOffset !== focus) {
          this._anchorOffset = anchor;
          this._focusOffset = focus;
          this.emit('update');
        }
      }
    }, {
      key: "constrainLength",
      value: function constrainLength(maxLength) {
        this.update(Math.min(this._anchorOffset, maxLength), Math.min(this._focusOffset, maxLength));
      }
    }, {
      key: "focus",
      value: function focus() {
        if (!this._hasFocus) {
          this._hasFocus = true;
          this.emit('focus');
        }
      }
    }, {
      key: "blur",
      value: function blur() {
        if (this._hasFocus) {
          this._hasFocus = false;
          this.emit('blur');
        }
      }
    }, {
      key: "hasFocus",
      value: function hasFocus() {
        return this._hasFocus;
      }
    }, {
      key: "isCollapsed",
      value: function isCollapsed() {
        return this._anchorOffset === this._focusOffset;
      }
    }, {
      key: "isBackward",
      value: function isBackward() {
        return this._anchorOffset > this._focusOffset;
      }
    }, {
      key: "getAnchorOffset",
      value: function getAnchorOffset() {
        return this._hasFocus ? this._anchorOffset : null;
      }
    }, {
      key: "getFocusOffset",
      value: function getFocusOffset() {
        return this._hasFocus ? this._focusOffset : null;
      }
    }, {
      key: "getStartOffset",
      value: function getStartOffset() {
        return this._hasFocus ? Math.min(this._anchorOffset, this._focusOffset) : null;
      }
    }, {
      key: "getEndOffset",
      value: function getEndOffset() {
        return this._hasFocus ? Math.max(this._anchorOffset, this._focusOffset) : null;
      }
    }, {
      key: "overlaps",
      value: function overlaps(start, end) {
        return this.hasFocus() && this.getStartOffset() <= end && start <= this.getEndOffset();
      }
    }]);
    return DocumentSelectionState;
  }();

  mixInEventEmitter(DocumentSelectionState, {
    'blur': true,
    'focus': true,
    'update': true
  });
  module.exports = DocumentSelectionState;
},306,[307],"DocumentSelectionState");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var EventEmitter = _require(_dependencyMap[0], 'EventEmitter');

  var EventEmitterWithHolding = _require(_dependencyMap[1], 'EventEmitterWithHolding');

  var EventHolder = _require(_dependencyMap[2], 'EventHolder');

  var invariant = _require(_dependencyMap[3], 'fbjs/lib/invariant');

  var keyOf = _require(_dependencyMap[4], 'fbjs/lib/keyOf');

  var TYPES_KEY = keyOf({
    __types: true
  });

  function mixInEventEmitter(cls, types) {
    invariant(types, 'Must supply set of valid event types');
    var target = cls.prototype || cls;
    invariant(!target.__eventEmitter, 'An active emitter is already mixed in');
    var ctor = cls.constructor;

    if (ctor) {
      invariant(ctor === Object || ctor === Function, 'Mix EventEmitter into a class, not an instance');
    }

    if (target.hasOwnProperty(TYPES_KEY)) {
      babelHelpers.extends(target.__types, types);
    } else if (target.__types) {
      target.__types = babelHelpers.extends({}, target.__types, types);
    } else {
      target.__types = types;
    }

    babelHelpers.extends(target, EventEmitterMixin);
  }

  var EventEmitterMixin = {
    emit: function emit(eventType, a, b, c, d, e, _) {
      return this.__getEventEmitter().emit(eventType, a, b, c, d, e, _);
    },
    emitAndHold: function emitAndHold(eventType, a, b, c, d, e, _) {
      return this.__getEventEmitter().emitAndHold(eventType, a, b, c, d, e, _);
    },
    addListener: function addListener(eventType, listener, context) {
      return this.__getEventEmitter().addListener(eventType, listener, context);
    },
    once: function once(eventType, listener, context) {
      return this.__getEventEmitter().once(eventType, listener, context);
    },
    addRetroactiveListener: function addRetroactiveListener(eventType, listener, context) {
      return this.__getEventEmitter().addRetroactiveListener(eventType, listener, context);
    },
    addListenerMap: function addListenerMap(listenerMap, context) {
      return this.__getEventEmitter().addListenerMap(listenerMap, context);
    },
    addRetroactiveListenerMap: function addRetroactiveListenerMap(listenerMap, context) {
      return this.__getEventEmitter().addListenerMap(listenerMap, context);
    },
    removeAllListeners: function removeAllListeners() {
      this.__getEventEmitter().removeAllListeners();
    },
    removeCurrentListener: function removeCurrentListener() {
      this.__getEventEmitter().removeCurrentListener();
    },
    releaseHeldEventType: function releaseHeldEventType(eventType) {
      this.__getEventEmitter().releaseHeldEventType(eventType);
    },
    __getEventEmitter: function __getEventEmitter() {
      if (!this.__eventEmitter) {
        var emitter = new EventEmitter();

        if (__DEV__) {
          var EventValidator = _require(_dependencyMap[5], 'EventValidator');

          emitter = EventValidator.addValidation(emitter, this.__types);
        }

        var holder = new EventHolder();
        this.__eventEmitter = new EventEmitterWithHolding(emitter, holder);
      }

      return this.__eventEmitter;
    }
  };
  module.exports = mixInEventEmitter;
},307,[67,308,309,13,310,311],"mixInEventEmitter");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var EventEmitterWithHolding = function () {
    function EventEmitterWithHolding(emitter, holder) {
      babelHelpers.classCallCheck(this, EventEmitterWithHolding);
      this._emitter = emitter;
      this._eventHolder = holder;
      this._currentEventToken = null;
      this._emittingHeldEvents = false;
    }

    babelHelpers.createClass(EventEmitterWithHolding, [{
      key: "addListener",
      value: function addListener(eventType, listener, context) {
        return this._emitter.addListener(eventType, listener, context);
      }
    }, {
      key: "once",
      value: function once(eventType, listener, context) {
        return this._emitter.once(eventType, listener, context);
      }
    }, {
      key: "addRetroactiveListener",
      value: function addRetroactiveListener(eventType, listener, context) {
        var subscription = this._emitter.addListener(eventType, listener, context);

        this._emittingHeldEvents = true;

        this._eventHolder.emitToListener(eventType, listener, context);

        this._emittingHeldEvents = false;
        return subscription;
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners(eventType) {
        this._emitter.removeAllListeners(eventType);
      }
    }, {
      key: "removeCurrentListener",
      value: function removeCurrentListener() {
        this._emitter.removeCurrentListener();
      }
    }, {
      key: "listeners",
      value: function listeners(eventType) {
        return this._emitter.listeners(eventType);
      }
    }, {
      key: "emit",
      value: function emit(eventType) {
        var _emitter;

        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        (_emitter = this._emitter).emit.apply(_emitter, [eventType].concat(babelHelpers.toConsumableArray(args)));
      }
    }, {
      key: "emitAndHold",
      value: function emitAndHold(eventType) {
        var _eventHolder, _emitter2;

        for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          args[_key2 - 1] = arguments[_key2];
        }

        this._currentEventToken = (_eventHolder = this._eventHolder).holdEvent.apply(_eventHolder, [eventType].concat(babelHelpers.toConsumableArray(args)));

        (_emitter2 = this._emitter).emit.apply(_emitter2, [eventType].concat(babelHelpers.toConsumableArray(args)));

        this._currentEventToken = null;
      }
    }, {
      key: "releaseCurrentEvent",
      value: function releaseCurrentEvent() {
        if (this._currentEventToken) {
          this._eventHolder.releaseEvent(this._currentEventToken);
        } else if (this._emittingHeldEvents) {
          this._eventHolder.releaseCurrentEvent();
        }
      }
    }, {
      key: "releaseHeldEventType",
      value: function releaseHeldEventType(eventType) {
        this._eventHolder.releaseEventType(eventType);
      }
    }]);
    return EventEmitterWithHolding;
  }();

  module.exports = EventEmitterWithHolding;
},308,[],"EventEmitterWithHolding");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = _require(_dependencyMap[0], 'fbjs/lib/invariant');

  var EventHolder = function () {
    function EventHolder() {
      babelHelpers.classCallCheck(this, EventHolder);
      this._heldEvents = {};
      this._currentEventKey = null;
    }

    babelHelpers.createClass(EventHolder, [{
      key: "holdEvent",
      value: function holdEvent(eventType) {
        this._heldEvents[eventType] = this._heldEvents[eventType] || [];
        var eventsOfType = this._heldEvents[eventType];
        var key = {
          eventType: eventType,
          index: eventsOfType.length
        };

        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        eventsOfType.push(args);
        return key;
      }
    }, {
      key: "emitToListener",
      value: function emitToListener(eventType, listener, context) {
        var _this = this;

        var eventsOfType = this._heldEvents[eventType];

        if (!eventsOfType) {
          return;
        }

        var origEventKey = this._currentEventKey;
        eventsOfType.forEach(function (eventHeld, index) {
          if (!eventHeld) {
            return;
          }

          _this._currentEventKey = {
            eventType: eventType,
            index: index
          };
          listener.apply(context, eventHeld);
        });
        this._currentEventKey = origEventKey;
      }
    }, {
      key: "releaseCurrentEvent",
      value: function releaseCurrentEvent() {
        invariant(this._currentEventKey !== null, 'Not in an emitting cycle; there is no current event');
        this._currentEventKey && this.releaseEvent(this._currentEventKey);
      }
    }, {
      key: "releaseEvent",
      value: function releaseEvent(token) {
        delete this._heldEvents[token.eventType][token.index];
      }
    }, {
      key: "releaseEventType",
      value: function releaseEventType(type) {
        this._heldEvents[type] = [];
      }
    }]);
    return EventHolder;
  }();

  module.exports = EventHolder;
},309,[13],"EventHolder");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var keyOf = function keyOf(oneKeyObj) {
    var key;

    for (key in oneKeyObj) {
      if (!oneKeyObj.hasOwnProperty(key)) {
        continue;
      }

      return key;
    }

    return null;
  };

  module.exports = keyOf;
},310,[],"node_modules/fbjs/lib/keyOf.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var EventValidator = {
    addValidation: function addValidation(emitter, types) {
      var eventTypes = Object.keys(types);
      var emitterWithValidation = Object.create(emitter);
      babelHelpers.extends(emitterWithValidation, {
        emit: function emit(type, a, b, c, d, e, _) {
          assertAllowsEventType(type, eventTypes);
          return emitter.emit.call(this, type, a, b, c, d, e, _);
        }
      });
      return emitterWithValidation;
    }
  };

  function assertAllowsEventType(type, allowedTypes) {
    if (allowedTypes.indexOf(type) === -1) {
      throw new TypeError(errorMessageFor(type, allowedTypes));
    }
  }

  function errorMessageFor(type, allowedTypes) {
    var message = 'Unknown event type "' + type + '". ';

    if (__DEV__) {
      message += recommendationFor(type, allowedTypes);
    }

    message += 'Known event types: ' + allowedTypes.join(', ') + '.';
    return message;
  }

  if (__DEV__) {
    var recommendationFor = function recommendationFor(type, allowedTypes) {
      var closestTypeRecommendation = closestTypeFor(type, allowedTypes);

      if (isCloseEnough(closestTypeRecommendation, type)) {
        return 'Did you mean "' + closestTypeRecommendation.type + '"? ';
      } else {
        return '';
      }
    };

    var closestTypeFor = function closestTypeFor(type, allowedTypes) {
      var typeRecommendations = allowedTypes.map(typeRecommendationFor.bind(this, type));
      return typeRecommendations.sort(recommendationSort)[0];
    };

    var typeRecommendationFor = function typeRecommendationFor(type, recommendedType) {
      return {
        type: recommendedType,
        distance: damerauLevenshteinDistance(type, recommendedType)
      };
    };

    var recommendationSort = function recommendationSort(recommendationA, recommendationB) {
      if (recommendationA.distance < recommendationB.distance) {
        return -1;
      } else if (recommendationA.distance > recommendationB.distance) {
        return 1;
      } else {
        return 0;
      }
    };

    var isCloseEnough = function isCloseEnough(closestType, actualType) {
      return closestType.distance / actualType.length < 0.334;
    };

    var damerauLevenshteinDistance = function damerauLevenshteinDistance(a, b) {
      var i = void 0,
          j = void 0;
      var d = [];

      for (i = 0; i <= a.length; i++) {
        d[i] = [i];
      }

      for (j = 1; j <= b.length; j++) {
        d[0][j] = j;
      }

      for (i = 1; i <= a.length; i++) {
        for (j = 1; j <= b.length; j++) {
          var cost = a.charAt(i - 1) === b.charAt(j - 1) ? 0 : 1;
          d[i][j] = Math.min(d[i - 1][j] + 1, d[i][j - 1] + 1, d[i - 1][j - 1] + cost);

          if (i > 1 && j > 1 && a.charAt(i - 1) === b.charAt(j - 2) && a.charAt(i - 2) === b.charAt(j - 1)) {
            d[i][j] = Math.min(d[i][j], d[i - 2][j - 2] + cost);
          }
        }
      }

      return d[a.length][b.length];
    };
  }

  module.exports = EventValidator;
},311,[],"EventValidator");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var warning = _require(_dependencyMap[0], 'fbjs/lib/warning');

  var ToastAndroid = {
    show: function show(message, duration) {
      warning(false, 'ToastAndroid is not supported on this platform.');
    }
  };
  module.exports = ToastAndroid;
},312,[56],"ToastAndroid");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  module.exports = _require(_dependencyMap[0], 'UnimplementedView');
},313,[130],"ToolbarAndroid");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  module.exports = _require(_dependencyMap[0], 'UnimplementedView');
},314,[130],"ViewPagerAndroid");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-native/Libraries/Components/WebView/WebView.ios.js",
      _class,
      _temp2;

  var ActivityIndicator = _require(_dependencyMap[0], 'ActivityIndicator');

  var EdgeInsetsPropType = _require(_dependencyMap[1], 'EdgeInsetsPropType');

  var React = _require(_dependencyMap[2], 'React');

  var PropTypes = _require(_dependencyMap[3], 'prop-types');

  var ReactNative = _require(_dependencyMap[4], 'ReactNative');

  var StyleSheet = _require(_dependencyMap[5], 'StyleSheet');

  var Text = _require(_dependencyMap[6], 'Text');

  var UIManager = _require(_dependencyMap[7], 'UIManager');

  var View = _require(_dependencyMap[8], 'View');

  var ViewPropTypes = _require(_dependencyMap[9], 'ViewPropTypes');

  var ScrollView = _require(_dependencyMap[10], 'ScrollView');

  var deprecatedPropType = _require(_dependencyMap[11], 'deprecatedPropType');

  var invariant = _require(_dependencyMap[12], 'fbjs/lib/invariant');

  var keyMirror = _require(_dependencyMap[13], 'fbjs/lib/keyMirror');

  var processDecelerationRate = _require(_dependencyMap[14], 'processDecelerationRate');

  var requireNativeComponent = _require(_dependencyMap[15], 'requireNativeComponent');

  var resolveAssetSource = _require(_dependencyMap[16], 'resolveAssetSource');

  var RCTWebViewManager = _require(_dependencyMap[17], 'NativeModules').WebViewManager;

  var BGWASH = 'rgba(255,255,255,0.8)';
  var RCT_WEBVIEW_REF = 'webview';
  var WebViewState = keyMirror({
    IDLE: null,
    LOADING: null,
    ERROR: null
  });
  var NavigationType = keyMirror({
    click: true,
    formsubmit: true,
    backforward: true,
    reload: true,
    formresubmit: true,
    other: true
  });
  var JSNavigationScheme = 'react-js-navigation';
  var DataDetectorTypes = ['phoneNumber', 'link', 'address', 'calendarEvent', 'none', 'all'];

  var defaultRenderLoading = function defaultRenderLoading() {
    return React.createElement(
      View,
      {
        style: styles.loadingView,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 73
        }
      },
      React.createElement(ActivityIndicator, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 74
        }
      })
    );
  };

  var defaultRenderError = function defaultRenderError(errorDomain, errorCode, errorDesc) {
    return React.createElement(
      View,
      {
        style: styles.errorContainer,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 78
        }
      },
      React.createElement(
        Text,
        {
          style: styles.errorTextTitle,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 79
          }
        },
        "Error loading page"
      ),
      React.createElement(
        Text,
        {
          style: styles.errorText,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 82
          }
        },
        'Domain: ' + errorDomain
      ),
      React.createElement(
        Text,
        {
          style: styles.errorText,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 85
          }
        },
        'Error Code: ' + errorCode
      ),
      React.createElement(
        Text,
        {
          style: styles.errorText,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 88
          }
        },
        'Description: ' + errorDesc
      )
    );
  };

  var WebView = (_temp2 = _class = function (_React$Component) {
    babelHelpers.inherits(WebView, _React$Component);

    function WebView() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, WebView);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = WebView.__proto__ || Object.getPrototypeOf(WebView)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
        viewState: WebViewState.IDLE,
        lastErrorEvent: null,
        startInLoadingState: true
      }, _this.goForward = function () {
        UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), UIManager.RCTWebView.Commands.goForward, null);
      }, _this.goBack = function () {
        UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), UIManager.RCTWebView.Commands.goBack, null);
      }, _this.reload = function () {
        _this.setState({
          viewState: WebViewState.LOADING
        });

        UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), UIManager.RCTWebView.Commands.reload, null);
      }, _this.stopLoading = function () {
        UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), UIManager.RCTWebView.Commands.stopLoading, null);
      }, _this.postMessage = function (data) {
        UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), UIManager.RCTWebView.Commands.postMessage, [String(data)]);
      }, _this.injectJavaScript = function (data) {
        UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), UIManager.RCTWebView.Commands.injectJavaScript, [data]);
      }, _this._updateNavigationState = function (event) {
        if (_this.props.onNavigationStateChange) {
          _this.props.onNavigationStateChange(event.nativeEvent);
        }
      }, _this.getWebViewHandle = function () {
        return ReactNative.findNodeHandle(_this.refs[RCT_WEBVIEW_REF]);
      }, _this._onLoadingStart = function (event) {
        var onLoadStart = _this.props.onLoadStart;
        onLoadStart && onLoadStart(event);

        _this._updateNavigationState(event);
      }, _this._onLoadingError = function (event) {
        event.persist();
        var _this$props = _this.props,
            onError = _this$props.onError,
            onLoadEnd = _this$props.onLoadEnd;
        onError && onError(event);
        onLoadEnd && onLoadEnd(event);
        console.warn('Encountered an error loading page', event.nativeEvent);

        _this.setState({
          lastErrorEvent: event.nativeEvent,
          viewState: WebViewState.ERROR
        });
      }, _this._onLoadingFinish = function (event) {
        var _this$props2 = _this.props,
            onLoad = _this$props2.onLoad,
            onLoadEnd = _this$props2.onLoadEnd;
        onLoad && onLoad(event);
        onLoadEnd && onLoadEnd(event);

        _this.setState({
          viewState: WebViewState.IDLE
        });

        _this._updateNavigationState(event);
      }, _this._onMessage = function (event) {
        var onMessage = _this.props.onMessage;
        onMessage && onMessage(event);
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(WebView, [{
      key: "UNSAFE_componentWillMount",
      value: function UNSAFE_componentWillMount() {
        if (this.props.startInLoadingState) {
          this.setState({
            viewState: WebViewState.LOADING
          });
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var otherView = null;

        if (this.state.viewState === WebViewState.LOADING) {
          otherView = (this.props.renderLoading || defaultRenderLoading)();
        } else if (this.state.viewState === WebViewState.ERROR) {
          var errorEvent = this.state.lastErrorEvent;
          invariant(errorEvent != null, 'lastErrorEvent expected to be non-null');
          otherView = (this.props.renderError || defaultRenderError)(errorEvent.domain, errorEvent.code, errorEvent.description);
        } else if (this.state.viewState !== WebViewState.IDLE) {
          console.error('RCTWebView invalid state encountered: ' + this.state.loading);
        }

        var webViewStyles = [styles.container, styles.webView, this.props.style];

        if (this.state.viewState === WebViewState.LOADING || this.state.viewState === WebViewState.ERROR) {
          webViewStyles.push(styles.hidden);
        }

        var nativeConfig = this.props.nativeConfig || {};
        var viewManager = nativeConfig.viewManager || RCTWebViewManager;

        var onShouldStartLoadWithRequest = this.props.onShouldStartLoadWithRequest && function (event) {
          var shouldStart = _this2.props.onShouldStartLoadWithRequest && _this2.props.onShouldStartLoadWithRequest(event.nativeEvent);

          viewManager.startLoadWithResult(!!shouldStart, event.nativeEvent.lockIdentifier);
        };

        var decelerationRate = processDecelerationRate(this.props.decelerationRate);
        var source = this.props.source || {};

        if (this.props.html) {
          source.html = this.props.html;
        } else if (this.props.url) {
          source.uri = this.props.url;
        }

        var messagingEnabled = typeof this.props.onMessage === 'function';
        var NativeWebView = nativeConfig.component || RCTWebView;
        var webView = React.createElement(NativeWebView, babelHelpers.extends({
          ref: RCT_WEBVIEW_REF,
          key: "webViewKey",
          style: webViewStyles,
          source: resolveAssetSource(source),
          injectedJavaScript: this.props.injectedJavaScript,
          bounces: this.props.bounces,
          scrollEnabled: this.props.scrollEnabled,
          decelerationRate: decelerationRate,
          contentInset: this.props.contentInset,
          automaticallyAdjustContentInsets: this.props.automaticallyAdjustContentInsets,
          onLoadingStart: this._onLoadingStart,
          onLoadingFinish: this._onLoadingFinish,
          onLoadingError: this._onLoadingError,
          messagingEnabled: messagingEnabled,
          onMessage: this._onMessage,
          onShouldStartLoadWithRequest: onShouldStartLoadWithRequest,
          scalesPageToFit: this.props.scalesPageToFit,
          allowsInlineMediaPlayback: this.props.allowsInlineMediaPlayback,
          mediaPlaybackRequiresUserAction: this.props.mediaPlaybackRequiresUserAction,
          dataDetectorTypes: this.props.dataDetectorTypes
        }, nativeConfig.props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 472
          }
        }));
        return React.createElement(
          View,
          {
            style: styles.container,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 497
            }
          },
          webView,
          otherView
        );
      }
    }], [{
      key: "extraNativeComponentConfig",
      get: function get() {
        return {
          nativeOnly: {
            onLoadingStart: true,
            onLoadingError: true,
            onLoadingFinish: true,
            onMessage: true,
            messagingEnabled: PropTypes.bool
          }
        };
      }
    }]);
    return WebView;
  }(React.Component), _class.JSNavigationScheme = JSNavigationScheme, _class.NavigationType = NavigationType, _class.propTypes = babelHelpers.extends({}, ViewPropTypes, {
    html: deprecatedPropType(PropTypes.string, 'Use the `source` prop instead.'),
    url: deprecatedPropType(PropTypes.string, 'Use the `source` prop instead.'),
    source: PropTypes.oneOfType([PropTypes.shape({
      uri: PropTypes.string,
      method: PropTypes.string,
      headers: PropTypes.object,
      body: PropTypes.string
    }), PropTypes.shape({
      html: PropTypes.string,
      baseUrl: PropTypes.string
    }), PropTypes.number]),
    renderError: PropTypes.func,
    renderLoading: PropTypes.func,
    onLoad: PropTypes.func,
    onLoadEnd: PropTypes.func,
    onLoadStart: PropTypes.func,
    onError: PropTypes.func,
    bounces: PropTypes.bool,
    decelerationRate: ScrollView.propTypes.decelerationRate,
    scrollEnabled: PropTypes.bool,
    automaticallyAdjustContentInsets: PropTypes.bool,
    contentInset: EdgeInsetsPropType,
    onNavigationStateChange: PropTypes.func,
    onMessage: PropTypes.func,
    startInLoadingState: PropTypes.bool,
    style: ViewPropTypes.style,
    dataDetectorTypes: PropTypes.oneOfType([PropTypes.oneOf(DataDetectorTypes), PropTypes.arrayOf(PropTypes.oneOf(DataDetectorTypes))]),
    javaScriptEnabled: PropTypes.bool,
    thirdPartyCookiesEnabled: PropTypes.bool,
    domStorageEnabled: PropTypes.bool,
    injectedJavaScript: PropTypes.string,
    userAgent: PropTypes.string,
    scalesPageToFit: PropTypes.bool,
    onShouldStartLoadWithRequest: PropTypes.func,
    allowsInlineMediaPlayback: PropTypes.bool,
    mediaPlaybackRequiresUserAction: PropTypes.bool,
    injectJavaScript: PropTypes.func,
    mixedContentMode: PropTypes.oneOf(['never', 'always', 'compatibility']),
    nativeConfig: PropTypes.shape({
      component: PropTypes.any,
      props: PropTypes.object,
      viewManager: PropTypes.object
    })
  }), _class.defaultProps = {
    scalesPageToFit: true
  }, _temp2);
  var RCTWebView = requireNativeComponent('RCTWebView', WebView, WebView.extraNativeComponentConfig);
  var styles = StyleSheet.create({
    container: {
      flex: 1
    },
    errorContainer: {
      flex: 1,
      justifyContent: 'center',
      alignItems: 'center',
      backgroundColor: BGWASH
    },
    errorText: {
      fontSize: 14,
      textAlign: 'center',
      marginBottom: 2
    },
    errorTextTitle: {
      fontSize: 15,
      fontWeight: '500',
      marginBottom: 10
    },
    hidden: {
      height: 0,
      flex: 0
    },
    loadingView: {
      backgroundColor: BGWASH,
      flex: 1,
      justifyContent: 'center',
      alignItems: 'center',
      height: 100
    },
    webView: {
      backgroundColor: '#ffffff'
    }
  });
  module.exports = WebView;
},315,[126,156,131,141,21,132,186,110,153,155,226,146,13,139,237,168,174,15],"WebView");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var RCTActionSheetManager = _require(_dependencyMap[0], 'NativeModules').ActionSheetManager;

  var invariant = _require(_dependencyMap[1], 'fbjs/lib/invariant');

  var processColor = _require(_dependencyMap[2], 'processColor');

  var ActionSheetIOS = {
    showActionSheetWithOptions: function showActionSheetWithOptions(options, callback) {
      invariant(typeof options === 'object' && options !== null, 'Options must be a valid object');
      invariant(typeof callback === 'function', 'Must provide a valid callback');
      RCTActionSheetManager.showActionSheetWithOptions(babelHelpers.extends({}, options, {
        tintColor: processColor(options.tintColor)
      }), callback);
    },
    showShareActionSheetWithOptions: function showShareActionSheetWithOptions(options, failureCallback, successCallback) {
      invariant(typeof options === 'object' && options !== null, 'Options must be a valid object');
      invariant(typeof failureCallback === 'function', 'Must provide a valid failureCallback');
      invariant(typeof successCallback === 'function', 'Must provide a valid successCallback');
      RCTActionSheetManager.showShareActionSheetWithOptions(babelHelpers.extends({}, options, {
        tintColor: processColor(options.tintColor)
      }), failureCallback, successCallback);
    }
  };
  module.exports = ActionSheetIOS;
},316,[15,13,100],"ActionSheetIOS");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var BatchedBridge = _require(_dependencyMap[0], 'BatchedBridge');

  var BugReporting = _require(_dependencyMap[1], 'BugReporting');

  var NativeModules = _require(_dependencyMap[2], 'NativeModules');

  var ReactNative = _require(_dependencyMap[3], 'ReactNative');

  var SceneTracker = _require(_dependencyMap[4], 'SceneTracker');

  var infoLog = _require(_dependencyMap[5], 'infoLog');

  var invariant = _require(_dependencyMap[6], 'fbjs/lib/invariant');

  var renderApplication = _require(_dependencyMap[7], 'renderApplication');

  var runnables = {};
  var runCount = 1;
  var sections = {};
  var tasks = new Map();

  var componentProviderInstrumentationHook = function componentProviderInstrumentationHook(component) {
    return component();
  };

  var wrapperComponentProvider = void 0;
  var AppRegistry = {
    setWrapperComponentProvider: function setWrapperComponentProvider(provider) {
      wrapperComponentProvider = provider;
    },
    registerConfig: function registerConfig(config) {
      config.forEach(function (appConfig) {
        if (appConfig.run) {
          AppRegistry.registerRunnable(appConfig.appKey, appConfig.run);
        } else {
          invariant(appConfig.component != null, 'AppRegistry.registerConfig(...): Every config is expected to set ' + 'either `run` or `component`, but `%s` has neither.', appConfig.appKey);
          AppRegistry.registerComponent(appConfig.appKey, appConfig.component, appConfig.section);
        }
      });
    },
    registerComponent: function registerComponent(appKey, componentProvider, section) {
      runnables[appKey] = {
        componentProvider: componentProvider,
        run: function run(appParameters) {
          return renderApplication(componentProviderInstrumentationHook(componentProvider), appParameters.initialProps, appParameters.rootTag, wrapperComponentProvider && wrapperComponentProvider(appParameters));
        }
      };

      if (section) {
        sections[appKey] = runnables[appKey];
      }

      return appKey;
    },
    registerRunnable: function registerRunnable(appKey, run) {
      runnables[appKey] = {
        run: run
      };
      return appKey;
    },
    registerSection: function registerSection(appKey, component) {
      AppRegistry.registerComponent(appKey, component, true);
    },
    getAppKeys: function getAppKeys() {
      return Object.keys(runnables);
    },
    getSectionKeys: function getSectionKeys() {
      return Object.keys(sections);
    },
    getSections: function getSections() {
      return babelHelpers.extends({}, sections);
    },
    getRunnable: function getRunnable(appKey) {
      return runnables[appKey];
    },
    getRegistry: function getRegistry() {
      return {
        sections: AppRegistry.getSectionKeys(),
        runnables: babelHelpers.extends({}, runnables)
      };
    },
    setComponentProviderInstrumentationHook: function setComponentProviderInstrumentationHook(hook) {
      componentProviderInstrumentationHook = hook;
    },
    runApplication: function runApplication(appKey, appParameters) {
      var msg = 'Running application "' + appKey + '" with appParams: ' + JSON.stringify(appParameters) + '. ' + '__DEV__ === ' + String(__DEV__) + ', development-level warning are ' + (__DEV__ ? 'ON' : 'OFF') + ', performance optimizations are ' + (__DEV__ ? 'OFF' : 'ON');
      infoLog(msg);
      BugReporting.addSource('AppRegistry.runApplication' + runCount++, function () {
        return msg;
      });
      invariant(runnables[appKey] && runnables[appKey].run, 'Application ' + appKey + ' has not been registered.\n\n' + "Hint: This error often happens when you're running the packager " + '(local dev server) from a wrong folder. For example you have ' + 'multiple apps and the packager is still running for the app you ' + 'were working on before.\nIf this is the case, simply kill the old ' + 'packager instance (e.g. close the packager terminal window) ' + 'and start the packager in the correct app folder (e.g. cd into app ' + "folder and run 'npm start').\n\n" + 'This error can also happen due to a require() error during ' + 'initialization or failure to call AppRegistry.registerComponent.\n\n');
      SceneTracker.setActiveScene({
        name: appKey
      });
      runnables[appKey].run(appParameters);
    },
    unmountApplicationComponentAtRootTag: function unmountApplicationComponentAtRootTag(rootTag) {
      ReactNative.unmountComponentAtNodeAndRemoveContainer(rootTag);
    },
    registerHeadlessTask: function registerHeadlessTask(taskKey, task) {
      if (tasks.has(taskKey)) {
        console.warn("registerHeadlessTask called multiple times for same key '" + taskKey + "'");
      }

      tasks.set(taskKey, task);
    },
    startHeadlessTask: function startHeadlessTask(taskId, taskKey, data) {
      var taskProvider = tasks.get(taskKey);

      if (!taskProvider) {
        throw new Error("No task registered for key " + taskKey);
      }

      taskProvider()(data).then(function () {
        return NativeModules.HeadlessJsTaskSupport.notifyTaskFinished(taskId);
      }).catch(function (reason) {
        console.error(reason);
        NativeModules.HeadlessJsTaskSupport.notifyTaskFinished(taskId);
      });
    }
  };
  BatchedBridge.registerCallableModule('AppRegistry', AppRegistry);
  module.exports = AppRegistry;
},317,[16,318,15,21,320,93,13,321],"AppRegistry");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _class, _temp;

  var RCTDeviceEventEmitter = _require(_dependencyMap[0], 'RCTDeviceEventEmitter');

  var Map = _require(_dependencyMap[1], 'Map');

  var infoLog = _require(_dependencyMap[2], 'infoLog');

  function defaultExtras() {
    BugReporting.addFileSource('react_hierarchy.txt', function () {
      return _require(_dependencyMap[3], 'dumpReactTree')();
    });
  }

  var BugReporting = (_temp = _class = function () {
    function BugReporting() {
      babelHelpers.classCallCheck(this, BugReporting);
    }

    babelHelpers.createClass(BugReporting, null, [{
      key: "_maybeInit",
      value: function _maybeInit() {
        if (!BugReporting._subscription) {
          BugReporting._subscription = RCTDeviceEventEmitter.addListener('collectBugExtraData', BugReporting.collectExtraData, null);
          defaultExtras();
        }

        if (!BugReporting._redboxSubscription) {
          BugReporting._redboxSubscription = RCTDeviceEventEmitter.addListener('collectRedBoxExtraData', BugReporting.collectExtraData, null);
        }
      }
    }, {
      key: "addSource",
      value: function addSource(key, callback) {
        return this._addSource(key, callback, BugReporting._extraSources);
      }
    }, {
      key: "addFileSource",
      value: function addFileSource(key, callback) {
        return this._addSource(key, callback, BugReporting._fileSources);
      }
    }, {
      key: "_addSource",
      value: function _addSource(key, callback, source) {
        BugReporting._maybeInit();

        if (source.has(key)) {
          console.warn("BugReporting.add* called multiple times for same key '" + key + "'");
        }

        source.set(key, callback);
        return {
          remove: function remove() {
            source.delete(key);
          }
        };
      }
    }, {
      key: "collectExtraData",
      value: function collectExtraData() {
        var extraData = {};

        for (var _iterator = BugReporting._extraSources, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
          var _ref3;

          if (_isArray) {
            if (_i >= _iterator.length) break;
            _ref3 = _iterator[_i++];
          } else {
            _i = _iterator.next();
            if (_i.done) break;
            _ref3 = _i.value;
          }

          var _ref = _ref3;

          var _ref2 = babelHelpers.slicedToArray(_ref, 2);

          var _key = _ref2[0];
          var callback = _ref2[1];
          extraData[_key] = callback();
        }

        var fileData = {};

        for (var _iterator2 = BugReporting._fileSources, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
          var _ref6;

          if (_isArray2) {
            if (_i2 >= _iterator2.length) break;
            _ref6 = _iterator2[_i2++];
          } else {
            _i2 = _iterator2.next();
            if (_i2.done) break;
            _ref6 = _i2.value;
          }

          var _ref4 = _ref6;

          var _ref5 = babelHelpers.slicedToArray(_ref4, 2);

          var _key2 = _ref5[0];
          var _callback = _ref5[1];
          fileData[_key2] = _callback();
        }

        infoLog('BugReporting extraData:', extraData);

        var BugReportingNativeModule = _require(_dependencyMap[4], 'NativeModules').BugReporting;

        BugReportingNativeModule && BugReportingNativeModule.setExtraData && BugReportingNativeModule.setExtraData(extraData, fileData);

        var RedBoxNativeModule = _require(_dependencyMap[4], 'NativeModules').RedBox;

        RedBoxNativeModule && RedBoxNativeModule.setExtraData && RedBoxNativeModule.setExtraData(extraData, 'From BugReporting.js');
        return {
          extras: extraData,
          files: fileData
        };
      }
    }]);
    return BugReporting;
  }(), _class._extraSources = new Map(), _class._fileSources = new Map(), _class._subscription = null, _class._redboxSubscription = null, _temp);
  module.exports = BugReporting;
},318,[70,26,93,319,15],"BugReporting");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  function dumpReactTree() {
    try {
      return getReactTree();
    } catch (e) {
      return 'Failed to dump react tree: ' + e;
    }
  }

  function getReactTree() {
    return 'React tree dumps have been temporarily disabled while React is ' + 'upgraded to Fiber.';
  }

  module.exports = dumpReactTree;
},319,[],"dumpReactTree");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _listeners = [];
  var _activeScene = {
    name: 'default'
  };
  var SceneTracker = {
    setActiveScene: function setActiveScene(scene) {
      _activeScene = scene;

      _listeners.forEach(function (listener) {
        return listener(_activeScene);
      });
    },
    getActiveScene: function getActiveScene() {
      return _activeScene;
    },
    addActiveSceneChangedListener: function addActiveSceneChangedListener(callback) {
      _listeners.push(callback);

      return {
        remove: function remove() {
          _listeners = _listeners.filter(function (listener) {
            return callback !== listener;
          });
        }
      };
    }
  };
  module.exports = SceneTracker;
},320,[],"SceneTracker");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-native/Libraries/ReactNative/renderApplication.js";

  var AppContainer = _require(_dependencyMap[0], 'AppContainer');

  var React = _require(_dependencyMap[1], 'React');

  var ReactNative = _require(_dependencyMap[2], 'ReactNative');

  var invariant = _require(_dependencyMap[3], 'fbjs/lib/invariant');

  _require(_dependencyMap[4], 'BackHandler');

  function renderApplication(RootComponent, initialProps, rootTag, WrapperComponent) {
    invariant(rootTag, 'Expect to have a valid rootTag, instead got ', rootTag);
    var renderable = React.createElement(
      AppContainer,
      {
        rootTag: rootTag,
        WrapperComponent: WrapperComponent,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 34
        }
      },
      React.createElement(RootComponent, babelHelpers.extends({}, initialProps, {
        rootTag: rootTag,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 35
        }
      }))
    );

    if (RootComponent.prototype != null && RootComponent.prototype.unstable_isAsyncReactComponent === true) {
      var AppContainerAsyncWrapper = function (_React$unstable_Async) {
        babelHelpers.inherits(AppContainerAsyncWrapper, _React$unstable_Async);

        function AppContainerAsyncWrapper() {
          babelHelpers.classCallCheck(this, AppContainerAsyncWrapper);
          return babelHelpers.possibleConstructorReturn(this, (AppContainerAsyncWrapper.__proto__ || Object.getPrototypeOf(AppContainerAsyncWrapper)).apply(this, arguments));
        }

        babelHelpers.createClass(AppContainerAsyncWrapper, [{
          key: "render",
          value: function render() {
            return this.props.children;
          }
        }]);
        return AppContainerAsyncWrapper;
      }(React.unstable_AsyncComponent);

      renderable = React.createElement(
        AppContainerAsyncWrapper,
        {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 54
          }
        },
        renderable
      );
    }

    ReactNative.render(renderable, rootTag);
  }

  module.exports = renderApplication;
},321,[264,131,21,13,322],"renderApplication");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var Platform = _require(_dependencyMap[0], 'Platform');

  var TVEventHandler = _require(_dependencyMap[1], 'TVEventHandler');

  function emptyFunction() {}

  var BackHandler = void 0;

  if (Platform.isTVOS) {
    var _tvEventHandler = new TVEventHandler();

    var _backPressSubscriptions = new Set();

    _tvEventHandler.enable(this, function (cmp, evt) {
      if (evt && evt.eventType === 'menu') {
        var invokeDefault = true;
        var subscriptions = Array.from(_backPressSubscriptions.values()).reverse();

        for (var i = 0; i < subscriptions.length; ++i) {
          if (subscriptions[i]()) {
            invokeDefault = false;
            break;
          }
        }

        if (invokeDefault) {
          BackHandler.exitApp();
        }
      }
    });

    BackHandler = {
      exitApp: emptyFunction,
      addEventListener: function addEventListener(eventName, handler) {
        _backPressSubscriptions.add(handler);

        return {
          remove: function remove() {
            return BackHandler.removeEventListener(eventName, handler);
          }
        };
      },
      removeEventListener: function removeEventListener(eventName, handler) {
        _backPressSubscriptions.delete(handler);
      }
    };
  } else {
    BackHandler = {
      exitApp: emptyFunction,
      addEventListener: function addEventListener() {
        return {
          remove: emptyFunction
        };
      },
      removeEventListener: emptyFunction
    };
  }

  module.exports = BackHandler;
},322,[52,191],"BackHandler");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var NativeModules = _require(_dependencyMap[0], 'NativeModules');

  var RCTAsyncStorage = NativeModules.AsyncRocksDBStorage || NativeModules.AsyncSQLiteDBStorage || NativeModules.AsyncLocalStorage;
  var AsyncStorage = {
    _getRequests: [],
    _getKeys: [],
    _immediate: null,
    getItem: function getItem(key, callback) {
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.multiGet([key], function (errors, result) {
          var value = result && result[0] && result[0][1] ? result[0][1] : null;
          var errs = convertErrors(errors);
          callback && callback(errs && errs[0], value);

          if (errs) {
            reject(errs[0]);
          } else {
            resolve(value);
          }
        });
      });
    },
    setItem: function setItem(key, value, callback) {
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.multiSet([[key, value]], function (errors) {
          var errs = convertErrors(errors);
          callback && callback(errs && errs[0]);

          if (errs) {
            reject(errs[0]);
          } else {
            resolve(null);
          }
        });
      });
    },
    removeItem: function removeItem(key, callback) {
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.multiRemove([key], function (errors) {
          var errs = convertErrors(errors);
          callback && callback(errs && errs[0]);

          if (errs) {
            reject(errs[0]);
          } else {
            resolve(null);
          }
        });
      });
    },
    mergeItem: function mergeItem(key, value, callback) {
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.multiMerge([[key, value]], function (errors) {
          var errs = convertErrors(errors);
          callback && callback(errs && errs[0]);

          if (errs) {
            reject(errs[0]);
          } else {
            resolve(null);
          }
        });
      });
    },
    clear: function clear(callback) {
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.clear(function (error) {
          callback && callback(convertError(error));

          if (error && convertError(error)) {
            reject(convertError(error));
          } else {
            resolve(null);
          }
        });
      });
    },
    getAllKeys: function getAllKeys(callback) {
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.getAllKeys(function (error, keys) {
          callback && callback(convertError(error), keys);

          if (error) {
            reject(convertError(error));
          } else {
            resolve(keys);
          }
        });
      });
    },
    flushGetRequests: function flushGetRequests() {
      var getRequests = this._getRequests;
      var getKeys = this._getKeys;
      this._getRequests = [];
      this._getKeys = [];
      RCTAsyncStorage.multiGet(getKeys, function (errors, result) {
        var map = {};
        result && result.forEach(function (_ref) {
          var _ref2 = babelHelpers.slicedToArray(_ref, 2),
              key = _ref2[0],
              value = _ref2[1];

          map[key] = value;
          return value;
        });
        var reqLength = getRequests.length;

        for (var i = 0; i < reqLength; i++) {
          var request = getRequests[i];
          var requestKeys = request.keys;
          var requestResult = requestKeys.map(function (key) {
            return [key, map[key]];
          });
          request.callback && request.callback(null, requestResult);
          request.resolve && request.resolve(requestResult);
        }
      });
    },
    multiGet: function multiGet(keys, callback) {
      var _this = this;

      if (!this._immediate) {
        this._immediate = setImmediate(function () {
          _this._immediate = null;

          _this.flushGetRequests();
        });
      }

      var getRequest = {
        keys: keys,
        callback: callback,
        keyIndex: this._getKeys.length,
        resolve: null,
        reject: null
      };
      var promiseResult = new Promise(function (resolve, reject) {
        getRequest.resolve = resolve;
        getRequest.reject = reject;
      });

      this._getRequests.push(getRequest);

      keys.forEach(function (key) {
        if (_this._getKeys.indexOf(key) === -1) {
          _this._getKeys.push(key);
        }
      });
      return promiseResult;
    },
    multiSet: function multiSet(keyValuePairs, callback) {
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.multiSet(keyValuePairs, function (errors) {
          var error = convertErrors(errors);
          callback && callback(error);

          if (error) {
            reject(error);
          } else {
            resolve(null);
          }
        });
      });
    },
    multiRemove: function multiRemove(keys, callback) {
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.multiRemove(keys, function (errors) {
          var error = convertErrors(errors);
          callback && callback(error);

          if (error) {
            reject(error);
          } else {
            resolve(null);
          }
        });
      });
    },
    multiMerge: function multiMerge(keyValuePairs, callback) {
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.multiMerge(keyValuePairs, function (errors) {
          var error = convertErrors(errors);
          callback && callback(error);

          if (error) {
            reject(error);
          } else {
            resolve(null);
          }
        });
      });
    }
  };

  if (!RCTAsyncStorage.multiMerge) {
    delete AsyncStorage.mergeItem;
    delete AsyncStorage.multiMerge;
  }

  function convertErrors(errs) {
    if (!errs) {
      return null;
    }

    return (Array.isArray(errs) ? errs : [errs]).map(function (e) {
      return convertError(e);
    });
  }

  function convertError(error) {
    if (!error) {
      return null;
    }

    var out = new Error(error.message);
    out.key = error.key;
    return out;
  }

  module.exports = AsyncStorage;
},323,[15],"AsyncStorage");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var BackHandler = _require(_dependencyMap[0], 'BackHandler');

  var warning = _require(_dependencyMap[1], 'fbjs/lib/warning');

  var BackAndroid = {
    exitApp: function exitApp() {
      warning(false, 'BackAndroid is deprecated.  Please use BackHandler instead.');
      BackHandler.exitApp();
    },
    addEventListener: function addEventListener(eventName, handler) {
      warning(false, 'BackAndroid is deprecated.  Please use BackHandler instead.');
      return BackHandler.addEventListener(eventName, handler);
    },
    removeEventListener: function removeEventListener(eventName, handler) {
      warning(false, 'BackAndroid is deprecated.  Please use BackHandler instead.');
      BackHandler.removeEventListener(eventName, handler);
    }
  };
  module.exports = BackAndroid;
},324,[322,56],"BackAndroid");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _class, _temp;

  var PropTypes = _require(_dependencyMap[0], 'prop-types');

  var checkPropTypes = PropTypes.checkPropTypes;

  var RCTCameraRollManager = _require(_dependencyMap[1], 'NativeModules').CameraRollManager;

  var createStrictShapeTypeChecker = _require(_dependencyMap[2], 'createStrictShapeTypeChecker');

  var invariant = _require(_dependencyMap[3], 'fbjs/lib/invariant');

  var GROUP_TYPES_OPTIONS = {
    Album: 'Album',
    All: 'All',
    Event: 'Event',
    Faces: 'Faces',
    Library: 'Library',
    PhotoStream: 'PhotoStream',
    SavedPhotos: 'SavedPhotos'
  };
  var ASSET_TYPE_OPTIONS = {
    All: 'All',
    Videos: 'Videos',
    Photos: 'Photos'
  };
  var getPhotosParamChecker = createStrictShapeTypeChecker({
    first: PropTypes.number.isRequired,
    after: PropTypes.string,
    groupTypes: PropTypes.oneOf(Object.keys(GROUP_TYPES_OPTIONS)),
    groupName: PropTypes.string,
    assetType: PropTypes.oneOf(Object.keys(ASSET_TYPE_OPTIONS)),
    mimeTypes: PropTypes.arrayOf(PropTypes.string)
  });
  var getPhotosReturnChecker = createStrictShapeTypeChecker({
    edges: PropTypes.arrayOf(createStrictShapeTypeChecker({
      node: createStrictShapeTypeChecker({
        type: PropTypes.string.isRequired,
        group_name: PropTypes.string.isRequired,
        image: createStrictShapeTypeChecker({
          uri: PropTypes.string.isRequired,
          height: PropTypes.number.isRequired,
          width: PropTypes.number.isRequired,
          isStored: PropTypes.bool,
          playableDuration: PropTypes.number.isRequired
        }).isRequired,
        timestamp: PropTypes.number.isRequired,
        location: createStrictShapeTypeChecker({
          latitude: PropTypes.number,
          longitude: PropTypes.number,
          altitude: PropTypes.number,
          heading: PropTypes.number,
          speed: PropTypes.number
        })
      }).isRequired
    })).isRequired,
    page_info: createStrictShapeTypeChecker({
      has_next_page: PropTypes.bool.isRequired,
      start_cursor: PropTypes.string,
      end_cursor: PropTypes.string
    }).isRequired
  });
  var CameraRoll = (_temp = _class = function () {
    function CameraRoll() {
      babelHelpers.classCallCheck(this, CameraRoll);
    }

    babelHelpers.createClass(CameraRoll, null, [{
      key: "saveImageWithTag",
      value: function saveImageWithTag(tag) {
        console.warn('`CameraRoll.saveImageWithTag()` is deprecated. Use `CameraRoll.saveToCameraRoll()` instead.');
        return this.saveToCameraRoll(tag, 'photo');
      }
    }, {
      key: "deletePhotos",
      value: function deletePhotos(photos) {
        return RCTCameraRollManager.deletePhotos(photos);
      }
    }, {
      key: "saveToCameraRoll",
      value: function saveToCameraRoll(tag, type) {
        invariant(typeof tag === 'string', 'CameraRoll.saveToCameraRoll must be a valid string.');
        invariant(type === 'photo' || type === 'video' || type === undefined, "The second argument to saveToCameraRoll must be 'photo' or 'video'. You passed " + (type || 'unknown'));
        var mediaType = 'photo';

        if (type) {
          mediaType = type;
        } else if (['mov', 'mp4'].indexOf(tag.split('.').slice(-1)[0]) >= 0) {
          mediaType = 'video';
        }

        return RCTCameraRollManager.saveToCameraRoll(tag, mediaType);
      }
    }, {
      key: "getPhotos",
      value: function getPhotos(params) {
        if (__DEV__) {
          checkPropTypes({
            params: getPhotosParamChecker
          }, {
            params: params
          }, 'params', 'CameraRoll.getPhotos');
        }

        if (arguments.length > 1) {
          console.warn('CameraRoll.getPhotos(tag, success, error) is deprecated.  Use the returned Promise instead');
          var successCallback = arguments[1];

          if (__DEV__) {
            var callback = arguments[1];

            successCallback = function successCallback(response) {
              checkPropTypes({
                response: getPhotosReturnChecker
              }, {
                response: response
              }, 'response', 'CameraRoll.getPhotos callback');
              callback(response);
            };
          }

          var errorCallback = arguments[2] || function () {};

          RCTCameraRollManager.getPhotos(params).then(successCallback, errorCallback);
        }

        return RCTCameraRollManager.getPhotos(params);
      }
    }]);
    return CameraRoll;
  }(), _class.GroupTypesOptions = GROUP_TYPES_OPTIONS, _class.AssetTypeOptions = ASSET_TYPE_OPTIONS, _temp);
  module.exports = CameraRoll;
},325,[141,15,157,13],"CameraRoll");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var Clipboard = _require(_dependencyMap[0], 'NativeModules').Clipboard;

  module.exports = {
    getString: function getString() {
      return Clipboard.getString();
    },
    setString: function setString(content) {
      Clipboard.setString(content);
    }
  };
},326,[15],"Clipboard");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var DatePickerAndroid = {
    open: function open(options) {
      return regeneratorRuntime.async(function open$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", Promise.reject({
                message: 'DatePickerAndroid is not supported on this platform.'
              }));

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, null, this);
    }
  };
  module.exports = DatePickerAndroid;
},327,[],"DatePickerAndroid");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var RCTImagePicker = _require(_dependencyMap[0], 'NativeModules').ImagePickerIOS;

  var ImagePickerIOS = {
    canRecordVideos: function canRecordVideos(callback) {
      return RCTImagePicker.canRecordVideos(callback);
    },
    canUseCamera: function canUseCamera(callback) {
      return RCTImagePicker.canUseCamera(callback);
    },
    openCameraDialog: function openCameraDialog(config, successCallback, cancelCallback) {
      config = babelHelpers.extends({
        videoMode: false
      }, config);
      return RCTImagePicker.openCameraDialog(config, successCallback, cancelCallback);
    },
    openSelectDialog: function openSelectDialog(config, successCallback, cancelCallback) {
      config = babelHelpers.extends({
        showImages: true,
        showVideos: false
      }, config);
      return RCTImagePicker.openSelectDialog(config, successCallback, cancelCallback);
    }
  };
  module.exports = ImagePickerIOS;
},328,[15],"ImagePickerIOS");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var NativeEventEmitter = _require(_dependencyMap[0], 'NativeEventEmitter');

  var NativeModules = _require(_dependencyMap[1], 'NativeModules');

  var Platform = _require(_dependencyMap[2], 'Platform');

  var invariant = _require(_dependencyMap[3], 'fbjs/lib/invariant');

  var LinkingManager = Platform.OS === 'android' ? NativeModules.IntentAndroid : NativeModules.LinkingManager;

  var Linking = function (_NativeEventEmitter) {
    babelHelpers.inherits(Linking, _NativeEventEmitter);

    function Linking() {
      babelHelpers.classCallCheck(this, Linking);
      return babelHelpers.possibleConstructorReturn(this, (Linking.__proto__ || Object.getPrototypeOf(Linking)).call(this, LinkingManager));
    }

    babelHelpers.createClass(Linking, [{
      key: "addEventListener",
      value: function addEventListener(type, handler) {
        this.addListener(type, handler);
      }
    }, {
      key: "removeEventListener",
      value: function removeEventListener(type, handler) {
        this.removeListener(type, handler);
      }
    }, {
      key: "openURL",
      value: function openURL(url) {
        this._validateURL(url);

        return LinkingManager.openURL(url);
      }
    }, {
      key: "canOpenURL",
      value: function canOpenURL(url) {
        this._validateURL(url);

        return LinkingManager.canOpenURL(url);
      }
    }, {
      key: "getInitialURL",
      value: function getInitialURL() {
        return LinkingManager.getInitialURL();
      }
    }, {
      key: "_validateURL",
      value: function _validateURL(url) {
        invariant(typeof url === 'string', 'Invalid URL: should be a string. Was: ' + url);
        invariant(url, 'Invalid URL: cannot be empty');
      }
    }]);
    return Linking;
  }(NativeEventEmitter);

  module.exports = new Linking();
},329,[69,15,52,13],"Linking");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var Map = _require(_dependencyMap[0], 'Map');

  var NativeEventEmitter = _require(_dependencyMap[1], 'NativeEventEmitter');

  var NativeModules = _require(_dependencyMap[2], 'NativeModules');

  var Platform = _require(_dependencyMap[3], 'Platform');

  var RCTNetInfo = NativeModules.NetInfo;
  var NetInfoEventEmitter = new NativeEventEmitter(RCTNetInfo);
  var DEVICE_CONNECTIVITY_EVENT = 'networkStatusDidChange';

  var _subscriptions = new Map();

  var _isConnectedDeprecated = void 0;

  if (Platform.OS === 'ios') {
    _isConnectedDeprecated = function _isConnectedDeprecated(reachability) {
      return reachability !== 'none' && reachability !== 'unknown';
    };
  } else if (Platform.OS === 'android') {
    _isConnectedDeprecated = function _isConnectedDeprecated(connectionType) {
      return connectionType !== 'NONE' && connectionType !== 'UNKNOWN';
    };
  }

  function _isConnected(connection) {
    return connection.type !== 'none' && connection.type !== 'unknown';
  }

  var _isConnectedSubscriptions = new Map();

  var NetInfo = {
    addEventListener: function addEventListener(eventName, handler) {
      var listener = void 0;

      if (eventName === 'connectionChange') {
        listener = NetInfoEventEmitter.addListener(DEVICE_CONNECTIVITY_EVENT, function (appStateData) {
          handler({
            type: appStateData.connectionType,
            effectiveType: appStateData.effectiveConnectionType
          });
        });
      } else if (eventName === 'change') {
        console.warn('NetInfo\'s "change" event is deprecated. Listen to the "connectionChange" event instead.');
        listener = NetInfoEventEmitter.addListener(DEVICE_CONNECTIVITY_EVENT, function (appStateData) {
          handler(appStateData.network_info);
        });
      } else {
        console.warn('Trying to subscribe to unknown event: "' + eventName + '"');
        return {
          remove: function remove() {}
        };
      }

      _subscriptions.set(handler, listener);

      return {
        remove: function remove() {
          return NetInfo.removeEventListener(eventName, handler);
        }
      };
    },
    removeEventListener: function removeEventListener(eventName, handler) {
      var listener = _subscriptions.get(handler);

      if (!listener) {
        return;
      }

      listener.remove();

      _subscriptions.delete(handler);
    },
    fetch: function fetch() {
      console.warn('NetInfo.fetch() is deprecated. Use NetInfo.getConnectionInfo() instead.');
      return RCTNetInfo.getCurrentConnectivity().then(function (resp) {
        return resp.network_info;
      });
    },
    getConnectionInfo: function getConnectionInfo() {
      return RCTNetInfo.getCurrentConnectivity().then(function (resp) {
        return {
          type: resp.connectionType,
          effectiveType: resp.effectiveConnectionType
        };
      });
    },
    isConnected: {
      addEventListener: function addEventListener(eventName, handler) {
        var listener = function listener(connection) {
          if (eventName === 'change') {
            handler(_isConnectedDeprecated(connection));
          } else if (eventName === 'connectionChange') {
            handler(_isConnected(connection));
          }
        };

        _isConnectedSubscriptions.set(handler, listener);

        NetInfo.addEventListener(eventName, listener);
        return {
          remove: function remove() {
            return NetInfo.isConnected.removeEventListener(eventName, handler);
          }
        };
      },
      removeEventListener: function removeEventListener(eventName, handler) {
        var listener = _isConnectedSubscriptions.get(handler);

        NetInfo.removeEventListener(eventName, listener);

        _isConnectedSubscriptions.delete(handler);
      },
      fetch: function fetch() {
        return NetInfo.getConnectionInfo().then(_isConnected);
      }
    },
    isConnectionExpensive: function isConnectionExpensive() {
      return Platform.OS === 'android' ? RCTNetInfo.isConnectionMetered() : Promise.reject(new Error('Currently not supported on iOS'));
    }
  };
  module.exports = NetInfo;
},330,[26,69,15,52],"NetInfo");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _class, _temp;

  var NativeEventEmitter = _require(_dependencyMap[0], 'NativeEventEmitter');

  var RCTPushNotificationManager = _require(_dependencyMap[1], 'NativeModules').PushNotificationManager;

  var invariant = _require(_dependencyMap[2], 'fbjs/lib/invariant');

  var PushNotificationEmitter = new NativeEventEmitter(RCTPushNotificationManager);

  var _notifHandlers = new Map();

  var DEVICE_NOTIF_EVENT = 'remoteNotificationReceived';
  var NOTIF_REGISTER_EVENT = 'remoteNotificationsRegistered';
  var NOTIF_REGISTRATION_ERROR_EVENT = 'remoteNotificationRegistrationError';
  var DEVICE_LOCAL_NOTIF_EVENT = 'localNotificationReceived';
  var PushNotificationIOS = (_temp = _class = function () {
    babelHelpers.createClass(PushNotificationIOS, null, [{
      key: "presentLocalNotification",
      value: function presentLocalNotification(details) {
        RCTPushNotificationManager.presentLocalNotification(details);
      }
    }, {
      key: "scheduleLocalNotification",
      value: function scheduleLocalNotification(details) {
        RCTPushNotificationManager.scheduleLocalNotification(details);
      }
    }, {
      key: "cancelAllLocalNotifications",
      value: function cancelAllLocalNotifications() {
        RCTPushNotificationManager.cancelAllLocalNotifications();
      }
    }, {
      key: "removeAllDeliveredNotifications",
      value: function removeAllDeliveredNotifications() {
        RCTPushNotificationManager.removeAllDeliveredNotifications();
      }
    }, {
      key: "getDeliveredNotifications",
      value: function getDeliveredNotifications(callback) {
        RCTPushNotificationManager.getDeliveredNotifications(callback);
      }
    }, {
      key: "removeDeliveredNotifications",
      value: function removeDeliveredNotifications(identifiers) {
        RCTPushNotificationManager.removeDeliveredNotifications(identifiers);
      }
    }, {
      key: "setApplicationIconBadgeNumber",
      value: function setApplicationIconBadgeNumber(number) {
        RCTPushNotificationManager.setApplicationIconBadgeNumber(number);
      }
    }, {
      key: "getApplicationIconBadgeNumber",
      value: function getApplicationIconBadgeNumber(callback) {
        RCTPushNotificationManager.getApplicationIconBadgeNumber(callback);
      }
    }, {
      key: "cancelLocalNotifications",
      value: function cancelLocalNotifications(userInfo) {
        RCTPushNotificationManager.cancelLocalNotifications(userInfo);
      }
    }, {
      key: "getScheduledLocalNotifications",
      value: function getScheduledLocalNotifications(callback) {
        RCTPushNotificationManager.getScheduledLocalNotifications(callback);
      }
    }, {
      key: "addEventListener",
      value: function addEventListener(type, handler) {
        invariant(type === 'notification' || type === 'register' || type === 'registrationError' || type === 'localNotification', 'PushNotificationIOS only supports `notification`, `register`, `registrationError`, and `localNotification` events');
        var listener;

        if (type === 'notification') {
          listener = PushNotificationEmitter.addListener(DEVICE_NOTIF_EVENT, function (notifData) {
            handler(new PushNotificationIOS(notifData));
          });
        } else if (type === 'localNotification') {
          listener = PushNotificationEmitter.addListener(DEVICE_LOCAL_NOTIF_EVENT, function (notifData) {
            handler(new PushNotificationIOS(notifData));
          });
        } else if (type === 'register') {
          listener = PushNotificationEmitter.addListener(NOTIF_REGISTER_EVENT, function (registrationInfo) {
            handler(registrationInfo.deviceToken);
          });
        } else if (type === 'registrationError') {
          listener = PushNotificationEmitter.addListener(NOTIF_REGISTRATION_ERROR_EVENT, function (errorInfo) {
            handler(errorInfo);
          });
        }

        _notifHandlers.set(type, listener);
      }
    }, {
      key: "removeEventListener",
      value: function removeEventListener(type, handler) {
        invariant(type === 'notification' || type === 'register' || type === 'registrationError' || type === 'localNotification', 'PushNotificationIOS only supports `notification`, `register`, `registrationError`, and `localNotification` events');

        var listener = _notifHandlers.get(type);

        if (!listener) {
          return;
        }

        listener.remove();

        _notifHandlers.delete(type);
      }
    }, {
      key: "requestPermissions",
      value: function requestPermissions(permissions) {
        var requestedPermissions = {};

        if (permissions) {
          requestedPermissions = {
            alert: !!permissions.alert,
            badge: !!permissions.badge,
            sound: !!permissions.sound
          };
        } else {
          requestedPermissions = {
            alert: true,
            badge: true,
            sound: true
          };
        }

        return RCTPushNotificationManager.requestPermissions(requestedPermissions);
      }
    }, {
      key: "abandonPermissions",
      value: function abandonPermissions() {
        RCTPushNotificationManager.abandonPermissions();
      }
    }, {
      key: "checkPermissions",
      value: function checkPermissions(callback) {
        invariant(typeof callback === 'function', 'Must provide a valid callback');
        RCTPushNotificationManager.checkPermissions(callback);
      }
    }, {
      key: "getInitialNotification",
      value: function getInitialNotification() {
        return RCTPushNotificationManager.getInitialNotification().then(function (notification) {
          return notification && new PushNotificationIOS(notification);
        });
      }
    }]);

    function PushNotificationIOS(nativeNotif) {
      var _this = this;

      babelHelpers.classCallCheck(this, PushNotificationIOS);
      this._data = {};
      this._remoteNotificationCompleteCallbackCalled = false;
      this._isRemote = nativeNotif.remote;

      if (this._isRemote) {
        this._notificationId = nativeNotif.notificationId;
      }

      if (nativeNotif.remote) {
        Object.keys(nativeNotif).forEach(function (notifKey) {
          var notifVal = nativeNotif[notifKey];

          if (notifKey === 'aps') {
            _this._alert = notifVal.alert;
            _this._sound = notifVal.sound;
            _this._badgeCount = notifVal.badge;
            _this._category = notifVal.category;
            _this._contentAvailable = notifVal['content-available'];
            _this._threadID = notifVal['thread-id'];
          } else {
            _this._data[notifKey] = notifVal;
          }
        });
      } else {
        this._badgeCount = nativeNotif.applicationIconBadgeNumber;
        this._sound = nativeNotif.soundName;
        this._alert = nativeNotif.alertBody;
        this._data = nativeNotif.userInfo;
        this._category = nativeNotif.category;
      }
    }

    babelHelpers.createClass(PushNotificationIOS, [{
      key: "finish",
      value: function finish(fetchResult) {
        if (!this._isRemote || !this._notificationId || this._remoteNotificationCompleteCallbackCalled) {
          return;
        }

        this._remoteNotificationCompleteCallbackCalled = true;
        RCTPushNotificationManager.onFinishRemoteNotification(this._notificationId, fetchResult);
      }
    }, {
      key: "getMessage",
      value: function getMessage() {
        return this._alert;
      }
    }, {
      key: "getSound",
      value: function getSound() {
        return this._sound;
      }
    }, {
      key: "getCategory",
      value: function getCategory() {
        return this._category;
      }
    }, {
      key: "getAlert",
      value: function getAlert() {
        return this._alert;
      }
    }, {
      key: "getContentAvailable",
      value: function getContentAvailable() {
        return this._contentAvailable;
      }
    }, {
      key: "getBadgeCount",
      value: function getBadgeCount() {
        return this._badgeCount;
      }
    }, {
      key: "getData",
      value: function getData() {
        return this._data;
      }
    }, {
      key: "getThreadID",
      value: function getThreadID() {
        return this._threadID;
      }
    }]);
    return PushNotificationIOS;
  }(), _class.FetchResult = {
    NewData: 'UIBackgroundFetchResultNewData',
    NoData: 'UIBackgroundFetchResultNoData',
    ResultFailed: 'UIBackgroundFetchResultFailed'
  }, _temp);
  module.exports = PushNotificationIOS;
},331,[69,15,13],"PushNotificationIOS");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var RCTDeviceEventEmitter = _require(_dependencyMap[0], 'RCTDeviceEventEmitter');

  var RCTSettingsManager = _require(_dependencyMap[1], 'NativeModules').SettingsManager;

  var invariant = _require(_dependencyMap[2], 'fbjs/lib/invariant');

  var subscriptions = [];
  var Settings = {
    _settings: RCTSettingsManager && RCTSettingsManager.settings,
    get: function get(key) {
      return this._settings[key];
    },
    set: function set(settings) {
      this._settings = babelHelpers.extends(this._settings, settings);
      RCTSettingsManager.setValues(settings);
    },
    watchKeys: function watchKeys(keys, callback) {
      if (typeof keys === 'string') {
        keys = [keys];
      }

      invariant(Array.isArray(keys), 'keys should be a string or array of strings');
      var sid = subscriptions.length;
      subscriptions.push({
        keys: keys,
        callback: callback
      });
      return sid;
    },
    clearWatch: function clearWatch(watchId) {
      if (watchId < subscriptions.length) {
        subscriptions[watchId] = {
          keys: [],
          callback: null
        };
      }
    },
    _sendObservations: function _sendObservations(body) {
      var _this = this;

      Object.keys(body).forEach(function (key) {
        var newValue = body[key];
        var didChange = _this._settings[key] !== newValue;
        _this._settings[key] = newValue;

        if (didChange) {
          subscriptions.forEach(function (sub) {
            if (sub.keys.indexOf(key) !== -1 && sub.callback) {
              sub.callback();
            }
          });
        }
      });
    }
  };
  RCTDeviceEventEmitter.addListener('settingsUpdated', Settings._sendObservations.bind(Settings));
  module.exports = Settings;
},332,[70,15,13],"Settings");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var Platform = _require2(_dependencyMap[0], 'Platform');

  var invariant = _require2(_dependencyMap[1], 'fbjs/lib/invariant');

  var processColor = _require2(_dependencyMap[2], 'processColor');

  var _require = _require2(_dependencyMap[3], 'NativeModules'),
      ActionSheetManager = _require.ActionSheetManager,
      ShareModule = _require.ShareModule;

  var Share = function () {
    function Share() {
      babelHelpers.classCallCheck(this, Share);
    }

    babelHelpers.createClass(Share, null, [{
      key: "share",
      value: function share(content) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        invariant(typeof content === 'object' && content !== null, 'Content to share must be a valid object');
        invariant(typeof content.url === 'string' || typeof content.message === 'string', 'At least one of URL and message is required');
        invariant(typeof options === 'object' && options !== null, 'Options must be a valid object');

        if (Platform.OS === 'android') {
          invariant(!content.title || typeof content.title === 'string', 'Invalid title: title should be a string.');
          return ShareModule.share(content, options.dialogTitle);
        } else if (Platform.OS === 'ios') {
          return new Promise(function (resolve, reject) {
            ActionSheetManager.showShareActionSheetWithOptions(babelHelpers.extends({}, content, options, {
              tintColor: processColor(options.tintColor)
            }), function (error) {
              return reject(error);
            }, function (success, activityType) {
              if (success) {
                resolve({
                  'action': 'sharedAction',
                  'activityType': activityType
                });
              } else {
                resolve({
                  'action': 'dismissedAction'
                });
              }
            });
          });
        } else {
          return Promise.reject(new Error('Unsupported platform'));
        }
      }
    }, {
      key: "sharedAction",
      get: function get() {
        return 'sharedAction';
      }
    }, {
      key: "dismissedAction",
      get: function get() {
        return 'dismissedAction';
      }
    }]);
    return Share;
  }();

  module.exports = Share;
},333,[52,13,100,15],"Share");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var NativeEventEmitter = _require2(_dependencyMap[0], 'NativeEventEmitter');

  var _require = _require2(_dependencyMap[1], 'NativeModules'),
      StatusBarManager = _require.StatusBarManager;

  var StatusBarIOS = function (_NativeEventEmitter) {
    babelHelpers.inherits(StatusBarIOS, _NativeEventEmitter);

    function StatusBarIOS() {
      babelHelpers.classCallCheck(this, StatusBarIOS);
      return babelHelpers.possibleConstructorReturn(this, (StatusBarIOS.__proto__ || Object.getPrototypeOf(StatusBarIOS)).apply(this, arguments));
    }

    return StatusBarIOS;
  }(NativeEventEmitter);

  module.exports = new StatusBarIOS(StatusBarManager);
},334,[69,15],"StatusBarIOS");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var TimePickerAndroid = {
    open: function open(options) {
      return regeneratorRuntime.async(function open$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", Promise.reject({
                message: 'TimePickerAndroid is not supported on this platform.'
              }));

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, null, this);
    }
  };
  module.exports = TimePickerAndroid;
},335,[],"TimePickerAndroid");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var RCTVibration = _require(_dependencyMap[0], 'NativeModules').Vibration;

  var Platform = _require(_dependencyMap[1], 'Platform');

  var _vibrating = false;
  var _id = 0;

  function vibrateByPattern(pattern) {
    var repeat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    if (_vibrating) {
      return;
    }

    _vibrating = true;

    if (pattern[0] === 0) {
      RCTVibration.vibrate();
      pattern = pattern.slice(1);
    }

    if (pattern.length === 0) {
      _vibrating = false;
      return;
    }

    setTimeout(function () {
      return vibrateScheduler(++_id, pattern, repeat, 1);
    }, pattern[0]);
  }

  function vibrateScheduler(id, pattern, repeat, nextIndex) {
    if (!_vibrating || id !== _id) {
      return;
    }

    RCTVibration.vibrate();

    if (nextIndex >= pattern.length) {
      if (repeat) {
        nextIndex = 0;
      } else {
        _vibrating = false;
        return;
      }
    }

    setTimeout(function () {
      return vibrateScheduler(id, pattern, repeat, nextIndex + 1);
    }, pattern[nextIndex]);
  }

  var Vibration = {
    vibrate: function vibrate() {
      var pattern = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 400;
      var repeat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      if (Platform.OS === 'android') {
        if (typeof pattern === 'number') {
          RCTVibration.vibrate(pattern);
        } else if (Array.isArray(pattern)) {
          RCTVibration.vibrateByPattern(pattern, repeat ? 0 : -1);
        } else {
          throw new Error('Vibration pattern should be a number or array');
        }
      } else {
        if (_vibrating) {
          return;
        }

        if (typeof pattern === 'number') {
          RCTVibration.vibrate();
        } else if (Array.isArray(pattern)) {
          vibrateByPattern(pattern, repeat);
        } else {
          throw new Error('Vibration pattern should be a number or array');
        }
      }
    },
    cancel: function cancel() {
      if (Platform.OS === 'ios') {
        _vibrating = false;
      } else {
        RCTVibration.cancel();
      }
    }
  };
  module.exports = Vibration;
},336,[15,52],"Vibration");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var RCTVibration = _require(_dependencyMap[0], 'NativeModules').Vibration;

  var invariant = _require(_dependencyMap[1], 'fbjs/lib/invariant');

  var VibrationIOS = {
    vibrate: function vibrate() {
      invariant(arguments[0] === undefined, 'Vibration patterns not supported.');
      RCTVibration.vibrate();
    }
  };
  module.exports = VibrationIOS;
},337,[15,13],"VibrationIOS");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _require = _require2(_dependencyMap[0], 'ReactNative'),
      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = _require.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

  module.exports = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.takeSnapshot;
},338,[21],"takeSnapshot");
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = undefined;

    var _class,
        _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/app/Root.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    var _mobxReact = _require(_dependencyMap[2], "mobx-react");

    var _ETTDevice = _require(_dependencyMap[3], "./res/values/ETTDevice");

    var _ETTDevice2 = babelHelpers.interopRequireDefault(_ETTDevice);

    var _ETTConfig = _require(_dependencyMap[4], "./res/values/ETTConfig");

    var _ETTStackConfig = _require(_dependencyMap[5], "../app/res/values/ETTStackConfig");

    var _ETTEnum = _require(_dependencyMap[6], "../app/res/values/ETTEnum");

    var _reactNativeWechat = _require(_dependencyMap[7], "react-native-wechat");

    var wechat = babelHelpers.interopRequireWildcard(_reactNativeWechat);

    var _ETTURLConfig = _require(_dependencyMap[8], "./res/values/ETTURLConfig");

    var _ETTURLConfig2 = babelHelpers.interopRequireDefault(_ETTURLConfig);

    wechat.registerApp(_ETTURLConfig2.default.wxAppid);

    var Root = (0, _mobxReact.observer)(_class = function (_Component) {
        babelHelpers.inherits(Root, _Component);

        function Root() {
            babelHelpers.classCallCheck(this, Root);
            return babelHelpers.possibleConstructorReturn(this, (Root.__proto__ || Object.getPrototypeOf(Root)).apply(this, arguments));
        }

        babelHelpers.createClass(Root, [{
            key: "render",
            value: function render() {
                console.log("root");

                if (_ETTConfig.DataManager._appInfo._isLoadState != _ETTEnum.ETTAppLoadState.loadOver) {
                    return this.showImage();
                }

                if (_ETTConfig.DataManager._appInfo._isFirstOpen == 'YES') {
                    return _react2.default.createElement(_ETTStackConfig.NavWelcome, {
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 33
                        }
                    });
                }

                return _react2.default.createElement(_ETTStackConfig.NavHome, {
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 35
                    }
                });
            }
        }, {
            key: "showImage",
            value: function showImage() {
                return _react2.default.createElement(
                    _reactNative.View,
                    {
                        style: styles.container,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 79
                        }
                    },
                    _react2.default.createElement(_reactNative.Image, {
                        style: styles.viewItem,
                        source: _require(_dependencyMap[9], './res/images/750X1334.png'),
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 80
                        }
                    })
                );
            }
        }]);
        return Root;
    }(_react.Component)) || _class;

    exports.default = Root;

    var styles = _reactNative.StyleSheet.create({
        container: {
            flex: 1,
            justifyContent: 'center',
            alignItems: 'center'
        },
        viewItem: {
            alignItems: 'center',
            height: _ETTDevice2.default.ScreenHeight,
            width: _ETTDevice2.default.ScreenWidth
        }
    });
},339,[114,12,340,342,343,370,348,510,360,572],"app/Root.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    'use strict';

    Object.defineProperty(exports, '__esModule', {
        value: true
    });

    function _interopDefault(ex) {
        return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;
    }

    var mobx = _require(_dependencyMap[0], 'mobx');

    var React = _require(_dependencyMap[1], 'react');

    var React__default = _interopDefault(React);

    var reactNative = _require(_dependencyMap[2], 'react-native');

    var unstable_batchedUpdates$1 = undefined;
    var findDOMNode = undefined;

    var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) {
        return typeof obj;
    } : function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj;
    };

    var asyncGenerator = function () {
        function AwaitValue(value) {
            this.value = value;
        }

        function AsyncGenerator(gen) {
            var front, back;

            function send(key, arg) {
                return new Promise(function (resolve, reject) {
                    var request = {
                        key: key,
                        arg: arg,
                        resolve: resolve,
                        reject: reject,
                        next: null
                    };

                    if (back) {
                        back = back.next = request;
                    } else {
                        front = back = request;
                        resume(key, arg);
                    }
                });
            }

            function resume(key, arg) {
                try {
                    var result = gen[key](arg);
                    var value = result.value;

                    if (value instanceof AwaitValue) {
                        Promise.resolve(value.value).then(function (arg) {
                            resume("next", arg);
                        }, function (arg) {
                            resume("throw", arg);
                        });
                    } else {
                        settle(result.done ? "return" : "normal", result.value);
                    }
                } catch (err) {
                    settle("throw", err);
                }
            }

            function settle(type, value) {
                switch (type) {
                    case "return":
                        front.resolve({
                            value: value,
                            done: true
                        });
                        break;

                    case "throw":
                        front.reject(value);
                        break;

                    default:
                        front.resolve({
                            value: value,
                            done: false
                        });
                        break;
                }

                front = front.next;

                if (front) {
                    resume(front.key, front.arg);
                } else {
                    back = null;
                }
            }

            this._invoke = send;

            if (typeof gen.return !== "function") {
                this.return = undefined;
            }
        }

        if (typeof Symbol === "function" && (typeof Symbol === "function" ? Symbol.asyncIterator : "@@asyncIterator")) {
            AsyncGenerator.prototype[typeof Symbol === "function" ? Symbol.asyncIterator : "@@asyncIterator"] = function () {
                return this;
            };
        }

        AsyncGenerator.prototype.next = function (arg) {
            return this._invoke("next", arg);
        };

        AsyncGenerator.prototype.throw = function (arg) {
            return this._invoke("throw", arg);
        };

        AsyncGenerator.prototype.return = function (arg) {
            return this._invoke("return", arg);
        };

        return {
            wrap: function wrap(fn) {
                return function () {
                    return new AsyncGenerator(fn.apply(this, arguments));
                };
            },
            await: function _await(value) {
                return new AwaitValue(value);
            }
        };
    }();

    var classCallCheck = function classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    };

    var createClass = function () {
        function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }

        return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
        };
    }();

    var inherits = function inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    };

    var possibleConstructorReturn = function possibleConstructorReturn(self, call) {
        if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (typeof call === "object" || typeof call === "function") ? call : self;
    };

    var EventEmitter = function () {
        function EventEmitter() {
            classCallCheck(this, EventEmitter);
            this.listeners = [];
        }

        createClass(EventEmitter, [{
            key: "on",
            value: function on(cb) {
                var _this = this;

                this.listeners.push(cb);
                return function () {
                    var index = _this.listeners.indexOf(cb);

                    if (index !== -1) _this.listeners.splice(index, 1);
                };
            }
        }, {
            key: "emit",
            value: function emit(data) {
                this.listeners.forEach(function (fn) {
                    return fn(data);
                });
            }
        }]);
        return EventEmitter;
    }();

    'use strict';

    var REACT_STATICS = {
        childContextTypes: true,
        contextTypes: true,
        defaultProps: true,
        displayName: true,
        getDefaultProps: true,
        mixins: true,
        propTypes: true,
        type: true
    };
    var KNOWN_STATICS = {
        name: true,
        length: true,
        prototype: true,
        caller: true,
        callee: true,
        arguments: true,
        arity: true
    };
    var defineProperty$1 = Object.defineProperty;
    var getOwnPropertyNames = Object.getOwnPropertyNames;
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
    var getPrototypeOf = Object.getPrototypeOf;
    var objectPrototype = getPrototypeOf && getPrototypeOf(Object);

    var hoistNonReactStatics = function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
        if (typeof sourceComponent !== 'string') {
            if (objectPrototype) {
                var inheritedComponent = getPrototypeOf(sourceComponent);

                if (inheritedComponent && inheritedComponent !== objectPrototype) {
                    hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
                }
            }

            var keys = getOwnPropertyNames(sourceComponent);

            if (getOwnPropertySymbols) {
                keys = keys.concat(getOwnPropertySymbols(sourceComponent));
            }

            for (var i = 0; i < keys.length; ++i) {
                var key = keys[i];

                if (!REACT_STATICS[key] && !KNOWN_STATICS[key] && (!blacklist || !blacklist[key])) {
                    var descriptor = getOwnPropertyDescriptor(sourceComponent, key);

                    try {
                        defineProperty$1(targetComponent, key, descriptor);
                    } catch (e) {}
                }
            }

            return targetComponent;
        }

        return targetComponent;
    };

    function createChainableTypeChecker(validate) {
        function checkType(isRequired, props, propName, componentName, location, propFullName) {
            for (var _len = arguments.length, rest = Array(_len > 6 ? _len - 6 : 0), _key = 6; _key < _len; _key++) {
                rest[_key - 6] = arguments[_key];
            }

            return mobx.untracked(function () {
                componentName = componentName || "<<anonymous>>";
                propFullName = propFullName || propName;

                if (props[propName] == null) {
                    if (isRequired) {
                        var actual = props[propName] === null ? "null" : "undefined";
                        return new Error("The " + location + " `" + propFullName + "` is marked as required " + "in `" + componentName + "`, but its value is `" + actual + "`.");
                    }

                    return null;
                } else {
                    return validate.apply(undefined, [props, propName, componentName, location, propFullName].concat(rest));
                }
            });
        }

        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
    }

    function isSymbol(propType, propValue) {
        if (propType === "symbol") {
            return true;
        }

        if (propValue["@@toStringTag"] === "Symbol") {
            return true;
        }

        if (typeof Symbol === "function" && propValue instanceof Symbol) {
            return true;
        }

        return false;
    }

    function getPropType(propValue) {
        var propType = typeof propValue === "undefined" ? "undefined" : _typeof(propValue);

        if (Array.isArray(propValue)) {
            return "array";
        }

        if (propValue instanceof RegExp) {
            return "object";
        }

        if (isSymbol(propType, propValue)) {
            return "symbol";
        }

        return propType;
    }

    function getPreciseType(propValue) {
        var propType = getPropType(propValue);

        if (propType === "object") {
            if (propValue instanceof Date) {
                return "date";
            } else if (propValue instanceof RegExp) {
                return "regexp";
            }
        }

        return propType;
    }

    function createObservableTypeCheckerCreator(allowNativeType, mobxType) {
        return createChainableTypeChecker(function (props, propName, componentName, location, propFullName) {
            return mobx.untracked(function () {
                if (allowNativeType) {
                    if (getPropType(props[propName]) === mobxType.toLowerCase()) return null;
                }

                var mobxChecker = void 0;

                switch (mobxType) {
                    case "Array":
                        mobxChecker = mobx.isObservableArray;
                        break;

                    case "Object":
                        mobxChecker = mobx.isObservableObject;
                        break;

                    case "Map":
                        mobxChecker = mobx.isObservableMap;
                        break;

                    default:
                        throw new Error("Unexpected mobxType: " + mobxType);
                }

                var propValue = props[propName];

                if (!mobxChecker(propValue)) {
                    var preciseType = getPreciseType(propValue);
                    var nativeTypeExpectationMessage = allowNativeType ? " or javascript `" + mobxType.toLowerCase() + "`" : "";
                    return new Error("Invalid prop `" + propFullName + "` of type `" + preciseType + "` supplied to" + " `" + componentName + "`, expected `mobx.Observable" + mobxType + "`" + nativeTypeExpectationMessage + ".");
                }

                return null;
            });
        });
    }

    function createObservableArrayOfTypeChecker(allowNativeType, typeChecker) {
        return createChainableTypeChecker(function (props, propName, componentName, location, propFullName) {
            for (var _len2 = arguments.length, rest = Array(_len2 > 5 ? _len2 - 5 : 0), _key2 = 5; _key2 < _len2; _key2++) {
                rest[_key2 - 5] = arguments[_key2];
            }

            return mobx.untracked(function () {
                if (typeof typeChecker !== "function") {
                    return new Error("Property `" + propFullName + "` of component `" + componentName + "` has " + "invalid PropType notation.");
                }

                var error = createObservableTypeCheckerCreator(allowNativeType, "Array")(props, propName, componentName);
                if (error instanceof Error) return error;
                var propValue = props[propName];

                for (var i = 0; i < propValue.length; i++) {
                    error = typeChecker.apply(undefined, [propValue, i, componentName, location, propFullName + "[" + i + "]"].concat(rest));
                    if (error instanceof Error) return error;
                }

                return null;
            });
        });
    }

    var observableArray = createObservableTypeCheckerCreator(false, "Array");
    var observableArrayOf = createObservableArrayOfTypeChecker.bind(null, false);
    var observableMap = createObservableTypeCheckerCreator(false, "Map");
    var observableObject = createObservableTypeCheckerCreator(false, "Object");
    var arrayOrObservableArray = createObservableTypeCheckerCreator(true, "Array");
    var arrayOrObservableArrayOf = createObservableArrayOfTypeChecker.bind(null, true);
    var objectOrObservableObject = createObservableTypeCheckerCreator(true, "Object");
    var propTypes = Object.freeze({
        observableArray: observableArray,
        observableArrayOf: observableArrayOf,
        observableMap: observableMap,
        observableObject: observableObject,
        arrayOrObservableArray: arrayOrObservableArray,
        arrayOrObservableArrayOf: arrayOrObservableArrayOf,
        objectOrObservableObject: objectOrObservableObject
    });

    function isStateless(component) {
        return !(component.prototype && component.prototype.render);
    }

    var injectorContextTypes = {
        mobxStores: objectOrObservableObject
    };
    Object.seal(injectorContextTypes);
    var proxiedInjectorProps = {
        contextTypes: {
            get: function get$$1() {
                return injectorContextTypes;
            },
            set: function set$$1(_) {
                console.warn("Mobx Injector: you are trying to attach `contextTypes` on an component decorated with `inject` (or `observer`) HOC. Please specify the contextTypes on the wrapped component instead. It is accessible through the `wrappedComponent`");
            },
            configurable: true,
            enumerable: false
        },
        isMobxInjector: {
            value: true,
            writable: true,
            configurable: true,
            enumerable: true
        }
    };

    function createStoreInjector(grabStoresFn, component, injectNames) {
        var _class, _temp2;

        var displayName = "inject-" + (component.displayName || component.name || component.constructor && component.constructor.name || "Unknown");
        if (injectNames) displayName += "-with-" + injectNames;
        var Injector = (_temp2 = _class = function (_Component) {
            inherits(Injector, _Component);

            function Injector() {
                var _ref;

                var _temp, _this, _ret;

                classCallCheck(this, Injector);

                for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                    args[_key] = arguments[_key];
                }

                return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = Injector.__proto__ || Object.getPrototypeOf(Injector)).call.apply(_ref, [this].concat(args))), _this), _this.storeRef = function (instance) {
                    _this.wrappedInstance = instance;
                }, _temp), possibleConstructorReturn(_this, _ret);
            }

            createClass(Injector, [{
                key: "render",
                value: function render() {
                    var newProps = {};

                    for (var key in this.props) {
                        if (this.props.hasOwnProperty(key)) {
                            newProps[key] = this.props[key];
                        }
                    }

                    var additionalProps = grabStoresFn(this.context.mobxStores || {}, newProps, this.context) || {};

                    for (var _key2 in additionalProps) {
                        newProps[_key2] = additionalProps[_key2];
                    }

                    if (!isStateless(component)) {
                        newProps.ref = this.storeRef;
                    }

                    return React.createElement(component, newProps);
                }
            }]);
            return Injector;
        }(React.Component), _class.displayName = displayName, _temp2);
        hoistNonReactStatics(Injector, component);
        Injector.wrappedComponent = component;
        Object.defineProperties(Injector, proxiedInjectorProps);
        return Injector;
    }

    function grabStoresByName(storeNames) {
        return function (baseStores, nextProps) {
            storeNames.forEach(function (storeName) {
                if (storeName in nextProps) return;
                if (!(storeName in baseStores)) throw new Error("MobX injector: Store '" + storeName + "' is not available! Make sure it is provided by some Provider");
                nextProps[storeName] = baseStores[storeName];
            });
            return nextProps;
        };
    }

    function inject() {
        var grabStoresFn = void 0;

        if (typeof arguments[0] === "function") {
            grabStoresFn = arguments[0];
            return function (componentClass) {
                var injected = createStoreInjector(grabStoresFn, componentClass);
                injected.isMobxInjector = false;
                injected = observer(injected);
                injected.isMobxInjector = true;
                return injected;
            };
        } else {
            var storeNames = [];

            for (var i = 0; i < arguments.length; i++) {
                storeNames[i] = arguments[i];
            }

            grabStoresFn = grabStoresByName(storeNames);
            return function (componentClass) {
                return createStoreInjector(grabStoresFn, componentClass, storeNames.join("-"));
            };
        }
    }

    var isDevtoolsEnabled = false;
    var isUsingStaticRendering = false;
    var warnedAboutObserverInjectDeprecation = false;
    var componentByNodeRegistery = typeof WeakMap !== "undefined" ? new WeakMap() : undefined;
    var renderReporter = new EventEmitter();

    function findDOMNode$1(component) {
        if (findDOMNode) {
            try {
                return findDOMNode(component);
            } catch (e) {
                return null;
            }
        }

        return null;
    }

    function reportRendering(component) {
        var node = findDOMNode$1(component);
        if (node && componentByNodeRegistery) componentByNodeRegistery.set(node, component);
        renderReporter.emit({
            event: "render",
            renderTime: component.__$mobRenderEnd - component.__$mobRenderStart,
            totalTime: Date.now() - component.__$mobRenderStart,
            component: component,
            node: node
        });
    }

    function trackComponents() {
        if (typeof WeakMap === "undefined") throw new Error("[mobx-react] tracking components is not supported in this browser.");
        if (!isDevtoolsEnabled) isDevtoolsEnabled = true;
    }

    function useStaticRendering(useStaticRendering) {
        isUsingStaticRendering = useStaticRendering;
    }

    var errorsReporter = new EventEmitter();

    function patch(target, funcName) {
        var runMixinFirst = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        var base = target[funcName];
        var mixinFunc = reactiveMixin[funcName];
        var f = !base ? mixinFunc : runMixinFirst === true ? function () {
            mixinFunc.apply(this, arguments);
            base.apply(this, arguments);
        } : function () {
            base.apply(this, arguments);
            mixinFunc.apply(this, arguments);
        };
        target[funcName] = f;
    }

    function shallowEqual(objA, objB) {
        if (is(objA, objB)) return true;

        if ((typeof objA === "undefined" ? "undefined" : _typeof(objA)) !== "object" || objA === null || (typeof objB === "undefined" ? "undefined" : _typeof(objB)) !== "object" || objB === null) {
            return false;
        }

        var keysA = Object.keys(objA);
        var keysB = Object.keys(objB);
        if (keysA.length !== keysB.length) return false;

        for (var i = 0; i < keysA.length; i++) {
            if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
                return false;
            }
        }

        return true;
    }

    function is(x, y) {
        if (x === y) {
            return x !== 0 || 1 / x === 1 / y;
        } else {
            return x !== x && y !== y;
        }
    }

    var reactiveMixin = {
        componentWillMount: function componentWillMount() {
            var _this = this;

            if (isUsingStaticRendering === true) return;
            var initialName = this.displayName || this.name || this.constructor && (this.constructor.displayName || this.constructor.name) || "<component>";
            var rootNodeID = this._reactInternalInstance && this._reactInternalInstance._rootNodeID || this._reactInternalFiber && this._reactInternalFiber._debugID;
            var skipRender = false;
            var isForcingUpdate = false;

            function makePropertyObservableReference(propName) {
                var valueHolder = this[propName];
                var atom = mobx.createAtom("reactive " + propName);
                Object.defineProperty(this, propName, {
                    configurable: true,
                    enumerable: true,
                    get: function get$$1() {
                        atom.reportObserved();
                        return valueHolder;
                    },
                    set: function set$$1(v) {
                        if (!isForcingUpdate && !shallowEqual(valueHolder, v)) {
                            valueHolder = v;
                            skipRender = true;
                            atom.reportChanged();
                            skipRender = false;
                        } else {
                            valueHolder = v;
                        }
                    }
                });
            }

            makePropertyObservableReference.call(this, "props");
            makePropertyObservableReference.call(this, "state");
            var baseRender = this.render.bind(this);
            var reaction = null;
            var isRenderingPending = false;

            var initialRender = function initialRender() {
                reaction = new mobx.Reaction(initialName + "#" + rootNodeID + ".render()", function () {
                    if (!isRenderingPending) {
                        isRenderingPending = true;
                        if (typeof _this.componentWillReact === "function") _this.componentWillReact();

                        if (_this.__$mobxIsUnmounted !== true) {
                            var hasError = true;

                            try {
                                isForcingUpdate = true;
                                if (!skipRender) React.Component.prototype.forceUpdate.call(_this);
                                hasError = false;
                            } finally {
                                isForcingUpdate = false;
                                if (hasError) reaction.dispose();
                            }
                        }
                    }
                });
                reaction.reactComponent = _this;
                reactiveRender.$mobx = reaction;
                _this.render = reactiveRender;
                return reactiveRender();
            };

            var reactiveRender = function reactiveRender() {
                isRenderingPending = false;
                var exception = undefined;
                var rendering = undefined;
                reaction.track(function () {
                    if (isDevtoolsEnabled) {
                        _this.__$mobRenderStart = Date.now();
                    }

                    try {
                        rendering = mobx._allowStateChanges(false, baseRender);
                    } catch (e) {
                        exception = e;
                    }

                    if (isDevtoolsEnabled) {
                        _this.__$mobRenderEnd = Date.now();
                    }
                });

                if (exception) {
                    errorsReporter.emit(exception);
                    throw exception;
                }

                return rendering;
            };

            this.render = initialRender;
        },
        componentWillUnmount: function componentWillUnmount() {
            if (isUsingStaticRendering === true) return;
            this.render.$mobx && this.render.$mobx.dispose();
            this.__$mobxIsUnmounted = true;

            if (isDevtoolsEnabled) {
                var node = findDOMNode$1(this);

                if (node && componentByNodeRegistery) {
                    componentByNodeRegistery.delete(node);
                }

                renderReporter.emit({
                    event: "destroy",
                    component: this,
                    node: node
                });
            }
        },
        componentDidMount: function componentDidMount() {
            if (isDevtoolsEnabled) {
                reportRendering(this);
            }
        },
        componentDidUpdate: function componentDidUpdate() {
            if (isDevtoolsEnabled) {
                reportRendering(this);
            }
        },
        shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {
            if (isUsingStaticRendering) {
                console.warn("[mobx-react] It seems that a re-rendering of a React component is triggered while in static (server-side) mode. Please make sure components are rendered only once server-side.");
            }

            if (this.state !== nextState) {
                return true;
            }

            return !shallowEqual(this.props, nextProps);
        }
    };

    function observer(arg1, arg2) {
        if (typeof arg1 === "string") {
            throw new Error("Store names should be provided as array");
        }

        if (Array.isArray(arg1)) {
            if (!warnedAboutObserverInjectDeprecation) {
                warnedAboutObserverInjectDeprecation = true;
                console.warn('Mobx observer: Using observer to inject stores is deprecated since 4.0. Use `@inject("store1", "store2") @observer ComponentClass` or `inject("store1", "store2")(observer(componentClass))` instead of `@observer(["store1", "store2"]) ComponentClass`');
            }

            if (!arg2) {
                return function (componentClass) {
                    return observer(arg1, componentClass);
                };
            } else {
                return inject.apply(null, arg1)(observer(arg2));
            }
        }

        var componentClass = arg1;

        if (componentClass.isMobxInjector === true) {
            console.warn("Mobx observer: You are trying to use 'observer' on a component that already has 'inject'. Please apply 'observer' before applying 'inject'");
        }

        if (typeof componentClass === "function" && (!componentClass.prototype || !componentClass.prototype.render) && !componentClass.isReactClass && !React.Component.isPrototypeOf(componentClass)) {
            var _class, _temp;

            return observer((_temp = _class = function (_Component) {
                inherits(_class, _Component);

                function _class() {
                    classCallCheck(this, _class);
                    return possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));
                }

                createClass(_class, [{
                    key: "render",
                    value: function render() {
                        return componentClass.call(this, this.props, this.context);
                    }
                }]);
                return _class;
            }(React.Component), _class.displayName = componentClass.displayName || componentClass.name, _class.contextTypes = componentClass.contextTypes, _class.propTypes = componentClass.propTypes, _class.defaultProps = componentClass.defaultProps, _temp));
        }

        if (!componentClass) {
            throw new Error("Please pass a valid component to 'observer'");
        }

        var target = componentClass.prototype || componentClass;
        mixinLifecycleEvents(target);
        componentClass.isMobXReactObserver = true;
        return componentClass;
    }

    function mixinLifecycleEvents(target) {
        patch(target, "componentWillMount", true);
        ["componentDidMount", "componentWillUnmount", "componentDidUpdate"].forEach(function (funcName) {
            patch(target, funcName);
        });

        if (!target.shouldComponentUpdate) {
            target.shouldComponentUpdate = reactiveMixin.shouldComponentUpdate;
        }
    }

    var Observer = observer(function (_ref) {
        var children = _ref.children,
            observerInject = _ref.inject,
            render = _ref.render;
        var component = children || render;

        if (typeof component === "undefined") {
            return null;
        }

        if (!observerInject) {
            return component();
        }

        var InjectComponent = inject(observerInject)(component);
        return React__default.createElement(InjectComponent, null);
    });
    Observer.displayName = "Observer";

    var ObserverPropsCheck = function ObserverPropsCheck(props, key, componentName, location, propFullName) {
        var extraKey = key === "children" ? "render" : "children";

        if (typeof props[key] === "function" && typeof props[extraKey] === "function") {
            return new Error("Invalid prop,do not use children and render in the same time in`" + componentName);
        }

        if (typeof props[key] === "function" || typeof props[extraKey] === "function") {
            return;
        }

        return new Error("Invalid prop `" + propFullName + "` of type `" + _typeof(props[key]) + "` supplied to" + " `" + componentName + "`, expected `function`.");
    };

    Observer.propTypes = {
        render: ObserverPropsCheck,
        children: ObserverPropsCheck
    };

    var _class;

    var _temp;

    var specialReactKeys = {
        children: true,
        key: true,
        ref: true
    };
    var Provider = (_temp = _class = function (_Component) {
        inherits(Provider, _Component);

        function Provider() {
            classCallCheck(this, Provider);
            return possibleConstructorReturn(this, (Provider.__proto__ || Object.getPrototypeOf(Provider)).apply(this, arguments));
        }

        createClass(Provider, [{
            key: "render",
            value: function render() {
                return React.Children.only(this.props.children);
            }
        }, {
            key: "getChildContext",
            value: function getChildContext() {
                var stores = {};
                var baseStores = this.context.mobxStores;
                if (baseStores) for (var key in baseStores) {
                    stores[key] = baseStores[key];
                }

                for (var _key in this.props) {
                    if (!specialReactKeys[_key] && _key !== "suppressChangedStoreWarning") stores[_key] = this.props[_key];
                }

                return {
                    mobxStores: stores
                };
            }
        }, {
            key: "componentWillReceiveProps",
            value: function componentWillReceiveProps(nextProps) {
                if (Object.keys(nextProps).length !== Object.keys(this.props).length) console.warn("MobX Provider: The set of provided stores has changed. Please avoid changing stores as the change might not propagate to all children");
                if (!nextProps.suppressChangedStoreWarning) for (var key in nextProps) {
                    if (!specialReactKeys[key] && this.props[key] !== nextProps[key]) console.warn("MobX Provider: Provided store '" + key + "' has changed. Please avoid replacing stores as the change might not propagate to all children");
                }
            }
        }]);
        return Provider;
    }(React.Component), _class.contextTypes = {
        mobxStores: objectOrObservableObject
    }, _class.childContextTypes = {
        mobxStores: objectOrObservableObject.isRequired
    }, _temp);
    if (!React.Component) throw new Error("mobx-react requires React to be available");
    if (!mobx.spy) throw new Error("mobx-react requires mobx to be available");
    if (typeof unstable_batchedUpdates$1 === "function") mobx.configure({
        reactionScheduler: unstable_batchedUpdates$1
    });else if (typeof reactNative.unstable_batchedUpdates === "function") mobx.configure({
        reactionScheduler: reactNative.unstable_batchedUpdates
    });

    var onError = function onError(fn) {
        return errorsReporter.on(fn);
    };

    if ((typeof __MOBX_DEVTOOLS_GLOBAL_HOOK__ === "undefined" ? "undefined" : _typeof(__MOBX_DEVTOOLS_GLOBAL_HOOK__)) === "object") {
        var mobx$1 = {
            spy: mobx.spy,
            extras: {
                getDebugName: mobx.getDebugName
            }
        };
        var mobxReact = {
            renderReporter: renderReporter,
            componentByNodeRegistery: componentByNodeRegistery,
            trackComponents: trackComponents
        };

        __MOBX_DEVTOOLS_GLOBAL_HOOK__.injectMobxReact(mobxReact, mobx$1);
    }

    exports.propTypes = propTypes;
    exports.PropTypes = propTypes;
    exports.onError = onError;
    exports.observer = observer;
    exports.Observer = Observer;
    exports.renderReporter = renderReporter;
    exports.componentByNodeRegistery = componentByNodeRegistery;
    exports.trackComponents = trackComponents;
    exports.useStaticRendering = useStaticRendering;
    exports.Provider = Provider;
    exports.inject = inject;
},340,[341,114,12],"node_modules/mobx-react/native.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var extendStatics = Object.setPrototypeOf || {
        __proto__: []
    } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
        }
    };

    function __extends(d, b) {
        extendStatics(d, b);

        function __() {
            this.constructor = d;
        }

        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];

            for (var p in s) {
                if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
        }

        return t;
    };

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"];
        if (!m) return o;
        var i = m.call(o),
            r,
            ar = [],
            e;

        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
                ar.push(r.value);
            }
        } catch (error) {
            e = {
                error: error
            };
        } finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            } finally {
                if (e) throw e.error;
            }
        }

        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++) {
            ar = ar.concat(__read(arguments[i]));
        }

        return ar;
    }

    var enumerableDescriptorCache = {};
    var nonEnumerableDescriptorCache = {};

    function createPropertyInitializerDescriptor(prop, enumerable) {
        var cache = enumerable ? enumerableDescriptorCache : nonEnumerableDescriptorCache;
        return cache[prop] || (cache[prop] = {
            configurable: true,
            enumerable: enumerable,
            get: function get() {
                initializeInstance(this);
                return this[prop];
            },
            set: function set(value) {
                initializeInstance(this);
                this[prop] = value;
            }
        });
    }

    function initializeInstance(target) {
        if (target.__mobxDidRunLazyInitializers === true) return;
        var decorators = target.__mobxDecorators;

        if (decorators) {
            addHiddenProp(target, "__mobxDidRunLazyInitializers", true);

            for (var key in decorators) {
                var d = decorators[key];
                d.propertyCreator(target, d.prop, d.descriptor, d.decoratorTarget, d.decoratorArguments);
            }
        }
    }

    function createPropDecorator(propertyInitiallyEnumerable, propertyCreator) {
        return function decoratorFactory() {
            var decoratorArguments;

            var decorator = function decorate(target, prop, descriptor, applyImmediately) {
                if (applyImmediately === true) {
                    propertyCreator(target, prop, descriptor, target, decoratorArguments);
                    return null;
                }

                if (process.env.NODE_ENV !== "production" && !quacksLikeADecorator(arguments)) fail$1("This function is a decorator, but it wasn't invoked like a decorator");

                if (!Object.prototype.hasOwnProperty.call(target, "__mobxDecorators")) {
                    var inheritedDecorators = target.__mobxDecorators;
                    addHiddenProp(target, "__mobxDecorators", __assign({}, inheritedDecorators));
                }

                target.__mobxDecorators[prop] = {
                    prop: prop,
                    propertyCreator: propertyCreator,
                    descriptor: descriptor,
                    decoratorTarget: target,
                    decoratorArguments: decoratorArguments
                };
                return createPropertyInitializerDescriptor(prop, propertyInitiallyEnumerable);
            };

            if (quacksLikeADecorator(arguments)) {
                decoratorArguments = EMPTY_ARRAY;
                return decorator.apply(null, arguments);
            } else {
                decoratorArguments = Array.prototype.slice.call(arguments);
                return decorator;
            }
        };
    }

    function quacksLikeADecorator(args) {
        return (args.length === 2 || args.length === 3) && typeof args[1] === "string" || args.length === 4 && args[3] === true;
    }

    function isSpyEnabled() {
        return !!globalState.spyListeners.length;
    }

    function spyReport(event) {
        if (!globalState.spyListeners.length) return;
        var listeners = globalState.spyListeners;

        for (var i = 0, l = listeners.length; i < l; i++) {
            listeners[i](event);
        }
    }

    function spyReportStart(event) {
        var change = __assign({}, event, {
            spyReportStart: true
        });

        spyReport(change);
    }

    var END_EVENT = {
        spyReportEnd: true
    };

    function spyReportEnd(change) {
        if (change) spyReport(__assign({}, change, {
            spyReportEnd: true
        }));else spyReport(END_EVENT);
    }

    function spy(listener) {
        globalState.spyListeners.push(listener);
        return once(function () {
            globalState.spyListeners = globalState.spyListeners.filter(function (l) {
                return l !== listener;
            });
        });
    }

    function createAction(actionName, fn) {
        if (process.env.NODE_ENV !== "production") {
            invariant(typeof fn === "function", "`action` can only be invoked on functions");
            if (typeof actionName !== "string" || !actionName) fail("actions should have valid names, got: '" + actionName + "'");
        }

        var res = function res() {
            return executeAction(actionName, fn, this, arguments);
        };

        res.isMobxAction = true;
        return res;
    }

    function executeAction(actionName, fn, scope, args) {
        var runInfo = startAction(actionName, fn, scope, args);

        try {
            return fn.apply(scope, args);
        } finally {
            endAction(runInfo);
        }
    }

    function startAction(actionName, fn, scope, args) {
        var notifySpy = isSpyEnabled() && !!actionName;
        var startTime = 0;

        if (notifySpy) {
            startTime = Date.now();
            var l = args && args.length || 0;
            var flattendArgs = new Array(l);
            if (l > 0) for (var i = 0; i < l; i++) {
                flattendArgs[i] = args[i];
            }
            spyReportStart({
                type: "action",
                name: actionName,
                object: scope,
                arguments: flattendArgs
            });
        }

        var prevDerivation = untrackedStart();
        startBatch();
        var prevAllowStateChanges = allowStateChangesStart(true);
        return {
            prevDerivation: prevDerivation,
            prevAllowStateChanges: prevAllowStateChanges,
            notifySpy: notifySpy,
            startTime: startTime
        };
    }

    function endAction(runInfo) {
        allowStateChangesEnd(runInfo.prevAllowStateChanges);
        endBatch();
        untrackedEnd(runInfo.prevDerivation);
        if (runInfo.notifySpy) spyReportEnd({
            time: Date.now() - runInfo.startTime
        });
    }

    function allowStateChanges(allowStateChanges, func) {
        var prev = allowStateChangesStart(allowStateChanges);
        var res;

        try {
            res = func();
        } finally {
            allowStateChangesEnd(prev);
        }

        return res;
    }

    function allowStateChangesStart(allowStateChanges) {
        var prev = globalState.allowStateChanges;
        globalState.allowStateChanges = allowStateChanges;
        return prev;
    }

    function allowStateChangesEnd(prev) {
        globalState.allowStateChanges = prev;
    }

    function dontReassignFields() {
        fail$1(process.env.NODE_ENV !== "production" && "@action fields are not reassignable");
    }

    function namedActionDecorator(name) {
        return function (target, prop, descriptor) {
            if (descriptor) {
                if (process.env.NODE_ENV !== "production" && descriptor.get !== undefined) {
                    return fail$1("@action cannot be used with getters");
                }

                if (descriptor.value) {
                    return {
                        value: createAction(name, descriptor.value),
                        enumerable: false,
                        configurable: false,
                        writable: true
                    };
                }

                var initializer_1 = descriptor.initializer;
                return {
                    enumerable: false,
                    configurable: false,
                    writable: process.env.NODE_ENV !== "production",
                    initializer: function initializer() {
                        return createAction(name, initializer_1.call(this));
                    }
                };
            }

            return actionFieldDecorator(name).apply(this, arguments);
        };
    }

    function actionFieldDecorator(name) {
        return function (target, prop, descriptor) {
            Object.defineProperty(target, prop, {
                configurable: true,
                enumerable: false,
                get: function get() {
                    return undefined;
                },
                set: function set(value) {
                    addHiddenFinalProp(this, prop, action(name, value));
                }
            });
        };
    }

    function boundActionDecorator(target, propertyName, descriptor, applyToInstance) {
        if (applyToInstance === true) {
            defineBoundAction(target, propertyName, descriptor.value);
            return null;
        }

        if (descriptor) {
            return {
                configurable: true,
                enumerable: false,
                get: function get() {
                    defineBoundAction(this, propertyName, descriptor.value || descriptor.initializer.call(this));
                    return this[propertyName];
                },
                set: dontReassignFields
            };
        }

        return {
            enumerable: false,
            configurable: true,
            set: function set(v) {
                defineBoundAction(this, propertyName, v);
            },
            get: function get() {
                return undefined;
            }
        };
    }

    var action = function action(arg1, arg2, arg3, arg4) {
        if (arguments.length === 1 && typeof arg1 === "function") return createAction(arg1.name || "<unnamed action>", arg1);
        if (arguments.length === 2 && typeof arg2 === "function") return createAction(arg1, arg2);
        if (arguments.length === 1 && typeof arg1 === "string") return namedActionDecorator(arg1);

        if (arg4 === true) {
            arg1[arg2] = createAction(arg1.name || arg2, arg3.value);
        } else {
            return namedActionDecorator(arg2).apply(null, arguments);
        }
    };

    action.bound = boundActionDecorator;

    function runInAction(arg1, arg2) {
        var actionName = typeof arg1 === "string" ? arg1 : arg1.name || "<unnamed action>";
        var fn = typeof arg1 === "function" ? arg1 : arg2;

        if (process.env.NODE_ENV !== "production") {
            invariant(typeof fn === "function" && fn.length === 0, "`runInAction` expects a function without arguments");
            if (typeof actionName !== "string" || !actionName) fail$1("actions should have valid names, got: '" + actionName + "'");
        }

        return executeAction(actionName, fn, this, undefined);
    }

    function isAction(thing) {
        return typeof thing === "function" && thing.isMobxAction === true;
    }

    function defineBoundAction(target, propertyName, fn) {
        addHiddenProp(target, propertyName, createAction(propertyName, fn.bind(target)));
    }

    var toString = Object.prototype.toString;

    function deepEqual(a, b) {
        return eq(a, b);
    }

    function eq(a, b, aStack, bStack) {
        if (a === b) return a !== 0 || 1 / a === 1 / b;
        if (a == null || b == null) return false;
        if (a !== a) return b !== b;
        var type = typeof a;
        if (type !== "function" && type !== "object" && typeof b != "object") return false;
        return deepEq(a, b, aStack, bStack);
    }

    function deepEq(a, b, aStack, bStack) {
        a = unwrap(a);
        b = unwrap(b);
        var className = toString.call(a);
        if (className !== toString.call(b)) return false;

        switch (className) {
            case "[object RegExp]":
            case "[object String]":
                return "" + a === "" + b;

            case "[object Number]":
                if (+a !== +a) return +b !== +b;
                return +a === 0 ? 1 / +a === 1 / b : +a === +b;

            case "[object Date]":
            case "[object Boolean]":
                return +a === +b;

            case "[object Symbol]":
                return typeof Symbol !== "undefined" && (typeof Symbol === "function" ? Symbol.valueOf : "@@valueOf").call(a) === (typeof Symbol === "function" ? Symbol.valueOf : "@@valueOf").call(b);
        }

        var areArrays = className === "[object Array]";

        if (!areArrays) {
            if (typeof a != "object" || typeof b != "object") return false;
            var aCtor = a.constructor,
                bCtor = b.constructor;

            if (aCtor !== bCtor && !(typeof aCtor === "function" && aCtor instanceof aCtor && typeof bCtor === "function" && bCtor instanceof bCtor) && "constructor" in a && "constructor" in b) {
                return false;
            }
        }

        aStack = aStack || [];
        bStack = bStack || [];
        var length = aStack.length;

        while (length--) {
            if (aStack[length] === a) return bStack[length] === b;
        }

        aStack.push(a);
        bStack.push(b);

        if (areArrays) {
            length = a.length;
            if (length !== b.length) return false;

            while (length--) {
                if (!eq(a[length], b[length], aStack, bStack)) return false;
            }
        } else {
            var keys$$1 = Object.keys(a),
                key;
            length = keys$$1.length;
            if (Object.keys(b).length !== length) return false;

            while (length--) {
                key = keys$$1[length];
                if (!(has$$1(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
            }
        }

        aStack.pop();
        bStack.pop();
        return true;
    }

    function unwrap(a) {
        if (isObservableArray(a)) return a.peek();
        if (isES6Map(a) || isObservableMap(a)) return iteratorToArray(a.entries());
        return a;
    }

    function has$$1(a, key) {
        return Object.prototype.hasOwnProperty.call(a, key);
    }

    function identityComparer(a, b) {
        return a === b;
    }

    function structuralComparer(a, b) {
        return deepEqual(a, b);
    }

    function defaultComparer(a, b) {
        return areBothNaN(a, b) || identityComparer(a, b);
    }

    var comparer = {
        identity: identityComparer,
        structural: structuralComparer,
        default: defaultComparer
    };

    function autorun(view, opts) {
        if (opts === void 0) {
            opts = EMPTY_OBJECT;
        }

        if (process.env.NODE_ENV !== "production") {
            invariant(typeof view === "function", "Autorun expects a function as first argument");
            invariant(isAction(view) === false, "Autorun does not accept actions since actions are untrackable");
        }

        var name = opts && opts.name || view.name || "Autorun@" + getNextId();
        var runSync = !opts.scheduler && !opts.delay;
        var reaction;

        if (runSync) {
            reaction = new Reaction(name, function () {
                this.track(reactionRunner);
            }, opts.onError);
        } else {
            var scheduler_1 = createSchedulerFromOptions(opts);
            var isScheduled_1 = false;
            reaction = new Reaction(name, function () {
                if (!isScheduled_1) {
                    isScheduled_1 = true;
                    scheduler_1(function () {
                        isScheduled_1 = false;
                        if (!reaction.isDisposed) reaction.track(reactionRunner);
                    });
                }
            }, opts.onError);
        }

        function reactionRunner() {
            view(reaction);
        }

        reaction.schedule();
        return reaction.getDisposer();
    }

    var run = function run(f) {
        return f();
    };

    function createSchedulerFromOptions(opts) {
        return opts.scheduler ? opts.scheduler : opts.delay ? function (f) {
            return setTimeout(f, opts.delay);
        } : run;
    }

    function reaction(expression, effect, opts) {
        if (opts === void 0) {
            opts = EMPTY_OBJECT;
        }

        if (typeof opts === "boolean") {
            opts = {
                fireImmediately: opts
            };
            deprecated("Using fireImmediately as argument is deprecated. Use '{ fireImmediately: true }' instead");
        }

        if (process.env.NODE_ENV !== "production") {
            invariant(typeof expression === "function", "First argument to reaction should be a function");
            invariant(typeof opts === "object", "Third argument of reactions should be an object");
        }

        var name = opts.name || "Reaction@" + getNextId();
        var effectAction = action(name, opts.onError ? wrapErrorHandler(opts.onError, effect) : effect);
        var runSync = !opts.scheduler && !opts.delay;
        var scheduler = createSchedulerFromOptions(opts);
        var firstTime = true;
        var isScheduled = false;
        var value;
        var equals = opts.compareStructural ? comparer.structural : opts.equals || comparer.default;
        var r = new Reaction(name, function () {
            if (firstTime || runSync) {
                reactionRunner();
            } else if (!isScheduled) {
                isScheduled = true;
                scheduler(reactionRunner);
            }
        }, opts.onError);

        function reactionRunner() {
            isScheduled = false;
            if (r.isDisposed) return;
            var changed = false;
            r.track(function () {
                var nextValue = expression(r);
                changed = firstTime || !equals(value, nextValue);
                value = nextValue;
            });
            if (firstTime && opts.fireImmediately) effectAction(value, r);
            if (!firstTime && changed === true) effectAction(value, r);
            if (firstTime) firstTime = false;
        }

        r.schedule();
        return r.getDisposer();
    }

    function wrapErrorHandler(errorHandler, baseFn) {
        return function () {
            try {
                return baseFn.apply(this, arguments);
            } catch (e) {
                errorHandler.call(this, e);
            }
        };
    }

    var ComputedValue = function () {
        function ComputedValue(options) {
            var _this = this;

            this.dependenciesState = IDerivationState.NOT_TRACKING;
            this.observing = [];
            this.newObserving = null;
            this.isBeingObserved = false;
            this.isPendingUnobservation = false;
            this.observers = [];
            this.observersIndexes = {};
            this.diffValue = 0;
            this.runId = 0;
            this.lastAccessedBy = 0;
            this.lowestObserverState = IDerivationState.UP_TO_DATE;
            this.unboundDepsCount = 0;
            this.__mapid = "#" + getNextId();
            this.value = new CaughtException(null);
            this.isComputing = false;
            this.isRunningSetter = false;
            this.isTracing = TraceMode.NONE;
            if (process.env.NODE_ENV === "production" && !options.get) return fail$1("missing option for computed: get");
            this.derivation = options.get;
            this.name = options.name || "ComputedValue@" + getNextId();
            if (options.set) this.setter = createAction(this.name + "-setter", options.set);
            this.equals = options.equals || (options.compareStructural || options.struct ? comparer.structural : comparer.default);
            this.scope = options.context;
            this.requiresReaction = !!options.requiresReaction;

            if (options.keepAlive === true) {
                autorun(function () {
                    return _this.get();
                });
            }
        }

        ComputedValue.prototype.onBecomeStale = function () {
            propagateMaybeChanged(this);
        };

        ComputedValue.prototype.onBecomeUnobserved = function () {};

        ComputedValue.prototype.onBecomeObserved = function () {};

        ComputedValue.prototype.get = function () {
            if (this.isComputing) fail$1("Cycle detected in computation " + this.name + ": " + this.derivation);

            if (globalState.inBatch === 0) {
                if (shouldCompute(this)) {
                    this.warnAboutUntrackedRead();
                    startBatch();
                    this.value = this.computeValue(false);
                    endBatch();
                }
            } else {
                reportObserved(this);
                if (shouldCompute(this)) if (this.trackAndCompute()) propagateChangeConfirmed(this);
            }

            var result = this.value;
            if (isCaughtException(result)) throw result.cause;
            return result;
        };

        ComputedValue.prototype.peek = function () {
            var res = this.computeValue(false);
            if (isCaughtException(res)) throw res.cause;
            return res;
        };

        ComputedValue.prototype.set = function (value) {
            if (this.setter) {
                invariant(!this.isRunningSetter, "The setter of computed value '" + this.name + "' is trying to update itself. Did you intend to update an _observable_ value, instead of the computed property?");
                this.isRunningSetter = true;

                try {
                    this.setter.call(this.scope, value);
                } finally {
                    this.isRunningSetter = false;
                }
            } else invariant(false, process.env.NODE_ENV !== "production" && "[ComputedValue '" + this.name + "'] It is not possible to assign a new value to a computed value.");
        };

        ComputedValue.prototype.trackAndCompute = function () {
            if (isSpyEnabled()) {
                spyReport({
                    object: this.scope,
                    type: "compute",
                    name: this.name
                });
            }

            var oldValue = this.value;
            var wasSuspended = this.dependenciesState === IDerivationState.NOT_TRACKING;
            var newValue = this.value = this.computeValue(true);
            return wasSuspended || isCaughtException(oldValue) || isCaughtException(newValue) || !this.equals(oldValue, newValue);
        };

        ComputedValue.prototype.computeValue = function (track) {
            this.isComputing = true;
            globalState.computationDepth++;
            var res;

            if (track) {
                res = trackDerivedFunction(this, this.derivation, this.scope);
            } else {
                if (globalState.disableErrorBoundaries === true) {
                    res = this.derivation.call(this.scope);
                } else {
                    try {
                        res = this.derivation.call(this.scope);
                    } catch (e) {
                        res = new CaughtException(e);
                    }
                }
            }

            globalState.computationDepth--;
            this.isComputing = false;
            return res;
        };

        ComputedValue.prototype.suspend = function () {
            clearObserving(this);
            this.value = undefined;
        };

        ComputedValue.prototype.observe = function (listener, fireImmediately) {
            var _this = this;

            var firstTime = true;
            var prevValue = undefined;
            return autorun(function () {
                var newValue = _this.get();

                if (!firstTime || fireImmediately) {
                    var prevU = untrackedStart();
                    listener({
                        type: "update",
                        object: _this,
                        newValue: newValue,
                        oldValue: prevValue
                    });
                    untrackedEnd(prevU);
                }

                firstTime = false;
                prevValue = newValue;
            });
        };

        ComputedValue.prototype.warnAboutUntrackedRead = function () {
            if (process.env.NODE_ENV === "production") return;

            if (this.requiresReaction === true) {
                fail$1("[mobx] Computed value " + this.name + " is read outside a reactive context");
            }

            if (this.isTracing !== TraceMode.NONE) {
                console.log("[mobx.trace] '" + this.name + "' is being read outside a reactive context. Doing a full recompute");
            }

            if (globalState.computedRequiresReaction) {
                console.warn("[mobx] Computed value " + this.name + " is being read outside a reactive context. Doing a full recompute");
            }
        };

        ComputedValue.prototype.toJSON = function () {
            return this.get();
        };

        ComputedValue.prototype.toString = function () {
            return this.name + "[" + this.derivation.toString() + "]";
        };

        ComputedValue.prototype.valueOf = function () {
            return toPrimitive(this.get());
        };

        return ComputedValue;
    }();

    ComputedValue.prototype[primitiveSymbol()] = ComputedValue.prototype.valueOf;
    var isComputedValue = createInstanceofPredicate("ComputedValue", ComputedValue);

    function hasInterceptors(interceptable) {
        return interceptable.interceptors !== undefined && interceptable.interceptors.length > 0;
    }

    function registerInterceptor(interceptable, handler) {
        var interceptors = interceptable.interceptors || (interceptable.interceptors = []);
        interceptors.push(handler);
        return once(function () {
            var idx = interceptors.indexOf(handler);
            if (idx !== -1) interceptors.splice(idx, 1);
        });
    }

    function interceptChange(interceptable, change) {
        var prevU = untrackedStart();

        try {
            var interceptors = interceptable.interceptors;
            if (interceptors) for (var i = 0, l = interceptors.length; i < l; i++) {
                change = interceptors[i](change);
                invariant(!change || change.type, "Intercept handlers should return nothing or a change object");
                if (!change) break;
            }
            return change;
        } finally {
            untrackedEnd(prevU);
        }
    }

    function hasListeners(listenable) {
        return listenable.changeListeners !== undefined && listenable.changeListeners.length > 0;
    }

    function registerListener(listenable, handler) {
        var listeners = listenable.changeListeners || (listenable.changeListeners = []);
        listeners.push(handler);
        return once(function () {
            var idx = listeners.indexOf(handler);
            if (idx !== -1) listeners.splice(idx, 1);
        });
    }

    function notifyListeners(listenable, change) {
        var prevU = untrackedStart();
        var listeners = listenable.changeListeners;
        if (!listeners) return;
        listeners = listeners.slice();

        for (var i = 0, l = listeners.length; i < l; i++) {
            listeners[i](change);
        }

        untrackedEnd(prevU);
    }

    var UNCHANGED = {};
    declareAtom();

    var ObservableValue = function (_super) {
        __extends(ObservableValue, _super);

        function ObservableValue(value, enhancer, name, notifySpy) {
            if (name === void 0) {
                name = "ObservableValue@" + getNextId();
            }

            if (notifySpy === void 0) {
                notifySpy = true;
            }

            var _this = _super.call(this, name) || this;

            _this.enhancer = enhancer;
            _this.hasUnreportedChange = false;
            _this.value = enhancer(value, undefined, name);

            if (notifySpy && isSpyEnabled()) {
                spyReport({
                    type: "create",
                    name: _this.name,
                    newValue: "" + _this.value
                });
            }

            return _this;
        }

        ObservableValue.prototype.dehanceValue = function (value) {
            if (this.dehancer !== undefined) return this.dehancer(value);
            return value;
        };

        ObservableValue.prototype.set = function (newValue) {
            var oldValue = this.value;
            newValue = this.prepareNewValue(newValue);

            if (newValue !== UNCHANGED) {
                var notifySpy = isSpyEnabled();

                if (notifySpy) {
                    spyReportStart({
                        type: "update",
                        name: this.name,
                        newValue: newValue,
                        oldValue: oldValue
                    });
                }

                this.setNewValue(newValue);
                if (notifySpy) spyReportEnd();
            }
        };

        ObservableValue.prototype.prepareNewValue = function (newValue) {
            checkIfStateModificationsAreAllowed(this);

            if (hasInterceptors(this)) {
                var change = interceptChange(this, {
                    object: this,
                    type: "update",
                    newValue: newValue
                });
                if (!change) return UNCHANGED;
                newValue = change.newValue;
            }

            newValue = this.enhancer(newValue, this.value, this.name);
            return this.value !== newValue ? newValue : UNCHANGED;
        };

        ObservableValue.prototype.setNewValue = function (newValue) {
            var oldValue = this.value;
            this.value = newValue;
            this.reportChanged();

            if (hasListeners(this)) {
                notifyListeners(this, {
                    type: "update",
                    object: this,
                    newValue: newValue,
                    oldValue: oldValue
                });
            }
        };

        ObservableValue.prototype.get = function () {
            this.reportObserved();
            return this.dehanceValue(this.value);
        };

        ObservableValue.prototype.intercept = function (handler) {
            return registerInterceptor(this, handler);
        };

        ObservableValue.prototype.observe = function (listener, fireImmediately) {
            if (fireImmediately) listener({
                object: this,
                type: "update",
                newValue: this.value,
                oldValue: undefined
            });
            return registerListener(this, listener);
        };

        ObservableValue.prototype.toJSON = function () {
            return this.get();
        };

        ObservableValue.prototype.toString = function () {
            return this.name + "[" + this.value + "]";
        };

        ObservableValue.prototype.valueOf = function () {
            return toPrimitive(this.get());
        };

        return ObservableValue;
    }(Atom);

    ObservableValue.prototype[primitiveSymbol()] = ObservableValue.prototype.valueOf;
    var isObservableValue = createInstanceofPredicate("ObservableValue", ObservableValue);

    var ObservableObjectAdministration = function () {
        function ObservableObjectAdministration(target, name, defaultEnhancer) {
            this.target = target;
            this.name = name;
            this.defaultEnhancer = defaultEnhancer;
            this.values = {};
        }

        ObservableObjectAdministration.prototype.read = function (owner, key) {
            if (this.target !== owner) {
                this.illegalAccess(owner, key);
                return;
            }

            return this.values[key].get();
        };

        ObservableObjectAdministration.prototype.write = function (owner, key, newValue) {
            var instance = this.target;

            if (instance !== owner) {
                this.illegalAccess(owner, key);
                return;
            }

            var observable = this.values[key];

            if (observable instanceof ComputedValue) {
                observable.set(newValue);
                return;
            }

            if (hasInterceptors(this)) {
                var change = interceptChange(this, {
                    type: "update",
                    object: instance,
                    name: key,
                    newValue: newValue
                });
                if (!change) return;
                newValue = change.newValue;
            }

            newValue = observable.prepareNewValue(newValue);

            if (newValue !== UNCHANGED) {
                var notify = hasListeners(this);
                var notifySpy = isSpyEnabled();
                var change = notify || notifySpy ? {
                    type: "update",
                    object: instance,
                    oldValue: observable.value,
                    name: key,
                    newValue: newValue
                } : null;
                if (notifySpy) spyReportStart(__assign({}, change, {
                    name: this.name,
                    key: key
                }));
                observable.setNewValue(newValue);
                if (notify) notifyListeners(this, change);
                if (notifySpy) spyReportEnd();
            }
        };

        ObservableObjectAdministration.prototype.remove = function (key) {
            if (!this.values[key]) return;
            var target = this.target;

            if (hasInterceptors(this)) {
                var change = interceptChange(this, {
                    object: target,
                    name: key,
                    type: "remove"
                });
                if (!change) return;
            }

            try {
                startBatch();
                var notify = hasListeners(this);
                var notifySpy = isSpyEnabled();
                var oldValue = this.values[key].get();
                if (this.keys) this.keys.remove(key);
                delete this.values[key];
                delete this.target[key];
                var change = notify || notifySpy ? {
                    type: "remove",
                    object: target,
                    oldValue: oldValue,
                    name: key
                } : null;
                if (notifySpy) spyReportStart(__assign({}, change, {
                    name: this.name,
                    key: key
                }));
                if (notify) notifyListeners(this, change);
                if (notifySpy) spyReportEnd();
            } finally {
                endBatch();
            }
        };

        ObservableObjectAdministration.prototype.illegalAccess = function (owner, propName) {
            return fail$1("Property '" + propName + "' of '" + owner + "' was accessed through the prototype chain. Use 'decorate' instead to declare the prop or access it statically through it's owner");
        };

        ObservableObjectAdministration.prototype.observe = function (callback, fireImmediately) {
            process.env.NODE_ENV !== "production" && invariant(fireImmediately !== true, "`observe` doesn't support the fire immediately property for observable objects.");
            return registerListener(this, callback);
        };

        ObservableObjectAdministration.prototype.intercept = function (handler) {
            return registerInterceptor(this, handler);
        };

        ObservableObjectAdministration.prototype.getKeys = function () {
            var _this = this;

            if (this.keys === undefined) {
                this.keys = new ObservableArray(Object.keys(this.values).filter(function (key) {
                    return _this.values[key] instanceof ObservableValue;
                }), referenceEnhancer, "keys(" + this.name + ")", true);
            }

            return this.keys.slice();
        };

        return ObservableObjectAdministration;
    }();

    function asObservableObject(target, name, defaultEnhancer) {
        if (name === void 0) {
            name = "";
        }

        if (defaultEnhancer === void 0) {
            defaultEnhancer = deepEnhancer;
        }

        var adm = target.$mobx;
        if (adm) return adm;
        process.env.NODE_ENV !== "production" && invariant(Object.isExtensible(target), "Cannot make the designated object observable; it is not extensible");
        if (!isPlainObject(target)) name = (target.constructor.name || "ObservableObject") + "@" + getNextId();
        if (!name) name = "ObservableObject@" + getNextId();
        adm = new ObservableObjectAdministration(target, name, defaultEnhancer);
        addHiddenFinalProp(target, "$mobx", adm);
        return adm;
    }

    function defineObservableProperty(target, propName, newValue, enhancer) {
        var adm = asObservableObject(target);
        assertPropertyConfigurable(target, propName);

        if (hasInterceptors(adm)) {
            var change = interceptChange(adm, {
                object: target,
                name: propName,
                type: "add",
                newValue: newValue
            });
            if (!change) return;
            newValue = change.newValue;
        }

        var observable = adm.values[propName] = new ObservableValue(newValue, enhancer, adm.name + "." + propName, false);
        newValue = observable.value;
        Object.defineProperty(target, propName, generateObservablePropConfig(propName));
        if (adm.keys) adm.keys.push(propName);
        notifyPropertyAddition(adm, target, propName, newValue);
    }

    function defineComputedProperty(target, propName, options) {
        var adm = asObservableObject(target);
        options.name = adm.name + "." + propName;
        options.context = target;
        adm.values[propName] = new ComputedValue(options);
        Object.defineProperty(target, propName, generateComputedPropConfig(propName));
    }

    var observablePropertyConfigs = {};
    var computedPropertyConfigs = {};

    function generateObservablePropConfig(propName) {
        return observablePropertyConfigs[propName] || (observablePropertyConfigs[propName] = {
            configurable: true,
            enumerable: true,
            get: function get() {
                return this.$mobx.read(this, propName);
            },
            set: function set(v) {
                this.$mobx.write(this, propName, v);
            }
        });
    }

    function getAdministrationForComputedPropOwner(owner) {
        var adm = owner.$mobx;

        if (!adm) {
            initializeInstance(owner);
            return owner.$mobx;
        }

        return adm;
    }

    function generateComputedPropConfig(propName) {
        return computedPropertyConfigs[propName] || (computedPropertyConfigs[propName] = {
            configurable: true,
            enumerable: false,
            get: function get() {
                return getAdministrationForComputedPropOwner(this).read(this, propName);
            },
            set: function set(v) {
                getAdministrationForComputedPropOwner(this).write(this, propName, v);
            }
        });
    }

    function notifyPropertyAddition(adm, object, key, newValue) {
        var notify = hasListeners(adm);
        var notifySpy = isSpyEnabled();
        var change = notify || notifySpy ? {
            type: "add",
            object: object,
            name: key,
            newValue: newValue
        } : null;
        if (notifySpy) spyReportStart(__assign({}, change, {
            name: adm.name,
            key: key
        }));
        if (notify) notifyListeners(adm, change);
        if (notifySpy) spyReportEnd();
    }

    var isObservableObjectAdministration = createInstanceofPredicate("ObservableObjectAdministration", ObservableObjectAdministration);

    function isObservableObject(thing) {
        if (isObject(thing)) {
            initializeInstance(thing);
            return isObservableObjectAdministration(thing.$mobx);
        }

        return false;
    }

    function createDecoratorForEnhancer(enhancer) {
        var decorator = createPropDecorator(true, function (target, propertyName, descriptor, _decoratorTarget, decoratorArgs) {
            var initialValue = descriptor ? descriptor.initializer ? descriptor.initializer.call(target) : descriptor.value : undefined;
            defineObservableProperty(target, propertyName, initialValue, enhancer);
        });
        var res = typeof process !== "undefined" && process.env && process.env.NODE_ENV !== "production" ? function observableDecorator() {
            if (arguments.length < 2) return fail$1("Incorrect decorator invocation. @observable decorator doesn't expect any arguments");
            return decorator.apply(null, arguments);
        } : decorator;
        res.enhancer = enhancer;
        return res;
    }

    function _isObservable(value, property) {
        if (value === null || value === undefined) return false;

        if (property !== undefined) {
            if (process.env.NODE_ENV !== "production" && (isObservableMap(value) || isObservableArray(value))) return fail$1("isObservable(object, propertyName) is not supported for arrays and maps. Use map.has or array.length instead.");

            if (isObservableObject(value)) {
                var o = value.$mobx;
                return o.values && !!o.values[property];
            }

            return false;
        }

        return isObservableObject(value) || !!value.$mobx || isAtom(value) || isReaction(value) || isComputedValue(value);
    }

    function isObservable(value) {
        if (arguments.length !== 1) fail$1(process.env.NODE_ENV !== "production" && "isObservable expects only 1 argument. Use isObservableProp to inspect the observability of a property");
        return _isObservable(value);
    }

    function isObservableProp(value, propName) {
        if (typeof propName !== "string") return fail$1(process.env.NODE_ENV !== "production" && "expected a property name as second argument");
        return _isObservable(value, propName);
    }

    function _isComputed(value, property) {
        if (value === null || value === undefined) return false;

        if (property !== undefined) {
            if (isObservableObject(value) === false) return false;
            if (!value.$mobx.values[property]) return false;
            var atom = getAtom(value, property);
            return isComputedValue(atom);
        }

        return isComputedValue(value);
    }

    function isComputed(value) {
        if (arguments.length > 1) return fail$1(process.env.NODE_ENV !== "production" && "isComputed expects only 1 argument. Use isObservableProp to inspect the observability of a property");
        return _isComputed(value);
    }

    function isComputedProp(value, propName) {
        if (typeof propName !== "string") return fail$1(process.env.NODE_ENV !== "production" && "isComputed expected a property name as second argument");
        return _isComputed(value, propName);
    }

    var computedDecorator = createPropDecorator(false, function (instance, propertyName, descriptor, decoratorTarget, decoratorArgs) {
        var get = descriptor.get,
            set = descriptor.set;
        var options = decoratorArgs[0] || {};
        defineComputedProperty(instance, propertyName, __assign({}, options, {
            get: get,
            set: set
        }));
    });
    var computedStructDecorator = computedDecorator({
        equals: comparer.structural
    });

    var computed = function computed(arg1, arg2, arg3) {
        if (typeof arg2 === "string") {
            return computedDecorator.apply(null, arguments);
        }

        if (arg1 !== null && typeof arg1 === "object" && arguments.length === 1) {
            return computedDecorator.apply(null, arguments);
        }

        if (process.env.NODE_ENV !== "production") {
            invariant(typeof arg1 === "function", "First argument to `computed` should be an expression.");
            invariant(arguments.length < 3, "Computed takes one or two arguments if used as function");
        }

        var opts = typeof arg2 === "object" ? arg2 : {};
        opts.get = arg1;
        opts.set = typeof arg2 === "function" ? arg2 : opts.set;
        opts.name = opts.name || arg1.name || "";
        return new ComputedValue(opts);
    };

    computed.struct = computedStructDecorator;

    function extendShallowObservable(target, properties, decorators) {
        deprecated("'extendShallowObservable' is deprecated, use 'extendObservable(target, props, { deep: false })' instead");
        return extendObservable(target, properties, decorators, shallowCreateObservableOptions);
    }

    function extendObservable(target, properties, decorators, options) {
        if (process.env.NODE_ENV !== "production") {
            invariant(arguments.length >= 2 && arguments.length <= 4, "'extendObservable' expected 2-4 arguments");
            invariant(typeof target === "object", "'extendObservable' expects an object as first argument");
            invariant(!isObservableMap(target), "'extendObservable' should not be used on maps, use map.merge instead");
            invariant(!isObservable(properties), "Extending an object with another observable (object) is not supported. Please construct an explicit propertymap, using `toJS` if need. See issue #540");
            if (decorators) for (var key in decorators) {
                if (!(key in properties)) fail$1("Trying to declare a decorator for unspecified property '" + key + "'");
            }
        }

        options = asCreateObservableOptions(options);
        var defaultDecorator = options.defaultDecorator || (options.deep === false ? refDecorator : deepDecorator);
        asObservableObject(target, options.name, defaultDecorator.enhancer);
        startBatch();

        try {
            for (var key in properties) {
                var descriptor = Object.getOwnPropertyDescriptor(properties, key);

                if (process.env.NODE_ENV !== "production") {
                    if (Object.getOwnPropertyDescriptor(target, key)) fail$1("'extendObservable' can only be used to introduce new properties. Use 'set' or 'decorate' instead. The property '" + key + "' already exists on '" + target + "'");
                    if (isComputed(descriptor.value)) fail$1("Passing a 'computed' as initial property value is no longer supported by extendObservable. Use a getter or decorator instead");
                }

                var decorator = decorators && key in decorators ? decorators[key] : descriptor.get ? computedDecorator : defaultDecorator;
                if (process.env.NODE_ENV !== "production" && typeof decorator !== "function") return fail$1("Not a valid decorator for '" + key + "', got: " + decorator);
                var resultDescriptor = decorator(target, key, descriptor, true);
                if (resultDescriptor) Object.defineProperty(target, key, resultDescriptor);
            }
        } finally {
            endBatch();
        }

        return target;
    }

    var defaultCreateObservableOptions = {
        deep: true,
        name: undefined,
        defaultDecorator: undefined
    };
    var shallowCreateObservableOptions = {
        deep: false,
        name: undefined,
        defaultDecorator: undefined
    };
    Object.freeze(defaultCreateObservableOptions);
    Object.freeze(shallowCreateObservableOptions);

    function assertValidOption(key) {
        if (!/^(deep|name|defaultDecorator)$/.test(key)) fail$1("invalid option for (extend)observable: " + key);
    }

    function asCreateObservableOptions(thing) {
        if (thing === null || thing === undefined) return defaultCreateObservableOptions;
        if (typeof thing === "string") return {
            name: thing,
            deep: true
        };

        if (process.env.NODE_ENV !== "production") {
            if (typeof thing !== "object") return fail$1("expected options object");
            Object.keys(thing).forEach(assertValidOption);
        }

        return thing;
    }

    function getEnhancerFromOptions(options) {
        return options.defaultDecorator ? options.defaultDecorator.enhancer : options.deep === false ? referenceEnhancer : deepEnhancer;
    }

    var deepDecorator = createDecoratorForEnhancer(deepEnhancer);
    var shallowDecorator = createDecoratorForEnhancer(shallowEnhancer);
    var refDecorator = createDecoratorForEnhancer(referenceEnhancer);
    var refStructDecorator = createDecoratorForEnhancer(refStructEnhancer);

    function createObservable(v, arg2, arg3) {
        if (typeof arguments[1] === "string") {
            return deepDecorator.apply(null, arguments);
        }

        if (isObservable(v)) return v;
        var res = isPlainObject(v) ? observable.object(v, arg2, arg3) : Array.isArray(v) ? observable.array(v, arg2) : isES6Map(v) ? observable.map(v, arg2) : v;
        if (res !== v) return res;
        fail$1(process.env.NODE_ENV !== "production" && "The provided value could not be converted into an observable. If you want just create an observable reference to the object use 'observable.box(value)'");
    }

    var observableFactories = {
        box: function box(value, options) {
            if (arguments.length > 2) incorrectlyUsedAsDecorator("box");
            var o = asCreateObservableOptions(options);
            return new ObservableValue(value, getEnhancerFromOptions(o), o.name);
        },
        shallowBox: function shallowBox(value, name) {
            if (arguments.length > 2) incorrectlyUsedAsDecorator("shallowBox");
            deprecated("observable.shallowBox", "observable.box(value, { deep: false })");
            return observable.box(value, {
                name: name,
                deep: false
            });
        },
        array: function array(initialValues, options) {
            if (arguments.length > 2) incorrectlyUsedAsDecorator("array");
            var o = asCreateObservableOptions(options);
            return new ObservableArray(initialValues, getEnhancerFromOptions(o), o.name);
        },
        shallowArray: function shallowArray(initialValues, name) {
            if (arguments.length > 2) incorrectlyUsedAsDecorator("shallowArray");
            deprecated("observable.shallowArray", "observable.array(values, { deep: false })");
            return observable.array(initialValues, {
                name: name,
                deep: false
            });
        },
        map: function map(initialValues, options) {
            if (arguments.length > 2) incorrectlyUsedAsDecorator("map");
            var o = asCreateObservableOptions(options);
            return new ObservableMap(initialValues, getEnhancerFromOptions(o), o.name);
        },
        shallowMap: function shallowMap(initialValues, name) {
            if (arguments.length > 2) incorrectlyUsedAsDecorator("shallowMap");
            deprecated("observable.shallowMap", "observable.map(values, { deep: false })");
            return observable.map(initialValues, {
                name: name,
                deep: false
            });
        },
        object: function object(props, decorators, options) {
            if (typeof arguments[1] === "string") incorrectlyUsedAsDecorator("object");
            var o = asCreateObservableOptions(options);
            return extendObservable({}, props, decorators, o);
        },
        shallowObject: function shallowObject(props, name) {
            if (typeof arguments[1] === "string") incorrectlyUsedAsDecorator("shallowObject");
            deprecated("observable.shallowObject", "observable.object(values, {}, { deep: false })");
            return observable.object(props, {}, {
                name: name,
                deep: false
            });
        },
        ref: refDecorator,
        shallow: shallowDecorator,
        deep: deepDecorator,
        struct: refStructDecorator
    };
    var observable = createObservable;
    Object.keys(observableFactories).forEach(function (name) {
        return observable[name] = observableFactories[name];
    });

    function incorrectlyUsedAsDecorator(methodName) {
        fail$1("Expected one or two arguments to observable." + methodName + ". Did you accidentally try to use observable." + methodName + " as decorator?");
    }

    function deepEnhancer(v, _, name) {
        if (isObservable(v)) return v;
        if (Array.isArray(v)) return observable.array(v, {
            name: name
        });
        if (isPlainObject(v)) return observable.object(v, undefined, {
            name: name
        });
        if (isES6Map(v)) return observable.map(v, {
            name: name
        });
        return v;
    }

    function shallowEnhancer(v, _, name) {
        if (v === undefined || v === null) return v;
        if (isObservableObject(v) || isObservableArray(v) || isObservableMap(v)) return v;
        if (Array.isArray(v)) return observable.array(v, {
            name: name,
            deep: false
        });
        if (isPlainObject(v)) return observable.object(v, undefined, {
            name: name,
            deep: false
        });
        if (isES6Map(v)) return observable.map(v, {
            name: name,
            deep: false
        });
        return fail$1(process.env.NODE_ENV !== "production" && "The shallow modifier / decorator can only used in combination with arrays, objects and maps");
    }

    function referenceEnhancer(newValue) {
        return newValue;
    }

    function refStructEnhancer(v, oldValue, name) {
        if (process.env.NODE_ENV !== "production" && isObservable(v)) throw "observable.struct should not be used with observable values";
        if (deepEqual(v, oldValue)) return oldValue;
        return v;
    }

    function iteratorSymbol() {
        return typeof Symbol === "function" && (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") || "@@iterator";
    }

    function declareIterator(prototType, iteratorFactory) {
        addHiddenFinalProp(prototType, iteratorSymbol(), iteratorFactory);
    }

    function makeIterable(iterator) {
        iterator[iteratorSymbol()] = self;
        return iterator;
    }

    function self() {
        return this;
    }

    function transaction(action, thisArg) {
        if (thisArg === void 0) {
            thisArg = undefined;
        }

        startBatch();

        try {
            return action.apply(thisArg);
        } finally {
            endBatch();
        }
    }

    var ObservableMapMarker = {};

    var ObservableMap = function () {
        function ObservableMap(initialData, enhancer, name) {
            if (enhancer === void 0) {
                enhancer = deepEnhancer;
            }

            if (name === void 0) {
                name = "ObservableMap@" + getNextId();
            }

            this.enhancer = enhancer;
            this.name = name;
            this.$mobx = ObservableMapMarker;
            this._keys = new ObservableArray(undefined, referenceEnhancer, this.name + ".keys()", true);

            if (typeof Map !== "function") {
                throw new Error("mobx.map requires Map polyfill for the current browser. Check babel-polyfill or core-js/es6/map.js");
            }

            this._data = new Map();
            this._hasMap = new Map();
            this.merge(initialData);
        }

        ObservableMap.prototype._has = function (key) {
            return this._data.has(key);
        };

        ObservableMap.prototype.has = function (key) {
            if (this._hasMap.has(key)) return this._hasMap.get(key).get();
            return this._updateHasMapEntry(key, false).get();
        };

        ObservableMap.prototype.set = function (key, value) {
            var hasKey = this._has(key);

            if (hasInterceptors(this)) {
                var change = interceptChange(this, {
                    type: hasKey ? "update" : "add",
                    object: this,
                    newValue: value,
                    name: key
                });
                if (!change) return this;
                value = change.newValue;
            }

            if (hasKey) {
                this._updateValue(key, value);
            } else {
                this._addValue(key, value);
            }

            return this;
        };

        ObservableMap.prototype.delete = function (key) {
            var _this = this;

            if (hasInterceptors(this)) {
                var change = interceptChange(this, {
                    type: "delete",
                    object: this,
                    name: key
                });
                if (!change) return false;
            }

            if (this._has(key)) {
                var notifySpy = isSpyEnabled();
                var notify = hasListeners(this);
                var change = notify || notifySpy ? {
                    type: "delete",
                    object: this,
                    oldValue: this._data.get(key).value,
                    name: key
                } : null;
                if (notifySpy) spyReportStart(__assign({}, change, {
                    name: this.name,
                    key: key
                }));
                transaction(function () {
                    _this._keys.remove(key);

                    _this._updateHasMapEntry(key, false);

                    var observable = _this._data.get(key);

                    observable.setNewValue(undefined);

                    _this._data.delete(key);
                });
                if (notify) notifyListeners(this, change);
                if (notifySpy) spyReportEnd();
                return true;
            }

            return false;
        };

        ObservableMap.prototype._updateHasMapEntry = function (key, value) {
            var entry = this._hasMap.get(key);

            if (entry) {
                entry.setNewValue(value);
            } else {
                entry = new ObservableValue(value, referenceEnhancer, this.name + "." + key + "?", false);

                this._hasMap.set(key, entry);
            }

            return entry;
        };

        ObservableMap.prototype._updateValue = function (key, newValue) {
            var observable = this._data.get(key);

            newValue = observable.prepareNewValue(newValue);

            if (newValue !== UNCHANGED) {
                var notifySpy = isSpyEnabled();
                var notify = hasListeners(this);
                var change = notify || notifySpy ? {
                    type: "update",
                    object: this,
                    oldValue: observable.value,
                    name: key,
                    newValue: newValue
                } : null;
                if (notifySpy) spyReportStart(__assign({}, change, {
                    name: this.name,
                    key: key
                }));
                observable.setNewValue(newValue);
                if (notify) notifyListeners(this, change);
                if (notifySpy) spyReportEnd();
            }
        };

        ObservableMap.prototype._addValue = function (key, newValue) {
            var _this = this;

            transaction(function () {
                var observable = new ObservableValue(newValue, _this.enhancer, _this.name + "." + key, false);

                _this._data.set(key, observable);

                newValue = observable.value;

                _this._updateHasMapEntry(key, true);

                _this._keys.push(key);
            });
            var notifySpy = isSpyEnabled();
            var notify = hasListeners(this);
            var change = notify || notifySpy ? {
                type: "add",
                object: this,
                name: key,
                newValue: newValue
            } : null;
            if (notifySpy) spyReportStart(__assign({}, change, {
                name: this.name,
                key: key
            }));
            if (notify) notifyListeners(this, change);
            if (notifySpy) spyReportEnd();
        };

        ObservableMap.prototype.get = function (key) {
            if (this.has(key)) return this.dehanceValue(this._data.get(key).get());
            return this.dehanceValue(undefined);
        };

        ObservableMap.prototype.dehanceValue = function (value) {
            if (this.dehancer !== undefined) {
                return this.dehancer(value);
            }

            return value;
        };

        ObservableMap.prototype.keys = function () {
            return this._keys[iteratorSymbol()]();
        };

        ObservableMap.prototype.values = function () {
            var self = this;
            var nextIndex = 0;
            return makeIterable({
                next: function next() {
                    return nextIndex < self._keys.length ? {
                        value: self.get(self._keys[nextIndex++]),
                        done: false
                    } : {
                        value: undefined,
                        done: true
                    };
                }
            });
        };

        ObservableMap.prototype.entries = function () {
            var self = this;
            var nextIndex = 0;
            return makeIterable({
                next: function next() {
                    if (nextIndex < self._keys.length) {
                        var key = self._keys[nextIndex++];
                        return {
                            value: [key, self.get(key)],
                            done: false
                        };
                    }

                    return {
                        done: true
                    };
                }
            });
        };

        ObservableMap.prototype.forEach = function (callback, thisArg) {
            var _this = this;

            this._keys.forEach(function (key) {
                return callback.call(thisArg, _this.get(key), key, _this);
            });
        };

        ObservableMap.prototype.merge = function (other) {
            var _this = this;

            if (isObservableMap(other)) {
                other = other.toJS();
            }

            transaction(function () {
                if (isPlainObject(other)) Object.keys(other).forEach(function (key) {
                    return _this.set(key, other[key]);
                });else if (Array.isArray(other)) other.forEach(function (_a) {
                    var _b = __read(_a, 2),
                        key = _b[0],
                        value = _b[1];

                    return _this.set(key, value);
                });else if (isES6Map(other)) other.forEach(function (value, key) {
                    return _this.set(key, value);
                });else if (other !== null && other !== undefined) fail$1("Cannot initialize map from " + other);
            });
            return this;
        };

        ObservableMap.prototype.clear = function () {
            var _this = this;

            transaction(function () {
                untracked(function () {
                    _this._keys.slice().forEach(function (key) {
                        return _this.delete(key);
                    });
                });
            });
        };

        ObservableMap.prototype.replace = function (values) {
            var _this = this;

            transaction(function () {
                var newKeys = getMapLikeKeys(values);
                var oldKeys = _this._keys;
                var missingKeys = oldKeys.filter(function (k) {
                    return newKeys.indexOf(k) === -1;
                });
                missingKeys.forEach(function (k) {
                    return _this.delete(k);
                });

                _this.merge(values);
            });
            return this;
        };

        Object.defineProperty(ObservableMap.prototype, "size", {
            get: function get() {
                return this._keys.length;
            },
            enumerable: true,
            configurable: true
        });

        ObservableMap.prototype.toPOJO = function () {
            var _this = this;

            var res = {};

            this._keys.forEach(function (key) {
                return res["" + key] = _this.get(key);
            });

            return res;
        };

        ObservableMap.prototype.toJS = function () {
            var _this = this;

            var res = new Map();

            this._keys.forEach(function (key) {
                return res.set(key, _this.get(key));
            });

            return res;
        };

        ObservableMap.prototype.toJSON = function () {
            return this.toPOJO();
        };

        ObservableMap.prototype.toString = function () {
            var _this = this;

            return this.name + "[{ " + this._keys.map(function (key) {
                return key + ": " + ("" + _this.get(key));
            }).join(", ") + " }]";
        };

        ObservableMap.prototype.observe = function (listener, fireImmediately) {
            process.env.NODE_ENV !== "production" && invariant(fireImmediately !== true, "`observe` doesn't support fireImmediately=true in combination with maps.");
            return registerListener(this, listener);
        };

        ObservableMap.prototype.intercept = function (handler) {
            return registerInterceptor(this, handler);
        };

        return ObservableMap;
    }();

    declareIterator(ObservableMap.prototype, function () {
        return this.entries();
    });
    addHiddenFinalProp(ObservableMap.prototype, typeof Symbol !== "undefined" ? typeof Symbol === "function" ? Symbol.toStringTag : "@@toStringTag" : "@@toStringTag", "Map");
    var isObservableMap = createInstanceofPredicate("ObservableMap", ObservableMap);

    function getAtom(thing, property) {
        if (typeof thing === "object" && thing !== null) {
            if (isObservableArray(thing)) {
                if (property !== undefined) fail$1(process.env.NODE_ENV !== "production" && "It is not possible to get index atoms from arrays");
                return thing.$mobx.atom;
            }

            if (isObservableMap(thing)) {
                var anyThing = thing;
                if (property === undefined) return getAtom(anyThing._keys);

                var observable = anyThing._data.get(property) || anyThing._hasMap.get(property);

                if (!observable) fail$1(process.env.NODE_ENV !== "production" && "the entry '" + property + "' does not exist in the observable map '" + getDebugName(thing) + "'");
                return observable;
            }

            initializeInstance(thing);
            if (property && !thing.$mobx) thing[property];

            if (isObservableObject(thing)) {
                if (!property) return fail$1(process.env.NODE_ENV !== "production" && "please specify a property");
                var observable = thing.$mobx.values[property];
                if (!observable) fail$1(process.env.NODE_ENV !== "production" && "no observable property '" + property + "' found on the observable object '" + getDebugName(thing) + "'");
                return observable;
            }

            if (isAtom(thing) || isComputedValue(thing) || isReaction(thing)) {
                return thing;
            }
        } else if (typeof thing === "function") {
            if (isReaction(thing.$mobx)) {
                return thing.$mobx;
            }
        }

        return fail$1(process.env.NODE_ENV !== "production" && "Cannot obtain atom from " + thing);
    }

    function getAdministration(thing, property) {
        if (!thing) fail$1("Expecting some object");
        if (property !== undefined) return getAdministration(getAtom(thing, property));
        if (isAtom(thing) || isComputedValue(thing) || isReaction(thing)) return thing;
        if (isObservableMap(thing)) return thing;
        initializeInstance(thing);
        if (thing.$mobx) return thing.$mobx;
        fail$1(process.env.NODE_ENV !== "production" && "Cannot obtain administration from " + thing);
    }

    function getDebugName(thing, property) {
        var named;
        if (property !== undefined) named = getAtom(thing, property);else if (isObservableObject(thing) || isObservableMap(thing)) named = getAdministration(thing);else named = getAtom(thing);
        return named.name;
    }

    function onBecomeObserved(thing, arg2, arg3) {
        return interceptHook("onBecomeObserved", thing, arg2, arg3);
    }

    function onBecomeUnobserved(thing, arg2, arg3) {
        return interceptHook("onBecomeUnobserved", thing, arg2, arg3);
    }

    function interceptHook(hook, thing, arg2, arg3) {
        var atom = typeof arg2 === "string" ? getAtom(thing, arg2) : getAtom(thing);
        var cb = typeof arg2 === "string" ? arg3 : arg2;
        var orig = atom[hook];
        if (typeof orig !== "function") return fail$1(process.env.NODE_ENV !== "production" && "Not an atom that can be (un)observed");

        atom[hook] = function () {
            orig.call(this);
            cb.call(this);
        };

        return function () {
            atom[hook] = orig;
        };
    }

    var Atom;
    var isAtom;

    function declareAtom() {
        if (Atom) return;

        Atom = function () {
            function AtomImpl(name) {
                if (name === void 0) {
                    name = "Atom@" + getNextId();
                }

                this.name = name;
                this.isPendingUnobservation = false;
                this.isBeingObserved = false;
                this.observers = [];
                this.observersIndexes = {};
                this.diffValue = 0;
                this.lastAccessedBy = 0;
                this.lowestObserverState = IDerivationState.NOT_TRACKING;
            }

            AtomImpl.prototype.onBecomeUnobserved = function () {};

            AtomImpl.prototype.onBecomeObserved = function () {};

            AtomImpl.prototype.reportObserved = function () {
                return reportObserved(this);
            };

            AtomImpl.prototype.reportChanged = function () {
                startBatch();
                propagateChanged(this);
                endBatch();
            };

            AtomImpl.prototype.toString = function () {
                return this.name;
            };

            return AtomImpl;
        }();

        isAtom = createInstanceofPredicate("Atom", Atom);
    }

    function createAtom(name, onBecomeObservedHandler, onBecomeUnobservedHandler) {
        if (onBecomeObservedHandler === void 0) {
            onBecomeObservedHandler = noop;
        }

        if (onBecomeUnobservedHandler === void 0) {
            onBecomeUnobservedHandler = noop;
        }

        var atom = new Atom(name);
        onBecomeObserved(atom, onBecomeObservedHandler);
        onBecomeUnobserved(atom, onBecomeUnobservedHandler);
        return atom;
    }

    var MAX_SPLICE_SIZE = 10000;

    var safariPrototypeSetterInheritanceBug = function () {
        var v = false;
        var p = {};
        Object.defineProperty(p, "0", {
            set: function set() {
                v = true;
            }
        });
        Object.create(p)["0"] = 1;
        return v === false;
    }();

    var OBSERVABLE_ARRAY_BUFFER_SIZE = 0;

    var StubArray = function () {
        function StubArray() {}

        return StubArray;
    }();

    function inherit(ctor, proto) {
        if (typeof Object["setPrototypeOf"] !== "undefined") {
            Object["setPrototypeOf"](ctor.prototype, proto);
        } else if (typeof ctor.prototype.__proto__ !== "undefined") {
            ctor.prototype.__proto__ = proto;
        } else {
            ctor["prototype"] = proto;
        }
    }

    inherit(StubArray, Array.prototype);

    if (Object.isFrozen(Array)) {
        ["constructor", "push", "shift", "concat", "pop", "unshift", "replace", "find", "findIndex", "splice", "reverse", "sort"].forEach(function (key) {
            Object.defineProperty(StubArray.prototype, key, {
                configurable: true,
                writable: true,
                value: Array.prototype[key]
            });
        });
    }

    var ObservableArrayAdministration = function () {
        function ObservableArrayAdministration(name, enhancer, array, owned) {
            this.array = array;
            this.owned = owned;
            this.values = [];
            this.lastKnownLength = 0;
            this.atom = new Atom(name || "ObservableArray@" + getNextId());

            this.enhancer = function (newV, oldV) {
                return enhancer(newV, oldV, name + "[..]");
            };
        }

        ObservableArrayAdministration.prototype.dehanceValue = function (value) {
            if (this.dehancer !== undefined) return this.dehancer(value);
            return value;
        };

        ObservableArrayAdministration.prototype.dehanceValues = function (values) {
            if (this.dehancer !== undefined && this.values.length > 0) return values.map(this.dehancer);
            return values;
        };

        ObservableArrayAdministration.prototype.intercept = function (handler) {
            return registerInterceptor(this, handler);
        };

        ObservableArrayAdministration.prototype.observe = function (listener, fireImmediately) {
            if (fireImmediately === void 0) {
                fireImmediately = false;
            }

            if (fireImmediately) {
                listener({
                    object: this.array,
                    type: "splice",
                    index: 0,
                    added: this.values.slice(),
                    addedCount: this.values.length,
                    removed: [],
                    removedCount: 0
                });
            }

            return registerListener(this, listener);
        };

        ObservableArrayAdministration.prototype.getArrayLength = function () {
            this.atom.reportObserved();
            return this.values.length;
        };

        ObservableArrayAdministration.prototype.setArrayLength = function (newLength) {
            if (typeof newLength !== "number" || newLength < 0) throw new Error("[mobx.array] Out of range: " + newLength);
            var currentLength = this.values.length;
            if (newLength === currentLength) return;else if (newLength > currentLength) {
                var newItems = new Array(newLength - currentLength);

                for (var i = 0; i < newLength - currentLength; i++) {
                    newItems[i] = undefined;
                }

                this.spliceWithArray(currentLength, 0, newItems);
            } else this.spliceWithArray(newLength, currentLength - newLength);
        };

        ObservableArrayAdministration.prototype.updateArrayLength = function (oldLength, delta) {
            if (oldLength !== this.lastKnownLength) throw new Error("[mobx] Modification exception: the internal structure of an observable array was changed. Did you use peek() to change it?");
            this.lastKnownLength += delta;
            if (delta > 0 && oldLength + delta + 1 > OBSERVABLE_ARRAY_BUFFER_SIZE) reserveArrayBuffer(oldLength + delta + 1);
        };

        ObservableArrayAdministration.prototype.spliceWithArray = function (index, deleteCount, newItems) {
            var _this = this;

            checkIfStateModificationsAreAllowed(this.atom);
            var length = this.values.length;
            if (index === undefined) index = 0;else if (index > length) index = length;else if (index < 0) index = Math.max(0, length + index);
            if (arguments.length === 1) deleteCount = length - index;else if (deleteCount === undefined || deleteCount === null) deleteCount = 0;else deleteCount = Math.max(0, Math.min(deleteCount, length - index));
            if (newItems === undefined) newItems = EMPTY_ARRAY;

            if (hasInterceptors(this)) {
                var change = interceptChange(this, {
                    object: this.array,
                    type: "splice",
                    index: index,
                    removedCount: deleteCount,
                    added: newItems
                });
                if (!change) return EMPTY_ARRAY;
                deleteCount = change.removedCount;
                newItems = change.added;
            }

            newItems = newItems.length === 0 ? newItems : newItems.map(function (v) {
                return _this.enhancer(v, undefined);
            });
            var lengthDelta = newItems.length - deleteCount;
            this.updateArrayLength(length, lengthDelta);
            var res = this.spliceItemsIntoValues(index, deleteCount, newItems);
            if (deleteCount !== 0 || newItems.length !== 0) this.notifyArraySplice(index, newItems, res);
            return this.dehanceValues(res);
        };

        ObservableArrayAdministration.prototype.spliceItemsIntoValues = function (index, deleteCount, newItems) {
            if (newItems.length < MAX_SPLICE_SIZE) {
                return (_a = this.values).splice.apply(_a, __spread([index, deleteCount], newItems));
            } else {
                var res = this.values.slice(index, index + deleteCount);
                this.values = this.values.slice(0, index).concat(newItems, this.values.slice(index + deleteCount));
                return res;
            }

            var _a;
        };

        ObservableArrayAdministration.prototype.notifyArrayChildUpdate = function (index, newValue, oldValue) {
            var notifySpy = !this.owned && isSpyEnabled();
            var notify = hasListeners(this);
            var change = notify || notifySpy ? {
                object: this.array,
                type: "update",
                index: index,
                newValue: newValue,
                oldValue: oldValue
            } : null;
            if (notifySpy) spyReportStart(__assign({}, change, {
                name: this.atom.name
            }));
            this.atom.reportChanged();
            if (notify) notifyListeners(this, change);
            if (notifySpy) spyReportEnd();
        };

        ObservableArrayAdministration.prototype.notifyArraySplice = function (index, added, removed) {
            var notifySpy = !this.owned && isSpyEnabled();
            var notify = hasListeners(this);
            var change = notify || notifySpy ? {
                object: this.array,
                type: "splice",
                index: index,
                removed: removed,
                added: added,
                removedCount: removed.length,
                addedCount: added.length
            } : null;
            if (notifySpy) spyReportStart(__assign({}, change, {
                name: this.atom.name
            }));
            this.atom.reportChanged();
            if (notify) notifyListeners(this, change);
            if (notifySpy) spyReportEnd();
        };

        return ObservableArrayAdministration;
    }();

    var ObservableArray = function (_super) {
        __extends(ObservableArray, _super);

        function ObservableArray(initialValues, enhancer, name, owned) {
            if (name === void 0) {
                name = "ObservableArray@" + getNextId();
            }

            if (owned === void 0) {
                owned = false;
            }

            var _this = _super.call(this) || this;

            var adm = new ObservableArrayAdministration(name, enhancer, _this, owned);
            addHiddenFinalProp(_this, "$mobx", adm);

            if (initialValues && initialValues.length) {
                _this.spliceWithArray(0, 0, initialValues);
            }

            if (safariPrototypeSetterInheritanceBug) {
                Object.defineProperty(adm.array, "0", ENTRY_0);
            }

            return _this;
        }

        ObservableArray.prototype.intercept = function (handler) {
            return this.$mobx.intercept(handler);
        };

        ObservableArray.prototype.observe = function (listener, fireImmediately) {
            if (fireImmediately === void 0) {
                fireImmediately = false;
            }

            return this.$mobx.observe(listener, fireImmediately);
        };

        ObservableArray.prototype.clear = function () {
            return this.splice(0);
        };

        ObservableArray.prototype.concat = function () {
            var arrays = [];

            for (var _i = 0; _i < arguments.length; _i++) {
                arrays[_i] = arguments[_i];
            }

            this.$mobx.atom.reportObserved();
            return Array.prototype.concat.apply(this.peek(), arrays.map(function (a) {
                return isObservableArray(a) ? a.peek() : a;
            }));
        };

        ObservableArray.prototype.replace = function (newItems) {
            return this.$mobx.spliceWithArray(0, this.$mobx.values.length, newItems);
        };

        ObservableArray.prototype.toJS = function () {
            return this.slice();
        };

        ObservableArray.prototype.toJSON = function () {
            return this.toJS();
        };

        ObservableArray.prototype.peek = function () {
            this.$mobx.atom.reportObserved();
            return this.$mobx.dehanceValues(this.$mobx.values);
        };

        ObservableArray.prototype.find = function (predicate, thisArg, fromIndex) {
            if (fromIndex === void 0) {
                fromIndex = 0;
            }

            if (arguments.length === 3) deprecated("The array.find fromIndex argument to find will not be supported anymore in the next major");
            var idx = this.findIndex.apply(this, arguments);
            return idx === -1 ? undefined : this.get(idx);
        };

        ObservableArray.prototype.findIndex = function (predicate, thisArg, fromIndex) {
            if (fromIndex === void 0) {
                fromIndex = 0;
            }

            if (arguments.length === 3) deprecated("The array.findIndex fromIndex argument to find will not be supported anymore in the next major");
            var items = this.peek(),
                l = items.length;

            for (var i = fromIndex; i < l; i++) {
                if (predicate.call(thisArg, items[i], i, this)) return i;
            }

            return -1;
        };

        ObservableArray.prototype.splice = function (index, deleteCount) {
            var newItems = [];

            for (var _i = 2; _i < arguments.length; _i++) {
                newItems[_i - 2] = arguments[_i];
            }

            switch (arguments.length) {
                case 0:
                    return [];

                case 1:
                    return this.$mobx.spliceWithArray(index);

                case 2:
                    return this.$mobx.spliceWithArray(index, deleteCount);
            }

            return this.$mobx.spliceWithArray(index, deleteCount, newItems);
        };

        ObservableArray.prototype.spliceWithArray = function (index, deleteCount, newItems) {
            return this.$mobx.spliceWithArray(index, deleteCount, newItems);
        };

        ObservableArray.prototype.push = function () {
            var items = [];

            for (var _i = 0; _i < arguments.length; _i++) {
                items[_i] = arguments[_i];
            }

            var adm = this.$mobx;
            adm.spliceWithArray(adm.values.length, 0, items);
            return adm.values.length;
        };

        ObservableArray.prototype.pop = function () {
            return this.splice(Math.max(this.$mobx.values.length - 1, 0), 1)[0];
        };

        ObservableArray.prototype.shift = function () {
            return this.splice(0, 1)[0];
        };

        ObservableArray.prototype.unshift = function () {
            var items = [];

            for (var _i = 0; _i < arguments.length; _i++) {
                items[_i] = arguments[_i];
            }

            var adm = this.$mobx;
            adm.spliceWithArray(0, 0, items);
            return adm.values.length;
        };

        ObservableArray.prototype.reverse = function () {
            var clone = this.slice();
            return clone.reverse.apply(clone, arguments);
        };

        ObservableArray.prototype.sort = function (compareFn) {
            var clone = this.slice();
            return clone.sort.apply(clone, arguments);
        };

        ObservableArray.prototype.remove = function (value) {
            var idx = this.$mobx.dehanceValues(this.$mobx.values).indexOf(value);

            if (idx > -1) {
                this.splice(idx, 1);
                return true;
            }

            return false;
        };

        ObservableArray.prototype.move = function (fromIndex, toIndex) {
            deprecated("observableArray.move is deprecated, use .slice() & .replace() instead");

            function checkIndex(index) {
                if (index < 0) {
                    throw new Error("[mobx.array] Index out of bounds: " + index + " is negative");
                }

                var length = this.$mobx.values.length;

                if (index >= length) {
                    throw new Error("[mobx.array] Index out of bounds: " + index + " is not smaller than " + length);
                }
            }

            checkIndex.call(this, fromIndex);
            checkIndex.call(this, toIndex);

            if (fromIndex === toIndex) {
                return;
            }

            var oldItems = this.$mobx.values;
            var newItems;

            if (fromIndex < toIndex) {
                newItems = __spread(oldItems.slice(0, fromIndex), oldItems.slice(fromIndex + 1, toIndex + 1), [oldItems[fromIndex]], oldItems.slice(toIndex + 1));
            } else {
                newItems = __spread(oldItems.slice(0, toIndex), [oldItems[fromIndex]], oldItems.slice(toIndex, fromIndex), oldItems.slice(fromIndex + 1));
            }

            this.replace(newItems);
        };

        ObservableArray.prototype.get = function (index) {
            var impl = this.$mobx;

            if (impl) {
                if (index < impl.values.length) {
                    impl.atom.reportObserved();
                    return impl.dehanceValue(impl.values[index]);
                }

                console.warn("[mobx.array] Attempt to read an array index (" + index + ") that is out of bounds (" + impl.values.length + "). Please check length first. Out of bound indices will not be tracked by MobX");
            }

            return undefined;
        };

        ObservableArray.prototype.set = function (index, newValue) {
            var adm = this.$mobx;
            var values = adm.values;

            if (index < values.length) {
                checkIfStateModificationsAreAllowed(adm.atom);
                var oldValue = values[index];

                if (hasInterceptors(adm)) {
                    var change = interceptChange(adm, {
                        type: "update",
                        object: this,
                        index: index,
                        newValue: newValue
                    });
                    if (!change) return;
                    newValue = change.newValue;
                }

                newValue = adm.enhancer(newValue, oldValue);
                var changed = newValue !== oldValue;

                if (changed) {
                    values[index] = newValue;
                    adm.notifyArrayChildUpdate(index, newValue, oldValue);
                }
            } else if (index === values.length) {
                adm.spliceWithArray(index, 0, [newValue]);
            } else {
                throw new Error("[mobx.array] Index out of bounds, " + index + " is larger than " + values.length);
            }
        };

        return ObservableArray;
    }(StubArray);

    declareIterator(ObservableArray.prototype, function () {
        this.$mobx.atom.reportObserved();
        var self = this;
        var nextIndex = 0;
        return makeIterable({
            next: function next() {
                return nextIndex < self.length ? {
                    value: self[nextIndex++],
                    done: false
                } : {
                    done: true,
                    value: undefined
                };
            }
        });
    });
    Object.defineProperty(ObservableArray.prototype, "length", {
        enumerable: false,
        configurable: true,
        get: function get() {
            return this.$mobx.getArrayLength();
        },
        set: function set(newLength) {
            this.$mobx.setArrayLength(newLength);
        }
    });
    ["every", "filter", "forEach", "indexOf", "join", "lastIndexOf", "map", "reduce", "reduceRight", "slice", "some", "toString", "toLocaleString"].forEach(function (funcName) {
        var baseFunc = Array.prototype[funcName];
        invariant(typeof baseFunc === "function", "Base function not defined on Array prototype: '" + funcName + "'");
        addHiddenProp(ObservableArray.prototype, funcName, function () {
            return baseFunc.apply(this.peek(), arguments);
        });
    });
    makeNonEnumerable(ObservableArray.prototype, ["constructor", "intercept", "observe", "clear", "concat", "get", "replace", "toJS", "toJSON", "peek", "find", "findIndex", "splice", "spliceWithArray", "push", "pop", "set", "shift", "unshift", "reverse", "sort", "remove", "move", "toString", "toLocaleString"]);
    var ENTRY_0 = createArrayEntryDescriptor(0);

    function createArrayEntryDescriptor(index) {
        return {
            enumerable: false,
            configurable: false,
            get: function get() {
                return this.get(index);
            },
            set: function set(value) {
                this.set(index, value);
            }
        };
    }

    function createArrayBufferItem(index) {
        Object.defineProperty(ObservableArray.prototype, "" + index, createArrayEntryDescriptor(index));
    }

    function reserveArrayBuffer(max) {
        for (var index = OBSERVABLE_ARRAY_BUFFER_SIZE; index < max; index++) {
            createArrayBufferItem(index);
        }

        OBSERVABLE_ARRAY_BUFFER_SIZE = max;
    }

    reserveArrayBuffer(1000);
    var isObservableArrayAdministration = createInstanceofPredicate("ObservableArrayAdministration", ObservableArrayAdministration);

    function isObservableArray(thing) {
        return isObject(thing) && isObservableArrayAdministration(thing.$mobx);
    }

    var OBFUSCATED_ERROR = "An invariant failed, however the error is obfuscated because this is an production build.";
    var EMPTY_ARRAY = [];
    Object.freeze(EMPTY_ARRAY);
    var EMPTY_OBJECT = {};
    Object.freeze(EMPTY_OBJECT);

    function getGlobal() {
        return typeof window !== "undefined" ? window : global;
    }

    function getNextId() {
        return ++globalState.mobxGuid;
    }

    function fail$1(message) {
        invariant(false, message);
        throw "X";
    }

    function invariant(check, message) {
        if (!check) throw new Error("[mobx] " + (message || OBFUSCATED_ERROR));
    }

    var deprecatedMessages = [];

    function deprecated(msg, thing) {
        if (process.env.NODE_ENV === "production") return false;

        if (thing) {
            return deprecated("'" + msg + "', use '" + thing + "' instead.");
        }

        if (deprecatedMessages.indexOf(msg) !== -1) return false;
        deprecatedMessages.push(msg);
        console.error("[mobx] Deprecated: " + msg);
        return true;
    }

    function once(func) {
        var invoked = false;
        return function () {
            if (invoked) return;
            invoked = true;
            return func.apply(this, arguments);
        };
    }

    var noop = function noop() {};

    function unique(list) {
        var res = [];
        list.forEach(function (item) {
            if (res.indexOf(item) === -1) res.push(item);
        });
        return res;
    }

    function isObject(value) {
        return value !== null && typeof value === "object";
    }

    function isPlainObject(value) {
        if (value === null || typeof value !== "object") return false;
        var proto = Object.getPrototypeOf(value);
        return proto === Object.prototype || proto === null;
    }

    function makeNonEnumerable(object, propNames) {
        for (var i = 0; i < propNames.length; i++) {
            addHiddenProp(object, propNames[i], object[propNames[i]]);
        }
    }

    function addHiddenProp(object, propName, value) {
        Object.defineProperty(object, propName, {
            enumerable: false,
            writable: true,
            configurable: true,
            value: value
        });
    }

    function addHiddenFinalProp(object, propName, value) {
        Object.defineProperty(object, propName, {
            enumerable: false,
            writable: false,
            configurable: true,
            value: value
        });
    }

    function isPropertyConfigurable(object, prop) {
        var descriptor = Object.getOwnPropertyDescriptor(object, prop);
        return !descriptor || descriptor.configurable !== false && descriptor.writable !== false;
    }

    function assertPropertyConfigurable(object, prop) {
        if (process.env.NODE_ENV !== "production" && !isPropertyConfigurable(object, prop)) fail$1("Cannot make property '" + prop + "' observable, it is not configurable and writable in the target object");
    }

    function createInstanceofPredicate(name, clazz) {
        var propName = "isMobX" + name;
        clazz.prototype[propName] = true;
        return function (x) {
            return isObject(x) && x[propName] === true;
        };
    }

    function areBothNaN(a, b) {
        return typeof a === "number" && typeof b === "number" && isNaN(a) && isNaN(b);
    }

    function isArrayLike(x) {
        return Array.isArray(x) || isObservableArray(x);
    }

    function isES6Map(thing) {
        if (getGlobal().Map !== undefined && thing instanceof getGlobal().Map) return true;
        return false;
    }

    function getMapLikeKeys(map) {
        if (isPlainObject(map)) return Object.keys(map);
        if (Array.isArray(map)) return map.map(function (_a) {
            var _b = __read(_a, 1),
                key = _b[0];

            return key;
        });
        if (isES6Map(map) || isObservableMap(map)) return iteratorToArray(map.keys());
        return fail$1("Cannot get keys from '" + map + "'");
    }

    function iteratorToArray(it) {
        var res = [];

        while (true) {
            var r = it.next();
            if (r.done) break;
            res.push(r.value);
        }

        return res;
    }

    function primitiveSymbol() {
        return typeof Symbol === "function" && (typeof Symbol === "function" ? Symbol.toPrimitive : "@@toPrimitive") || "@@toPrimitive";
    }

    function toPrimitive(value) {
        return value === null ? null : typeof value === "object" ? "" + value : value;
    }

    var persistentKeys = ["mobxGuid", "spyListeners", "enforceActions", "computedRequiresReaction", "disableErrorBoundaries", "runId"];

    var MobXGlobals = function () {
        function MobXGlobals() {
            this.version = 5;
            this.trackingDerivation = null;
            this.computationDepth = 0;
            this.runId = 0;
            this.mobxGuid = 0;
            this.inBatch = 0;
            this.pendingUnobservations = [];
            this.pendingReactions = [];
            this.isRunningReactions = false;
            this.allowStateChanges = true;
            this.enforceActions = false;
            this.spyListeners = [];
            this.globalReactionErrorHandlers = [];
            this.computedRequiresReaction = false;
            this.disableErrorBoundaries = false;
        }

        return MobXGlobals;
    }();

    var globalState = new MobXGlobals();
    var runInIsolationCalled = false;
    {
        var global_1 = getGlobal();

        if (!global_1.__mobxInstanceCount) {
            global_1.__mobxInstanceCount = 1;
        } else {
            global_1.__mobxInstanceCount++;
            setTimeout(function () {
                if (!runInIsolationCalled) {
                    fail$1(process.env.NODE_ENV !== "production" && "There are multiple mobx instances active. This might lead to unexpected results. See https://github.com/mobxjs/mobx/issues/1082 for details.");
                }
            }, 1);
        }
    }

    function isolateGlobalState() {
        runInIsolationCalled = true;
        getGlobal().__mobxInstanceCount--;
    }

    function getGlobalState() {
        return globalState;
    }

    function resetGlobalState() {
        var defaultGlobals = new MobXGlobals();

        for (var key in defaultGlobals) {
            if (persistentKeys.indexOf(key) === -1) globalState[key] = defaultGlobals[key];
        }

        globalState.allowStateChanges = !globalState.enforceActions;
    }

    function getDependencyTree(thing, property) {
        return nodeToDependencyTree(getAtom(thing, property));
    }

    function nodeToDependencyTree(node) {
        var result = {
            name: node.name
        };
        if (node.observing && node.observing.length > 0) result.dependencies = unique(node.observing).map(nodeToDependencyTree);
        return result;
    }

    function getObserverTree(thing, property) {
        return nodeToObserverTree(getAtom(thing, property));
    }

    function nodeToObserverTree(node) {
        var result = {
            name: node.name
        };
        if (hasObservers(node)) result.observers = getObservers(node).map(nodeToObserverTree);
        return result;
    }

    function hasObservers(observable) {
        return observable.observers && observable.observers.length > 0;
    }

    function getObservers(observable) {
        return observable.observers;
    }

    function addObserver(observable, node) {
        var l = observable.observers.length;

        if (l) {
            observable.observersIndexes[node.__mapid] = l;
        }

        observable.observers[l] = node;
        if (observable.lowestObserverState > node.dependenciesState) observable.lowestObserverState = node.dependenciesState;
    }

    function removeObserver(observable, node) {
        if (observable.observers.length === 1) {
            observable.observers.length = 0;
            queueForUnobservation(observable);
        } else {
            var list = observable.observers;
            var map = observable.observersIndexes;
            var filler = list.pop();

            if (filler !== node) {
                var index = map[node.__mapid] || 0;

                if (index) {
                    map[filler.__mapid] = index;
                } else {
                    delete map[filler.__mapid];
                }

                list[index] = filler;
            }

            delete map[node.__mapid];
        }
    }

    function queueForUnobservation(observable) {
        if (observable.isPendingUnobservation === false) {
            observable.isPendingUnobservation = true;
            globalState.pendingUnobservations.push(observable);
        }
    }

    function startBatch() {
        globalState.inBatch++;
    }

    function endBatch() {
        if (--globalState.inBatch === 0) {
            runReactions();
            var list = globalState.pendingUnobservations;

            for (var i = 0; i < list.length; i++) {
                var observable = list[i];
                observable.isPendingUnobservation = false;

                if (observable.observers.length === 0) {
                    if (observable.isBeingObserved) {
                        observable.isBeingObserved = false;
                        observable.onBecomeUnobserved();
                    }

                    if (observable instanceof ComputedValue) {
                        observable.suspend();
                    }
                }
            }

            globalState.pendingUnobservations = [];
        }
    }

    function reportObserved(observable) {
        var derivation = globalState.trackingDerivation;

        if (derivation !== null) {
            if (derivation.runId !== observable.lastAccessedBy) {
                observable.lastAccessedBy = derivation.runId;
                derivation.newObserving[derivation.unboundDepsCount++] = observable;

                if (!observable.isBeingObserved) {
                    observable.isBeingObserved = true;
                    observable.onBecomeObserved();
                }
            }

            return true;
        } else if (observable.observers.length === 0 && globalState.inBatch > 0) {
            queueForUnobservation(observable);
        }

        return false;
    }

    function propagateChanged(observable) {
        if (observable.lowestObserverState === IDerivationState.STALE) return;
        observable.lowestObserverState = IDerivationState.STALE;
        var observers = observable.observers;
        var i = observers.length;

        while (i--) {
            var d = observers[i];

            if (d.dependenciesState === IDerivationState.UP_TO_DATE) {
                if (d.isTracing !== TraceMode.NONE) {
                    logTraceInfo(d, observable);
                }

                d.onBecomeStale();
            }

            d.dependenciesState = IDerivationState.STALE;
        }
    }

    function propagateChangeConfirmed(observable) {
        if (observable.lowestObserverState === IDerivationState.STALE) return;
        observable.lowestObserverState = IDerivationState.STALE;
        var observers = observable.observers;
        var i = observers.length;

        while (i--) {
            var d = observers[i];
            if (d.dependenciesState === IDerivationState.POSSIBLY_STALE) d.dependenciesState = IDerivationState.STALE;else if (d.dependenciesState === IDerivationState.UP_TO_DATE) observable.lowestObserverState = IDerivationState.UP_TO_DATE;
        }
    }

    function propagateMaybeChanged(observable) {
        if (observable.lowestObserverState !== IDerivationState.UP_TO_DATE) return;
        observable.lowestObserverState = IDerivationState.POSSIBLY_STALE;
        var observers = observable.observers;
        var i = observers.length;

        while (i--) {
            var d = observers[i];

            if (d.dependenciesState === IDerivationState.UP_TO_DATE) {
                d.dependenciesState = IDerivationState.POSSIBLY_STALE;

                if (d.isTracing !== TraceMode.NONE) {
                    logTraceInfo(d, observable);
                }

                d.onBecomeStale();
            }
        }
    }

    function logTraceInfo(derivation, observable) {
        console.log("[mobx.trace] '" + derivation.name + "' is invalidated due to a change in: '" + observable.name + "'");

        if (derivation.isTracing === TraceMode.BREAK) {
            var lines = [];
            printDepTree(getDependencyTree(derivation), lines, 1);
            new Function("debugger;\n/*\nTracing '" + derivation.name + "'\n\nYou are entering this break point because derivation '" + derivation.name + "' is being traced and '" + observable.name + "' is now forcing it to update.\nJust follow the stacktrace you should now see in the devtools to see precisely what piece of your code is causing this update\nThe stackframe you are looking for is at least ~6-8 stack-frames up.\n\n" + (derivation instanceof ComputedValue ? derivation.derivation.toString() : "") + "\n\nThe dependencies for this derivation are:\n\n" + lines.join("\n") + "\n*/\n    ")();
        }
    }

    function printDepTree(tree, lines, depth) {
        if (lines.length >= 1000) {
            lines.push("(and many more)");
            return;
        }

        lines.push("" + new Array(depth).join("\t") + tree.name);
        if (tree.dependencies) tree.dependencies.forEach(function (child) {
            return printDepTree(child, lines, depth + 1);
        });
    }

    var IDerivationState;

    (function (IDerivationState) {
        IDerivationState[IDerivationState["NOT_TRACKING"] = -1] = "NOT_TRACKING";
        IDerivationState[IDerivationState["UP_TO_DATE"] = 0] = "UP_TO_DATE";
        IDerivationState[IDerivationState["POSSIBLY_STALE"] = 1] = "POSSIBLY_STALE";
        IDerivationState[IDerivationState["STALE"] = 2] = "STALE";
    })(IDerivationState || (exports.IDerivationState = IDerivationState = {}));

    var TraceMode;

    (function (TraceMode) {
        TraceMode[TraceMode["NONE"] = 0] = "NONE";
        TraceMode[TraceMode["LOG"] = 1] = "LOG";
        TraceMode[TraceMode["BREAK"] = 2] = "BREAK";
    })(TraceMode || (TraceMode = {}));

    var CaughtException = function () {
        function CaughtException(cause) {
            this.cause = cause;
        }

        return CaughtException;
    }();

    function isCaughtException(e) {
        return e instanceof CaughtException;
    }

    function shouldCompute(derivation) {
        switch (derivation.dependenciesState) {
            case IDerivationState.UP_TO_DATE:
                return false;

            case IDerivationState.NOT_TRACKING:
            case IDerivationState.STALE:
                return true;

            case IDerivationState.POSSIBLY_STALE:
                {
                    var prevUntracked = untrackedStart();
                    var obs = derivation.observing,
                        l = obs.length;

                    for (var i = 0; i < l; i++) {
                        var obj = obs[i];

                        if (isComputedValue(obj)) {
                            if (globalState.disableErrorBoundaries) {
                                obj.get();
                            } else {
                                try {
                                    obj.get();
                                } catch (e) {
                                    untrackedEnd(prevUntracked);
                                    return true;
                                }
                            }

                            if (derivation.dependenciesState === IDerivationState.STALE) {
                                untrackedEnd(prevUntracked);
                                return true;
                            }
                        }
                    }

                    changeDependenciesStateTo0(derivation);
                    untrackedEnd(prevUntracked);
                    return false;
                }
        }
    }

    function isComputingDerivation() {
        return globalState.trackingDerivation !== null;
    }

    function checkIfStateModificationsAreAllowed(atom) {
        var hasObservers$$1 = atom.observers.length > 0;
        if (globalState.computationDepth > 0 && hasObservers$$1) fail$1(process.env.NODE_ENV !== "production" && "Computed values are not allowed to cause side effects by changing observables that are already being observed. Tried to modify: " + atom.name);
        if (!globalState.allowStateChanges && hasObservers$$1) fail$1(process.env.NODE_ENV !== "production" && (globalState.enforceActions ? "Since strict-mode is enabled, changing observed observable values outside actions is not allowed. Please wrap the code in an `action` if this change is intended. Tried to modify: " : "Side effects like changing state are not allowed at this point. Are you trying to modify state from, for example, the render function of a React component? Tried to modify: ") + atom.name);
    }

    function trackDerivedFunction(derivation, f, context) {
        changeDependenciesStateTo0(derivation);
        derivation.newObserving = new Array(derivation.observing.length + 100);
        derivation.unboundDepsCount = 0;
        derivation.runId = ++globalState.runId;
        var prevTracking = globalState.trackingDerivation;
        globalState.trackingDerivation = derivation;
        var result;

        if (globalState.disableErrorBoundaries === true) {
            result = f.call(context);
        } else {
            try {
                result = f.call(context);
            } catch (e) {
                result = new CaughtException(e);
            }
        }

        globalState.trackingDerivation = prevTracking;
        bindDependencies(derivation);
        return result;
    }

    function bindDependencies(derivation) {
        var prevObserving = derivation.observing;
        var observing = derivation.observing = derivation.newObserving;
        var lowestNewObservingDerivationState = IDerivationState.UP_TO_DATE;
        var i0 = 0,
            l = derivation.unboundDepsCount;

        for (var i = 0; i < l; i++) {
            var dep = observing[i];

            if (dep.diffValue === 0) {
                dep.diffValue = 1;
                if (i0 !== i) observing[i0] = dep;
                i0++;
            }

            if (dep.dependenciesState > lowestNewObservingDerivationState) {
                lowestNewObservingDerivationState = dep.dependenciesState;
            }
        }

        observing.length = i0;
        derivation.newObserving = null;
        l = prevObserving.length;

        while (l--) {
            var dep = prevObserving[l];

            if (dep.diffValue === 0) {
                removeObserver(dep, derivation);
            }

            dep.diffValue = 0;
        }

        while (i0--) {
            var dep = observing[i0];

            if (dep.diffValue === 1) {
                dep.diffValue = 0;
                addObserver(dep, derivation);
            }
        }

        if (lowestNewObservingDerivationState !== IDerivationState.UP_TO_DATE) {
            derivation.dependenciesState = lowestNewObservingDerivationState;
            derivation.onBecomeStale();
        }
    }

    function clearObserving(derivation) {
        var obs = derivation.observing;
        derivation.observing = [];
        var i = obs.length;

        while (i--) {
            removeObserver(obs[i], derivation);
        }

        derivation.dependenciesState = IDerivationState.NOT_TRACKING;
    }

    function untracked(action) {
        var prev = untrackedStart();
        var res = action();
        untrackedEnd(prev);
        return res;
    }

    function untrackedStart() {
        var prev = globalState.trackingDerivation;
        globalState.trackingDerivation = null;
        return prev;
    }

    function untrackedEnd(prev) {
        globalState.trackingDerivation = prev;
    }

    function changeDependenciesStateTo0(derivation) {
        if (derivation.dependenciesState === IDerivationState.UP_TO_DATE) return;
        derivation.dependenciesState = IDerivationState.UP_TO_DATE;
        var obs = derivation.observing;
        var i = obs.length;

        while (i--) {
            obs[i].lowestObserverState = IDerivationState.UP_TO_DATE;
        }
    }

    function trace() {
        var args = [];

        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }

        var enterBreakPoint = false;
        if (typeof args[args.length - 1] === "boolean") enterBreakPoint = args.pop();
        var derivation = getAtomFromArgs(args);

        if (!derivation) {
            return fail$1(process.env.NODE_ENV !== "production" && "'trace(break?)' can only be used inside a tracked computed value or a Reaction. Consider passing in the computed value or reaction explicitly");
        }

        if (derivation.isTracing === TraceMode.NONE) {
            console.log("[mobx.trace] '" + derivation.name + "' tracing enabled");
        }

        derivation.isTracing = enterBreakPoint ? TraceMode.BREAK : TraceMode.LOG;
    }

    function getAtomFromArgs(args) {
        switch (args.length) {
            case 0:
                return globalState.trackingDerivation;

            case 1:
                return getAtom(args[0]);

            case 2:
                return getAtom(args[0], args[1]);
        }
    }

    var Reaction = function () {
        function Reaction(name, onInvalidate, errorHandler) {
            if (name === void 0) {
                name = "Reaction@" + getNextId();
            }

            this.name = name;
            this.onInvalidate = onInvalidate;
            this.errorHandler = errorHandler;
            this.observing = [];
            this.newObserving = [];
            this.dependenciesState = IDerivationState.NOT_TRACKING;
            this.diffValue = 0;
            this.runId = 0;
            this.unboundDepsCount = 0;
            this.__mapid = "#" + getNextId();
            this.isDisposed = false;
            this._isScheduled = false;
            this._isTrackPending = false;
            this._isRunning = false;
            this.isTracing = TraceMode.NONE;
        }

        Reaction.prototype.onBecomeStale = function () {
            this.schedule();
        };

        Reaction.prototype.schedule = function () {
            if (!this._isScheduled) {
                this._isScheduled = true;
                globalState.pendingReactions.push(this);
                runReactions();
            }
        };

        Reaction.prototype.isScheduled = function () {
            return this._isScheduled;
        };

        Reaction.prototype.runReaction = function () {
            if (!this.isDisposed) {
                startBatch();
                this._isScheduled = false;

                if (shouldCompute(this)) {
                    this._isTrackPending = true;
                    this.onInvalidate();

                    if (this._isTrackPending && isSpyEnabled()) {
                        spyReport({
                            name: this.name,
                            type: "scheduled-reaction"
                        });
                    }
                }

                endBatch();
            }
        };

        Reaction.prototype.track = function (fn) {
            startBatch();
            var notify = isSpyEnabled();
            var startTime;

            if (notify) {
                startTime = Date.now();
                spyReportStart({
                    name: this.name,
                    type: "reaction"
                });
            }

            this._isRunning = true;
            var result = trackDerivedFunction(this, fn, undefined);
            this._isRunning = false;
            this._isTrackPending = false;

            if (this.isDisposed) {
                clearObserving(this);
            }

            if (isCaughtException(result)) this.reportExceptionInDerivation(result.cause);

            if (notify) {
                spyReportEnd({
                    time: Date.now() - startTime
                });
            }

            endBatch();
        };

        Reaction.prototype.reportExceptionInDerivation = function (error) {
            var _this = this;

            if (this.errorHandler) {
                this.errorHandler(error, this);
                return;
            }

            var message = "[mobx] Encountered an uncaught exception that was thrown by a reaction or observer component, in: '" + this;
            console.error(message, error);

            if (isSpyEnabled()) {
                spyReport({
                    type: "error",
                    name: this.name,
                    message: message,
                    error: "" + error
                });
            }

            globalState.globalReactionErrorHandlers.forEach(function (f) {
                return f(error, _this);
            });
        };

        Reaction.prototype.dispose = function () {
            if (!this.isDisposed) {
                this.isDisposed = true;

                if (!this._isRunning) {
                    startBatch();
                    clearObserving(this);
                    endBatch();
                }
            }
        };

        Reaction.prototype.getDisposer = function () {
            var r = this.dispose.bind(this);
            r.$mobx = this;
            return r;
        };

        Reaction.prototype.toString = function () {
            return "Reaction[" + this.name + "]";
        };

        Reaction.prototype.trace = function (enterBreakPoint) {
            if (enterBreakPoint === void 0) {
                enterBreakPoint = false;
            }

            trace(this, enterBreakPoint);
        };

        return Reaction;
    }();

    function onReactionError(handler) {
        globalState.globalReactionErrorHandlers.push(handler);
        return function () {
            var idx = globalState.globalReactionErrorHandlers.indexOf(handler);
            if (idx >= 0) globalState.globalReactionErrorHandlers.splice(idx, 1);
        };
    }

    var MAX_REACTION_ITERATIONS = 100;

    var reactionScheduler = function reactionScheduler(f) {
        return f();
    };

    function runReactions() {
        if (globalState.inBatch > 0 || globalState.isRunningReactions) return;
        reactionScheduler(runReactionsHelper);
    }

    function runReactionsHelper() {
        globalState.isRunningReactions = true;
        var allReactions = globalState.pendingReactions;
        var iterations = 0;

        while (allReactions.length > 0) {
            if (++iterations === MAX_REACTION_ITERATIONS) {
                console.error("Reaction doesn't converge to a stable state after " + MAX_REACTION_ITERATIONS + " iterations." + (" Probably there is a cycle in the reactive function: " + allReactions[0]));
                allReactions.splice(0);
            }

            var remainingReactions = allReactions.splice(0);

            for (var i = 0, l = remainingReactions.length; i < l; i++) {
                remainingReactions[i].runReaction();
            }
        }

        globalState.isRunningReactions = false;
    }

    var isReaction = createInstanceofPredicate("Reaction", Reaction);

    function setReactionScheduler(fn) {
        var baseScheduler = reactionScheduler;

        reactionScheduler = function reactionScheduler(f) {
            return fn(function () {
                return baseScheduler(f);
            });
        };
    }

    function observe(thing, propOrCb, cbOrFire, fireImmediately) {
        if (typeof cbOrFire === "function") return observeObservableProperty(thing, propOrCb, cbOrFire, fireImmediately);else return observeObservable(thing, propOrCb, cbOrFire);
    }

    function observeObservable(thing, listener, fireImmediately) {
        return getAdministration(thing).observe(listener, fireImmediately);
    }

    function observeObservableProperty(thing, property, listener, fireImmediately) {
        return getAdministration(thing, property).observe(listener, fireImmediately);
    }

    function intercept(thing, propOrHandler, handler) {
        if (typeof handler === "function") return interceptProperty(thing, propOrHandler, handler);else return interceptInterceptable(thing, propOrHandler);
    }

    function interceptInterceptable(thing, handler) {
        return getAdministration(thing).intercept(handler);
    }

    function interceptProperty(thing, property, handler) {
        return getAdministration(thing, property).intercept(handler);
    }

    function when(predicate, arg1, arg2) {
        if (arguments.length === 1 || arg1 && typeof arg1 === "object") return whenPromise(predicate, arg1);
        return _when(predicate, arg1, arg2 || {});
    }

    function _when(predicate, effect, opts) {
        var timeoutHandle;

        if (typeof opts.timeout === "number") {
            timeoutHandle = setTimeout(function () {
                if (!disposer.$mobx.isDisposed) {
                    disposer();
                    var error = new Error("WHEN_TIMEOUT");
                    if (opts.onError) opts.onError(error);else throw error;
                }
            }, opts.timeout);
        }

        opts.name = opts.name || "When@" + getNextId();
        var effectAction = createAction(opts.name + "-effect", effect);
        var disposer = autorun(function (r) {
            if (predicate()) {
                r.dispose();
                if (timeoutHandle) clearTimeout(timeoutHandle);
                effectAction();
            }
        }, opts);
        return disposer;
    }

    function whenPromise(predicate, opts) {
        if (process.env.NODE_ENV !== "production" && opts && opts.onError) return fail$1("the options 'onError' and 'promise' cannot be combined");
        var cancel;
        var res = new Promise(function (resolve, reject) {
            var disposer = _when(predicate, resolve, __assign({}, opts, {
                onError: reject
            }));

            cancel = function cancel() {
                disposer();
                reject("WHEN_CANCELLED");
            };
        });
        res.cancel = cancel;
        return res;
    }

    function keys(obj) {
        if (isObservableObject(obj)) {
            return obj.$mobx.getKeys();
        }

        if (isObservableMap(obj)) {
            return obj._keys.slice();
        }

        return fail$1(process.env.NODE_ENV !== "production" && "'keys()' can only be used on observable objects and maps");
    }

    function values(obj) {
        if (isObservableObject(obj)) {
            return keys(obj).map(function (key) {
                return obj[key];
            });
        }

        if (isObservableMap(obj)) {
            return keys(obj).map(function (key) {
                return obj.get(key);
            });
        }

        if (isObservableArray(obj)) {
            return obj.slice();
        }

        return fail$1(process.env.NODE_ENV !== "production" && "'values()' can only be used on observable objects, arrays and maps");
    }

    function set(obj, key, value) {
        if (arguments.length === 2) {
            startBatch();
            var values_1 = key;

            try {
                for (var key_1 in values_1) {
                    set(obj, key_1, values_1[key_1]);
                }
            } finally {
                endBatch();
            }

            return;
        }

        if (isObservableObject(obj)) {
            var adm = obj.$mobx;
            var existingObservable = adm.values[key];

            if (existingObservable) {
                existingObservable.set(value);
            } else {
                defineObservableProperty(obj, key, value, adm.defaultEnhancer);
            }
        } else if (isObservableMap(obj)) {
            obj.set(key, value);
        } else if (isObservableArray(obj)) {
            if (typeof key !== "number") key = parseInt(key, 10);
            invariant(key >= 0, "Not a valid index: '" + key + "'");
            startBatch();
            if (key >= obj.length) obj.length = key + 1;
            obj[key] = value;
            endBatch();
        } else {
            return fail$1(process.env.NODE_ENV !== "production" && "'set()' can only be used on observable objects, arrays and maps");
        }
    }

    function remove(obj, key) {
        if (isObservableObject(obj)) {
            obj.$mobx.remove(key);
        } else if (isObservableMap(obj)) {
            obj.delete(key);
        } else if (isObservableArray(obj)) {
            if (typeof key !== "number") key = parseInt(key, 10);
            invariant(key >= 0, "Not a valid index: '" + key + "'");
            obj.splice(key, 1);
        } else {
            return fail$1(process.env.NODE_ENV !== "production" && "'remove()' can only be used on observable objects, arrays and maps");
        }
    }

    function has$1(obj, key) {
        if (isObservableObject(obj)) {
            var adm = getAdministration(obj);
            adm.getKeys();
            return adm.values[key] instanceof ObservableValue;
        } else if (isObservableMap(obj)) {
            return obj.has(key);
        } else if (isObservableArray(obj)) {
            return key >= 0 && key < obj.length;
        } else {
            return fail$1(process.env.NODE_ENV !== "production" && "'has()' can only be used on observable objects, arrays and maps");
        }
    }

    function get(obj, key) {
        if (!has$1(obj, key)) return undefined;

        if (isObservableObject(obj)) {
            return obj[key];
        } else if (isObservableMap(obj)) {
            return obj.get(key);
        } else if (isObservableArray(obj)) {
            return obj[key];
        } else {
            return fail$1(process.env.NODE_ENV !== "production" && "'get()' can only be used on observable objects, arrays and maps");
        }
    }

    function decorate(thing, decorators) {
        process.env.NODE_ENV !== "production" && invariant(isPlainObject(decorators), "Decorators should be a key value map");
        var target = typeof thing === "function" ? thing.prototype : thing;

        for (var prop in decorators) {
            var decorator = decorators[prop];
            process.env.NODE_ENV !== "production" && invariant(typeof decorator === "function", "Decorate: expected a decorator function for '" + prop + "'");
            var descriptor = Object.getOwnPropertyDescriptor(target, prop);
            var newDescriptor = decorator(target, prop, descriptor);
            if (newDescriptor) Object.defineProperty(target, prop, newDescriptor);
        }

        return thing;
    }

    function configure(options) {
        if (options.enforceActions !== undefined) {
            globalState.enforceActions = !!options.enforceActions;
            globalState.allowStateChanges = !options.enforceActions;
        }

        if (options.computedRequiresReaction !== undefined) {
            globalState.computedRequiresReaction = !!options.computedRequiresReaction;
        }

        if (options.isolateGlobalState === true) {
            isolateGlobalState();
        }

        if (options.disableErrorBoundaries !== undefined) {
            if (options.disableErrorBoundaries === true) console.warn("WARNING: Debug feature only. MobX will NOT recover from errors if this is on.");
            globalState.disableErrorBoundaries = !!options.disableErrorBoundaries;
        }

        if (typeof options.arrayBuffer === "number") {
            reserveArrayBuffer(options.arrayBuffer);
        }

        if (options.reactionScheduler) {
            setReactionScheduler(options.reactionScheduler);
        }
    }

    var generatorId = 0;

    function flow(generator) {
        if (arguments.length !== 1) fail(process.env.NODE_ENV && "Flow expects one 1 argument and cannot be used as decorator");
        var name = generator.name || "<unnamed flow>";
        return function () {
            var ctx = this;
            var args = arguments;
            var runId = ++generatorId;
            var gen = action(name + " - runid: " + runId + " - init", generator).apply(ctx, args);
            var rejector;
            var pendingPromise = undefined;
            var res = new Promise(function (resolve, reject) {
                var stepId = 0;
                rejector = reject;

                function onFulfilled(res) {
                    pendingPromise = undefined;
                    var ret;

                    try {
                        ret = action(name + " - runid: " + runId + " - yield " + stepId++, gen.next).call(gen, res);
                    } catch (e) {
                        return reject(e);
                    }

                    next(ret);
                }

                function onRejected(err) {
                    pendingPromise = undefined;
                    var ret;

                    try {
                        ret = action(name + " - runid: " + runId + " - yield " + stepId++, gen.throw).call(gen, err);
                    } catch (e) {
                        return reject(e);
                    }

                    next(ret);
                }

                function next(ret) {
                    if (ret && typeof ret.then === "function") {
                        ret.then(next, reject);
                        return;
                    }

                    if (ret.done) return resolve(ret.value);
                    pendingPromise = Promise.resolve(ret.value);
                    return pendingPromise.then(onFulfilled, onRejected);
                }

                onFulfilled(undefined);
            });
            res.cancel = action(name + " - runid: " + runId + " - cancel", function () {
                try {
                    if (pendingPromise) cancelPromise(pendingPromise);
                    var res_1 = gen.return();
                    var yieldedPromise = Promise.resolve(res_1.value);
                    yieldedPromise.then(noop, noop);
                    cancelPromise(yieldedPromise);
                    rejector(new Error("FLOW_CANCELLED"));
                } catch (e) {
                    rejector(e);
                }
            });
            return res;
        };
    }

    function cancelPromise(promise) {
        if (typeof promise.cancel === "function") promise.cancel();
    }

    var defaultOptions = {
        detectCycles: true,
        exportMapsAsObjects: true
    };

    function toJS(source, options, __alreadySeen) {
        if (__alreadySeen === void 0) {
            __alreadySeen = [];
        }

        if (typeof options === "boolean") options = {
            detectCycles: options
        };
        if (!options) options = defaultOptions;
        var detectCycles = options.detectCycles === true;

        function cache(value) {
            if (detectCycles) __alreadySeen.push([source, value]);
            return value;
        }

        if (isObservable(source)) {
            if (detectCycles && __alreadySeen === null) __alreadySeen = [];

            if (detectCycles && source !== null && typeof source === "object") {
                for (var i = 0, l = __alreadySeen.length; i < l; i++) {
                    if (__alreadySeen[i][0] === source) return __alreadySeen[i][1];
                }
            }

            if (isObservableArray(source)) {
                var res = cache([]);
                var toAdd = source.map(function (value) {
                    return toJS(value, options, __alreadySeen);
                });
                res.length = toAdd.length;

                for (var i = 0, l = toAdd.length; i < l; i++) {
                    res[i] = toAdd[i];
                }

                return res;
            }

            if (isObservableObject(source)) {
                var res = cache({});
                keys(source);

                for (var key in source) {
                    res[key] = toJS(source[key], options, __alreadySeen);
                }

                return res;
            }

            if (isObservableMap(source)) {
                if (options.exportMapsAsObjects === false) {
                    var res_1 = cache(new Map());
                    source.forEach(function (value, key) {
                        res_1.set(key, toJS(value, options, __alreadySeen));
                    });
                    return res_1;
                } else {
                    var res_2 = cache({});
                    source.forEach(function (value, key) {
                        res_2[key] = toJS(value, options, __alreadySeen);
                    });
                    return res_2;
                }
            }

            if (isObservableValue(source)) return toJS(source.get(), options, __alreadySeen);
        }

        return source;
    }

    function interceptReads(thing, propOrHandler, handler) {
        var target;

        if (isObservableMap(thing) || isObservableArray(thing) || isObservableValue(thing)) {
            target = getAdministration(thing);
        } else if (isObservableObject(thing)) {
            if (typeof propOrHandler !== "string") return fail$1(process.env.NODE_ENV !== "production" && "InterceptReads can only be used with a specific property, not with an object in general");
            target = getAdministration(thing, propOrHandler);
        } else {
            return fail$1(process.env.NODE_ENV !== "production" && "Expected observable map, object or array as first array");
        }

        if (target.dehancer !== undefined) return fail$1(process.env.NODE_ENV !== "production" && "An intercept reader was already established");
        target.dehancer = typeof propOrHandler === "function" ? propOrHandler : handler;
        return function () {
            target.dehancer = undefined;
        };
    }

    try {
        process.env.NODE_ENV;
    } catch (e) {
        var g = typeof window !== "undefined" ? window : global;
        if (typeof process === "undefined") g.process = {};
        g.process.env = {};
    }

    (function () {
        function testCodeMinification() {}

        if (testCodeMinification.name !== "testCodeMinification" && process.env.NODE_ENV !== "production") {
            console.warn("[mobx] you are running a minified build, but 'process.env.NODE_ENV' was not set to 'production' in your bundler. This results in an unnecessarily large and slow bundle");
        }
    })();

    if (typeof __MOBX_DEVTOOLS_GLOBAL_HOOK__ === "object") {
        __MOBX_DEVTOOLS_GLOBAL_HOOK__.injectMobx({
            spy: spy,
            extras: {
                getDebugName: getDebugName
            }
        });
    }

    if (process.env.NODE_ENV !== "production" && typeof module !== "undefined" && typeof module.exports !== "undefined") {
        var warnedAboutDefaultExport_1 = false;
        Object.defineProperty(module.exports, "default", {
            enumerable: false,
            get: function get() {
                if (!warnedAboutDefaultExport_1) {
                    warnedAboutDefaultExport_1 = true;
                    console.warn("The MobX package does not have a default export. Use 'import { thing } from \"mobx\"' (recommended) or 'import * as mobx from \"mobx\"' instead.\"");
                }

                return undefined;
            }
        });
        ["extras", "Atom", "BaseAtom", "ObservableMap", "asFlat", "asMap", "asReference", "asStructure", "autorunAsync", "createTranformer", "expr", "isModifierDescriptor", "isStrictModeEnabled", "map", "useStrict", "whyRun"].forEach(function (prop) {
            Object.defineProperty(module.exports, prop, {
                enumerable: false,
                get: function get() {
                    fail$1("'" + prop + "' is no longer part of the public MobX api. Please consult the changelog to find out where this functionality went");
                },
                set: function set() {}
            });
        });
    }

    exports.Reaction = Reaction;
    exports.untracked = untracked;
    exports.IDerivationState = IDerivationState;
    exports.createAtom = createAtom;
    exports.spy = spy;
    exports.comparer = comparer;
    exports.isObservableObject = isObservableObject;
    exports.isBoxedObservable = isObservableValue;
    exports.isObservableArray = isObservableArray;
    exports.ObservableMap = ObservableMap;
    exports.isObservableMap = isObservableMap;
    exports.transaction = transaction;
    exports.observable = observable;
    exports.computed = computed;
    exports.isObservable = isObservable;
    exports.isObservableProp = isObservableProp;
    exports.isComputed = isComputed;
    exports.isComputedProp = isComputedProp;
    exports.extendObservable = extendObservable;
    exports.extendShallowObservable = extendShallowObservable;
    exports.observe = observe;
    exports.intercept = intercept;
    exports.autorun = autorun;
    exports.reaction = reaction;
    exports.when = when;
    exports.action = action;
    exports.isAction = isAction;
    exports.runInAction = runInAction;
    exports.keys = keys;
    exports.values = values;
    exports.set = set;
    exports.remove = remove;
    exports.has = has$1;
    exports.get = get;
    exports.decorate = decorate;
    exports.configure = configure;
    exports.onBecomeObserved = onBecomeObserved;
    exports.onBecomeUnobserved = onBecomeUnobserved;
    exports.flow = flow;
    exports.toJS = toJS;
    exports.trace = trace;
    exports.getDependencyTree = getDependencyTree;
    exports.getObserverTree = getObserverTree;
    exports._resetGlobalState = resetGlobalState;
    exports._getGlobalState = getGlobalState;
    exports.getDebugName = getDebugName;
    exports.getAtom = getAtom;
    exports._getAdministration = getAdministration;
    exports._allowStateChanges = allowStateChanges;
    exports.isArrayLike = isArrayLike;
    exports._isComputingDerivation = isComputingDerivation;
    exports.onReactionError = onReactionError;
    exports._interceptReads = interceptReads;
},341,[],"node_modules/mobx/lib/mobx.module.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _reactNative = _require(_dependencyMap[0], "react-native");

    exports.default = {
        'ScreenWidth': _reactNative.Dimensions.get('window').width,
        'ScreenHeight': _reactNative.Dimensions.get('window').height,
        'PixelRatio': _reactNative.PixelRatio.get(),
        'FontScale': _reactNative.PixelRatio.getFontScale(),
        'ResolutionX': _reactNative.Dimensions.get('window').width * _reactNative.PixelRatio.get(),
        'ResolutionY': _reactNative.Dimensions.get('window').height * _reactNative.PixelRatio.get()
    };
},342,[12],"app/res/values/ETTDevice.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.REG_CODEMAXLENGTH = exports.REG_PWDMAXLENGTH = exports.AMOUNT_MAXLEGTH = exports.DataManager = exports.defaultExpires = undefined;

    var _ETTDataHouseManager = _require(_dependencyMap[0], "../../utils/ETTDataHouseManager");

    var defaultExpires = exports.defaultExpires = 1000 * 3600 * 24;

    var DataManager = exports.DataManager = _ETTDataHouseManager.ETTDataHouseManager.ShareInstance();

    var AMOUNT_MAXLEGTH = exports.AMOUNT_MAXLEGTH = 11;
    var REG_PWDMAXLENGTH = exports.REG_PWDMAXLENGTH = 20;
    var REG_CODEMAXLENGTH = exports.REG_CODEMAXLENGTH = 8;
},343,[344],"app/res/values/ETTConfig.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.ETTDataHouseManager = undefined;

    var _desc, _value, _class;

    var _ETTUserModel = _require(_dependencyMap[0], "../mobx/ETTUserModel");

    var _ETTUserModel2 = babelHelpers.interopRequireDefault(_ETTUserModel);

    var _ETTAppInfoModel = _require(_dependencyMap[1], "../mobx/ETTAppInfoModel");

    var _ETTAppInfoModel2 = babelHelpers.interopRequireDefault(_ETTAppInfoModel);

    var _ETTDataProcessingManager = _require(_dependencyMap[2], "./ETTDataProcessingManager");

    var _ETTDataProcessingManager2 = babelHelpers.interopRequireDefault(_ETTDataProcessingManager);

    var _ETTString = _require(_dependencyMap[3], "../res/values/ETTString");

    var _ETTString2 = babelHelpers.interopRequireDefault(_ETTString);

    var _ETTEnum = _require(_dependencyMap[4], "../res/values/ETTEnum");

    var _ETTTokenManager = _require(_dependencyMap[5], "./ETTTokenManager");

    var _ETTTokenManager2 = babelHelpers.interopRequireDefault(_ETTTokenManager);

    var _ETTConfig = _require(_dependencyMap[6], "../res/values/ETTConfig");

    var _mobx = _require(_dependencyMap[7], "mobx");

    function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
        var desc = {};
        Object['ke' + 'ys'](descriptor).forEach(function (key) {
            desc[key] = descriptor[key];
        });
        desc.enumerable = !!desc.enumerable;
        desc.configurable = !!desc.configurable;

        if ('value' in desc || desc.initializer) {
            desc.writable = true;
        }

        desc = decorators.slice().reverse().reduce(function (desc, decorator) {
            return decorator(target, property, desc) || desc;
        }, desc);

        if (context && desc.initializer !== void 0) {
            desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
            desc.initializer = undefined;
        }

        if (desc.initializer === void 0) {
            Object['define' + 'Property'](target, property, desc);
            desc = null;
        }

        return desc;
    }

    var instance = null;
    var ETTDataHouseManager = exports.ETTDataHouseManager = (_class = function () {
        function ETTDataHouseManager() {
            babelHelpers.classCallCheck(this, ETTDataHouseManager);
            this._dataProcessing = new _ETTDataProcessingManager2.default();
            this._userModel = new _ETTUserModel2.default();
            this._appInfo = new _ETTAppInfoModel2.default();
            this._tokenManager = new _ETTTokenManager2.default();

            this._tokenManager.storageUserModel(this._userModel);

            console.log("ETTDataHouseManager init");
            this.accessCacheData();
        }

        babelHelpers.createClass(ETTDataHouseManager, [{
            key: "accessCacheData",
            value: function accessCacheData() {
                var _this = this;

                this._dataProcessing.loadData(_ETTString2.default.appInfo, function (result) {
                    if (result.code == 1) {
                        var data = result.data;

                        _this._appInfo.setLoadDataComplet(data);
                    } else {
                        _this._appInfo.resetModel();
                    }

                    _this._appInfo._isLoadState = _this._appInfo._isLoadState | _ETTEnum.ETTAppLoadState.loadWelcome;
                });

                this._dataProcessing.loadData(_ETTString2.default.userInfo, function (result) {
                    if (result.code == 1) {
                        var data = result.data;

                        _this._userModel.setLoadDataComplet(data);

                        if (_ETTConfig.DataManager._tokenManager.checkTokenEffective() == _ETTEnum.ETTTokenStatus.tokenInvalid) {
                            _this.logOut();
                        }
                    } else {
                        _this._userModel.resetUserInfo();
                    }

                    _this._appInfo._isLoadState = _this._appInfo._isLoadState | _ETTEnum.ETTAppLoadState.loadUserInfo;
                });
            }
        }, {
            key: "setUseModel",
            value: function setUseModel(model) {
                var _this2 = this;

                console.log("setModel");

                if (model) {
                    this._userModel.setName(model.name, function (key) {
                        _this2._dataProcessing.saveData("name", key);

                        _this2._dataProcessing.loadData("name", _this2.didloadData);
                    });

                    console.log("usermodel = " + this._userModel.getName());
                    this.testData();
                }
            }
        }, {
            key: "welcomeGuideComple",
            value: function welcomeGuideComple() {
                if (this._appInfo) {
                    this._appInfo._isFirstOpen = 'NO';

                    if (this._dataProcessing) {
                        this._dataProcessing.saveData(_ETTString2.default.appInfo, this._appInfo);
                    }
                }
            }
        }, {
            key: "regSuccessful",
            value: function regSuccessful(json) {
                if (this._userModel) {
                    this._userModel.setRegSuccessfulInfo(json);
                }
            }
        }, {
            key: "editUserNickNameSuccessful",
            value: function editUserNickNameSuccessful(name) {
                if (this._userModel && name.length > 0) {
                    this._userModel._userName = name;
                    this.savaUserInfo();
                }
            }
        }, {
            key: "obtainUserInfoSuccessful",
            value: function obtainUserInfoSuccessful(data) {
                if (data && this._userModel) {
                    this._userModel.setUserInfo(data);

                    this.savaUserInfo();
                }
            }
        }, {
            key: "bindMobiePhoneSuccessful",
            value: function bindMobiePhoneSuccessful(json, type, amountInfo) {
                this._userModel._phone = amountInfo.phone;
                this.logSuccessful(json, type, amountInfo);
            }
        }, {
            key: "logSuccessful",
            value: function logSuccessful(json, type, amountInfo) {
                if (this._userModel) {
                    this._userModel.setLogSuccessfulInfo(json, type, amountInfo);

                    this._userModel._isLog = true;
                    this.savaUserInfo();
                }
            }
        }, {
            key: "thirdAmountLogSuccessful",
            value: function thirdAmountLogSuccessful(json, type, amountInfo) {
                if (this._userModel) {
                    this._userModel.setLogSuccessfulInfo(json, type, amountInfo);

                    this.savaUserInfo();
                }
            }
        }, {
            key: "removeThirdAmountSuccessful",
            value: function removeThirdAmountSuccessful(type) {
                if (this._userModel) {
                    this._userModel.removeThirdAmount(type);

                    this.savaUserInfo();
                }
            }
        }, {
            key: "changePassword",
            value: function changePassword(newPwd) {
                if (this._userModel) {
                    this._userModel.setNewPassword(newPwd);

                    this.savaUserInfo();
                }
            }
        }, {
            key: "refreshTokenFresh",
            value: function refreshTokenFresh(data) {
                if (this._userModel) {
                    this._userModel.refreshtokenSuccessfulInfo(data);

                    this.savaUserInfo();
                }
            }
        }, {
            key: "refreshAvoidloginToken",
            value: function refreshAvoidloginToken(data) {
                if (this._appInfo) {
                    this._appInfo.refreshtokenSuccessfulInfo(data);

                    this.savaAppinfo();
                }
            }
        }, {
            key: "savaUserInfo",
            value: function savaUserInfo() {
                if (this._dataProcessing) {
                    this._dataProcessing.saveData(_ETTString2.default.userInfo, this._userModel);
                }
            }
        }, {
            key: "savaAppinfo",
            value: function savaAppinfo() {
                if (this._dataProcessing) {
                    this._dataProcessing.saveData(_ETTString2.default.appInfo, this._appInfo);
                }
            }
        }, {
            key: "testCreateTable",
            value: function testCreateTable() {
                var sql = 'name varchar, age VARCHAR,sex VARCHAR,phone VARCHAR,email VARCHAR,address VARCHAR';

                this._dataProcessing.createTable('User', sql, function (result) {
                    console.log("testCreateTable " + result);
                });
            }
        }, {
            key: "testSelectName",
            value: function testSelectName() {
                var sql = "select * from User where name =?";

                this._dataProcessing.selectData(sql, ["kangxg"], function (result) {
                    for (var i = 0; i < result.length; i++) {
                        var u = result[i];
                        console.log("testSelectName:" + u.name + ',' + u.age);
                    }
                });
            }
        }, {
            key: "testInsetDatawithName",
            value: function testInsetDatawithName() {
                var sql = "User(name,age,sex,phone,email,address)" + "values(?,?,?,?,?,?)";

                this._dataProcessing.insertDataToTable(sql, ['kangxg', 20, 'man', 1322222222, 'test@163.com', 'beijing'], function (result) {
                    console.log("testInsetDatawithName " + result);
                });
            }
        }, {
            key: "testDropTable",
            value: function testDropTable() {
                this._dataProcessing.dropTable('User', function (result) {
                    console.log("testDropTable " + result);
                });
            }
        }, {
            key: "testSelectAll",
            value: function testSelectAll() {
                var sql = "select * from User ";

                this._dataProcessing.selectData(sql, [], function (result) {
                    for (var i = 0; i < result.length; i++) {
                        var u = result[i];
                        console.log("testSelecAll:" + u.name + ',' + u.age);
                    }
                });
            }
        }, {
            key: "testDeleteData",
            value: function testDeleteData() {
                var sql = "delete from User";

                this._dataProcessing.deleteData(sql, [], function (result) {
                    console.log("testDeleteData " + result);
                });
            }
        }, {
            key: "testData",
            value: function testData() {
                this.testCreateTable();
                this.testInsetDatawithName();
                this.testSelectAll();
                this.testSelectName();
                this.testDeleteData();
            }
        }, {
            key: "userDataDidUpdate",
            value: function userDataDidUpdate() {
                console.log("userModelDidUpdate");
            }
        }, {
            key: "userDataForKeyDidUpdate",
            value: function userDataForKeyDidUpdate(key) {
                console.log("userModelDidUpdate:" + key);
                var pro = this._dataProcessing;
                pro.saveData("name", key);
                pro.loadData("name", this.didloadData);
            }
        }, {
            key: "didloadData",
            value: function didloadData(data) {
                console.log("load = " + data);
            }
        }, {
            key: "getkeysuccess",
            value: function getkeysuccess(ret) {}
        }, {
            key: "logOut",
            value: function logOut() {
                if (this._dataProcessing) {
                    this._dataProcessing.removeData(_ETTString2.default.userInfo);
                }

                if (this._userModel) {
                    this._userModel._isLog = false;

                    this._userModel.resetUserInfo();
                }
            }
        }], [{
            key: "ShareInstance",
            value: function ShareInstance() {
                if (instance == null) {
                    instance = new ETTDataHouseManager();
                    console.log("ETTDataHouseManager share");
                }

                return instance;
            }
        }]);
        return ETTDataHouseManager;
    }(), (_applyDecoratedDescriptor(_class.prototype, "welcomeGuideComple", [_mobx.action], Object.getOwnPropertyDescriptor(_class.prototype, "welcomeGuideComple"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "bindMobiePhoneSuccessful", [_mobx.action], Object.getOwnPropertyDescriptor(_class.prototype, "bindMobiePhoneSuccessful"), _class.prototype)), _class);
},344,[345,349,351,347,348,359,343,341],"app/utils/ETTDataHouseManager.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = undefined;

    var _desc, _value, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

    var _ETTBaseModel2 = _require(_dependencyMap[0], "./ETTBaseModel");

    var _ETTBaseModel3 = babelHelpers.interopRequireDefault(_ETTBaseModel2);

    var _ETTString = _require(_dependencyMap[1], "../res/values/ETTString");

    var _mobx = _require(_dependencyMap[2], "mobx");

    var _ETTEnum = _require(_dependencyMap[3], "../res/values/ETTEnum");

    function _initDefineProp(target, property, descriptor, context) {
        if (!descriptor) return;
        Object.defineProperty(target, property, {
            enumerable: descriptor.enumerable,
            configurable: descriptor.configurable,
            writable: descriptor.writable,
            value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
        });
    }

    function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
        var desc = {};
        Object['ke' + 'ys'](descriptor).forEach(function (key) {
            desc[key] = descriptor[key];
        });
        desc.enumerable = !!desc.enumerable;
        desc.configurable = !!desc.configurable;

        if ('value' in desc || desc.initializer) {
            desc.writable = true;
        }

        desc = decorators.slice().reverse().reduce(function (desc, decorator) {
            return decorator(target, property, desc) || desc;
        }, desc);

        if (context && desc.initializer !== void 0) {
            desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
            desc.initializer = undefined;
        }

        if (desc.initializer === void 0) {
            Object['define' + 'Property'](target, property, desc);
            desc = null;
        }

        return desc;
    }

    function _initializerWarningHelper(descriptor, context) {
        throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
    }

    var ETTUserModel = (_class = function (_ETTBaseModel) {
        babelHelpers.inherits(ETTUserModel, _ETTBaseModel);

        function ETTUserModel() {
            babelHelpers.classCallCheck(this, ETTUserModel);

            var _this = babelHelpers.possibleConstructorReturn(this, (ETTUserModel.__proto__ || Object.getPrototypeOf(ETTUserModel)).call(this));

            _initDefineProp(_this, "name", _descriptor, _this);

            _this.logType = _ETTEnum.ETTUserLogType.logNone;

            _initDefineProp(_this, "_isLog", _descriptor2, _this);

            _initDefineProp(_this, "_userName", _descriptor3, _this);

            _initDefineProp(_this, "_weChatisBinding", _descriptor4, _this);

            _initDefineProp(_this, "_qqBinding", _descriptor5, _this);

            _this._phone = '';
            _this.ref = '';
            _this.appId = '';
            _this.phoneVerify = '';
            _this.userId = '';
            _this.password = '';
            _this.access_token = '';
            _this.expiresIn = '';
            _this.refresh_token = '';
            _this.expiration = '';
            _this.appId = '';
            _this.companyId = '';
            return _this;
        }

        babelHelpers.createClass(ETTUserModel, [{
            key: "setRegSuccessfulInfo",
            value: function setRegSuccessfulInfo(jsonData) {
                console.log('setRegSuccessfulInfo');

                if (jsonData) {
                    this._phone = jsonData.phone;
                    this.ref = jsonData.ref;
                    this.password = jsonData.password;
                    this.appId = jsonData.appId;
                    this.phoneVerify = jsonData.phoneVerify;
                    this.userId = jsonData.userId;
                    this._userName = jsonData.userName;
                }
            }
        }, {
            key: "setUserInfo",
            value: function setUserInfo(data) {
                if (!data) {
                    return;
                }

                var userInfo = data.userInfo;

                if (userInfo) {
                    this.appId = userInfo.appId;
                    this.password = userInfo.password;
                    this._phone = userInfo.phone;
                    this.userId = userInfo.userId;
                    this._userName = userInfo.userName;
                    this.companyId = userInfo.companyId;
                }

                var thirdUserInfo = data.thirdUserInfo;

                if (thirdUserInfo) {
                    for (var _iterator = thirdUserInfo.entries(), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
                        var _ref3;

                        if (_isArray) {
                            if (_i >= _iterator.length) break;
                            _ref3 = _iterator[_i++];
                        } else {
                            _i = _iterator.next();
                            if (_i.done) break;
                            _ref3 = _i.value;
                        }

                        var _ref = _ref3;

                        var _ref2 = babelHelpers.slicedToArray(_ref, 2);

                        var index = _ref2[0];
                        var item = _ref2[1];

                        if (item.bindingAppId == 'wexin') {
                            this._weChatBinding = item;
                            this._userName = item.nickname;
                            this._weChatisBinding = true;
                        } else if (item.bindingAppId == 'qq') {
                            this._qqBinding = item;
                        }
                    }
                }
            }
        }, {
            key: "setLogSuccessfulInfo",
            value: function setLogSuccessfulInfo(jsonData, type, amountInfo) {
                console.log('setRegSuccessfulInfo');

                if (jsonData) {
                    this.access_token = jsonData.access_token;
                    this.expiration = jsonData.expiration;
                    this.refresh_token = jsonData.refresh_token;
                    this.expiresIn = jsonData.expiresIn;
                }

                this.logType = type;

                switch (this.logType) {
                    case _ETTEnum.ETTUserLogType.logPwd:
                        {
                            this._phone = amountInfo.amount;
                            this.password = amountInfo.pwd;
                        }
                        break;

                    case _ETTEnum.ETTUserLogType.logCode:
                        {
                            this._phone = amountInfo.amount;
                            this.password = '';
                        }
                        break;

                    case _ETTEnum.ETTUserLogType.logWeChat:
                        {
                            this._phone = amountInfo.phone;
                            this.userId = amountInfo.userId;
                            this.password = '';
                        }
                        break;

                    default:
                        {
                            this._phone = amountInfo.logNone;
                            this.password = '';
                        }
                }
            }
        }, {
            key: "removeThirdAmount",
            value: function removeThirdAmount(name) {
                if (name == 'wexin') {
                    this._weChatBinding = '';
                    this._weChatisBinding = false;
                }
            }
        }, {
            key: "setNewPassword",
            value: function setNewPassword(newPwd) {
                this.password = newPwd;
            }
        }, {
            key: "refreshtokenSuccessfulInfo",
            value: function refreshtokenSuccessfulInfo(jsonData) {
                if (jsonData) {
                    this.access_token = jsonData.access_token;
                    this.expiration = jsonData.expiration;
                    this.refresh_token = jsonData.refresh_token;
                    this.expiresIn = jsonData.expiresIn;
                }
            }
        }, {
            key: "setLoadDataComplet",
            value: function setLoadDataComplet(data) {
                babelHelpers.get(ETTUserModel.prototype.__proto__ || Object.getPrototypeOf(ETTUserModel.prototype), "setLoadDataComplet", this).call(this, data);

                if (data) {
                    this.access_token = data.access_token;
                    this.expiration = data.expiration;
                    this.refresh_token = data.refresh_token;
                    this.expiresIn = data.expiresIn;
                    this.appId = data.appId;
                    this.logType = data.logType;
                    this.name = data.name;
                    this.password = data.password;
                    this._phone = data._phone;
                    this.ref = data.ref;
                    this.phoneVerify = data.phoneVerify;
                    this._userName = data._userName;
                    this.userId = data.userId;
                    this._isLog = data._isLog;
                }
            }
        }, {
            key: "resetUserInfo",
            value: function resetUserInfo() {
                this.expiration = '';
                this.refresh_token = '';
                this.expiresIn = '';
                this.appId = '';
                this.logType = -1;
                this.name = '';
                this.password = '';
                this._phone = '';
                this.ref = '';
                this.phoneVerify = '';
                this._userName = '';
                this.userId = '';
                this.userId = '';
                this.companyId = '';
                this._isLog = false;
                this._weChatBinding = '';
                this._weChatisBinding = false;
            }
        }, {
            key: "setName",
            value: function setName(name, callback) {
                console.log("setName");
                this.name = name;
                var mycallback;

                mycallback = function mycallback(key) {
                    if (!!callback) {
                        return callback("name");
                    }
                };

                mycallback("name");
            }
        }, {
            key: "getName",
            value: function getName() {
                return this.name;
            }
        }, {
            key: "valueDidChange",
            value: function valueDidChange() {}
        }]);
        return ETTUserModel;
    }(_ETTBaseModel3.default), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "name", [_mobx.observable], {
        enumerable: true,
        initializer: function initializer() {
            return '';
        }
    }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "_isLog", [_mobx.observable], {
        enumerable: true,
        initializer: function initializer() {
            return false;
        }
    }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "_userName", [_mobx.observable], {
        enumerable: true,
        initializer: function initializer() {
            return '';
        }
    }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "_weChatisBinding", [_mobx.observable], {
        enumerable: true,
        initializer: function initializer() {
            return false;
        }
    }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "_qqBinding", [_mobx.observable], {
        enumerable: true,
        initializer: null
    })), _class);
    exports.default = ETTUserModel;
},345,[346,347,341,348],"app/mobx/ETTUserModel.js");
__d(function (global, _require, module, exports, _dependencyMap) {
   Object.defineProperty(exports, "__esModule", {
      value: true
   });
   exports.default = undefined;

   var _react = _require(_dependencyMap[0], "react");

   var _react2 = babelHelpers.interopRequireDefault(_react);

   var ETTBaseModel = function () {
      function ETTBaseModel() {
         babelHelpers.classCallCheck(this, ETTBaseModel);
         this.initData();
      }

      babelHelpers.createClass(ETTBaseModel, [{
         key: "initData",
         value: function initData() {}
      }, {
         key: "setLoadDataComplet",
         value: function setLoadDataComplet(data) {}
      }, {
         key: "resetModel",
         value: function resetModel() {}
      }, {
         key: "refreshtokenSuccessfulInfo",
         value: function refreshtokenSuccessfulInfo(data) {}
      }]);
      return ETTBaseModel;
   }();

   exports.default = ETTBaseModel;
},346,[114],"app/mobx/ETTBaseModel.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = {
        bindamount_prompt_title: '如曾注册过酷蒙在线请绑定原账号',
        log_amount_placeholder: '手机号',
        log_pwd_placeholder: '密码',
        log_code_placeholder: '请输入手机号',
        log_codepwd_placeholder: '请输入验证码',
        bindamount_placeholder: '已注册账号',
        bindamount_pwd_placeholder: '请输入登录密码',
        forgetamount_pwd_placeholder: '验证码',
        forget_resetpwd_placeholder: '请设置新密码',
        forget_enterresetpwd_placeholder: '请再次输入新密码',
        reg_pwd_placeholder: '请输入密码',
        reg_readagreed_title: '我已阅读且同意',
        reg_readagreed_btn_text: '北京四中网校服务条款',
        reg_successful: '注册成功',
        modify_successful: '修改成功',
        bind_phone_successful: '绑定成功',
        code_send_successful: '验证码发送成功',
        changepwd_old_placeholder: '请输入旧密码',
        changepwd_code_placeholder: '获取短信验证码',
        changepwd_forcode_text: '通过手机验证码修改',
        changepwd_forOldpwd_text: '通过旧密码修改',
        reg_readagreed_checkedImage: 'select_c8_pressed.png',
        reg_readagreed_checkImage: 'select_c8_pressed.png',
        pay_failure_result: '支付失败，请重新支付',
        pay_success_resultPrompt: '您已成功购买',
        pay_success_resultTitle: '请用电脑登陆酷蒙在线学习，祝您学习愉快！',
        find_pwd_notsame: '密码不一致',
        iphone_null_toast: '手机号不可为空',
        pwd_enter_toast: '请再次输入密码',
        iphone_len_toast: '请输入11位数字的手机号码',
        iphone_reged_toast: '手机号已注册，请直接登录',
        pwd_null_toast: '密码不可为空',
        code_null_toast: '验证码不可为空',
        iphone_error_toast: '手机号不正确',
        code_error_toast: '验证码不正确',
        request_fail: '请求失败！',
        read_conditions: '请阅读服务条款',
        welcomeGuide: 'welcomeIsOpen',
        appInfo: 'appInfo',
        userInfo: 'userInfo'
    };
},347,[],"app/res/values/ETTString.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    var ETTChangePwdType = {
        changType_none: 0,
        changType_oldpwd: 1,
        changeType_code: 2,
        changeType_pwd_setting_frompwd: 3,
        changeType_pwd_setting_fromcode: 4
    };
    var ETTAppLoadState = {
        loadFail: -1,
        loadnone: 0,
        loadWelcome: 1,
        loadUserInfo: 1 << 1,
        loadOver: 3
    };
    var ETTUserLogType = {
        logNone: 0,
        logPwd: 1,
        logCode: 2,
        logWeChat: 3,
        logQQ: 4
    };
    var ETTTokenStatus = {
        tokenInvalid: -1,
        tokenValid: 0,
        tokenNeedRefresh: 1
    };
    module.exports = {
        ETTChangePwdType: ETTChangePwdType,
        ETTAppLoadState: ETTAppLoadState,
        ETTUserLogType: ETTUserLogType,
        ETTTokenStatus: ETTTokenStatus
    };
},348,[],"app/res/values/ETTEnum.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = undefined;

    var _desc, _value, _class, _descriptor, _descriptor2;

    var _ETTBaseModel2 = _require(_dependencyMap[0], "./ETTBaseModel");

    var _ETTBaseModel3 = babelHelpers.interopRequireDefault(_ETTBaseModel2);

    var _ETTString = _require(_dependencyMap[1], "../res/values/ETTString");

    var _ETTEnum = _require(_dependencyMap[2], "../res/values/ETTEnum");

    var _mobx = _require(_dependencyMap[3], "mobx");

    var _ETTokenModel = _require(_dependencyMap[4], "./ETTokenModel");

    var _ETTokenModel2 = babelHelpers.interopRequireDefault(_ETTokenModel);

    function _initDefineProp(target, property, descriptor, context) {
        if (!descriptor) return;
        Object.defineProperty(target, property, {
            enumerable: descriptor.enumerable,
            configurable: descriptor.configurable,
            writable: descriptor.writable,
            value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
        });
    }

    function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
        var desc = {};
        Object['ke' + 'ys'](descriptor).forEach(function (key) {
            desc[key] = descriptor[key];
        });
        desc.enumerable = !!desc.enumerable;
        desc.configurable = !!desc.configurable;

        if ('value' in desc || desc.initializer) {
            desc.writable = true;
        }

        desc = decorators.slice().reverse().reduce(function (desc, decorator) {
            return decorator(target, property, desc) || desc;
        }, desc);

        if (context && desc.initializer !== void 0) {
            desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
            desc.initializer = undefined;
        }

        if (desc.initializer === void 0) {
            Object['define' + 'Property'](target, property, desc);
            desc = null;
        }

        return desc;
    }

    function _initializerWarningHelper(descriptor, context) {
        throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
    }

    var ETTUserModel = (_class = function (_ETTBaseModel) {
        babelHelpers.inherits(ETTUserModel, _ETTBaseModel);

        function ETTUserModel() {
            var _ref;

            var _temp, _this, _ret;

            babelHelpers.classCallCheck(this, ETTUserModel);

            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }

            return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = ETTUserModel.__proto__ || Object.getPrototypeOf(ETTUserModel)).call.apply(_ref, [this].concat(args))), _this), _initDefineProp(_this, "_isFirstOpen", _descriptor, _this), _initDefineProp(_this, "_isLoadState", _descriptor2, _this), _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
        }

        babelHelpers.createClass(ETTUserModel, [{
            key: "initData",
            value: function initData() {
                babelHelpers.get(ETTUserModel.prototype.__proto__ || Object.getPrototypeOf(ETTUserModel.prototype), "initData", this).call(this);
                this._tokenModel = new _ETTokenModel2.default();
            }
        }, {
            key: "setFirstOpenStatus",
            value: function setFirstOpenStatus(value) {
                if (value && value.length > 1) {
                    this._isFirstOpen = value;
                }
            }
        }, {
            key: "setLoadDataComplet",
            value: function setLoadDataComplet(data) {
                if (data) {
                    this._isFirstOpen = data._isFirstOpen;
                    this._tokenModel._access_token = data._tokenModel._access_token;
                    this._tokenModel._refresh_token = data._tokenModel._refresh_token;
                    this._tokenModel._expiresIn = data._tokenModel._expiresIn;
                    this._tokenModel._expiration = data._tokenModel._expiration;
                }
            }
        }, {
            key: "resetModel",
            value: function resetModel() {
                babelHelpers.get(ETTUserModel.prototype.__proto__ || Object.getPrototypeOf(ETTUserModel.prototype), "resetModel", this).call(this);
                this._isFirstOpen = 'YES';
                this._tokenModel._access_token = '';
                this._tokenModel._expiresIn = '';
                this._tokenModel._refresh_token = '';
                this._tokenModel._expiration = '';
            }
        }, {
            key: "refreshtokenSuccessfulInfo",
            value: function refreshtokenSuccessfulInfo(jsonData) {
                this._tokenModel._access_token = jsonData.access_token;
                this._tokenModel._expiration = jsonData.expiration;
                this._tokenModel._refresh_token = jsonData.refresh_token;
                this._tokenModel._expiresIn = jsonData.expiresIn;
            }
        }]);
        return ETTUserModel;
    }(_ETTBaseModel3.default), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "_isFirstOpen", [_mobx.observable], {
        enumerable: true,
        initializer: function initializer() {
            return 'YES';
        }
    }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "_isLoadState", [_mobx.observable], {
        enumerable: true,
        initializer: function initializer() {
            return _ETTEnum.ETTAppLoadState.loadnone;
        }
    })), _class);
    exports.default = ETTUserModel;
},349,[346,347,348,341,350],"app/mobx/ETTAppInfoModel.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = undefined;

    var _ETTBaseModel2 = _require(_dependencyMap[0], "./ETTBaseModel");

    var _ETTBaseModel3 = babelHelpers.interopRequireDefault(_ETTBaseModel2);

    var ETTokenModel = function (_ETTBaseModel) {
        babelHelpers.inherits(ETTokenModel, _ETTBaseModel);

        function ETTokenModel() {
            var _ref;

            var _temp, _this, _ret;

            babelHelpers.classCallCheck(this, ETTokenModel);

            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }

            return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = ETTokenModel.__proto__ || Object.getPrototypeOf(ETTokenModel)).call.apply(_ref, [this].concat(args))), _this), _this._access_token = '', _this._expiresIn = '', _this._refresh_token = '', _this._expiration = '', _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
        }

        return ETTokenModel;
    }(_ETTBaseModel3.default);

    exports.default = ETTokenModel;
},350,[346],"app/mobx/ETTokenModel.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = undefined;

    var _ETTDatabaseStores = _require(_dependencyMap[0], "./ETTDatabaseStores");

    var _ETTDatabaseStores2 = babelHelpers.interopRequireDefault(_ETTDatabaseStores);

    var _ETTDefaultStorage = _require(_dependencyMap[1], "./ETTDefaultStorage");

    var _ETTDefaultStorage2 = babelHelpers.interopRequireDefault(_ETTDefaultStorage);

    var _ETTConfig = _require(_dependencyMap[2], "../res/values/ETTConfig");

    var ETTDataProcessingManager = function () {
        function ETTDataProcessingManager() {
            babelHelpers.classCallCheck(this, ETTDataProcessingManager);
            console.log("ETTDataProcessingManager init");
            this._dataBaseStores = new _ETTDatabaseStores2.default();
            this._defaultStores = new _ETTDefaultStorage2.default();
        }

        babelHelpers.createClass(ETTDataProcessingManager, [{
            key: "sava",
            value: function sava() {
                console.log("savaData:");
            }
        }, {
            key: "savaData",
            value: function savaData(key, object, expires) {
                if (this._defaultStores) {
                    this._defaultStores.savaData(key, object, expires);
                }
            }
        }, {
            key: "saveData",
            value: function saveData(key, object) {
                console.log("savaData:" + key + "," + object);

                if (this._defaultStores) {
                    this._defaultStores.savaData(key, object);
                }
            }
        }, {
            key: "saveItem",
            value: function saveItem(key, object) {
                console.log("savaItem:" + key + "," + object);

                this._defaultStores.saveItem(key, object);
            }
        }, {
            key: "removeData",
            value: function removeData(key) {
                this._defaultStores.removeData(key);
            }
        }, {
            key: "removeAll",
            value: function removeAll() {
                this._defaultStores.removeAll();
            }
        }, {
            key: "clearDataByKey",
            value: function clearDataByKey(key) {
                this._defaultStores.clearDataByKey(key);
            }
        }, {
            key: "loadData",
            value: function loadData(key, params, someFlag, callBack) {
                if (this._defaultStores) {
                    this._defaultStores.loadData(key, params, someFlag, callBack);
                }
            }
        }, {
            key: "loadData",
            value: function loadData(key, callBack) {
                if (this._defaultStores) {
                    this._defaultStores.loadData(key, null, null, callBack);
                }
            }
        }, {
            key: "loadItemForkey",
            value: function loadItemForkey(key, callback) {
                if (this._defaultStores) {
                    this._defaultStores.loadItemForkey(key, callback);
                }
            }
        }, {
            key: "createTable",
            value: function createTable(tablename, sql, callback) {
                if (this._dataBaseStores) {
                    this._dataBaseStores.createTable(tablename, sql, callback);
                }
            }
        }, {
            key: "dropTable",
            value: function dropTable(tablename, callback) {
                if (this._dataBaseStores) {
                    this._dataBaseStores.dropTable(tablename, callback);
                }
            }
        }, {
            key: "insertDataToTable",
            value: function insertDataToTable(sqlQuery, values, callback) {
                if (this._dataBaseStores) {
                    this._dataBaseStores.insertData(sqlQuery, values, callback);
                }
            }
        }, {
            key: "selectData",
            value: function selectData(sqlQuery, values, callback) {
                if (this._dataBaseStores) {
                    this._dataBaseStores.selectData(sqlQuery, values, callback);
                }
            }
        }, {
            key: "deleteData",
            value: function deleteData(sql, value, callback) {
                if (this._dataBaseStores) {
                    this._dataBaseStores.deleteData(sql, value, callback);
                }
            }
        }]);
        return ETTDataProcessingManager;
    }();

    exports.default = ETTDataProcessingManager;
},351,[352,355,343],"app/utils/ETTDataProcessingManager.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = undefined;

    var _reactNative = _require(_dependencyMap[0], "react-native");

    var _reactNative2 = babelHelpers.interopRequireDefault(_reactNative);

    var _reactNativeSqliteStorage = _require(_dependencyMap[1], "react-native-sqlite-storage");

    var _reactNativeSqliteStorage2 = babelHelpers.interopRequireDefault(_reactNativeSqliteStorage);

    var ETTDatabaseStores = function () {
        function ETTDatabaseStores() {
            babelHelpers.classCallCheck(this, ETTDatabaseStores);
            console.log("ETTDatabaseStore init");
            this.openDatabase();
        }

        babelHelpers.createClass(ETTDatabaseStores, [{
            key: "openDatabase",
            value: function openDatabase() {
                var _this = this;

                if (this._db == null) {
                    this._db = _reactNativeSqliteStorage2.default.openDatabase('learningStore.db', '1.0', 'MySQLite', -1, function () {
                        _this.dbSuccess('DB Open');
                    }, function (err) {
                        _this.dbError("SQL Error:", err);
                    });
                }
            }
        }, {
            key: "createTable",
            value: function createTable(tableName, sqlQuery, callback) {
                var _this2 = this;

                if (this._db == null) {
                    this.openDatabase();
                }

                this._db.transaction(function (tx) {
                    tx.executeSql('CREATE TABLE IF NOT EXISTS ' + tableName + '(' + sqlQuery + ')', [], function () {
                        _this2.dbSuccess('executeSql');

                        callback(true);
                    }, function (err) {
                        _this2.dbError('executeSql', err);

                        callback(false);
                    });
                }, function (err) {
                    _this2.dbError('transaction', err);
                }, function () {
                    _this2.dbSuccess('transaction');
                });
            }
        }, {
            key: "closeDatabase",
            value: function closeDatabase(callback) {
                if (this._db) {
                    this._db.close();

                    this.dbSuccess("DB Close");
                    callback(true);
                } else {
                    console.log("SQLiteStorage not open");
                    callback(false);
                }
            }
        }, {
            key: "insertData",
            value: function insertData(sqlQuery, values, callback) {
                var _this3 = this;

                if (!this._db) {
                    this.openDatabase();
                }

                this._db.transaction(function (tx) {
                    var sql = "INSERT INTO " + sqlQuery;
                    tx.executeSql(sql, values, function () {
                        _this3.dbSuccess("insert data sucess");

                        callback(true);
                    }, function (err) {
                        _this3.dbError("insert data faile", err);

                        callback(false);
                    });
                }, function (error) {
                    _this3._errorCB('insert data', error);
                }, function () {
                    _this3.dbSuccess('insert data Success:');
                });
            }
        }, {
            key: "deleteData",
            value: function deleteData(sql, value, callback) {
                var _this4 = this;

                if (!this._db) {
                    this.openDatabase();
                }

                this._db.transaction(function (tx) {
                    tx.executeSql(sql, value, function () {
                        _this4.dbSuccess("delete data success");

                        callback(true);
                    }, function (error) {
                        _this4.dbError('delete data error', error);

                        callback(false);
                    });
                });
            }
        }, {
            key: "dropTable",
            value: function dropTable(table, callback) {
                var _this5 = this;

                this._db.transaction(function (tx) {
                    tx.executeSql('drop table ' + table, [], function () {
                        _this5.dbSuccess('transaction drop  table success');

                        callback(true);
                    });
                }, function (err) {
                    _this5.dbError('transaction drop table', err);

                    callback(false);
                });
            }
        }, {
            key: "selectData",
            value: function selectData(sqlQuery, values, callback) {
                var _this6 = this;

                if (!this._db) {
                    this.openDatabase();
                }

                this._db.transaction(function (tx) {
                    tx.executeSql(sqlQuery, values, function (tx, results) {
                        _this6.dbSuccess("selectData completed :" + results);

                        var len = results.rows.length;
                        var arr = new Array();

                        for (var i = 0; i < len; i++) {
                            var u = results.rows.item(i);
                            console.log(u.name + ',' + u.age);
                            arr.push(u);
                        }

                        callback(arr);
                    });
                }, function (error) {
                    _this6.dbError("select error:", error);
                });
            }
        }, {
            key: "dbSuccess",
            value: function dbSuccess(name) {
                console.log("SQLiteStorage : " + name + " success");
            }
        }, {
            key: "dbError",
            value: function dbError(name, err) {
                console.log("SQLiteStorage  error:" + name);
                console.log(err);
            }
        }, {
            key: "render",
            value: function render() {
                return null;
            }
        }]);
        return ETTDatabaseStores;
    }();

    exports.default = ETTDatabaseStores;
},352,[12,353],"app/utils/ETTDatabaseStores.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var plugin = _require(_dependencyMap[0], './lib/sqlite.core.js');

  var SQLiteFactory = plugin.SQLiteFactory;
  var config = [[false, "SQLitePlugin", "transaction", false, true, true], [false, "SQLitePlugin", "readTransaction", false, true, true], [false, "SQLitePlugin", "close", false, false, true], [false, "SQLitePlugin", "executeSql", true, false, true], [false, "SQLitePlugin", "sqlBatch", false, false, true], [false, "SQLitePlugin", "attach", true, false, true], [false, "SQLitePlugin", "detach", false, false, true], [false, "SQLitePluginTransaction", "executeSql", true, false, false], [false, "SQLiteFactory", "deleteDatabase", false, false, true], [true, "SQLiteFactory", "openDatabase", false, false, true], [false, "SQLiteFactory", "echoTest", false, false, true]];
  var originalFns = {};
  config.forEach(function (entry) {
    var _entry = babelHelpers.slicedToArray(entry, 3),
        returnValueExpected = _entry[0],
        prototype = _entry[1],
        fn = _entry[2];

    var originalFn = plugin[prototype].prototype[fn];
    originalFns[prototype + "." + fn] = originalFn;
  });

  function enablePromiseRuntime(enable) {
    if (enable) {
      createPromiseRuntime();
    } else {
      createCallbackRuntime();
    }
  }

  function createCallbackRuntime() {
    config.forEach(function (entry) {
      var _entry2 = babelHelpers.slicedToArray(entry, 6),
          returnValueExpected = _entry2[0],
          prototype = _entry2[1],
          fn = _entry2[2],
          argsNeedPadding = _entry2[3],
          reverseCallbacks = _entry2[4],
          rejectOnError = _entry2[5];

      plugin[prototype].prototype[fn] = originalFns[prototype + "." + fn];
    });
    console.log("Callback based runtime ready");
  }

  function createPromiseRuntime() {
    config.forEach(function (entry) {
      var _entry3 = babelHelpers.slicedToArray(entry, 6),
          returnValueExpected = _entry3[0],
          prototype = _entry3[1],
          fn = _entry3[2],
          argsNeedPadding = _entry3[3],
          reverseCallbacks = _entry3[4],
          rejectOnError = _entry3[5];

      var originalFn = plugin[prototype].prototype[fn];

      plugin[prototype].prototype[fn] = function () {
        var _this = this;

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        if (argsNeedPadding && args.length == 1) {
          args.push([]);
        }

        var promise = new Promise(function (resolve, reject) {
          var success = function success() {
            if (!returnValueExpected) {
              for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                args[_key2] = arguments[_key2];
              }

              return resolve(args);
            }
          };

          var error = function error(err) {
            var _console;

            (_console = console).log.apply(_console, ['error: ', fn].concat(babelHelpers.toConsumableArray(args), [arguments]));

            if (rejectOnError) {
              reject(err);
            }

            return false;
          };

          var retValue = originalFn.call.apply(originalFn, [_this].concat(babelHelpers.toConsumableArray(args), [reverseCallbacks ? error : success, reverseCallbacks ? success : error]));

          if (returnValueExpected) {
            return resolve(retValue);
          }
        });
        return promise;
      };
    });
    console.log("Promise based runtime ready");
  }

  SQLiteFactory.prototype.enablePromise = enablePromiseRuntime;
  module.exports = new SQLiteFactory();
},353,[354],"node_modules/react-native-sqlite-storage/sqlite.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var NativeModules = _require(_dependencyMap[0], 'react-native').NativeModules;

  var DB_STATE_INIT, DB_STATE_OPEN, READ_ONLY_REGEX, SQLiteFactory, SQLitePlugin, SQLitePluginTransaction, argsArray, dblocations, newSQLError, nextTick, root, txLocks;
  var plugin = {};
  READ_ONLY_REGEX = /^(\s|;)*(?:alter|create|delete|drop|insert|reindex|replace|update)/i;
  DB_STATE_INIT = "INIT";
  DB_STATE_OPEN = "OPEN";
  txLocks = {};

  newSQLError = function newSQLError(error, code) {
    var sqlError;
    sqlError = error;

    if (!code) {
      code = 0;
    }

    if (!sqlError) {
      sqlError = new Error("a plugin had an error but provided no response");
      sqlError.code = code;
    }

    if (typeof sqlError === "string") {
      sqlError = new Error(error);
      sqlError.code = code;
    }

    if (!sqlError.code && sqlError.message) {
      sqlError.code = code;
    }

    if (!sqlError.code && !sqlError.message) {
      sqlError = new Error("an unknown error was returned: " + JSON.stringify(sqlError));
      sqlError.code = code;
    }

    return sqlError;
  };

  nextTick = window.setImmediate || function (fun) {
    window.setTimeout(fun, 0);
  };

  argsArray = function argsArray(fun) {
    return function () {
      var args, i, len;
      len = arguments.length;

      if (len) {
        args = [];
        i = -1;

        while (++i < len) {
          args[i] = arguments[i];
        }

        return fun.call(this, args);
      } else {
        return fun.call(this, []);
      }
    };
  };

  plugin.exec = function (method, options, success, error) {
    if (plugin.sqlitePlugin.DEBUG) {
      console.log('SQLite.' + method + '(' + JSON.stringify(options) + ')');
    }

    NativeModules["SQLite"][method](options, success, error);
  };

  SQLitePlugin = function SQLitePlugin(openargs, openSuccess, openError) {
    var dbname;

    if (!(openargs && openargs['name'])) {
      throw newSQLError("Cannot create a SQLitePlugin db instance without a db name");
    }

    dbname = openargs.name;

    if (typeof dbname !== 'string') {
      throw newSQLError('sqlite plugin database name must be a string');
    }

    this.openargs = openargs;
    this.dbname = dbname;
    this.openSuccess = openSuccess;
    this.openError = openError;
    this.openSuccess || (this.openSuccess = function () {
      console.log("DB opened: " + dbname);
    });
    this.openError || (this.openError = function (e) {
      console.log(e.message);
    });
    this.open(this.openSuccess, this.openError);
  };

  SQLitePlugin.prototype.databaseFeatures = {
    isSQLitePluginDatabase: true
  };
  SQLitePlugin.prototype.openDBs = {};

  SQLitePlugin.prototype.addTransaction = function (t) {
    if (!txLocks[this.dbname]) {
      txLocks[this.dbname] = {
        queue: [],
        inProgress: false
      };
    }

    txLocks[this.dbname].queue.push(t);

    if (this.dbname in this.openDBs && this.openDBs[this.dbname] !== DB_STATE_INIT) {
      this.startNextTransaction();
    } else {
      if (this.dbname in this.openDBs) {
        console.log('new transaction is waiting for open operation');
      } else {
        console.log('database is closed, new transaction is [stuck] waiting until db is opened again!');
      }
    }
  };

  SQLitePlugin.prototype.transaction = function (fn, error, success) {
    if (!this.openDBs[this.dbname]) {
      error(newSQLError('database not open'));
      return;
    }

    this.addTransaction(new SQLitePluginTransaction(this, fn, error, success, true, false));
  };

  SQLitePlugin.prototype.readTransaction = function (fn, error, success) {
    if (!this.openDBs[this.dbname]) {
      error(newSQLError('database not open'));
      return;
    }

    this.addTransaction(new SQLitePluginTransaction(this, fn, error, success, false, true));
  };

  SQLitePlugin.prototype.startNextTransaction = function () {
    var self;
    self = this;
    nextTick(function (_this) {
      return function () {
        var txLock;

        if (!(_this.dbname in _this.openDBs) || _this.openDBs[_this.dbname] !== DB_STATE_OPEN) {
          console.log('cannot start next transaction: database not open');
          return;
        }

        txLock = txLocks[self.dbname];

        if (!txLock) {
          console.log('cannot start next transaction: database connection is lost');
        } else if (txLock.queue.length > 0 && !txLock.inProgress) {
          txLock.inProgress = true;
          txLock.queue.shift().start();
        }
      };
    }(this));
  };

  SQLitePlugin.prototype.abortAllPendingTransactions = function () {
    var j, len1, ref, tx, txLock;
    txLock = txLocks[this.dbname];

    if (!!txLock && txLock.queue.length > 0) {
      ref = txLock.queue;

      for (j = 0, len1 = ref.length; j < len1; j++) {
        tx = ref[j];
        tx.abortFromQ(newSQLError('Invalid database handle'));
      }

      txLock.queue = [];
      txLock.inProgress = false;
    }
  };

  SQLitePlugin.prototype.sqlBatch = function (sqlStatements, success, error) {
    var batchList, j, len1, myfn, st;

    if (!sqlStatements || sqlStatements.constructor !== Array) {
      throw newSQLError('sqlBatch expects an array');
    }

    batchList = [];

    for (j = 0, len1 = sqlStatements.length; j < len1; j++) {
      st = sqlStatements[j];

      if (st.constructor === Array) {
        if (st.length === 0) {
          throw newSQLError('sqlBatch array element of zero (0) length');
        }

        batchList.push({
          sql: st[0],
          params: st.length === 0 ? [] : st[1]
        });
      } else {
        batchList.push({
          sql: st,
          params: []
        });
      }
    }

    myfn = function myfn(tx) {
      var elem, k, len2, results;
      results = [];

      for (k = 0, len2 = batchList.length; k < len2; k++) {
        elem = batchList[k];
        results.push(tx.addStatement(elem.sql, elem.params, null, null));
      }

      return results;
    };

    var mysuccess = function mysuccess() {
      if (!!success) {
        return success();
      }
    };

    var myerror = function myerror(e) {
      if (!!error) {
        return error(e);
      } else {
        console.log("Error handler not provided: ", e);
      }
    };

    this.addTransaction(new SQLitePluginTransaction(this, myfn, myerror, mysuccess, true, false));
  };

  SQLitePlugin.prototype.open = function (success, error) {
    var openerrorcb, opensuccesscb;

    if (this.dbname in this.openDBs && this.openDBs[this.dbname] === DB_STATE_OPEN) {
      console.log('database already open: ' + this.dbname);
      nextTick(function (_this) {
        return function () {
          success(_this);
        };
      }(this));
    } else {
      console.log('OPEN database: ' + this.dbname);

      opensuccesscb = function (_this) {
        return function () {
          var txLock;

          if (!_this.openDBs[_this.dbname]) {
            console.log('database was closed during open operation');
          }

          if (_this.dbname in _this.openDBs) {
            _this.openDBs[_this.dbname] = DB_STATE_OPEN;
          }

          if (!!success) {
            success(_this);
          }

          txLock = txLocks[_this.dbname];

          if (!!txLock && txLock.queue.length > 0 && !txLock.inProgress) {
            _this.startNextTransaction();
          }
        };
      }(this);

      openerrorcb = function (_this) {
        return function () {
          console.log('OPEN database: ' + _this.dbname + ' failed, aborting any pending transactions');

          if (!!error) {
            error(newSQLError('Could not open database'));
          }

          delete _this.openDBs[_this.dbname];

          _this.abortAllPendingTransactions();
        };
      }(this);

      this.openDBs[this.dbname] = DB_STATE_INIT;
      plugin.exec("open", this.openargs, opensuccesscb, openerrorcb);
    }
  };

  SQLitePlugin.prototype.close = function (success, error) {
    if (this.dbname in this.openDBs) {
      if (txLocks[this.dbname] && txLocks[this.dbname].inProgress) {
        console.log('cannot close: transaction is in progress');
        error(newSQLError('database cannot be closed while a transaction is in progress'));
        return;
      }

      console.log('CLOSE database: ' + this.dbname);
      delete this.openDBs[this.dbname];

      if (txLocks[this.dbname]) {
        console.log('closing db with transaction queue length: ' + txLocks[this.dbname].queue.length);
      } else {
        console.log('closing db with no transaction lock state');
      }

      var mysuccess = function mysuccess(t, r) {
        if (!!success) {
          return success(r);
        }
      };

      var myerror = function myerror(t, e) {
        if (!!error) {
          return error(e);
        } else {
          console.log("Error handler not provided: ", e);
        }
      };

      plugin.exec("close", {
        path: this.dbname
      }, mysuccess, myerror);
    } else {
      var err = 'cannot close: database is not open';
      console.log(err);

      if (error) {
        nextTick(function () {
          return error(err);
        });
      }
    }
  };

  SQLitePlugin.prototype.attach = function (dbNameToAttach, dbAlias, success, error) {
    if (this.dbname in this.openDBs) {
      if (txLocks[this.dbname] && txLocks[this.dbname].inProgress) {
        console.log('cannot attach: transaction is in progress');
        error(newSQLError('database cannot be attached while a transaction is in progress'));
        return;
      }

      console.log('ATTACH database ' + dbNameToAttach + ' to ' + this.dbname + ' with alias ' + dbAlias);

      var mysuccess = function mysuccess(t, r) {
        if (!!success) {
          return success(r);
        }
      };

      var myerror = function myerror(e) {
        if (!!error) {
          return error(e);
        } else {
          console.log("Error handler not provided: ", e);
        }
      };

      plugin.exec("attach", {
        path: this.dbname,
        dbName: dbNameToAttach,
        dbAlias: dbAlias
      }, mysuccess, myerror);
    } else {
      var err = 'cannot attach: database is not open';

      if (error) {
        nextTick(function () {
          return error(err);
        });
      }
    }
  };

  SQLitePlugin.prototype.detach = function (dbAlias, success, error) {
    if (this.dbname in this.openDBs) {
      if (txLocks[this.dbname] && txLocks[this.dbname].inProgress) {
        console.log('cannot attach: transaction is in progress');
        error(newSQLError('database cannot be attached while a transaction is in progress'));
        return;
      }

      console.log('DETACH database ' + dbAlias + ' from ' + this.dbname);

      var mysuccess = function mysuccess(t, r) {
        if (!!success) {
          return success(r);
        }
      };

      var myerror = function myerror(e) {
        console.log('ERR', e);

        if (!!error) {
          return error(e);
        } else {
          console.log("Error handler not provided: ", e);
        }
      };

      this.executeSql('DETACH DATABASE ' + dbAlias, [], mysuccess, myerror);
    } else {
      var err = 'cannot attach: database is not open';
      console.log(err);

      if (error) {
        nextTick(function () {
          return error(err);
        });
      }
    }
  };

  SQLitePlugin.prototype.executeSql = function (statement, params, success, error) {
    var myerror, myfn, mysuccess;

    mysuccess = function mysuccess(t, r) {
      if (!!success) {
        return success(r);
      }
    };

    myerror = function myerror(t, e) {
      if (!!error) {
        return error(e);
      } else {
        console.log("Error handler not provided: ", e);
      }
    };

    myfn = function myfn(tx) {
      tx.addStatement(statement, params, mysuccess, myerror);
    };

    this.addTransaction(new SQLitePluginTransaction(this, myfn, null, null, false, false));
  };

  SQLitePluginTransaction = function SQLitePluginTransaction(db, fn, error, success, txlock, readOnly) {
    if (typeof fn !== "function") {
      var err = newSQLError("transaction expected a function");

      if (!!error) {
        return error(err);
      } else {
        throw err;
      }
    }

    this.db = db;
    this.fn = fn;
    this.error = error;
    this.success = success;
    this.txlock = txlock;
    this.readOnly = readOnly;
    this.executes = [];

    if (txlock) {
      this.addStatement("BEGIN", [], null, function (tx, err) {
        throw newSQLError("unable to begin transaction: " + err.message, err.code);
      });
    } else {
      this.addStatement("SELECT 1", [], null, null);
    }
  };

  SQLitePluginTransaction.prototype.start = function () {
    var err;

    try {
      this.fn(this);
      this.run();
    } catch (_error) {
      err = _error;
      txLocks[this.db.dbname].inProgress = false;
      this.db.startNextTransaction();

      if (this.error) {
        this.error(newSQLError(err));
      }
    }
  };

  SQLitePluginTransaction.prototype.executeSql = function (sql, values, success, error) {
    var that = this;

    if (that.finalized) {
      throw {
        message: 'InvalidStateError: DOM Exception 11: This transaction is already finalized. Transactions are committed' + ' after its success or failure handlers are called. If you are using a Promise to handle callbacks, be aware that' + ' implementations following the A+ standard adhere to run-to-completion semantics and so Promise resolution occurs' + ' on a subsequent tick and therefore after the transaction commits.',
        code: 11
      };
    }

    if (that.readOnly && READ_ONLY_REGEX.test(sql)) {
      that.handleStatementFailure(error, {
        message: 'invalid sql for a read-only transaction'
      });
      return;
    }

    var mysuccess = function mysuccess(t, r) {
      if (!!success) {
        return success(t, r);
      }
    };

    var myerror = function myerror(t, e) {
      if (!!error) {
        return error(e);
      } else {
        console.log("Error handler not provided: ", e);
      }
    };

    that.addStatement(sql, values, mysuccess, myerror);
  };

  SQLitePluginTransaction.prototype.addStatement = function (sql, values, success, error) {
    var j, len1, params, sqlStatement, t, v;
    sqlStatement = typeof sql === 'string' ? sql : sql.toString();
    params = [];

    if (!!values && values.constructor === Array) {
      for (j = 0, len1 = values.length; j < len1; j++) {
        v = values[j];
        t = typeof v;

        if (v === null || v === void 0 || t === 'number' || t === 'string') {
          params.push(v);
        } else if (t === 'boolean') {
          params.push(~~v);
        } else if (t !== 'function') {
          params.push(v.toString());
          console.warn('addStatement - parameter of type <' + t + '> converted to string using toString()');
        } else {
          var errorMsg = 'Unsupported parameter type <' + t + '> found in addStatement()';
          console.error(errorMsg);
          error(newSQLError(errorMsg));
          return;
        }
      }
    }

    this.executes.push({
      success: success,
      error: error,
      sql: sqlStatement,
      params: params
    });
  };

  SQLitePluginTransaction.prototype.handleStatementSuccess = function (handler, response) {
    var payload, rows;

    if (!handler) {
      return;
    }

    rows = response.rows || [];
    payload = {
      rows: {
        item: function item(i) {
          return rows[i];
        },
        raw: function raw() {
          return rows.slice();
        },
        length: rows.length
      },
      rowsAffected: response.rowsAffected || 0,
      insertId: response.insertId || void 0
    };
    handler(this, payload);
  };

  SQLitePluginTransaction.prototype.handleStatementFailure = function (handler, response) {
    if (!handler) {
      throw newSQLError("a statement with no error handler failed: " + response.message, response.code);
    }

    if (handler(this, response) !== false) {
      throw newSQLError("a statement error callback did not return false: " + response.message, response.code);
    }
  };

  SQLitePluginTransaction.prototype.run = function () {
    var batchExecutes, handlerFor, i, callbacks, request, tropts, tx, txFailure, waiting;
    txFailure = null;
    tropts = [];
    batchExecutes = this.executes;
    waiting = batchExecutes.length;
    this.executes = [];
    tx = this;

    handlerFor = function handlerFor(index, didSucceed) {
      return function (response) {
        if (!txFailure) {
          try {
            if (didSucceed) {
              tx.handleStatementSuccess(batchExecutes[index].success, response);
            } else {
              tx.handleStatementFailure(batchExecutes[index].error, newSQLError(response));
            }
          } catch (err) {
            var errorMsg = JSON.stringify(err);
            if (errorMsg === "{}") errorMsg = err.toString();
            console.log("warning - exception while invoking a callback: " + errorMsg);
          }

          if (!didSucceed) {
            txFailure = newSQLError(response);
          }
        }

        if (--waiting === 0) {
          if (txFailure) {
            tx.executes = [];
            tx.abort(txFailure);
          } else if (tx.executes.length > 0) {
            tx.run();
          } else {
            tx.finish();
          }
        }
      };
    };

    i = 0;
    callbacks = [];

    while (i < batchExecutes.length) {
      request = batchExecutes[i];
      callbacks.push({
        success: handlerFor(i, true),
        error: handlerFor(i, false)
      });
      tropts.push({
        qid: 1111,
        sql: request.sql,
        params: request.params
      });
      i++;
    }

    var mysuccess = function mysuccess(result) {
      var j, last, q, r, res, type;

      if (result.length == 0) {
        return;
      }

      last = result.length - 1;

      for (j = 0; j <= last; ++j) {
        r = result[j];
        type = r.type;
        res = r.result;
        q = callbacks[j];

        if (q) {
          if (q[type]) {
            q[type](res);
          }
        }
      }
    };

    var myerror = function myerror(error) {
      console.log("batch execution error: ", error);
    };

    plugin.exec("backgroundExecuteSqlBatch", {
      dbargs: {
        dbname: this.db.dbname
      },
      executes: tropts
    }, mysuccess, myerror);
  };

  SQLitePluginTransaction.prototype.abort = function (txFailure) {
    var failed, succeeded, tx;

    if (this.finalized) {
      return;
    }

    tx = this;

    succeeded = function succeeded(tx) {
      txLocks[tx.db.dbname].inProgress = false;
      tx.db.startNextTransaction();

      if (tx.error) {
        tx.error(txFailure);
      }
    };

    failed = function failed(tx, err) {
      txLocks[tx.db.dbname].inProgress = false;
      tx.db.startNextTransaction();

      if (tx.error) {
        tx.error(newSQLError("error while trying to roll back: " + err.message, err.code));
      }
    };

    this.finalized = true;

    if (this.txlock) {
      this.addStatement("ROLLBACK", [], succeeded, failed);
      this.run();
    } else {
      succeeded(tx);
    }
  };

  SQLitePluginTransaction.prototype.finish = function () {
    var failed, succeeded, tx;

    if (this.finalized) {
      return;
    }

    tx = this;

    succeeded = function succeeded(tx) {
      txLocks[tx.db.dbname].inProgress = false;
      tx.db.startNextTransaction();

      if (tx.success) {
        tx.success();
      }
    };

    failed = function failed(tx, err) {
      txLocks[tx.db.dbname].inProgress = false;
      tx.db.startNextTransaction();

      if (tx.error) {
        tx.error(newSQLError("error while trying to commit: " + err.message, err.code));
      }
    };

    this.finalized = true;

    if (this.txlock) {
      this.addStatement("COMMIT", [], succeeded, failed);
      this.run();
    } else {
      succeeded(tx);
    }
  };

  SQLitePluginTransaction.prototype.abortFromQ = function (sqlerror) {
    if (this.error) {
      this.error(sqlerror);
    }
  };

  dblocations = {
    'default': 'nosync',
    'Documents': 'docs',
    'Library': 'libs'
  };

  SQLiteFactory = function SQLiteFactory() {};

  SQLiteFactory.prototype.DEBUG = function (debug) {
    console.log("Setting debug to:", debug);
    plugin.sqlitePlugin.DEBUG = debug;
  };

  SQLiteFactory.prototype.sqliteFeatures = function () {
    return {
      isSQLitePlugin: true
    };
  };

  SQLiteFactory.prototype.openDatabase = argsArray(function (args) {
    var errorcb, first, okcb, openargs, readOnly;

    if (args.length < 1) {
      return null;
    }

    first = args[0];
    openargs = null;

    okcb = errorcb = function errorcb() {};

    if (first.constructor === String) {
      openargs = {
        name: first,
        dblocation: dblocations['default']
      };

      if (args.length >= 5) {
        okcb = args[4];

        if (args.length > 5) {
          errorcb = args[5];
        }
      }
    } else {
      openargs = first;
      readOnly = !!openargs.readOnly;

      if (!readOnly && (!openargs.location || openargs.location.constructor !== String || !dblocations.hasOwnProperty(openargs.location))) {
        openargs.dblocation = dblocations['default'];
      } else {
        openargs.dblocation = dblocations[openargs.location];
      }

      if (!!openargs.createFromLocation) {
        if (openargs.createFromLocation === 1) {
          openargs.assetFilename = "1";
        } else if (typeof openargs.createFromLocation == 'string') {
          openargs.assetFilename = openargs.createFromLocation;
        }
      }

      if (!!openargs.androidDatabaseImplementation && openargs.androidDatabaseImplementation === 2) {
        openargs.androidOldDatabaseImplementation = 1;
      }

      if (!!openargs.androidLockWorkaround && openargs.androidLockWorkaround === 1) {
        openargs.androidBugWorkaround = 1;
      }

      if (args.length >= 2) {
        okcb = args[1];

        if (args.length > 2) {
          errorcb = args[2];
        }
      }
    }

    return new SQLitePlugin(openargs, okcb, errorcb);
  });

  SQLiteFactory.prototype.echoTest = function (success, error) {
    var inputTestValue = 'test-string';

    var mysuccess = function mysuccess(testValue) {
      if (testValue === inputTestValue) {
        return success();
      } else {
        return error("Mismatch: got: " + testValue + " , expected: " + inputTestValue);
      }
    };

    var myerror = function myerror(e) {
      return error(e);
    };

    plugin.exec("echoStringValue", {
      value: inputTestValue
    }, mysuccess, myerror);
  };

  SQLiteFactory.prototype.deleteDatabase = function (first, success, error) {
    var args = {};

    if (first.constructor === String) {
      args.path = first;
      args.dblocation = dblocations['default'];
    } else {
      if (!(first && first['name'])) {
        throw new Error("Please specify db name via name property");
      }

      args.path = first.name;

      if (!first.location || first.location.constructor !== String || !dblocations.hasOwnProperty(first.location)) {
        args.dblocation = dblocations['default'];
      } else {
        args.dblocation = dblocations[first.location];
      }
    }

    var mysuccess = function mysuccess(r) {
      delete SQLitePlugin.prototype.openDBs[args.path];

      if (!!success) {
        return success(r);
      }
    };

    var myerror = function myerror(e) {
      if (!!error) {
        return error(e);
      } else {
        console.log("deleteDatabase error handler not provided: ", e);
      }
    };

    plugin.exec("delete", args, mysuccess, myerror);
  };

  plugin.sqlitePlugin = {
    SQLiteFactory: SQLiteFactory,
    SQLitePluginTransaction: SQLitePluginTransaction,
    SQLitePlugin: SQLitePlugin
  };
  module.exports = plugin.sqlitePlugin;
},354,[12],"node_modules/react-native-sqlite-storage/lib/sqlite.core.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = undefined;

    var _reactNativeStorage = _require(_dependencyMap[0], "react-native-storage");

    var _reactNativeStorage2 = babelHelpers.interopRequireDefault(_reactNativeStorage);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    var _sync = _require(_dependencyMap[2], "./sync");

    var _ETTConfig = _require(_dependencyMap[3], "../res/values/ETTConfig");

    var ETTDatabaseStores = function () {
        function ETTDatabaseStores() {
            babelHelpers.classCallCheck(this, ETTDatabaseStores);
            console.log("ETTDatabaseStores init");
            this._storage = new _reactNativeStorage2.default({
                size: 1000,
                storageBackend: _reactNative.AsyncStorage,
                defaultExpires: _ETTConfig.defaultExpires,
                enableCache: true,
                sync: {}
            });
        }

        babelHelpers.createClass(ETTDatabaseStores, [{
            key: "savaData",
            value: function savaData(key, object, expires) {
                if (this._storage) {
                    this._storage.save({
                        key: key,
                        data: object,
                        expires: expires
                    }).then(function (ret) {
                        console.log("setItem");
                        return ret;
                    }).catch(function (err) {
                        console.warn("load error =" + err.message);
                    });
                }
            }
        }, {
            key: "saveItem",
            value: function saveItem(key, object) {
                if (this._storage) {
                    this._storage.setItem(key, object);
                }
            }
        }, {
            key: "saveData",
            value: function saveData(key, object) {
                this.savaData(key, object, _ETTConfig.defaultExpires);
            }
        }, {
            key: "removeData",
            value: function removeData(key) {
                if (this._storage) {
                    this._storage.remove({
                        key: key
                    });
                }
            }
        }, {
            key: "removeAll",
            value: function removeAll() {
                if (this._storage) {
                    this._storage.clearMap();
                }
            }
        }, {
            key: "clearDataByKey",
            value: function clearDataByKey(key) {
                if (this._storage) {
                    this._storage.clearMapForKey(key);
                }
            }
        }, {
            key: "loadData",
            value: function loadData(key, params, someFlag) {
                var callback = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function (data) {};
                console.log("begain load");

                if (this._storage) {
                    this._storage.load({
                        key: key,
                        autoSync: false,
                        syncInBackground: true,
                        syncParams: {
                            params: params,
                            someFlag: someFlag
                        }
                    }).then(function (ret) {
                        console.log("result load");
                        var result = {
                            "data": ret,
                            code: 1
                        };
                        callback(result);
                    }).catch(function (err) {
                        var result = {
                            'code': -1,
                            'msg': err.name
                        };
                        callback(result);
                    });
                }
            }
        }, {
            key: "loadDataForkey",
            value: function loadDataForkey(key) {
                this._storage.getItem(key).then(function (ret) {
                    console.log("result load");
                    var result = {
                        "data": ret,
                        code: 1
                    };
                    return result;
                }).catch(function (err) {
                    console.warn("load error =" + err.message);

                    switch (err.name) {
                        case 'NotFoundError':
                            break;

                        case 'ExpiredError':
                            break;
                    }

                    var result = {
                        'code': -1,
                        'msg': err.name
                    };
                    return result;
                });

                console.log("begain load");
            }
        }, {
            key: "loadItemForkey",
            value: function loadItemForkey(key, callback) {
                this._storage.getItem(key).then(function (ret) {
                    console.log("result load");
                    var result = {
                        "data": ret,
                        code: 1
                    };
                    callback(result);
                }).catch(function (err) {
                    console.warn("load error =" + err.message);

                    switch (err.name) {
                        case 'NotFoundError':
                            break;

                        case 'ExpiredError':
                            break;
                    }

                    var result = {
                        'code': -1,
                        'msg': err.name
                    };
                    callback(result);
                });

                console.log("begain load");
            }
        }]);
        return ETTDatabaseStores;
    }();

    exports.default = ETTDatabaseStores;
},355,[356,12,358,343],"app/utils/ETTDefaultStorage.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _error = _require(_dependencyMap[0], "./error");

  var Storage = function () {
    function Storage() {
      var _this = this;

      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      babelHelpers.classCallCheck(this, Storage);
      this._SIZE = options.size || 1000;
      this.sync = options.sync || {};
      this.defaultExpires = options.defaultExpires !== undefined ? options.defaultExpires : 1000 * 3600 * 24;
      this.enableCache = options.enableCache !== false;
      this._s = options.storageBackend || null;
      this._innerVersion = 11;
      this.cache = {};

      if (this._s && this._s.setItem) {
        try {
          var promiseTest = this._s.setItem('__react_native_storage_test', 'test');

          this.isPromise = !!(promiseTest && promiseTest.then);
        } catch (e) {
          console.warn(e);
          delete this._s;
          throw e;
        }
      } else {
        console.warn("Data would be lost after reload cause there is no storageBackend specified!\n      \nEither use localStorage(for web) or AsyncStorage(for React Native) as a storageBackend.");
      }

      this._mapPromise = this.getItem('map').then(function (map) {
        _this._m = _this._checkMap(map && JSON.parse(map) || {});
      });
    }

    babelHelpers.createClass(Storage, [{
      key: "getItem",
      value: function getItem(key) {
        return this._s ? this.isPromise ? this._s.getItem(key) : Promise.resolve(this._s.getItem(key)) : Promise.resolve();
      }
    }, {
      key: "setItem",
      value: function setItem(key, value) {
        return this._s ? this.isPromise ? this._s.setItem(key, value) : Promise.resolve(this._s.setItem(key, value)) : Promise.resolve();
      }
    }, {
      key: "removeItem",
      value: function removeItem(key) {
        return this._s ? this.isPromise ? this._s.removeItem(key) : Promise.resolve(this._s.removeItem(key)) : Promise.resolve();
      }
    }, {
      key: "_initMap",
      value: function _initMap() {
        return {
          innerVersion: this._innerVersion,
          index: 0,
          __keys__: {}
        };
      }
    }, {
      key: "_checkMap",
      value: function _checkMap(map) {
        if (map && map.innerVersion && map.innerVersion === this._innerVersion) {
          return map;
        } else {
          return this._initMap();
        }
      }
    }, {
      key: "_getId",
      value: function _getId(key, id) {
        return key + '_' + id;
      }
    }, {
      key: "_saveToMap",
      value: function _saveToMap(params) {
        var key = params.key,
            id = params.id,
            data = params.data,
            newId = this._getId(key, id),
            m = this._m;

        if (m[newId] !== undefined) {
          if (this.enableCache) this.cache[newId] = JSON.parse(data);
          return this.setItem('map_' + m[newId], data);
        }

        if (m[m.index] !== undefined) {
          var oldId = m[m.index];
          var splitOldId = oldId.split('_');
          delete m[oldId];

          this._removeIdInKey(splitOldId[0], splitOldId[1]);

          if (this.enableCache) {
            delete this.cache[oldId];
          }
        }

        m[newId] = m.index;
        m[m.index] = newId;
        m.__keys__[key] = m.__keys__[key] || [];

        m.__keys__[key].push(id);

        if (this.enableCache) {
          var cacheData = JSON.parse(data);
          this.cache[newId] = cacheData;
        }

        var currentIndex = m.index;

        if (++m.index === this._SIZE) {
          m.index = 0;
        }

        this.setItem('map_' + currentIndex, data);
        this.setItem('map', JSON.stringify(m));
      }
    }, {
      key: "save",
      value: function save(params) {
        var _this2 = this;

        var key = params.key,
            id = params.id,
            data = params.data,
            rawData = params.rawData,
            _params$expires = params.expires,
            expires = _params$expires === undefined ? this.defaultExpires : _params$expires;

        if (key.toString().indexOf('_') !== -1) {
          console.error('Please do not use "_" in key!');
        }

        var dataToSave = {
          rawData: data
        };

        if (data === undefined) {
          if (rawData !== undefined) {
            console.warn('"rawData" is deprecated, please use "data" instead!');
            dataToSave.rawData = rawData;
          } else {
            console.error('"data" is required in save()!');
            return;
          }
        }

        var now = new Date().getTime();

        if (expires !== null) {
          dataToSave.expires = now + expires;
        }

        dataToSave = JSON.stringify(dataToSave);

        if (id === undefined) {
          if (this.enableCache) {
            var cacheData = JSON.parse(dataToSave);
            this.cache[key] = cacheData;
          }

          return this.setItem(key, dataToSave);
        } else {
          if (id.toString().indexOf('_') !== -1) {
            console.error('Please do not use "_" in id!');
          }

          return this._mapPromise.then(function () {
            return _this2._saveToMap({
              key: key,
              id: id,
              data: dataToSave
            });
          });
        }
      }
    }, {
      key: "getBatchData",
      value: function getBatchData(querys) {
        var tasks = [];

        for (var i = 0, query; query = querys[i]; i++) {
          tasks[i] = this.load(query);
        }

        return Promise.all(tasks);
      }
    }, {
      key: "getBatchDataWithIds",
      value: function getBatchDataWithIds(params) {
        var _this3 = this;

        var key = params.key,
            ids = params.ids,
            syncInBackground = params.syncInBackground;
        return Promise.all(ids.map(function (id) {
          return _this3.load({
            key: key,
            id: id,
            syncInBackground: syncInBackground,
            autoSync: false,
            batched: true
          });
        })).then(function (results) {
          return new Promise(function (resolve, reject) {
            var ids = results.filter(function (value) {
              return value.syncId !== undefined;
            });

            if (!ids.length) {
              return resolve();
            }

            return _this3.sync[key]({
              id: ids.map(function (value) {
                return value.syncId;
              }),
              resolve: resolve,
              reject: reject
            });
          }).then(function (data) {
            return results.map(function (value) {
              return value.syncId ? data.shift() : value;
            });
          });
        });
      }
    }, {
      key: "_lookupGlobalItem",
      value: function _lookupGlobalItem(params) {
        var _this4 = this;

        var ret = void 0;
        var key = params.key;

        if (this.enableCache && this.cache[key] !== undefined) {
          ret = this.cache[key];
          return this._loadGlobalItem(babelHelpers.extends({
            ret: ret
          }, params));
        }

        return this.getItem(key).then(function (ret) {
          return _this4._loadGlobalItem(babelHelpers.extends({
            ret: ret
          }, params));
        });
      }
    }, {
      key: "_loadGlobalItem",
      value: function _loadGlobalItem(params) {
        var _this5 = this;

        var key = params.key,
            ret = params.ret,
            autoSync = params.autoSync,
            syncInBackground = params.syncInBackground,
            syncParams = params.syncParams;

        if (ret === null || ret === undefined) {
          if (autoSync && this.sync[key]) {
            return new Promise(function (resolve, reject) {
              return _this5.sync[key]({
                resolve: resolve,
                reject: reject,
                syncParams: syncParams
              });
            });
          }

          return Promise.reject(new _error.NotFoundError(JSON.stringify(params)));
        }

        if (typeof ret === 'string') {
          ret = JSON.parse(ret);

          if (this.enableCache) {
            this.cache[key] = ret;
          }
        }

        var now = new Date().getTime();

        if (ret.expires < now) {
          if (autoSync && this.sync[key]) {
            if (syncInBackground) {
              this.sync[key]({
                syncParams: syncParams
              });
              return Promise.resolve(ret.rawData);
            }

            return new Promise(function (resolve, reject) {
              return _this5.sync[key]({
                resolve: resolve,
                reject: reject,
                syncParams: syncParams
              });
            });
          }

          return Promise.reject(new _error.ExpiredError(JSON.stringify(params)));
        }

        return Promise.resolve(ret.rawData);
      }
    }, {
      key: "_noItemFound",
      value: function _noItemFound(params) {
        var _this6 = this;

        var key = params.key,
            id = params.id,
            autoSync = params.autoSync,
            syncParams = params.syncParams;

        if (this.sync[key]) {
          if (autoSync) {
            return new Promise(function (resolve, reject) {
              return _this6.sync[key]({
                id: id,
                syncParams: syncParams,
                resolve: resolve,
                reject: reject
              });
            });
          }

          return Promise.resolve({
            syncId: id
          });
        }

        return Promise.reject(new _error.NotFoundError(JSON.stringify(params)));
      }
    }, {
      key: "_loadMapItem",
      value: function _loadMapItem(params) {
        var _this7 = this;

        var ret = params.ret,
            key = params.key,
            id = params.id,
            autoSync = params.autoSync,
            batched = params.batched,
            syncInBackground = params.syncInBackground,
            syncParams = params.syncParams;

        if (ret === null || ret === undefined) {
          return this._noItemFound(params);
        }

        if (typeof ret === 'string') {
          ret = JSON.parse(ret);
          var _key = params.key,
              _id = params.id;

          var newId = this._getId(_key, _id);

          if (this.enableCache) {
            this.cache[newId] = ret;
          }
        }

        var now = new Date().getTime();

        if (ret.expires < now) {
          if (autoSync && this.sync[key]) {
            if (syncInBackground) {
              this.sync[key]({
                id: id,
                syncParams: syncParams
              });
              return Promise.resolve(ret.rawData);
            }

            return new Promise(function (resolve, reject) {
              return _this7.sync[key]({
                id: id,
                resolve: resolve,
                reject: reject,
                syncParams: syncParams
              });
            });
          }

          if (batched) {
            return Promise.resolve({
              syncId: id
            });
          }

          return Promise.reject(new _error.ExpiredError(JSON.stringify(params)));
        }

        return Promise.resolve(ret.rawData);
      }
    }, {
      key: "_lookUpInMap",
      value: function _lookUpInMap(params) {
        var _this8 = this;

        var m = this._m,
            ret = void 0;
        var key = params.key,
            id = params.id;

        var newId = this._getId(key, id);

        if (this.enableCache && this.cache[newId]) {
          ret = this.cache[newId];
          return this._loadMapItem(babelHelpers.extends({
            ret: ret
          }, params));
        }

        if (m[newId] !== undefined) {
          return this.getItem('map_' + m[newId]).then(function (ret) {
            return _this8._loadMapItem(babelHelpers.extends({
              ret: ret
            }, params));
          });
        }

        return this._noItemFound(babelHelpers.extends({
          ret: ret
        }, params));
      }
    }, {
      key: "remove",
      value: function remove(params) {
        var _this9 = this;

        return this._mapPromise.then(function () {
          var m = _this9._m;
          var key = params.key,
              id = params.id;

          if (id === undefined) {
            if (_this9.enableCache && _this9.cache[key]) {
              delete _this9.cache[key];
            }

            return _this9.removeItem(key);
          }

          var newId = _this9._getId(key, id);

          if (m[newId] !== undefined) {
            if (_this9.enableCache && _this9.cache[newId]) {
              delete _this9.cache[newId];
            }

            _this9._removeIdInKey(key, id);

            var idTobeDeleted = m[newId];
            delete m[newId];

            _this9.setItem('map', JSON.stringify(m));

            return _this9.removeItem('map_' + idTobeDeleted);
          }
        });
      }
    }, {
      key: "_removeIdInKey",
      value: function _removeIdInKey(key, id) {
        var indexTobeRemoved = (this._m.__keys__[key] || []).indexOf(id);

        if (indexTobeRemoved !== -1) {
          this._m.__keys__[key].splice(indexTobeRemoved, 1);
        }
      }
    }, {
      key: "load",
      value: function load(params) {
        var _this10 = this;

        var key = params.key,
            id = params.id,
            _params$autoSync = params.autoSync,
            autoSync = _params$autoSync === undefined ? true : _params$autoSync,
            _params$syncInBackgro = params.syncInBackground,
            syncInBackground = _params$syncInBackgro === undefined ? true : _params$syncInBackgro,
            syncParams = params.syncParams;
        return this._mapPromise.then(function () {
          return new Promise(function (resolve, reject) {
            if (id === undefined) {
              return resolve(_this10._lookupGlobalItem({
                key: key,
                resolve: resolve,
                reject: reject,
                autoSync: autoSync,
                syncInBackground: syncInBackground,
                syncParams: syncParams
              }));
            }

            return resolve(_this10._lookUpInMap({
              key: key,
              id: id,
              resolve: resolve,
              reject: reject,
              autoSync: autoSync,
              syncInBackground: syncInBackground,
              syncParams: syncParams
            }));
          });
        });
      }
    }, {
      key: "clearMap",
      value: function clearMap() {
        var _this11 = this;

        this.removeItem('map').then(function () {
          _this11._m = _this11._initMap();
        });
      }
    }, {
      key: "clearMapForKey",
      value: function clearMapForKey(key) {
        var _this12 = this;

        return this._mapPromise.then(function () {
          var tasks = (_this12._m.__keys__[key] || []).map(function (id) {
            return _this12.remove({
              key: key,
              id: id
            });
          });
          return Promise.all(tasks);
        });
      }
    }, {
      key: "getIdsForKey",
      value: function getIdsForKey(key) {
        var _this13 = this;

        return this._mapPromise.then(function () {
          return _this13._m.__keys__[key] || [];
        });
      }
    }, {
      key: "getAllDataForKey",
      value: function getAllDataForKey(key, options) {
        var _this14 = this;

        options = babelHelpers.extends({
          syncInBackground: true
        }, options);
        return this.getIdsForKey(key).then(function (ids) {
          var querys = ids.map(function (id) {
            return {
              key: key,
              id: id,
              syncInBackground: options.syncInBackground
            };
          });
          return _this14.getBatchData(querys);
        });
      }
    }]);
    return Storage;
  }();

  exports.default = Storage;
},356,[357],"node_modules/react-native-storage/storage.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var NotFoundError = exports.NotFoundError = function NotFoundError(message) {
    babelHelpers.classCallCheck(this, NotFoundError);
    this.name = 'NotFoundError';
    this.message = "Not Found! Params: " + message;
    this.stack = new Error().stack;
  };

  var ExpiredError = exports.ExpiredError = function ExpiredError(message) {
    babelHelpers.classCallCheck(this, ExpiredError);
    this.name = 'ExpiredError';
    this.message = "Expired! Params: " + message;
    this.stack = new Error().stack;
  };
},357,[],"node_modules/react-native-storage/error.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    ettsync = {
        user: function user(params) {
            var id = params.id,
                resolve = params.resolve,
                reject = params.reject,
                _params$syncParams = params.syncParams,
                extraFetchOptions = _params$syncParams.extraFetchOptions,
                someFlag = _params$syncParams.someFlag;
            fetch('user/', babelHelpers.extends({
                method: 'GET',
                body: 'id=' + id
            }, extraFetchOptions)).then(function (response) {
                return response.json();
            }).then(function (json) {
                if (json && json.user) {
                    if (someFlag) {}

                    resolve && resolve(json.user);
                } else {
                    reject && reject(new Error('data parse error'));
                }
            }).catch(function (err) {
                console.warn(err);
                reject && reject(err);
            });
        }
    };
},358,[],"app/utils/sync.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = undefined;

    var _ETTUserModel = _require(_dependencyMap[0], "../mobx/ETTUserModel");

    var _ETTUserModel2 = babelHelpers.interopRequireDefault(_ETTUserModel);

    var _ETTString = _require(_dependencyMap[1], "../res/values/ETTString");

    var _ETTString2 = babelHelpers.interopRequireDefault(_ETTString);

    var _ETTEnum = _require(_dependencyMap[2], "../res/values/ETTEnum");

    var _ETTURLConfig = _require(_dependencyMap[3], "../res/values/ETTURLConfig");

    var _ETTURLConfig2 = babelHelpers.interopRequireDefault(_ETTURLConfig);

    var _ETTRequestModel = _require(_dependencyMap[4], "../mobx/ETTRequestModel");

    var _ETTRequestModel2 = babelHelpers.interopRequireDefault(_ETTRequestModel);

    var _ETTConfig = _require(_dependencyMap[5], "../res/values/ETTConfig");

    var _ETTNetworkUtil = _require(_dependencyMap[6], "./ETTNetworkUtil");

    var _ETTNetworkUtil2 = babelHelpers.interopRequireDefault(_ETTNetworkUtil);

    var ETTTokenManager = function () {
        function ETTTokenManager() {
            babelHelpers.classCallCheck(this, ETTTokenManager);
        }

        babelHelpers.createClass(ETTTokenManager, [{
            key: "storageUserModel",
            value: function storageUserModel(model) {
                if (model) {
                    this.userModel = model;
                }
            }
        }, {
            key: "checkAvoidLoginTokenEffective",
            value: function checkAvoidLoginTokenEffective() {
                if (_ETTConfig.DataManager._appInfo._tokenModel._access_token.length < 1) {
                    return _ETTEnum.ETTTokenStatus.tokenInvalid;
                }

                var nowTime = new Date().valueOf();
                var time = parseInt(_ETTConfig.DataManager._appInfo._tokenModel._expiration);
                var expiration = parseInt((time - nowTime) / 1000);

                if (time <= 0 || expiration <= 0) {
                    return _ETTEnum.ETTTokenStatus.tokenInvalid;
                }

                if (expiration <= 60) {
                    return _ETTEnum.ETTTokenStatus.tokenInvalid;
                } else if (expiration < 1200) {
                    return _ETTEnum.ETTTokenStatus.tokenNeedRefresh;
                } else {
                    return _ETTEnum.ETTTokenStatus.tokenValid;
                }
            }
        }, {
            key: "checkTokenEffective",
            value: function checkTokenEffective() {
                console.log('检查token是否有效');
                var nowTime = new Date().valueOf();
                var time = parseInt(this.userModel.expiration);
                var expiration = parseInt((time - nowTime) / 1000);

                if (time <= 0 || expiration <= 0) {
                    return _ETTEnum.ETTTokenStatus.tokenInvalid;
                }

                var expiresIn = this.userModel.expiresIn;
                var interval = expiresIn - expiration;

                if (expiration <= 60) {
                    return _ETTEnum.ETTTokenStatus.tokenInvalid;
                } else if (expiration < 1200) {
                    return _ETTEnum.ETTTokenStatus.tokenNeedRefresh;
                } else {
                    return _ETTEnum.ETTTokenStatus.tokenValid;
                }

                console.log(this.userModel.expiresIn);
            }
        }, {
            key: "token",
            value: function token(status) {
                return new Promise(function (resolve, reject) {
                    if (status == _ETTEnum.ETTTokenStatus.tokenValid) {
                        resolve(status);
                    } else if (status == _ETTEnum.ETTTokenStatus.tokenNeedRefresh) {
                        resolve(status);
                    } else {
                        resolve(status);
                    }
                });
            }
        }, {
            key: "getRefreTokenModel",
            value: function getRefreTokenModel() {
                var requetModel = new _ETTRequestModel2.default();
                requetModel._method = 'POST';
                requetModel._path = _ETTURLConfig2.default.refresh_token;
                requetModel._bodyData = '';
                requetModel._getInfo = requetModel.getTokenRequesetData();
                return requetModel;
            }
        }, {
            key: "getRefreAvoidLoginTokenModel",
            value: function getRefreAvoidLoginTokenModel() {
                var requetModel = new _ETTRequestModel2.default();
                requetModel._method = 'POST';
                requetModel._path = _ETTURLConfig2.default.refresh_token;
                requetModel._bodyData = '';
                requetModel._getInfo = requetModel.getAvoidLoginTokenRequesetData();
                return requetModel;
            }
        }, {
            key: "getAvoidLoginModel",
            value: function getAvoidLoginModel() {
                console.log('getAvoidLoginModel');
                var requetModel = new _ETTRequestModel2.default();
                requetModel._method = 'POST';
                requetModel._path = _ETTURLConfig2.default.avoid_login;
                requetModel._bodyData = 'username=' + _ETTURLConfig2.default.avoid_login_name + '&password=' + _ETTURLConfig2.default.avoid_login_pwd;
                requetModel._getInfo = requetModel.getAvoidLoginAuthorizationRequesetData();
                return requetModel;
            }
        }, {
            key: "refreToken",
            value: function refreToken() {}
        }]);
        return ETTTokenManager;
    }();

    exports.default = ETTTokenManager;
},359,[345,347,348,360,361,343,362],"app/utils/ETTTokenManager.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var tempUrl;

    if (__DEV__) {
        tempUrl = 'http://gw5.bj.etiantian.net:42393';
    } else {
        tempUrl = 'http://gw5.bj.etiantian.net:42393';
    }

    var base_url = tempUrl;
    exports.default = {
        SERVICE_NAME_SMS: '/api-sms-service',
        SERVICE_NAME_AUTH: '/authentication-center',
        SERVICE_TRADING: '/api-trading-service',
        SERVICE_PAY: '/api-pay-service',
        CONTENTTYPE: 'application/x-www-form-urlencoded',
        SERVICE_NAME_ACCOUNT: '/km-api-account-service',
        'base_header': 'Basic QzdERTlFMDhEM0I3RERGQUZDQzE2MkRERjVBMzg2QzA6M0VFMjA1NzIzODBFNzE2Njc0NUU3RTlGODU2RjIyNDc=',
        'avoid_login_header': 'Basic QTgwNjUyNDk1QTMzMTk2RDI2QjMxMTM1RTdGNTYxQjI6MzQ2RjRBQzcwNUE4MjFGNEJBMjMwMzk1OEUxODREN0E=',
        'wxSecret': 'aed9dd766a225926f5fc9b9df7a94d61',
        'wxAppid': 'wx24d51f92c3998b20',
        'avoid_login': '/authentication-center/authentication/login',
        'avoid_login_name': '9842622c06f611e88be4d8cb8a9f2496',
        'avoid_login_pwd': '9842622c06f611e88be4d8cb8a9f2496',
        'base_url': base_url,
        'amount': '/api/accounts',
        'registerCode': '/api/sms/register',
        'password_Log': '/authentication/mobile',
        'code_Log': '/authentication/mobileCode',
        'logCode': '/api/sms/login',
        'third_log_bind_getCode': '/api/sms/binding',
        'third_log_bind': '/api/third/phone',
        'third_reg': '/api/third/register',
        'third_unbind': '/api/third/unbind',
        'third_singin': '/api/third/signIn',
        'find_pwd_code': '/api/sms/retrieve',
        'find_pwd_enterset': '/api/accounts/password/retrieve',
        'pwd_reset_oldpwd': '/api/accounts/password',
        'pwd_reset_code': '/api/accounts/password/code',
        'pwd_reset_sendcode': '/api/sms/password',
        'edit_nickname': '/api/accounts/info',
        'goodses_list': '/api/goodses',
        'goodses_detail': '/api/goodses/',
        'post_orders': '/api/orders',
        'pay_getChannel': '/api/paymentMethods',
        'pay': '/api/pay',
        'pay_callBack': '/api/pay/callback',
        'refresh_token': '/accesstoken-control/tokens'
    };
},360,[],"app/res/values/ETTURLConfig.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = undefined;

    var _ETTBaseModel2 = _require(_dependencyMap[0], "./ETTBaseModel");

    var _ETTBaseModel3 = babelHelpers.interopRequireDefault(_ETTBaseModel2);

    var _ETTURLConfig = _require(_dependencyMap[1], "../res/values/ETTURLConfig");

    var _ETTURLConfig2 = babelHelpers.interopRequireDefault(_ETTURLConfig);

    var _ETTConfig = _require(_dependencyMap[2], "../res/values/ETTConfig");

    var ETTRequestModel = function (_ETTBaseModel) {
        babelHelpers.inherits(ETTRequestModel, _ETTBaseModel);

        function ETTRequestModel() {
            var _ref;

            var _temp, _this, _ret;

            babelHelpers.classCallCheck(this, ETTRequestModel);

            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }

            return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = ETTRequestModel.__proto__ || Object.getPrototypeOf(ETTRequestModel)).call.apply(_ref, [this].concat(args))), _this), _this._method = '', _this._authKey = '', _this._authValue = '', _this._path = '', _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
        }

        babelHelpers.createClass(ETTRequestModel, [{
            key: "getKmRequestPath",
            value: function getKmRequestPath() {
                return _ETTURLConfig2.default.base_url + this._path;
            }
        }, {
            key: "getWechatRequestPath",
            value: function getWechatRequestPath() {
                return 'https://api.weixin.qq.com/sns/oauth2/access_token';
            }
        }, {
            key: "getAuthorizationRequesetData",
            value: function getAuthorizationRequesetData() {
                var requestOptional = {
                    method: 'POST',
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Authorization': _ETTURLConfig2.default.base_header
                    },
                    body: this._bodyData
                };
                return requestOptional;
            }
        }, {
            key: "getAuthorizationRequesetDataForJson",
            value: function getAuthorizationRequesetDataForJson() {
                var requestOptional = {
                    method: 'POST',
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/application/json',
                        'Authorization': _ETTURLConfig2.default.base_header
                    },
                    body: this._bodyData
                };
                return requestOptional;
            }
        }, {
            key: "getAuthorizationRequesetDataGetWay",
            value: function getAuthorizationRequesetDataGetWay() {
                var requestOptional = {
                    method: 'GET',
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Authorization': _ETTURLConfig2.default.base_header
                    },
                    body: this.BodyData
                };
                return requestOptional;
            }
        }, {
            key: "getAuthorizationRequesetDataForJsonGetWay",
            value: function getAuthorizationRequesetDataForJsonGetWay() {
                var requestOptional = {
                    method: 'GET',
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/application/json',
                        'Authorization': _ETTURLConfig2.default.base_header
                    },
                    body: this.BodyData
                };
                return requestOptional;
            }
        }, {
            key: "getTokenRequesetData",
            value: function getTokenRequesetData() {
                var requestOptional = {
                    method: this._method,
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Authorization': 'Bearer ' + _ETTConfig.DataManager._userModel.access_token
                    },
                    body: this._bodyData
                };
                return requestOptional;
            }
        }, {
            key: "getRefreshTokenRequesetData",
            value: function getRefreshTokenRequesetData() {
                var requestOptional = {
                    method: this._method,
                    headers: {
                        'Accept': 'application/json',
                        'Authorization': 'Bearer ' + _ETTConfig.DataManager._userModel.refresh_token
                    },
                    body: this._bodyData
                };
                return requestOptional;
            }
        }, {
            key: "getAvoidLoginAuthorizationRequesetData",
            value: function getAvoidLoginAuthorizationRequesetData() {
                var requestOptional = {
                    method: 'POST',
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Authorization': _ETTURLConfig2.default.avoid_login_header
                    },
                    body: this._bodyData
                };
                return requestOptional;
            }
        }, {
            key: "getAvoidLoginTokenRequesetData",
            value: function getAvoidLoginTokenRequesetData() {
                console.log('getAvoidLoginTokenRequesetData');
                var requestOptional = {
                    method: this._method,
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Authorization': 'Bearer ' + _ETTConfig.DataManager._appInfo._tokenModel._access_token
                    },
                    body: this._bodyData
                };
                return requestOptional;
            }
        }, {
            key: "refreshAvoidLoginToken",
            value: function refreshAvoidLoginToken() {
                if (this._getInfo) {
                    this._getInfo.headers.Authorization = 'Bearer ' + _ETTConfig.DataManager._appInfo._tokenModel._access_token;
                }
            }
        }], [{
            key: "transFormBodyData",
            value: function transFormBodyData(params, url) {
                if (params) {
                    var paramsArray = [];
                    Object.keys(params).forEach(function (key) {
                        return paramsArray.push(key + '=' + params[key]);
                    });

                    if (url.search(/\?/) === -1) {
                        url += '?' + paramsArray.join('&');
                    } else {
                        url += '&' + paramsArray.join('&');
                    }
                }
            }
        }]);
        return ETTRequestModel;
    }(_ETTBaseModel3.default);

    exports.default = ETTRequestModel;
},361,[346,360,343],"app/mobx/ETTRequestModel.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _hmacSha = _require(_dependencyMap[0], "crypto-js/hmac-sha512");

    var _hmacSha2 = babelHelpers.interopRequireDefault(_hmacSha);

    var _encBase = _require(_dependencyMap[1], "crypto-js/enc-base64");

    var _encBase2 = babelHelpers.interopRequireDefault(_encBase);

    var _ETTURLConfig = _require(_dependencyMap[2], "../res/values/ETTURLConfig");

    var _ETTURLConfig2 = babelHelpers.interopRequireDefault(_ETTURLConfig);

    var _ETTRequestModel = _require(_dependencyMap[3], "../mobx/ETTRequestModel");

    var _ETTRequestModel2 = babelHelpers.interopRequireDefault(_ETTRequestModel);

    var _ETTConfig = _require(_dependencyMap[4], "../res/values/ETTConfig");

    var _ETTNetResponseHelper = _require(_dependencyMap[5], "./ETTNetResponseHelper");

    var _ETTNetResponseHelper2 = babelHelpers.interopRequireDefault(_ETTNetResponseHelper);

    var _ETTEnum = _require(_dependencyMap[6], "../res/values/ETTEnum");

    var ETTNetworkUtil = {};

    ETTNetworkUtil.get = function (url, params, headers) {
        if (params) {
            var paramsArray = [];
            Object.keys(params).forEach(function (key) {
                return paramsArray.push(key + '=' + params[key]);
            });

            if (url.search(/\?/) === -1) {
                url += '?' + paramsArray.join('&');
            } else {
                url += '&' + paramsArray.join('&');
            }
        }

        return new Promise(function (resolve, reject) {
            fetch(url, {
                method: 'GET',
                headers: headers
            }).then(function (response) {
                if (response.ok) {
                    return response.json();
                } else {
                    reject({
                        status: response.status
                    });
                }
            }).then(function (response) {
                resolve(response);
            }).catch(function (err) {
                reject({
                    status: -1
                });
            });
        });
    };

    ETTNetworkUtil.getForm = function (model) {
        var requesturl = model.getKmRequestPath();
        return new Promise(function (resolve, reject) {
            fetch(requesturl, model.getInfo).then(function (response) {
                if (response.ok) {
                    return response.json();
                } else {
                    reject({
                        status: response.status
                    });
                }

                console.log('response' + response);
            }).then(function (response) {
                resolve(response);
            }).catch(function (err) {
                reject({
                    status: -20148
                });
            });
        });
    };

    ETTNetworkUtil.post = function (model) {
        var requesturl = model.getKmRequestPath();
        return new Promise(function (resolve, reject) {
            fetch(requesturl, model._getInfo).then(function (response) {
                if (response.ok) {
                    return response.json();
                } else {
                    reject({
                        status: response.status
                    });
                }

                console.log('response' + response);
            }).then(function (response) {
                resolve(response);
            }).catch(function (err) {
                console.log('失败了' + err);
                alert('请求错误' + err);
                reject({
                    'code': -20148
                });
            });
        });
    };

    ETTNetworkUtil.requestAvoidLoginWithToken = function (model, callback) {
        _ETTConfig.DataManager._tokenManager.token(_ETTConfig.DataManager._tokenManager.checkAvoidLoginTokenEffective()).then(function (data) {
            console.log(data);

            if (data == _ETTEnum.ETTTokenStatus.tokenValid) {
                ETTNetworkUtil.sendRequesWithToken(model, callback);
            } else {
                var tokenRquestModel = _ETTConfig.DataManager._tokenManager.getAvoidLoginModel();

                ETTNetworkUtil.refreshToken(tokenRquestModel, function (json) {
                    console.log(json);

                    if (json.access_token.length > 0) {
                        _ETTConfig.DataManager.refreshAvoidloginToken(json);

                        model.refreshAvoidLoginToken();
                        ETTNetworkUtil.sendRequesWithToken(model, callback);
                    } else {
                        callback(json);
                    }
                });
            }
        }).catch(function (err) {
            console.log('失败了' + err);
            callback({
                'code': -20148,
                msg: '请求失败！'
            });
        });
    };

    ETTNetworkUtil.requestWithToken = function (model, callback) {
        _ETTConfig.DataManager._tokenManager.token(_ETTConfig.DataManager._tokenManager.checkTokenEffective()).then(function (data) {
            console.log(data);

            if (data == _ETTEnum.ETTTokenStatus.tokenValid) {
                ETTNetworkUtil.sendRequesWithToken(model, callback);
            } else if (data == _ETTEnum.ETTTokenStatus.tokenNeedRefresh) {
                var tokenRquestModel = _ETTConfig.DataManager._tokenManager.getRefreTokenModel();

                ETTNetworkUtil.refreshToken(tokenRquestModel, function (json) {
                    console.log(json);

                    if (json.code == 1) {
                        _ETTConfig.DataManager.refreshTokenFresh(json.data);
                    }

                    ETTNetworkUtil.sendRequesWithToken(model, callback);
                });
            } else {
                _ETTConfig.DataManager.logout();
            }
        }).catch(function (err) {
            console.log('失败了' + err);
            callback({
                'code': -20148,
                msg: '请求失败！'
            });
        });
    };

    ETTNetworkUtil.sendRequesWithToken = function (model, callback) {
        ETTNetworkUtil.post(model).then(function (json) {
            console.log(json);

            if (callback) {
                callback(json);
            }
        }, function (json) {
            console.log({
                'code': -20148,
                msg: '刷新token'
            });

            if (callback) {
                callback({
                    'code': -20148,
                    msg: '请求失败！'
                });
            }
        });
    };

    ETTNetworkUtil.refreshToken = function (model, callback) {
        ETTNetworkUtil.post(model).then(function (json) {
            console.log(json);

            if (callback) {
                callback(json);
            }
        }, function (json) {
            console.log({
                'code': -20148,
                msg: '刷新token'
            });

            if (callback) {
                callback({
                    'code': -20148,
                    msg: '请求失败！'
                });
            }
        });
    };

    ETTNetworkUtil.weChatRequest = function (model) {
        var requesturl = model._path;
        return new Promise(function (resolve, reject) {
            fetch(requesturl, model._getInfo).then(function (response) {
                if (response.ok) {
                    return response.json();
                } else {
                    reject({
                        status: response.status
                    });
                }

                console.log('response' + response);
            }).then(function (response) {
                resolve(response);
            }).catch(function (err) {
                console.log('失败了' + err);
                alert('请求错误' + err);
                reject({
                    'code': -20148
                });
            });
        });
    };

    exports.default = ETTNetworkUtil;
},362,[363,368,360,361,343,369,348],"app/utils/ETTNetworkUtil.js");
__d(function (global, _require, module, exports, _dependencyMap) {
	;

	(function (root, factory, undef) {
		if (typeof exports === "object") {
			module.exports = exports = factory(_require(_dependencyMap[0], "./core"), _require(_dependencyMap[1], "./x64-core"), _require(_dependencyMap[2], "./sha512"), _require(_dependencyMap[3], "./hmac"));
		} else if (typeof define === "function" && define.amd) {
			define(["./core", "./x64-core", "./sha512", "./hmac"], factory);
		} else {
			factory(root.CryptoJS);
		}
	})(this, function (CryptoJS) {
		return CryptoJS.HmacSHA512;
	});
},363,[364,365,366,367],"node_modules/crypto-js/hmac-sha512.js");
__d(function (global, _require, module, exports, _dependencyMap) {
	;

	(function (root, factory) {
		if (typeof exports === "object") {
			module.exports = exports = factory();
		} else if (typeof define === "function" && define.amd) {
			define([], factory);
		} else {
			root.CryptoJS = factory();
		}
	})(this, function () {
		var CryptoJS = CryptoJS || function (Math, undefined) {
			var create = Object.create || function () {
				function F() {}

				;
				return function (obj) {
					var subtype;
					F.prototype = obj;
					subtype = new F();
					F.prototype = null;
					return subtype;
				};
			}();

			var C = {};
			var C_lib = C.lib = {};

			var Base = C_lib.Base = function () {
				return {
					extend: function extend(overrides) {
						var subtype = create(this);

						if (overrides) {
							subtype.mixIn(overrides);
						}

						if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {
							subtype.init = function () {
								subtype.$super.init.apply(this, arguments);
							};
						}

						subtype.init.prototype = subtype;
						subtype.$super = this;
						return subtype;
					},
					create: function create() {
						var instance = this.extend();
						instance.init.apply(instance, arguments);
						return instance;
					},
					init: function init() {},
					mixIn: function mixIn(properties) {
						for (var propertyName in properties) {
							if (properties.hasOwnProperty(propertyName)) {
								this[propertyName] = properties[propertyName];
							}
						}

						if (properties.hasOwnProperty('toString')) {
							this.toString = properties.toString;
						}
					},
					clone: function clone() {
						return this.init.prototype.extend(this);
					}
				};
			}();

			var WordArray = C_lib.WordArray = Base.extend({
				init: function init(words, sigBytes) {
					words = this.words = words || [];

					if (sigBytes != undefined) {
						this.sigBytes = sigBytes;
					} else {
						this.sigBytes = words.length * 4;
					}
				},
				toString: function toString(encoder) {
					return (encoder || Hex).stringify(this);
				},
				concat: function concat(wordArray) {
					var thisWords = this.words;
					var thatWords = wordArray.words;
					var thisSigBytes = this.sigBytes;
					var thatSigBytes = wordArray.sigBytes;
					this.clamp();

					if (thisSigBytes % 4) {
						for (var i = 0; i < thatSigBytes; i++) {
							var thatByte = thatWords[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
							thisWords[thisSigBytes + i >>> 2] |= thatByte << 24 - (thisSigBytes + i) % 4 * 8;
						}
					} else {
						for (var i = 0; i < thatSigBytes; i += 4) {
							thisWords[thisSigBytes + i >>> 2] = thatWords[i >>> 2];
						}
					}

					this.sigBytes += thatSigBytes;
					return this;
				},
				clamp: function clamp() {
					var words = this.words;
					var sigBytes = this.sigBytes;
					words[sigBytes >>> 2] &= 0xffffffff << 32 - sigBytes % 4 * 8;
					words.length = Math.ceil(sigBytes / 4);
				},
				clone: function clone() {
					var clone = Base.clone.call(this);
					clone.words = this.words.slice(0);
					return clone;
				},
				random: function random(nBytes) {
					var words = [];

					var r = function r(m_w) {
						var m_w = m_w;
						var m_z = 0x3ade68b1;
						var mask = 0xffffffff;
						return function () {
							m_z = 0x9069 * (m_z & 0xFFFF) + (m_z >> 0x10) & mask;
							m_w = 0x4650 * (m_w & 0xFFFF) + (m_w >> 0x10) & mask;
							var result = (m_z << 0x10) + m_w & mask;
							result /= 0x100000000;
							result += 0.5;
							return result * (Math.random() > .5 ? 1 : -1);
						};
					};

					for (var i = 0, rcache; i < nBytes; i += 4) {
						var _r = r((rcache || Math.random()) * 0x100000000);

						rcache = _r() * 0x3ade67b7;
						words.push(_r() * 0x100000000 | 0);
					}

					return new WordArray.init(words, nBytes);
				}
			});
			var C_enc = C.enc = {};
			var Hex = C_enc.Hex = {
				stringify: function stringify(wordArray) {
					var words = wordArray.words;
					var sigBytes = wordArray.sigBytes;
					var hexChars = [];

					for (var i = 0; i < sigBytes; i++) {
						var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
						hexChars.push((bite >>> 4).toString(16));
						hexChars.push((bite & 0x0f).toString(16));
					}

					return hexChars.join('');
				},
				parse: function parse(hexStr) {
					var hexStrLength = hexStr.length;
					var words = [];

					for (var i = 0; i < hexStrLength; i += 2) {
						words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << 24 - i % 8 * 4;
					}

					return new WordArray.init(words, hexStrLength / 2);
				}
			};
			var Latin1 = C_enc.Latin1 = {
				stringify: function stringify(wordArray) {
					var words = wordArray.words;
					var sigBytes = wordArray.sigBytes;
					var latin1Chars = [];

					for (var i = 0; i < sigBytes; i++) {
						var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
						latin1Chars.push(String.fromCharCode(bite));
					}

					return latin1Chars.join('');
				},
				parse: function parse(latin1Str) {
					var latin1StrLength = latin1Str.length;
					var words = [];

					for (var i = 0; i < latin1StrLength; i++) {
						words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << 24 - i % 4 * 8;
					}

					return new WordArray.init(words, latin1StrLength);
				}
			};
			var Utf8 = C_enc.Utf8 = {
				stringify: function stringify(wordArray) {
					try {
						return decodeURIComponent(escape(Latin1.stringify(wordArray)));
					} catch (e) {
						throw new Error('Malformed UTF-8 data');
					}
				},
				parse: function parse(utf8Str) {
					return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
				}
			};
			var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
				reset: function reset() {
					this._data = new WordArray.init();
					this._nDataBytes = 0;
				},
				_append: function _append(data) {
					if (typeof data == 'string') {
						data = Utf8.parse(data);
					}

					this._data.concat(data);

					this._nDataBytes += data.sigBytes;
				},
				_process: function _process(doFlush) {
					var data = this._data;
					var dataWords = data.words;
					var dataSigBytes = data.sigBytes;
					var blockSize = this.blockSize;
					var blockSizeBytes = blockSize * 4;
					var nBlocksReady = dataSigBytes / blockSizeBytes;

					if (doFlush) {
						nBlocksReady = Math.ceil(nBlocksReady);
					} else {
						nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);
					}

					var nWordsReady = nBlocksReady * blockSize;
					var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);

					if (nWordsReady) {
						for (var offset = 0; offset < nWordsReady; offset += blockSize) {
							this._doProcessBlock(dataWords, offset);
						}

						var processedWords = dataWords.splice(0, nWordsReady);
						data.sigBytes -= nBytesReady;
					}

					return new WordArray.init(processedWords, nBytesReady);
				},
				clone: function clone() {
					var clone = Base.clone.call(this);
					clone._data = this._data.clone();
					return clone;
				},
				_minBufferSize: 0
			});
			var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({
				cfg: Base.extend(),
				init: function init(cfg) {
					this.cfg = this.cfg.extend(cfg);
					this.reset();
				},
				reset: function reset() {
					BufferedBlockAlgorithm.reset.call(this);

					this._doReset();
				},
				update: function update(messageUpdate) {
					this._append(messageUpdate);

					this._process();

					return this;
				},
				finalize: function finalize(messageUpdate) {
					if (messageUpdate) {
						this._append(messageUpdate);
					}

					var hash = this._doFinalize();

					return hash;
				},
				blockSize: 512 / 32,
				_createHelper: function _createHelper(hasher) {
					return function (message, cfg) {
						return new hasher.init(cfg).finalize(message);
					};
				},
				_createHmacHelper: function _createHmacHelper(hasher) {
					return function (message, key) {
						return new C_algo.HMAC.init(hasher, key).finalize(message);
					};
				}
			});
			var C_algo = C.algo = {};
			return C;
		}(Math);

		return CryptoJS;
	});
},364,[],"node_modules/crypto-js/core.js");
__d(function (global, _require, module, exports, _dependencyMap) {
	;

	(function (root, factory) {
		if (typeof exports === "object") {
			module.exports = exports = factory(_require(_dependencyMap[0], "./core"));
		} else if (typeof define === "function" && define.amd) {
			define(["./core"], factory);
		} else {
			factory(root.CryptoJS);
		}
	})(this, function (CryptoJS) {
		(function (undefined) {
			var C = CryptoJS;
			var C_lib = C.lib;
			var Base = C_lib.Base;
			var X32WordArray = C_lib.WordArray;
			var C_x64 = C.x64 = {};
			var X64Word = C_x64.Word = Base.extend({
				init: function init(high, low) {
					this.high = high;
					this.low = low;
				}
			});
			var X64WordArray = C_x64.WordArray = Base.extend({
				init: function init(words, sigBytes) {
					words = this.words = words || [];

					if (sigBytes != undefined) {
						this.sigBytes = sigBytes;
					} else {
						this.sigBytes = words.length * 8;
					}
				},
				toX32: function toX32() {
					var x64Words = this.words;
					var x64WordsLength = x64Words.length;
					var x32Words = [];

					for (var i = 0; i < x64WordsLength; i++) {
						var x64Word = x64Words[i];
						x32Words.push(x64Word.high);
						x32Words.push(x64Word.low);
					}

					return X32WordArray.create(x32Words, this.sigBytes);
				},
				clone: function clone() {
					var clone = Base.clone.call(this);
					var words = clone.words = this.words.slice(0);
					var wordsLength = words.length;

					for (var i = 0; i < wordsLength; i++) {
						words[i] = words[i].clone();
					}

					return clone;
				}
			});
		})();

		return CryptoJS;
	});
},365,[364],"node_modules/crypto-js/x64-core.js");
__d(function (global, _require, module, exports, _dependencyMap) {
	;

	(function (root, factory, undef) {
		if (typeof exports === "object") {
			module.exports = exports = factory(_require(_dependencyMap[0], "./core"), _require(_dependencyMap[1], "./x64-core"));
		} else if (typeof define === "function" && define.amd) {
			define(["./core", "./x64-core"], factory);
		} else {
			factory(root.CryptoJS);
		}
	})(this, function (CryptoJS) {
		(function () {
			var C = CryptoJS;
			var C_lib = C.lib;
			var Hasher = C_lib.Hasher;
			var C_x64 = C.x64;
			var X64Word = C_x64.Word;
			var X64WordArray = C_x64.WordArray;
			var C_algo = C.algo;

			function X64Word_create() {
				return X64Word.create.apply(X64Word, arguments);
			}

			var K = [X64Word_create(0x428a2f98, 0xd728ae22), X64Word_create(0x71374491, 0x23ef65cd), X64Word_create(0xb5c0fbcf, 0xec4d3b2f), X64Word_create(0xe9b5dba5, 0x8189dbbc), X64Word_create(0x3956c25b, 0xf348b538), X64Word_create(0x59f111f1, 0xb605d019), X64Word_create(0x923f82a4, 0xaf194f9b), X64Word_create(0xab1c5ed5, 0xda6d8118), X64Word_create(0xd807aa98, 0xa3030242), X64Word_create(0x12835b01, 0x45706fbe), X64Word_create(0x243185be, 0x4ee4b28c), X64Word_create(0x550c7dc3, 0xd5ffb4e2), X64Word_create(0x72be5d74, 0xf27b896f), X64Word_create(0x80deb1fe, 0x3b1696b1), X64Word_create(0x9bdc06a7, 0x25c71235), X64Word_create(0xc19bf174, 0xcf692694), X64Word_create(0xe49b69c1, 0x9ef14ad2), X64Word_create(0xefbe4786, 0x384f25e3), X64Word_create(0x0fc19dc6, 0x8b8cd5b5), X64Word_create(0x240ca1cc, 0x77ac9c65), X64Word_create(0x2de92c6f, 0x592b0275), X64Word_create(0x4a7484aa, 0x6ea6e483), X64Word_create(0x5cb0a9dc, 0xbd41fbd4), X64Word_create(0x76f988da, 0x831153b5), X64Word_create(0x983e5152, 0xee66dfab), X64Word_create(0xa831c66d, 0x2db43210), X64Word_create(0xb00327c8, 0x98fb213f), X64Word_create(0xbf597fc7, 0xbeef0ee4), X64Word_create(0xc6e00bf3, 0x3da88fc2), X64Word_create(0xd5a79147, 0x930aa725), X64Word_create(0x06ca6351, 0xe003826f), X64Word_create(0x14292967, 0x0a0e6e70), X64Word_create(0x27b70a85, 0x46d22ffc), X64Word_create(0x2e1b2138, 0x5c26c926), X64Word_create(0x4d2c6dfc, 0x5ac42aed), X64Word_create(0x53380d13, 0x9d95b3df), X64Word_create(0x650a7354, 0x8baf63de), X64Word_create(0x766a0abb, 0x3c77b2a8), X64Word_create(0x81c2c92e, 0x47edaee6), X64Word_create(0x92722c85, 0x1482353b), X64Word_create(0xa2bfe8a1, 0x4cf10364), X64Word_create(0xa81a664b, 0xbc423001), X64Word_create(0xc24b8b70, 0xd0f89791), X64Word_create(0xc76c51a3, 0x0654be30), X64Word_create(0xd192e819, 0xd6ef5218), X64Word_create(0xd6990624, 0x5565a910), X64Word_create(0xf40e3585, 0x5771202a), X64Word_create(0x106aa070, 0x32bbd1b8), X64Word_create(0x19a4c116, 0xb8d2d0c8), X64Word_create(0x1e376c08, 0x5141ab53), X64Word_create(0x2748774c, 0xdf8eeb99), X64Word_create(0x34b0bcb5, 0xe19b48a8), X64Word_create(0x391c0cb3, 0xc5c95a63), X64Word_create(0x4ed8aa4a, 0xe3418acb), X64Word_create(0x5b9cca4f, 0x7763e373), X64Word_create(0x682e6ff3, 0xd6b2b8a3), X64Word_create(0x748f82ee, 0x5defb2fc), X64Word_create(0x78a5636f, 0x43172f60), X64Word_create(0x84c87814, 0xa1f0ab72), X64Word_create(0x8cc70208, 0x1a6439ec), X64Word_create(0x90befffa, 0x23631e28), X64Word_create(0xa4506ceb, 0xde82bde9), X64Word_create(0xbef9a3f7, 0xb2c67915), X64Word_create(0xc67178f2, 0xe372532b), X64Word_create(0xca273ece, 0xea26619c), X64Word_create(0xd186b8c7, 0x21c0c207), X64Word_create(0xeada7dd6, 0xcde0eb1e), X64Word_create(0xf57d4f7f, 0xee6ed178), X64Word_create(0x06f067aa, 0x72176fba), X64Word_create(0x0a637dc5, 0xa2c898a6), X64Word_create(0x113f9804, 0xbef90dae), X64Word_create(0x1b710b35, 0x131c471b), X64Word_create(0x28db77f5, 0x23047d84), X64Word_create(0x32caab7b, 0x40c72493), X64Word_create(0x3c9ebe0a, 0x15c9bebc), X64Word_create(0x431d67c4, 0x9c100d4c), X64Word_create(0x4cc5d4be, 0xcb3e42b6), X64Word_create(0x597f299c, 0xfc657e2a), X64Word_create(0x5fcb6fab, 0x3ad6faec), X64Word_create(0x6c44198c, 0x4a475817)];
			var W = [];

			(function () {
				for (var i = 0; i < 80; i++) {
					W[i] = X64Word_create();
				}
			})();

			var SHA512 = C_algo.SHA512 = Hasher.extend({
				_doReset: function _doReset() {
					this._hash = new X64WordArray.init([new X64Word.init(0x6a09e667, 0xf3bcc908), new X64Word.init(0xbb67ae85, 0x84caa73b), new X64Word.init(0x3c6ef372, 0xfe94f82b), new X64Word.init(0xa54ff53a, 0x5f1d36f1), new X64Word.init(0x510e527f, 0xade682d1), new X64Word.init(0x9b05688c, 0x2b3e6c1f), new X64Word.init(0x1f83d9ab, 0xfb41bd6b), new X64Word.init(0x5be0cd19, 0x137e2179)]);
				},
				_doProcessBlock: function _doProcessBlock(M, offset) {
					var H = this._hash.words;
					var H0 = H[0];
					var H1 = H[1];
					var H2 = H[2];
					var H3 = H[3];
					var H4 = H[4];
					var H5 = H[5];
					var H6 = H[6];
					var H7 = H[7];
					var H0h = H0.high;
					var H0l = H0.low;
					var H1h = H1.high;
					var H1l = H1.low;
					var H2h = H2.high;
					var H2l = H2.low;
					var H3h = H3.high;
					var H3l = H3.low;
					var H4h = H4.high;
					var H4l = H4.low;
					var H5h = H5.high;
					var H5l = H5.low;
					var H6h = H6.high;
					var H6l = H6.low;
					var H7h = H7.high;
					var H7l = H7.low;
					var ah = H0h;
					var al = H0l;
					var bh = H1h;
					var bl = H1l;
					var ch = H2h;
					var cl = H2l;
					var dh = H3h;
					var dl = H3l;
					var eh = H4h;
					var el = H4l;
					var fh = H5h;
					var fl = H5l;
					var gh = H6h;
					var gl = H6l;
					var hh = H7h;
					var hl = H7l;

					for (var i = 0; i < 80; i++) {
						var Wi = W[i];

						if (i < 16) {
							var Wih = Wi.high = M[offset + i * 2] | 0;
							var Wil = Wi.low = M[offset + i * 2 + 1] | 0;
						} else {
							var gamma0x = W[i - 15];
							var gamma0xh = gamma0x.high;
							var gamma0xl = gamma0x.low;
							var gamma0h = (gamma0xh >>> 1 | gamma0xl << 31) ^ (gamma0xh >>> 8 | gamma0xl << 24) ^ gamma0xh >>> 7;
							var gamma0l = (gamma0xl >>> 1 | gamma0xh << 31) ^ (gamma0xl >>> 8 | gamma0xh << 24) ^ (gamma0xl >>> 7 | gamma0xh << 25);
							var gamma1x = W[i - 2];
							var gamma1xh = gamma1x.high;
							var gamma1xl = gamma1x.low;
							var gamma1h = (gamma1xh >>> 19 | gamma1xl << 13) ^ (gamma1xh << 3 | gamma1xl >>> 29) ^ gamma1xh >>> 6;
							var gamma1l = (gamma1xl >>> 19 | gamma1xh << 13) ^ (gamma1xl << 3 | gamma1xh >>> 29) ^ (gamma1xl >>> 6 | gamma1xh << 26);
							var Wi7 = W[i - 7];
							var Wi7h = Wi7.high;
							var Wi7l = Wi7.low;
							var Wi16 = W[i - 16];
							var Wi16h = Wi16.high;
							var Wi16l = Wi16.low;
							var Wil = gamma0l + Wi7l;
							var Wih = gamma0h + Wi7h + (Wil >>> 0 < gamma0l >>> 0 ? 1 : 0);
							var Wil = Wil + gamma1l;
							var Wih = Wih + gamma1h + (Wil >>> 0 < gamma1l >>> 0 ? 1 : 0);
							var Wil = Wil + Wi16l;
							var Wih = Wih + Wi16h + (Wil >>> 0 < Wi16l >>> 0 ? 1 : 0);
							Wi.high = Wih;
							Wi.low = Wil;
						}

						var chh = eh & fh ^ ~eh & gh;
						var chl = el & fl ^ ~el & gl;
						var majh = ah & bh ^ ah & ch ^ bh & ch;
						var majl = al & bl ^ al & cl ^ bl & cl;
						var sigma0h = (ah >>> 28 | al << 4) ^ (ah << 30 | al >>> 2) ^ (ah << 25 | al >>> 7);
						var sigma0l = (al >>> 28 | ah << 4) ^ (al << 30 | ah >>> 2) ^ (al << 25 | ah >>> 7);
						var sigma1h = (eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9);
						var sigma1l = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9);
						var Ki = K[i];
						var Kih = Ki.high;
						var Kil = Ki.low;
						var t1l = hl + sigma1l;
						var t1h = hh + sigma1h + (t1l >>> 0 < hl >>> 0 ? 1 : 0);
						var t1l = t1l + chl;
						var t1h = t1h + chh + (t1l >>> 0 < chl >>> 0 ? 1 : 0);
						var t1l = t1l + Kil;
						var t1h = t1h + Kih + (t1l >>> 0 < Kil >>> 0 ? 1 : 0);
						var t1l = t1l + Wil;
						var t1h = t1h + Wih + (t1l >>> 0 < Wil >>> 0 ? 1 : 0);
						var t2l = sigma0l + majl;
						var t2h = sigma0h + majh + (t2l >>> 0 < sigma0l >>> 0 ? 1 : 0);
						hh = gh;
						hl = gl;
						gh = fh;
						gl = fl;
						fh = eh;
						fl = el;
						el = dl + t1l | 0;
						eh = dh + t1h + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
						dh = ch;
						dl = cl;
						ch = bh;
						cl = bl;
						bh = ah;
						bl = al;
						al = t1l + t2l | 0;
						ah = t1h + t2h + (al >>> 0 < t1l >>> 0 ? 1 : 0) | 0;
					}

					H0l = H0.low = H0l + al;
					H0.high = H0h + ah + (H0l >>> 0 < al >>> 0 ? 1 : 0);
					H1l = H1.low = H1l + bl;
					H1.high = H1h + bh + (H1l >>> 0 < bl >>> 0 ? 1 : 0);
					H2l = H2.low = H2l + cl;
					H2.high = H2h + ch + (H2l >>> 0 < cl >>> 0 ? 1 : 0);
					H3l = H3.low = H3l + dl;
					H3.high = H3h + dh + (H3l >>> 0 < dl >>> 0 ? 1 : 0);
					H4l = H4.low = H4l + el;
					H4.high = H4h + eh + (H4l >>> 0 < el >>> 0 ? 1 : 0);
					H5l = H5.low = H5l + fl;
					H5.high = H5h + fh + (H5l >>> 0 < fl >>> 0 ? 1 : 0);
					H6l = H6.low = H6l + gl;
					H6.high = H6h + gh + (H6l >>> 0 < gl >>> 0 ? 1 : 0);
					H7l = H7.low = H7l + hl;
					H7.high = H7h + hh + (H7l >>> 0 < hl >>> 0 ? 1 : 0);
				},
				_doFinalize: function _doFinalize() {
					var data = this._data;
					var dataWords = data.words;
					var nBitsTotal = this._nDataBytes * 8;
					var nBitsLeft = data.sigBytes * 8;
					dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;
					dataWords[(nBitsLeft + 128 >>> 10 << 5) + 30] = Math.floor(nBitsTotal / 0x100000000);
					dataWords[(nBitsLeft + 128 >>> 10 << 5) + 31] = nBitsTotal;
					data.sigBytes = dataWords.length * 4;

					this._process();

					var hash = this._hash.toX32();

					return hash;
				},
				clone: function clone() {
					var clone = Hasher.clone.call(this);
					clone._hash = this._hash.clone();
					return clone;
				},
				blockSize: 1024 / 32
			});
			C.SHA512 = Hasher._createHelper(SHA512);
			C.HmacSHA512 = Hasher._createHmacHelper(SHA512);
		})();

		return CryptoJS.SHA512;
	});
},366,[364,365],"node_modules/crypto-js/sha512.js");
__d(function (global, _require, module, exports, _dependencyMap) {
	;

	(function (root, factory) {
		if (typeof exports === "object") {
			module.exports = exports = factory(_require(_dependencyMap[0], "./core"));
		} else if (typeof define === "function" && define.amd) {
			define(["./core"], factory);
		} else {
			factory(root.CryptoJS);
		}
	})(this, function (CryptoJS) {
		(function () {
			var C = CryptoJS;
			var C_lib = C.lib;
			var Base = C_lib.Base;
			var C_enc = C.enc;
			var Utf8 = C_enc.Utf8;
			var C_algo = C.algo;
			var HMAC = C_algo.HMAC = Base.extend({
				init: function init(hasher, key) {
					hasher = this._hasher = new hasher.init();

					if (typeof key == 'string') {
						key = Utf8.parse(key);
					}

					var hasherBlockSize = hasher.blockSize;
					var hasherBlockSizeBytes = hasherBlockSize * 4;

					if (key.sigBytes > hasherBlockSizeBytes) {
						key = hasher.finalize(key);
					}

					key.clamp();
					var oKey = this._oKey = key.clone();
					var iKey = this._iKey = key.clone();
					var oKeyWords = oKey.words;
					var iKeyWords = iKey.words;

					for (var i = 0; i < hasherBlockSize; i++) {
						oKeyWords[i] ^= 0x5c5c5c5c;
						iKeyWords[i] ^= 0x36363636;
					}

					oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;
					this.reset();
				},
				reset: function reset() {
					var hasher = this._hasher;
					hasher.reset();
					hasher.update(this._iKey);
				},
				update: function update(messageUpdate) {
					this._hasher.update(messageUpdate);

					return this;
				},
				finalize: function finalize(messageUpdate) {
					var hasher = this._hasher;
					var innerHash = hasher.finalize(messageUpdate);
					hasher.reset();
					var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));
					return hmac;
				}
			});
		})();
	});
},367,[364],"node_modules/crypto-js/hmac.js");
__d(function (global, _require, module, exports, _dependencyMap) {
	;

	(function (root, factory) {
		if (typeof exports === "object") {
			module.exports = exports = factory(_require(_dependencyMap[0], "./core"));
		} else if (typeof define === "function" && define.amd) {
			define(["./core"], factory);
		} else {
			factory(root.CryptoJS);
		}
	})(this, function (CryptoJS) {
		(function () {
			var C = CryptoJS;
			var C_lib = C.lib;
			var WordArray = C_lib.WordArray;
			var C_enc = C.enc;
			var Base64 = C_enc.Base64 = {
				stringify: function stringify(wordArray) {
					var words = wordArray.words;
					var sigBytes = wordArray.sigBytes;
					var map = this._map;
					wordArray.clamp();
					var base64Chars = [];

					for (var i = 0; i < sigBytes; i += 3) {
						var byte1 = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
						var byte2 = words[i + 1 >>> 2] >>> 24 - (i + 1) % 4 * 8 & 0xff;
						var byte3 = words[i + 2 >>> 2] >>> 24 - (i + 2) % 4 * 8 & 0xff;
						var triplet = byte1 << 16 | byte2 << 8 | byte3;

						for (var j = 0; j < 4 && i + j * 0.75 < sigBytes; j++) {
							base64Chars.push(map.charAt(triplet >>> 6 * (3 - j) & 0x3f));
						}
					}

					var paddingChar = map.charAt(64);

					if (paddingChar) {
						while (base64Chars.length % 4) {
							base64Chars.push(paddingChar);
						}
					}

					return base64Chars.join('');
				},
				parse: function parse(base64Str) {
					var base64StrLength = base64Str.length;
					var map = this._map;
					var reverseMap = this._reverseMap;

					if (!reverseMap) {
						reverseMap = this._reverseMap = [];

						for (var j = 0; j < map.length; j++) {
							reverseMap[map.charCodeAt(j)] = j;
						}
					}

					var paddingChar = map.charAt(64);

					if (paddingChar) {
						var paddingIndex = base64Str.indexOf(paddingChar);

						if (paddingIndex !== -1) {
							base64StrLength = paddingIndex;
						}
					}

					return parseLoop(base64Str, base64StrLength, reverseMap);
				},
				_map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='
			};

			function parseLoop(base64Str, base64StrLength, reverseMap) {
				var words = [];
				var nBytes = 0;

				for (var i = 0; i < base64StrLength; i++) {
					if (i % 4) {
						var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << i % 4 * 2;
						var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> 6 - i % 4 * 2;
						words[nBytes >>> 2] |= (bits1 | bits2) << 24 - nBytes % 4 * 8;
						nBytes++;
					}
				}

				return WordArray.create(words, nBytes);
			}
		})();

		return CryptoJS.enc.Base64;
	});
},368,[364],"node_modules/crypto-js/enc-base64.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var ETTNetResponseHelper = {};

    ETTNetResponseHelper.responseJson = function (json) {
        if (!json) {
            return {
                'code': -20148,
                'msg': '请求失败'
            };
        }

        if (json.code == -50001) {
            return {
                'code': -50001,
                'msg': '手机号已注册，请直接登录'
            };
        }

        return json;
    };

    ETTNetResponseHelper.responseJsonForResult = function (json) {
        if (!json) {
            return {
                'code': -20148,
                'msg': '请求失败'
            };
        }

        if (json.result == -50001) {
            return {
                'code': -50001,
                'msg': '手机号已注册，请直接登录'
            };
        }

        return json;
    };

    ETTNetResponseHelper.requestFailJson = function (json) {
        if (!json) {
            return {
                'code': -20148,
                'msg': '请求失败'
            };
        }

        if (json.status == 404) {
            return {
                'code': -404,
                'msg': '地址不可达'
            };
        } else if (json.status == -401) {
            return {
                'code': -401,
                'msg': '授权失败'
            };
        } else if (json.status == -20148) {
            return {
                'code': -20148,
                'msg': '请求失败'
            };
        }

        return json;
    };

    exports.default = ETTNetResponseHelper;
},369,[],"app/utils/ETTNetResponseHelper.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    var _react = _require(_dependencyMap[0], "react");

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    var _reactNavigation = _require(_dependencyMap[2], "react-navigation");

    var _ETTHomeScene = _require(_dependencyMap[3], "../../scene/ETTHomeScene");

    var _ETTHomeScene2 = babelHelpers.interopRequireDefault(_ETTHomeScene);

    var _ETTLogScene = _require(_dependencyMap[4], "../../scene/ETTLogScene");

    var _ETTMyScene = _require(_dependencyMap[5], "../../scene/ETTMyScene");

    var _ETTMyScene2 = babelHelpers.interopRequireDefault(_ETTMyScene);

    var _ETTDetailScene = _require(_dependencyMap[6], "../../scene/ETTDetailScene");

    var _ETTDetailScene2 = babelHelpers.interopRequireDefault(_ETTDetailScene);

    var _ETTProductDeatilScene = _require(_dependencyMap[7], "../../scene/ETTProductDeatilScene");

    var _ETTProductDeatilScene2 = babelHelpers.interopRequireDefault(_ETTProductDeatilScene);

    var _ETTOrderDetailScene = _require(_dependencyMap[8], "../../scene/ETTOrderDetailScene");

    var _ETTOrderDetailScene2 = babelHelpers.interopRequireDefault(_ETTOrderDetailScene);

    var _ETTVerCodeScene = _require(_dependencyMap[9], "../../scene/ETTVerCodeScene");

    var _ETTVerCodeScene2 = babelHelpers.interopRequireDefault(_ETTVerCodeScene);

    var _ETTThirdLoginBindScene = _require(_dependencyMap[10], "../../scene/ETTThirdLoginBindScene");

    var _ETTThirdLoginBindScene2 = babelHelpers.interopRequireDefault(_ETTThirdLoginBindScene);

    var _ETTForgetPwdScene = _require(_dependencyMap[11], "../../scene/ETTForgetPwdScene");

    var _ETTForgetPwdScene2 = babelHelpers.interopRequireDefault(_ETTForgetPwdScene);

    var _ETTRegisteredScene = _require(_dependencyMap[12], "../../scene/ETTRegisteredScene");

    var _ETTRegisteredScene2 = babelHelpers.interopRequireDefault(_ETTRegisteredScene);

    var _ETTChangePwdScene = _require(_dependencyMap[13], "../../scene/ETTChangePwdScene");

    var _ETTChangePwdScene2 = babelHelpers.interopRequireDefault(_ETTChangePwdScene);

    var _ETTBindThirdAmountScene = _require(_dependencyMap[14], "../../scene/ETTBindThirdAmountScene");

    var _ETTBindThirdAmountScene2 = babelHelpers.interopRequireDefault(_ETTBindThirdAmountScene);

    var _ETTWelcomeGuideScene = _require(_dependencyMap[15], "../../scene/ETTWelcomeGuideScene");

    var _ETTWelcomeGuideScene2 = babelHelpers.interopRequireDefault(_ETTWelcomeGuideScene);

    var _ETTPersonalDataEditorScene = _require(_dependencyMap[16], "../../scene/ETTPersonalDataEditorScene");

    var _ETTPersonalDataEditorScene2 = babelHelpers.interopRequireDefault(_ETTPersonalDataEditorScene);

    var _ETTOrderListScene = _require(_dependencyMap[17], "../../scene/ETTOrderListScene");

    var _ETTOrderListScene2 = babelHelpers.interopRequireDefault(_ETTOrderListScene);

    var _CardStackStyleInterpolator = _require(_dependencyMap[18], "react-navigation/src/views/CardStack/CardStackStyleInterpolator");

    var _CardStackStyleInterpolator2 = babelHelpers.interopRequireDefault(_CardStackStyleInterpolator);

    var _ETTStackOptions = _require(_dependencyMap[19], "./ETTStackOptions");

    var _ETTHeaderStyles = _require(_dependencyMap[20], "../styles/ETTHeaderStyles");

    var NavHome = (0, _reactNavigation.StackNavigator)({
        HomeScene: {
            screen: _ETTHomeScene2.default,
            navigationOptions: function navigationOptions(_ref) {
                var navigation = _ref.navigation;
                return (0, _ETTStackOptions.StackHomeOptions)({
                    navigation: navigation
                });
            }
        },
        DetailScene: {
            screen: _ETTDetailScene2.default,
            navigationOptions: function navigationOptions(_ref2) {
                var navigation = _ref2.navigation;
                return (0, _ETTStackOptions.StackDetailOptions)({
                    navigation: navigation
                });
            }
        },
        MyScene: {
            screen: _ETTMyScene2.default,
            navigationOptions: function navigationOptions(_ref3) {
                var navigation = _ref3.navigation;
                return (0, _ETTStackOptions.StackLogOptions)({
                    navigation: navigation
                });
            }
        },
        PersonalDataScene: {
            screen: _ETTPersonalDataEditorScene2.default,
            navigationOptions: function navigationOptions(_ref4) {
                var navigation = _ref4.navigation;
                return (0, _ETTStackOptions.StackLogOptions)({
                    navigation: navigation
                });
            }
        },
        ProductDeatilScene: {
            screen: _ETTProductDeatilScene2.default,
            navigationOptions: function navigationOptions(_ref5) {
                var navigation = _ref5.navigation;
                return (0, _ETTStackOptions.StackProductDetailOptions)({
                    navigation: navigation
                });
            }
        },
        OrderDetailScene: {
            screen: _ETTOrderDetailScene2.default,
            navigationOptions: function navigationOptions(_ref6) {
                var navigation = _ref6.navigation;
                return (0, _ETTStackOptions.StackOrderDetailOptions)({
                    navigation: navigation
                });
            }
        },
        ThirdLoginBindScene: {
            screen: _ETTThirdLoginBindScene2.default,
            navigationOptions: function navigationOptions(_ref7) {
                var navigation = _ref7.navigation;
                return (0, _ETTStackOptions.StackLogOptions)({
                    navigation: navigation
                });
            }
        },
        ChangePwdScene: {
            screen: _ETTChangePwdScene2.default,
            navigationOptions: function navigationOptions(_ref8) {
                var navigation = _ref8.navigation;
                return (0, _ETTStackOptions.StackLogOptions)({
                    navigation: navigation
                });
            }
        },
        BindThirdAmountScene: {
            screen: _ETTBindThirdAmountScene2.default,
            navigationOptions: function navigationOptions(_ref9) {
                var navigation = _ref9.navigation;
                return (0, _ETTStackOptions.StackLogOptions)({
                    navigation: navigation
                });
            }
        },
        LogScene: {
            screen: _ETTLogScene.ETTLogScene,
            navigationOptions: function navigationOptions(_ref10) {
                var navigation = _ref10.navigation;
                return (0, _ETTStackOptions.StackLogOptions)({
                    navigation: navigation
                });
            }
        },
        VerCodeScene: {
            screen: _ETTVerCodeScene2.default,
            navigationOptions: function navigationOptions(_ref11) {
                var navigation = _ref11.navigation;
                return (0, _ETTStackOptions.StackLogOptions)({
                    navigation: navigation
                });
            }
        },
        ForgetPwdScene: {
            screen: _ETTForgetPwdScene2.default,
            navigationOptions: function navigationOptions(_ref12) {
                var navigation = _ref12.navigation;
                return (0, _ETTStackOptions.StackLogOptions)({
                    navigation: navigation
                });
            }
        },
        RegisteredScene: {
            screen: _ETTRegisteredScene2.default,
            navigationOptions: function navigationOptions(_ref13) {
                var navigation = _ref13.navigation;
                return (0, _ETTStackOptions.StackLogOptions)({
                    navigation: navigation
                });
            }
        },
        OrderListScene: {
            screen: _ETTOrderListScene2.default,
            navigationOptions: function navigationOptions(_ref14) {
                var navigation = _ref14.navigation;
                return (0, _ETTStackOptions.StackOrderListOptions)({
                    navigation: navigation
                });
            }
        }
    }, {
        headerMode: 'float',
        transitionConfig: function transitionConfig() {
            return {
                screenInterpolator: _CardStackStyleInterpolator2.default.forHorizontal
            };
        }
    });
    var NavLog = (0, _reactNavigation.StackNavigator)({
        LogScene: {
            screen: _ETTLogScene.ETTLogScene,
            navigationOptions: function navigationOptions(_ref15) {
                var navigation = _ref15.navigation;
                return (0, _ETTStackOptions.StackLogOptions)({
                    navigation: navigation
                });
            }
        },
        VerCodeScene: {
            screen: _ETTVerCodeScene2.default,
            navigationOptions: function navigationOptions(_ref16) {
                var navigation = _ref16.navigation;
                return (0, _ETTStackOptions.StackLogOptions)({
                    navigation: navigation
                });
            }
        },
        ForgetPwdScene: {
            screen: _ETTForgetPwdScene2.default,
            navigationOptions: function navigationOptions(_ref17) {
                var navigation = _ref17.navigation;
                return (0, _ETTStackOptions.StackLogOptions)({
                    navigation: navigation
                });
            }
        },
        RegisteredScene: {
            screen: _ETTRegisteredScene2.default,
            navigationOptions: function navigationOptions(_ref18) {
                var navigation = _ref18.navigation;
                return (0, _ETTStackOptions.StackLogOptions)({
                    navigation: navigation
                });
            }
        }
    });
    var NavWelcome = (0, _reactNavigation.StackNavigator)({
        WelcomeScene: {
            screen: _ETTWelcomeGuideScene2.default,
            navigationOptions: function navigationOptions(_ref19) {
                var navigation = _ref19.navigation;
                return (0, _ETTStackOptions.StackLogOptions)({
                    navigation: navigation
                });
            }
        }
    });
    module.exports = {
        NavHome: NavHome,
        NavLog: NavLog,
        NavWelcome: NavWelcome
    };
},370,[114,12,371,448,509,524,532,463,533,547,516,548,549,554,556,566,564,540,402,569,451],"app/res/values/ETTStackConfig.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = {
    get createNavigationContainer() {
      return _require(_dependencyMap[0], './createNavigationContainer').default;
    },

    get StateUtils() {
      return _require(_dependencyMap[1], './StateUtils').default;
    },

    get addNavigationHelpers() {
      return _require(_dependencyMap[2], './addNavigationHelpers').default;
    },

    get NavigationActions() {
      return _require(_dependencyMap[3], './NavigationActions').default;
    },

    get createNavigator() {
      return _require(_dependencyMap[4], './navigators/createNavigator').default;
    },

    get StackNavigator() {
      return _require(_dependencyMap[5], './navigators/StackNavigator').default;
    },

    get SwitchNavigator() {
      return _require(_dependencyMap[6], './navigators/SwitchNavigator').default;
    },

    get TabNavigator() {
      return _require(_dependencyMap[7], './navigators/TabNavigator').default;
    },

    get DrawerNavigator() {
      return _require(_dependencyMap[8], './navigators/DrawerNavigator').default;
    },

    get StackRouter() {
      return _require(_dependencyMap[9], './routers/StackRouter').default;
    },

    get TabRouter() {
      return _require(_dependencyMap[10], './routers/TabRouter').default;
    },

    get SwitchRouter() {
      return _require(_dependencyMap[11], './routers/SwitchRouter').default;
    },

    get Transitioner() {
      return _require(_dependencyMap[12], './views/Transitioner').default;
    },

    get CardStackTransitioner() {
      return _require(_dependencyMap[13], './views/CardStack/CardStackTransitioner').default;
    },

    get CardStack() {
      return _require(_dependencyMap[14], './views/CardStack/CardStack').default;
    },

    get Card() {
      return _require(_dependencyMap[15], './views/CardStack/Card').default;
    },

    get SafeAreaView() {
      return _require(_dependencyMap[16], 'react-native-safe-area-view').default;
    },

    get Header() {
      return _require(_dependencyMap[17], './views/Header/Header').default;
    },

    get HeaderTitle() {
      return _require(_dependencyMap[18], './views/Header/HeaderTitle').default;
    },

    get HeaderBackButton() {
      return _require(_dependencyMap[19], './views/Header/HeaderBackButton').default;
    },

    get DrawerView() {
      return _require(_dependencyMap[20], './views/Drawer/DrawerView').default;
    },

    get DrawerItems() {
      return _require(_dependencyMap[21], './views/Drawer/DrawerNavigatorItems').default;
    },

    get TabView() {
      return _require(_dependencyMap[22], './views/TabView/TabView').default;
    },

    get TabBarTop() {
      return _require(_dependencyMap[23], './views/TabView/TabBarTop').default;
    },

    get TabBarBottom() {
      return _require(_dependencyMap[24], './views/TabView/TabBarBottom').default;
    },

    get SwitchView() {
      return _require(_dependencyMap[25], './views/SwitchView/SwitchView').default;
    },

    get withNavigation() {
      return _require(_dependencyMap[26], './views/withNavigation').default;
    },

    get withNavigationFocus() {
      return _require(_dependencyMap[27], './views/withNavigationFocus').default;
    }

  };
},371,[372,377,375,374,378,379,416,420,438,407,421,417,404,380,381,383,387,386,390,391,440,445,422,435,437,418,446,447],"node_modules/react-navigation/src/react-navigation.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-navigation/src/createNavigationContainer.js";
  exports.default = createNavigationContainer;

  var _react = _require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1], "react-native");

  var _PlatformHelpers = _require(_dependencyMap[2], "./PlatformHelpers");

  var _NavigationActions = _require(_dependencyMap[3], "./NavigationActions");

  var _NavigationActions2 = babelHelpers.interopRequireDefault(_NavigationActions);

  var _addNavigationHelpers = _require(_dependencyMap[4], "./addNavigationHelpers");

  var _addNavigationHelpers2 = babelHelpers.interopRequireDefault(_addNavigationHelpers);

  var _invariant = _require(_dependencyMap[5], "./utils/invariant");

  var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

  function createNavigationContainer(Component) {
    var _class, _temp;

    var NavigationContainer = (_temp = _class = function (_React$Component) {
      babelHelpers.inherits(NavigationContainer, _React$Component);

      function NavigationContainer(props) {
        babelHelpers.classCallCheck(this, NavigationContainer);

        var _this = babelHelpers.possibleConstructorReturn(this, (NavigationContainer.__proto__ || Object.getPrototypeOf(NavigationContainer)).call(this, props));

        _this.subs = null;
        _this._actionEventSubscribers = new Set();

        _this._handleOpenURL = function (_ref) {
          var url = _ref.url;

          var parsedUrl = _this._urlToPathAndParams(url);

          if (parsedUrl) {
            var path = parsedUrl.path,
                params = parsedUrl.params;
            var action = Component.router.getActionForPathAndParams(path, params);

            if (action) {
              _this.dispatch(action);
            }
          }
        };

        _this.dispatch = function (action) {
          if (!_this._isStateful()) {
            return false;
          }

          _this._nav = _this._nav || _this.state.nav;
          var oldNav = _this._nav;
          (0, _invariant2.default)(oldNav, 'should be set in constructor if stateful');
          var nav = Component.router.getStateForAction(action, oldNav);

          var dispatchActionEvents = function dispatchActionEvents() {
            _this._actionEventSubscribers.forEach(function (subscriber) {
              return subscriber({
                type: 'action',
                action: action,
                state: nav,
                lastState: oldNav
              });
            });
          };

          if (nav && nav !== oldNav) {
            _this._nav = nav;

            _this.setState({
              nav: nav
            }, function () {
              _this._onNavigationStateChange(oldNav, nav, action);

              dispatchActionEvents();
            });

            return true;
          } else {
            dispatchActionEvents();
          }

          return false;
        };

        _this._validateProps(props);

        _this._initialAction = _NavigationActions2.default.init();

        if (_this._isStateful()) {
          _this.subs = _PlatformHelpers.BackHandler.addEventListener('hardwareBackPress', function () {
            if (!_this._isMounted) {
              _this.subs && _this.subs.remove();
            } else {
              return _this.dispatch(_NavigationActions2.default.back());
            }
          });
        }

        _this.state = {
          nav: _this._isStateful() ? Component.router.getStateForAction(_this._initialAction) : null
        };
        return _this;
      }

      babelHelpers.createClass(NavigationContainer, [{
        key: "_isStateful",
        value: function _isStateful() {
          return !this.props.navigation;
        }
      }, {
        key: "_validateProps",
        value: function _validateProps(props) {
          if (this._isStateful()) {
            return;
          }

          var navigation = props.navigation,
              screenProps = props.screenProps,
              containerProps = babelHelpers.objectWithoutProperties(props, ["navigation", "screenProps"]);
          var keys = Object.keys(containerProps);

          if (keys.length !== 0) {
            throw new Error('This navigator has both navigation and container props, so it is ' + ("unclear if it should own its own state. Remove props: \"" + keys.join(', ') + "\" ") + 'if the navigator should get its state from the navigation prop. If the ' + 'navigator should maintain its own state, do not pass a navigation prop.');
          }
        }
      }, {
        key: "_urlToPathAndParams",
        value: function _urlToPathAndParams(url) {
          var params = {};
          var delimiter = this.props.uriPrefix || '://';
          var path = url.split(delimiter)[1];

          if (typeof path === 'undefined') {
            path = url;
          } else if (path === '') {
            path = '/';
          }

          return {
            path: path,
            params: params
          };
        }
      }, {
        key: "_onNavigationStateChange",
        value: function _onNavigationStateChange(prevNav, nav, action) {
          if (typeof this.props.onNavigationStateChange === 'undefined' && this._isStateful() && !!process.env.REACT_NAV_LOGGING) {
            if (console.group) {
              console.group('Navigation Dispatch: ');
              console.log('Action: ', action);
              console.log('New State: ', nav);
              console.log('Last State: ', prevNav);
              console.groupEnd();
            } else {
              console.log('Navigation Dispatch: ', {
                action: action,
                newState: nav,
                lastState: prevNav
              });
            }

            return;
          }

          if (typeof this.props.onNavigationStateChange === 'function') {
            this.props.onNavigationStateChange(prevNav, nav, action);
          }
        }
      }, {
        key: "componentWillReceiveProps",
        value: function componentWillReceiveProps(nextProps) {
          this._validateProps(nextProps);
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate() {
          if (this._nav === this.state.nav) {
            this._nav = null;
          }
        }
      }, {
        key: "componentDidMount",
        value: function componentDidMount() {
          var _this2 = this;

          this._isMounted = true;

          if (!this._isStateful()) {
            return;
          }

          _reactNative.Linking.addEventListener('url', this._handleOpenURL);

          _reactNative.Linking.getInitialURL().then(function (url) {
            return url && _this2._handleOpenURL({
              url: url
            });
          });

          this._actionEventSubscribers.forEach(function (subscriber) {
            return subscriber({
              type: 'action',
              action: _this2._initialAction,
              state: _this2.state.nav,
              lastState: null
            });
          });
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this._isMounted = false;

          _reactNative.Linking.removeEventListener('url', this._handleOpenURL);

          this.subs && this.subs.remove();
        }
      }, {
        key: "render",
        value: function render() {
          var _this3 = this;

          var navigation = this.props.navigation;

          if (this._isStateful()) {
            var nav = this.state.nav;
            (0, _invariant2.default)(nav, 'should be set in constructor if stateful');

            if (!this._navigation || this._navigation.state !== nav) {
              this._navigation = (0, _addNavigationHelpers2.default)({
                dispatch: this.dispatch,
                state: nav,
                addListener: function addListener(eventName, handler) {
                  if (eventName !== 'action') {
                    return {
                      remove: function remove() {}
                    };
                  }

                  _this3._actionEventSubscribers.add(handler);

                  return {
                    remove: function remove() {
                      _this3._actionEventSubscribers.delete(handler);
                    }
                  };
                }
              });
            }

            navigation = this._navigation;
          }

          (0, _invariant2.default)(navigation, 'failed to get navigation');
          return _react2.default.createElement(Component, babelHelpers.extends({}, this.props, {
            navigation: navigation,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 226
            }
          }));
        }
      }]);
      return NavigationContainer;
    }(_react2.default.Component), _class.router = Component.router, _class.navigationOptions = null, _temp);
    return NavigationContainer;
  }
},372,[114,12,373,374,375,376],"node_modules/react-navigation/src/createNavigationContainer.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.MaskedViewIOS = exports.BackHandler = undefined;

  var _reactNative = _require(_dependencyMap[0], "react-native");

  var BackHandler = _reactNative.BackHandler || _reactNative.BackAndroid;
  exports.BackHandler = BackHandler;
  exports.MaskedViewIOS = _reactNative.MaskedViewIOS;
},373,[12],"node_modules/react-navigation/src/PlatformHelpers.native.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var BACK = 'Navigation/BACK';
  var INIT = 'Navigation/INIT';
  var NAVIGATE = 'Navigation/NAVIGATE';
  var POP = 'Navigation/POP';
  var POP_TO_TOP = 'Navigation/POP_TO_TOP';
  var PUSH = 'Navigation/PUSH';
  var RESET = 'Navigation/RESET';
  var REPLACE = 'Navigation/REPLACE';
  var SET_PARAMS = 'Navigation/SET_PARAMS';
  var URI = 'Navigation/URI';
  var COMPLETE_TRANSITION = 'Navigation/COMPLETE_TRANSITION';

  var createAction = function createAction(type, fn) {
    fn.toString = function () {
      return type;
    };

    return fn;
  };

  var back = createAction(BACK, function () {
    var payload = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return {
      type: BACK,
      key: payload.key,
      immediate: payload.immediate
    };
  });
  var init = createAction(INIT, function () {
    var payload = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var action = {
      type: INIT
    };

    if (payload.params) {
      action.params = payload.params;
    }

    return action;
  });
  var navigate = createAction(NAVIGATE, function (payload) {
    var action = {
      type: NAVIGATE,
      routeName: payload.routeName
    };

    if (payload.params) {
      action.params = payload.params;
    }

    if (payload.action) {
      action.action = payload.action;
    }

    if (payload.key) {
      action.key = payload.key;
    }

    return action;
  });
  var pop = createAction(POP, function (payload) {
    return {
      type: POP,
      n: payload && payload.n,
      immediate: payload && payload.immediate
    };
  });
  var popToTop = createAction(POP_TO_TOP, function (payload) {
    return {
      type: POP_TO_TOP,
      immediate: payload && payload.immediate,
      key: payload && payload.key
    };
  });
  var push = createAction(PUSH, function (payload) {
    var action = {
      type: PUSH,
      routeName: payload.routeName
    };

    if (payload.params) {
      action.params = payload.params;
    }

    if (payload.action) {
      action.action = payload.action;
    }

    return action;
  });
  var reset = createAction(RESET, function (payload) {
    return {
      type: RESET,
      index: payload.index,
      key: payload.key,
      actions: payload.actions
    };
  });
  var replace = createAction(REPLACE, function (payload) {
    return {
      type: REPLACE,
      key: payload.key,
      newKey: payload.newKey,
      params: payload.params,
      action: payload.action,
      routeName: payload.routeName,
      immediate: payload.immediate
    };
  });
  var setParams = createAction(SET_PARAMS, function (payload) {
    return {
      type: SET_PARAMS,
      key: payload.key,
      params: payload.params
    };
  });
  var uri = createAction(URI, function (payload) {
    return {
      type: URI,
      uri: payload.uri
    };
  });
  var completeTransition = createAction(COMPLETE_TRANSITION, function (payload) {
    return {
      type: COMPLETE_TRANSITION,
      key: payload && payload.key
    };
  });
  exports.default = {
    BACK: BACK,
    INIT: INIT,
    NAVIGATE: NAVIGATE,
    POP: POP,
    POP_TO_TOP: POP_TO_TOP,
    PUSH: PUSH,
    RESET: RESET,
    REPLACE: REPLACE,
    SET_PARAMS: SET_PARAMS,
    URI: URI,
    COMPLETE_TRANSITION: COMPLETE_TRANSITION,
    back: back,
    init: init,
    navigate: navigate,
    pop: pop,
    popToTop: popToTop,
    push: push,
    reset: reset,
    replace: replace,
    setParams: setParams,
    uri: uri,
    completeTransition: completeTransition
  };
},374,[],"node_modules/react-navigation/src/NavigationActions.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.default = function (navigation) {
    return babelHelpers.extends({}, navigation, {
      goBack: function goBack(key) {
        var actualizedKey = key;

        if (key === undefined && navigation.state.key) {
          (0, _invariant2.default)(typeof navigation.state.key === 'string', 'key should be a string');
          actualizedKey = navigation.state.key;
        }

        return navigation.dispatch(_NavigationActions2.default.back({
          key: actualizedKey
        }));
      },
      navigate: function navigate(navigateTo, params, action) {
        if (typeof navigateTo === 'string') {
          return navigation.dispatch(_NavigationActions2.default.navigate({
            routeName: navigateTo,
            params: params,
            action: action
          }));
        }

        (0, _invariant2.default)(typeof navigateTo === 'object', 'Must navigateTo an object or a string');
        (0, _invariant2.default)(params == null, 'Params must not be provided to .navigate() when specifying an object');
        (0, _invariant2.default)(action == null, 'Child action must not be provided to .navigate() when specifying an object');
        return navigation.dispatch(_NavigationActions2.default.navigate(navigateTo));
      },
      pop: function pop(n, params) {
        return navigation.dispatch(_NavigationActions2.default.pop({
          n: n,
          immediate: params && params.immediate
        }));
      },
      popToTop: function popToTop(params) {
        return navigation.dispatch(_NavigationActions2.default.popToTop({
          immediate: params && params.immediate
        }));
      },
      setParams: function setParams(params) {
        (0, _invariant2.default)(navigation.state.key && typeof navigation.state.key === 'string', 'setParams cannot be called by root navigator');
        var key = navigation.state.key;
        return navigation.dispatch(_NavigationActions2.default.setParams({
          params: params,
          key: key
        }));
      },
      getParam: function getParam(paramName, defaultValue) {
        var params = navigation.state.params;

        if (params && paramName in params) {
          return params[paramName];
        }

        return defaultValue;
      },
      push: function push(routeName, params, action) {
        return navigation.dispatch(_NavigationActions2.default.push({
          routeName: routeName,
          params: params,
          action: action
        }));
      },
      replace: function replace(routeName, params, action) {
        return navigation.dispatch(_NavigationActions2.default.replace({
          routeName: routeName,
          params: params,
          action: action,
          key: navigation.state.key
        }));
      }
    });
  };

  var _NavigationActions = _require(_dependencyMap[0], "./NavigationActions");

  var _NavigationActions2 = babelHelpers.interopRequireDefault(_NavigationActions);

  var _invariant = _require(_dependencyMap[1], "./utils/invariant");

  var _invariant2 = babelHelpers.interopRequireDefault(_invariant);
},375,[374,376],"node_modules/react-navigation/src/addNavigationHelpers.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var validateFormat = function validateFormat(format) {};

  if (__DEV__) {
    validateFormat = function validateFormat(format) {
      if (format === undefined) {
        throw new Error('invariant requires an error message argument');
      }
    };
  }

  function invariant(condition, format, a, b, c, d, e, f) {
    validateFormat(format);

    if (!condition) {
      var error;

      if (format === undefined) {
        error = new Error('Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.');
      } else {
        var args = [a, b, c, d, e, f];
        var argIndex = 0;
        error = new Error(format.replace(/%s/g, function () {
          return args[argIndex++];
        }));
        error.name = 'Invariant Violation';
      }

      error.framesToPop = 1;
      throw error;
    }
  }

  module.exports = invariant;
},376,[],"node_modules/react-navigation/src/utils/invariant.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _invariant = _require(_dependencyMap[0], "./utils/invariant");

  var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

  var StateUtils = {
    get: function get(state, key) {
      return state.routes.find(function (route) {
        return route.key === key;
      }) || null;
    },
    indexOf: function indexOf(state, key) {
      return state.routes.map(function (route) {
        return route.key;
      }).indexOf(key);
    },
    has: function has(state, key) {
      return !!state.routes.some(function (route) {
        return route.key === key;
      });
    },
    push: function push(state, route) {
      (0, _invariant2.default)(StateUtils.indexOf(state, route.key) === -1, 'should not push route with duplicated key %s', route.key);
      var routes = state.routes.slice();
      routes.push(route);
      return babelHelpers.extends({}, state, {
        index: routes.length - 1,
        routes: routes
      });
    },
    pop: function pop(state) {
      if (state.index <= 0) {
        return state;
      }

      var routes = state.routes.slice(0, -1);
      return babelHelpers.extends({}, state, {
        index: routes.length - 1,
        routes: routes
      });
    },
    jumpToIndex: function jumpToIndex(state, index) {
      if (index === state.index) {
        return state;
      }

      (0, _invariant2.default)(!!state.routes[index], 'invalid index %s to jump to', index);
      return babelHelpers.extends({}, state, {
        index: index
      });
    },
    jumpTo: function jumpTo(state, key) {
      var index = StateUtils.indexOf(state, key);
      return StateUtils.jumpToIndex(state, index);
    },
    back: function back(state) {
      var index = state.index - 1;
      var route = state.routes[index];
      return route ? StateUtils.jumpToIndex(state, index) : state;
    },
    forward: function forward(state) {
      var index = state.index + 1;
      var route = state.routes[index];
      return route ? StateUtils.jumpToIndex(state, index) : state;
    },
    replaceAt: function replaceAt(state, key, route) {
      var index = StateUtils.indexOf(state, key);
      return StateUtils.replaceAtIndex(state, index, route);
    },
    replaceAtIndex: function replaceAtIndex(state, index, route) {
      (0, _invariant2.default)(!!state.routes[index], 'invalid index %s for replacing route %s', index, route.key);

      if (state.routes[index] === route) {
        return state;
      }

      var routes = state.routes.slice();
      routes[index] = route;
      return babelHelpers.extends({}, state, {
        index: index,
        routes: routes
      });
    },
    reset: function reset(state, routes, index) {
      (0, _invariant2.default)(routes.length && Array.isArray(routes), 'invalid routes to replace');
      var nextIndex = index === undefined ? routes.length - 1 : index;

      if (state.routes.length === routes.length && state.index === nextIndex) {
        var compare = function compare(route, ii) {
          return routes[ii] === route;
        };

        if (state.routes.every(compare)) {
          return state;
        }
      }

      (0, _invariant2.default)(!!routes[nextIndex], 'invalid index %s to reset', nextIndex);
      return babelHelpers.extends({}, state, {
        index: nextIndex,
        routes: routes
      });
    }
  };
  exports.default = StateUtils;
},377,[376],"node_modules/react-navigation/src/StateUtils.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-navigation/src/navigators/createNavigator.js";
  exports.default = createNavigator;

  var _react = _require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  function createNavigator(router, routeConfigs, navigatorConfig) {
    return function (NavigationView) {
      var _class, _temp;

      var Navigator = (_temp = _class = function (_React$Component) {
        babelHelpers.inherits(Navigator, _React$Component);

        function Navigator() {
          babelHelpers.classCallCheck(this, Navigator);
          return babelHelpers.possibleConstructorReturn(this, (Navigator.__proto__ || Object.getPrototypeOf(Navigator)).apply(this, arguments));
        }

        babelHelpers.createClass(Navigator, [{
          key: "render",
          value: function render() {
            return _react2.default.createElement(NavigationView, babelHelpers.extends({}, this.props, {
              router: router,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 13
              }
            }));
          }
        }]);
        return Navigator;
      }(_react2.default.Component), _class.router = router, _class.navigationOptions = null, _temp);
      return Navigator;
    };
  }
},378,[114],"node_modules/react-navigation/src/navigators/createNavigator.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-navigation/src/navigators/StackNavigator.js";

  var _react = _require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _createNavigationContainer = _require(_dependencyMap[1], "../createNavigationContainer");

  var _createNavigationContainer2 = babelHelpers.interopRequireDefault(_createNavigationContainer);

  var _createNavigator = _require(_dependencyMap[2], "./createNavigator");

  var _createNavigator2 = babelHelpers.interopRequireDefault(_createNavigator);

  var _CardStackTransitioner = _require(_dependencyMap[3], "../views/CardStack/CardStackTransitioner");

  var _CardStackTransitioner2 = babelHelpers.interopRequireDefault(_CardStackTransitioner);

  var _StackRouter = _require(_dependencyMap[4], "../routers/StackRouter");

  var _StackRouter2 = babelHelpers.interopRequireDefault(_StackRouter);

  var _NavigationActions = _require(_dependencyMap[5], "../NavigationActions");

  var _NavigationActions2 = babelHelpers.interopRequireDefault(_NavigationActions);

  exports.default = function (routeConfigMap) {
    var stackConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var initialRouteKey = stackConfig.initialRouteKey,
        initialRouteName = stackConfig.initialRouteName,
        initialRouteParams = stackConfig.initialRouteParams,
        paths = stackConfig.paths,
        headerMode = stackConfig.headerMode,
        headerTransitionPreset = stackConfig.headerTransitionPreset,
        mode = stackConfig.mode,
        cardStyle = stackConfig.cardStyle,
        transitionConfig = stackConfig.transitionConfig,
        onTransitionStart = stackConfig.onTransitionStart,
        _onTransitionEnd = stackConfig.onTransitionEnd,
        navigationOptions = stackConfig.navigationOptions;
    var stackRouterConfig = {
      initialRouteKey: initialRouteKey,
      initialRouteName: initialRouteName,
      initialRouteParams: initialRouteParams,
      paths: paths,
      navigationOptions: navigationOptions
    };
    var router = (0, _StackRouter2.default)(routeConfigMap, stackRouterConfig);
    var navigator = (0, _createNavigator2.default)(router, routeConfigMap, stackConfig)(function (props) {
      return _react2.default.createElement(_CardStackTransitioner2.default, babelHelpers.extends({}, props, {
        headerMode: headerMode,
        headerTransitionPreset: headerTransitionPreset,
        mode: mode,
        cardStyle: cardStyle,
        transitionConfig: transitionConfig,
        onTransitionStart: onTransitionStart,
        onTransitionEnd: function onTransitionEnd(lastTransition, transition) {
          var _props$navigation = props.navigation,
              state = _props$navigation.state,
              dispatch = _props$navigation.dispatch;
          dispatch(_NavigationActions2.default.completeTransition({
            key: state.key
          }));
          _onTransitionEnd && _onTransitionEnd(lastTransition, transition);
        },
        __source: {
          fileName: _jsxFileName,
          lineNumber: 41
        }
      }));
    });
    return (0, _createNavigationContainer2.default)(navigator);
  };
},379,[114,372,378,380,407,374],"node_modules/react-navigation/src/navigators/StackNavigator.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _class,
      _temp2,
      _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-navigation/src/views/CardStack/CardStackTransitioner.js";

  var _react = _require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1], "react-native");

  var _CardStack = _require(_dependencyMap[2], "./CardStack");

  var _CardStack2 = babelHelpers.interopRequireDefault(_CardStack);

  var _CardStackStyleInterpolator = _require(_dependencyMap[3], "./CardStackStyleInterpolator");

  var _CardStackStyleInterpolator2 = babelHelpers.interopRequireDefault(_CardStackStyleInterpolator);

  var _Transitioner = _require(_dependencyMap[4], "../Transitioner");

  var _Transitioner2 = babelHelpers.interopRequireDefault(_Transitioner);

  var _TransitionConfigs = _require(_dependencyMap[5], "./TransitionConfigs");

  var _TransitionConfigs2 = babelHelpers.interopRequireDefault(_TransitionConfigs);

  var NativeAnimatedModule = _reactNative.NativeModules && _reactNative.NativeModules.NativeAnimatedModule;
  var CardStackTransitioner = (_temp2 = _class = function (_React$Component) {
    babelHelpers.inherits(CardStackTransitioner, _React$Component);

    function CardStackTransitioner() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, CardStackTransitioner);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = CardStackTransitioner.__proto__ || Object.getPrototypeOf(CardStackTransitioner)).call.apply(_ref, [this].concat(args))), _this), _this._configureTransition = function (transitionProps, prevTransitionProps) {
        var isModal = _this.props.mode === 'modal';
        var transitionSpec = babelHelpers.extends({}, _TransitionConfigs2.default.getTransitionConfig(_this.props.transitionConfig, transitionProps, prevTransitionProps, isModal).transitionSpec);

        if (!!NativeAnimatedModule && _CardStackStyleInterpolator2.default.canUseNativeDriver()) {
          transitionSpec.useNativeDriver = true;
        }

        return transitionSpec;
      }, _this._render = function (props, prevProps) {
        var _this$props = _this.props,
            screenProps = _this$props.screenProps,
            headerMode = _this$props.headerMode,
            headerTransitionPreset = _this$props.headerTransitionPreset,
            mode = _this$props.mode,
            router = _this$props.router,
            cardStyle = _this$props.cardStyle,
            transitionConfig = _this$props.transitionConfig;
        return _react2.default.createElement(_CardStack2.default, {
          screenProps: screenProps,
          headerMode: headerMode,
          headerTransitionPreset: headerTransitionPreset,
          mode: mode,
          router: router,
          cardStyle: cardStyle,
          transitionConfig: transitionConfig,
          transitionProps: props,
          prevTransitionProps: prevProps,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 67
          }
        });
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(CardStackTransitioner, [{
      key: "render",
      value: function render() {
        return _react2.default.createElement(_Transitioner2.default, {
          configureTransition: this._configureTransition,
          navigation: this.props.navigation,
          render: this._render,
          onTransitionStart: this.props.onTransitionStart,
          onTransitionEnd: this.props.onTransitionEnd,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 19
          }
        });
      }
    }]);
    return CardStackTransitioner;
  }(_react2.default.Component), _class.defaultProps = {
    mode: 'card'
  }, _temp2);
  exports.default = CardStackTransitioner;
},380,[114,12,381,402,404,401],"node_modules/react-navigation/src/views/CardStack/CardStackTransitioner.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-navigation/src/views/CardStack/CardStack.js";

  var _react = _require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _clamp = _require(_dependencyMap[1], "clamp");

  var _clamp2 = babelHelpers.interopRequireDefault(_clamp);

  var _reactNative = _require(_dependencyMap[2], "react-native");

  var _Card = _require(_dependencyMap[3], "./Card");

  var _Card2 = babelHelpers.interopRequireDefault(_Card);

  var _Header = _require(_dependencyMap[4], "../Header/Header");

  var _Header2 = babelHelpers.interopRequireDefault(_Header);

  var _NavigationActions = _require(_dependencyMap[5], "../../NavigationActions");

  var _NavigationActions2 = babelHelpers.interopRequireDefault(_NavigationActions);

  var _addNavigationHelpers = _require(_dependencyMap[6], "../../addNavigationHelpers");

  var _addNavigationHelpers2 = babelHelpers.interopRequireDefault(_addNavigationHelpers);

  var _getChildEventSubscriber = _require(_dependencyMap[7], "../../getChildEventSubscriber");

  var _getChildEventSubscriber2 = babelHelpers.interopRequireDefault(_getChildEventSubscriber);

  var _SceneView = _require(_dependencyMap[8], "../SceneView");

  var _SceneView2 = babelHelpers.interopRequireDefault(_SceneView);

  var _TransitionConfigs = _require(_dependencyMap[9], "./TransitionConfigs");

  var _TransitionConfigs2 = babelHelpers.interopRequireDefault(_TransitionConfigs);

  var _ReactNativeFeatures = _require(_dependencyMap[10], "../../utils/ReactNativeFeatures");

  var ReactNativeFeatures = babelHelpers.interopRequireWildcard(_ReactNativeFeatures);

  var emptyFunction = function emptyFunction() {};

  var EaseInOut = _reactNative.Easing.inOut(_reactNative.Easing.ease);

  var ANIMATION_DURATION = 500;
  var POSITION_THRESHOLD = 1 / 2;
  var RESPOND_THRESHOLD = 20;
  var GESTURE_RESPONSE_DISTANCE_HORIZONTAL = 25;
  var GESTURE_RESPONSE_DISTANCE_VERTICAL = 135;

  var animatedSubscribeValue = function animatedSubscribeValue(animatedValue) {
    if (!animatedValue.__isNative) {
      return;
    }

    if (Object.keys(animatedValue._listeners).length === 0) {
      animatedValue.addListener(emptyFunction);
    }
  };

  var CardStack = function (_React$Component) {
    babelHelpers.inherits(CardStack, _React$Component);

    function CardStack() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, CardStack);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = CardStack.__proto__ || Object.getPrototypeOf(CardStack)).call.apply(_ref, [this].concat(args))), _this), _this._gestureStartValue = 0, _this._isResponding = false, _this._immediateIndex = null, _this._screenDetails = {}, _this._childEventSubscribers = {}, _this._isRouteFocused = function (route) {
        var state = _this.props.transitionProps.navigation.state;
        var focusedRoute = state.routes[state.index];
        return route === focusedRoute;
      }, _this._getScreenDetails = function (scene) {
        var _this$props = _this.props,
            screenProps = _this$props.screenProps,
            navigation = _this$props.transitionProps.navigation,
            router = _this$props.router;
        var screenDetails = _this._screenDetails[scene.key];

        if (!screenDetails || screenDetails.state !== scene.route) {
          if (!_this._childEventSubscribers[scene.route.key]) {
            _this._childEventSubscribers[scene.route.key] = (0, _getChildEventSubscriber2.default)(navigation.addListener, scene.route.key);
          }

          var screenNavigation = (0, _addNavigationHelpers2.default)({
            dispatch: navigation.dispatch,
            state: scene.route,
            isFocused: function isFocused() {
              return _this._isRouteFocused(scene.route);
            },
            addListener: _this._childEventSubscribers[scene.route.key]
          });
          screenDetails = {
            state: scene.route,
            navigation: screenNavigation,
            options: router.getScreenOptions(screenNavigation, screenProps)
          };
          _this._screenDetails[scene.key] = screenDetails;
        }

        return screenDetails;
      }, _this._getTransitionConfig = function () {
        var isModal = _this.props.mode === 'modal';
        return _TransitionConfigs2.default.getTransitionConfig(_this.props.transitionConfig, _this.props.transitionProps, _this.props.prevTransitionProps, isModal);
      }, _this._renderCard = function (scene) {
        var _this$_getTransitionC = _this._getTransitionConfig(),
            screenInterpolator = _this$_getTransitionC.screenInterpolator;

        var style = screenInterpolator && screenInterpolator(babelHelpers.extends({}, _this.props.transitionProps, {
          scene: scene
        }));

        var SceneComponent = _this.props.router.getComponentForRouteName(scene.route.routeName);

        var _this$props2 = _this.props,
            transitionProps = _this$props2.transitionProps,
            props = babelHelpers.objectWithoutProperties(_this$props2, ["transitionProps"]);
        return _react2.default.createElement(
          _Card2.default,
          babelHelpers.extends({}, props, transitionProps, {
            key: "card_" + scene.key,
            style: [style, _this.props.cardStyle],
            scene: scene,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 498
            }
          }),
          _this._renderInnerScene(SceneComponent, scene)
        );
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(CardStack, [{
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(props) {
        var _this2 = this;

        if (props.screenProps !== this.props.screenProps) {
          this._screenDetails = {};
        }

        props.transitionProps.scenes.forEach(function (newScene) {
          if (_this2._screenDetails[newScene.key] && _this2._screenDetails[newScene.key].state !== newScene.route) {
            _this2._screenDetails[newScene.key] = null;
          }
        });
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate() {
        var _this3 = this;

        var activeKeys = this.props.transitionProps.navigation.state.routes.map(function (route) {
          return route.key;
        });
        Object.keys(this._childEventSubscribers).forEach(function (key) {
          if (!activeKeys.includes(key)) {
            delete _this3._childEventSubscribers[key];
          }
        });
      }
    }, {
      key: "_renderHeader",
      value: function _renderHeader(scene, headerMode) {
        var header = this._getScreenDetails(scene).options.header;

        if (typeof header !== 'undefined' && typeof header !== 'function') {
          return header;
        }

        var renderHeader = header || function (props) {
          return _react2.default.createElement(_Header2.default, babelHelpers.extends({}, props, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 152
            }
          }));
        };

        var _getTransitionConfig = this._getTransitionConfig(),
            headerLeftInterpolator = _getTransitionConfig.headerLeftInterpolator,
            headerTitleInterpolator = _getTransitionConfig.headerTitleInterpolator,
            headerRightInterpolator = _getTransitionConfig.headerRightInterpolator;

        var _props = this.props,
            mode = _props.mode,
            transitionProps = _props.transitionProps,
            prevTransitionProps = _props.prevTransitionProps,
            passProps = babelHelpers.objectWithoutProperties(_props, ["mode", "transitionProps", "prevTransitionProps"]);
        return renderHeader(babelHelpers.extends({}, passProps, transitionProps, {
          scene: scene,
          mode: headerMode,
          transitionPreset: this._getHeaderTransitionPreset(),
          getScreenDetails: this._getScreenDetails,
          leftInterpolator: headerLeftInterpolator,
          titleInterpolator: headerTitleInterpolator,
          rightInterpolator: headerRightInterpolator
        }));
      }
    }, {
      key: "_animatedSubscribe",
      value: function _animatedSubscribe(props) {
        animatedSubscribeValue(props.transitionProps.layout.width);
        animatedSubscribeValue(props.transitionProps.layout.height);
        animatedSubscribeValue(props.transitionProps.position);
      }
    }, {
      key: "_reset",
      value: function _reset(resetToIndex, duration) {
        if (_reactNative.Platform.OS === 'ios' && ReactNativeFeatures.supportsImprovedSpringAnimation()) {
          _reactNative.Animated.spring(this.props.transitionProps.position, {
            toValue: resetToIndex,
            stiffness: 5000,
            damping: 600,
            mass: 3,
            useNativeDriver: this.props.transitionProps.position.__isNative
          }).start();
        } else {
          _reactNative.Animated.timing(this.props.transitionProps.position, {
            toValue: resetToIndex,
            duration: duration,
            easing: EaseInOut,
            useNativeDriver: this.props.transitionProps.position.__isNative
          }).start();
        }
      }
    }, {
      key: "_goBack",
      value: function _goBack(backFromIndex, duration) {
        var _this4 = this;

        var _props$transitionProp = this.props.transitionProps,
            navigation = _props$transitionProp.navigation,
            position = _props$transitionProp.position,
            scenes = _props$transitionProp.scenes;
        var toValue = Math.max(backFromIndex - 1, 0);
        this._immediateIndex = toValue;

        var onCompleteAnimation = function onCompleteAnimation() {
          _this4._immediateIndex = null;
          var backFromScene = scenes.find(function (s) {
            return s.index === toValue + 1;
          });

          if (!_this4._isResponding && backFromScene) {
            navigation.dispatch(_NavigationActions2.default.back({
              key: backFromScene.route.key,
              immediate: true
            }));
          }
        };

        if (_reactNative.Platform.OS === 'ios' && ReactNativeFeatures.supportsImprovedSpringAnimation()) {
          _reactNative.Animated.spring(position, {
            toValue: toValue,
            stiffness: 5000,
            damping: 600,
            mass: 3,
            useNativeDriver: position.__isNative
          }).start(onCompleteAnimation);
        } else {
          _reactNative.Animated.timing(position, {
            toValue: toValue,
            duration: duration,
            easing: EaseInOut,
            useNativeDriver: position.__isNative
          }).start(onCompleteAnimation);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this5 = this;

        var floatingHeader = null;

        var headerMode = this._getHeaderMode();

        if (headerMode === 'float') {
          floatingHeader = this._renderHeader(this.props.transitionProps.scene, headerMode);
        }

        var _props2 = this.props,
            _props2$transitionPro = _props2.transitionProps,
            navigation = _props2$transitionPro.navigation,
            position = _props2$transitionPro.position,
            layout = _props2$transitionPro.layout,
            scene = _props2$transitionPro.scene,
            scenes = _props2$transitionPro.scenes,
            mode = _props2.mode;
        var index = navigation.state.index;
        var isVertical = mode === 'modal';

        var _getScreenDetails = this._getScreenDetails(scene),
            options = _getScreenDetails.options;

        var gestureDirectionInverted = options.gestureDirection === 'inverted';
        var gesturesEnabled = typeof options.gesturesEnabled === 'boolean' ? options.gesturesEnabled : _reactNative.Platform.OS === 'ios';
        var responder = !gesturesEnabled ? null : _reactNative.PanResponder.create({
          onPanResponderTerminate: function onPanResponderTerminate() {
            _this5._isResponding = false;

            _this5._reset(index, 0);
          },
          onPanResponderGrant: function onPanResponderGrant() {
            position.stopAnimation(function (value) {
              _this5._isResponding = true;
              _this5._gestureStartValue = value;
            });
          },
          onMoveShouldSetPanResponder: function onMoveShouldSetPanResponder(event, gesture) {
            if (index !== scene.index) {
              return false;
            }

            var immediateIndex = _this5._immediateIndex == null ? index : _this5._immediateIndex;
            var currentDragDistance = gesture[isVertical ? 'dy' : 'dx'];
            var currentDragPosition = event.nativeEvent[isVertical ? 'pageY' : 'pageX'];
            var axisLength = isVertical ? layout.height.__getValue() : layout.width.__getValue();
            var axisHasBeenMeasured = !!axisLength;
            var screenEdgeDistance = gestureDirectionInverted ? axisLength - (currentDragPosition - currentDragDistance) : currentDragPosition - currentDragDistance;

            var _getScreenDetails$opt = _this5._getScreenDetails(scene).options.gestureResponseDistance,
                userGestureResponseDistance = _getScreenDetails$opt === undefined ? {} : _getScreenDetails$opt;

            var gestureResponseDistance = isVertical ? userGestureResponseDistance.vertical || GESTURE_RESPONSE_DISTANCE_VERTICAL : userGestureResponseDistance.horizontal || GESTURE_RESPONSE_DISTANCE_HORIZONTAL;

            if (screenEdgeDistance > gestureResponseDistance) {
              return false;
            }

            var hasDraggedEnough = Math.abs(currentDragDistance) > RESPOND_THRESHOLD;
            var isOnFirstCard = immediateIndex === 0;
            var shouldSetResponder = hasDraggedEnough && axisHasBeenMeasured && !isOnFirstCard;
            return shouldSetResponder;
          },
          onPanResponderMove: function onPanResponderMove(event, gesture) {
            var startValue = _this5._gestureStartValue;
            var axis = isVertical ? 'dy' : 'dx';
            var axisDistance = isVertical ? layout.height.__getValue() : layout.width.__getValue();
            var currentValue = (_reactNative.I18nManager.isRTL && axis === 'dx') !== gestureDirectionInverted ? startValue + gesture[axis] / axisDistance : startValue - gesture[axis] / axisDistance;
            var value = (0, _clamp2.default)(index - 1, currentValue, index);
            position.setValue(value);
          },
          onPanResponderTerminationRequest: function onPanResponderTerminationRequest() {
            return false;
          },
          onPanResponderRelease: function onPanResponderRelease(event, gesture) {
            if (!_this5._isResponding) {
              return;
            }

            _this5._isResponding = false;
            var immediateIndex = _this5._immediateIndex == null ? index : _this5._immediateIndex;
            var axisDistance = isVertical ? layout.height.__getValue() : layout.width.__getValue();
            var movementDirection = gestureDirectionInverted ? -1 : 1;
            var movedDistance = movementDirection * gesture[isVertical ? 'dy' : 'dx'];
            var gestureVelocity = movementDirection * gesture[isVertical ? 'vy' : 'vx'];
            var defaultVelocity = axisDistance / ANIMATION_DURATION;
            var velocity = Math.max(Math.abs(gestureVelocity), defaultVelocity);
            var resetDuration = gestureDirectionInverted ? (axisDistance - movedDistance) / velocity : movedDistance / velocity;
            var goBackDuration = gestureDirectionInverted ? movedDistance / velocity : (axisDistance - movedDistance) / velocity;
            position.stopAnimation(function (value) {
              if (gestureVelocity < -0.5) {
                _this5._reset(immediateIndex, resetDuration);

                return;
              }

              if (gestureVelocity > 0.5) {
                _this5._goBack(immediateIndex, goBackDuration);

                return;
              }

              if (value <= index - POSITION_THRESHOLD) {
                _this5._goBack(immediateIndex, goBackDuration);
              } else {
                _this5._reset(immediateIndex, resetDuration);
              }
            });
          }
        });
        var handlers = gesturesEnabled ? responder.panHandlers : {};
        var containerStyle = [styles.container, this._getTransitionConfig().containerStyle];
        return _react2.default.createElement(
          _reactNative.View,
          babelHelpers.extends({}, handlers, {
            style: containerStyle,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 413
            }
          }),
          _react2.default.createElement(
            _reactNative.View,
            {
              style: styles.scenes,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 414
              }
            },
            scenes.map(function (s) {
              return _this5._renderCard(s);
            })
          ),
          floatingHeader
        );
      }
    }, {
      key: "_getHeaderMode",
      value: function _getHeaderMode() {
        if (this.props.headerMode) {
          return this.props.headerMode;
        }

        if (_reactNative.Platform.OS === 'android' || this.props.mode === 'modal') {
          return 'screen';
        }

        return 'float';
      }
    }, {
      key: "_getHeaderTransitionPreset",
      value: function _getHeaderTransitionPreset() {
        if (_reactNative.Platform.OS === 'android' || this._getHeaderMode() === 'screen') {
          return 'fade-in-place';
        }

        if (this.props.headerTransitionPreset) {
          return this.props.headerTransitionPreset;
        } else {
          return 'fade-in-place';
        }
      }
    }, {
      key: "_renderInnerScene",
      value: function _renderInnerScene(SceneComponent, scene) {
        var _getScreenDetails2 = this._getScreenDetails(scene),
            navigation = _getScreenDetails2.navigation;

        var screenProps = this.props.screenProps;

        var headerMode = this._getHeaderMode();

        if (headerMode === 'screen') {
          return _react2.default.createElement(
            _reactNative.View,
            {
              style: styles.container,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 453
              }
            },
            _react2.default.createElement(
              _reactNative.View,
              {
                style: {
                  flex: 1
                },
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 454
                }
              },
              _react2.default.createElement(_SceneView2.default, {
                screenProps: screenProps,
                navigation: navigation,
                component: SceneComponent,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 455
                }
              })
            ),
            this._renderHeader(scene, headerMode)
          );
        }

        return _react2.default.createElement(_SceneView2.default, {
          screenProps: this.props.screenProps,
          navigation: navigation,
          component: SceneComponent,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 466
          }
        });
      }
    }]);
    return CardStack;
  }(_react2.default.Component);

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      flexDirection: 'column-reverse'
    },
    scenes: {
      flex: 1
    }
  });

  exports.default = CardStack;
},381,[114,382,12,383,386,374,375,399,400,401,403],"node_modules/react-navigation/src/views/CardStack/CardStack.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = clamp;

  function clamp(value, min, max) {
    return min < max ? value < min ? min : value > max ? max : value : value < max ? max : value > min ? min : value;
  }
},382,[],"node_modules/clamp/index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-navigation/src/views/CardStack/Card.js";

  var _react = _require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1], "react-native");

  var _PointerEventsContainer = _require(_dependencyMap[2], "./PointerEventsContainer");

  var _PointerEventsContainer2 = babelHelpers.interopRequireDefault(_PointerEventsContainer);

  var Card = function (_React$Component) {
    babelHelpers.inherits(Card, _React$Component);

    function Card() {
      babelHelpers.classCallCheck(this, Card);
      return babelHelpers.possibleConstructorReturn(this, (Card.__proto__ || Object.getPrototypeOf(Card)).apply(this, arguments));
    }

    babelHelpers.createClass(Card, [{
      key: "render",
      value: function render() {
        var _props = this.props,
            children = _props.children,
            pointerEvents = _props.pointerEvents,
            style = _props.style;
        return _react2.default.createElement(
          _reactNative.Animated.View,
          {
            pointerEvents: pointerEvents,
            ref: this.props.onComponentRef,
            style: [styles.main, style],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 12
            }
          },
          children
        );
      }
    }]);
    return Card;
  }(_react2.default.Component);

  var styles = _reactNative.StyleSheet.create({
    main: {
      backgroundColor: '#EFEFF4',
      bottom: 0,
      left: 0,
      position: 'absolute',
      right: 0,
      shadowColor: 'black',
      shadowOffset: {
        width: 0,
        height: 0
      },
      shadowOpacity: 0.2,
      shadowRadius: 5,
      top: 0
    }
  });

  Card = (0, _PointerEventsContainer2.default)(Card);
  exports.default = Card;
},383,[114,12,384],"node_modules/react-navigation/src/views/CardStack/Card.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-navigation/src/views/CardStack/PointerEventsContainer.js";
  exports.default = create;

  var _react = _require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _invariant = _require(_dependencyMap[1], "../../utils/invariant");

  var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

  var _AnimatedValueSubscription = _require(_dependencyMap[2], "../AnimatedValueSubscription");

  var _AnimatedValueSubscription2 = babelHelpers.interopRequireDefault(_AnimatedValueSubscription);

  var MIN_POSITION_OFFSET = 0.01;

  function create(Component) {
    var Container = function (_React$Component) {
      babelHelpers.inherits(Container, _React$Component);

      function Container(props, context) {
        babelHelpers.classCallCheck(this, Container);

        var _this = babelHelpers.possibleConstructorReturn(this, (Container.__proto__ || Object.getPrototypeOf(Container)).call(this, props, context));

        _this._pointerEvents = _this._computePointerEvents();
        return _this;
      }

      babelHelpers.createClass(Container, [{
        key: "componentWillMount",
        value: function componentWillMount() {
          this._onPositionChange = this._onPositionChange.bind(this);
          this._onComponentRef = this._onComponentRef.bind(this);
        }
      }, {
        key: "componentDidMount",
        value: function componentDidMount() {
          this._bindPosition(this.props);
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this._positionListener && this._positionListener.remove();
        }
      }, {
        key: "componentWillReceiveProps",
        value: function componentWillReceiveProps(nextProps) {
          this._bindPosition(nextProps);
        }
      }, {
        key: "render",
        value: function render() {
          this._pointerEvents = this._computePointerEvents();
          return _react2.default.createElement(Component, babelHelpers.extends({}, this.props, {
            pointerEvents: this._pointerEvents,
            onComponentRef: this._onComponentRef,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 39
            }
          }));
        }
      }, {
        key: "_onComponentRef",
        value: function _onComponentRef(component) {
          this._component = component;

          if (component) {
            (0, _invariant2.default)(typeof component.setNativeProps === 'function', 'component must implement method `setNativeProps`');
          }
        }
      }, {
        key: "_bindPosition",
        value: function _bindPosition(props) {
          this._positionListener && this._positionListener.remove();
          this._positionListener = new _AnimatedValueSubscription2.default(props.position, this._onPositionChange);
        }
      }, {
        key: "_onPositionChange",
        value: function _onPositionChange() {
          if (this._component) {
            var pointerEvents = this._computePointerEvents();

            if (this._pointerEvents !== pointerEvents) {
              this._pointerEvents = pointerEvents;

              this._component.setNativeProps({
                pointerEvents: pointerEvents
              });
            }
          }
        }
      }, {
        key: "_computePointerEvents",
        value: function _computePointerEvents() {
          var _props = this.props,
              navigation = _props.navigation,
              position = _props.position,
              scene = _props.scene;

          if (scene.isStale || navigation.state.index !== scene.index) {
            return scene.index > navigation.state.index ? 'box-only' : 'none';
          }

          var offset = position.__getAnimatedValue() - navigation.state.index;

          if (Math.abs(offset) > MIN_POSITION_OFFSET) {
            return 'box-only';
          }

          return 'auto';
        }
      }]);
      return Container;
    }(_react2.default.Component);

    return Container;
  }
},384,[114,376,385],"node_modules/react-navigation/src/views/CardStack/PointerEventsContainer.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _reactNative = _require(_dependencyMap[0], "react-native");

  var AnimatedValueSubscription = function () {
    function AnimatedValueSubscription(value, callback) {
      babelHelpers.classCallCheck(this, AnimatedValueSubscription);
      this._value = value;
      this._token = value.addListener(callback);
    }

    babelHelpers.createClass(AnimatedValueSubscription, [{
      key: "remove",
      value: function remove() {
        this._value.removeListener(this._token);
      }
    }]);
    return AnimatedValueSubscription;
  }();

  exports.default = AnimatedValueSubscription;
},385,[12],"node_modules/react-navigation/src/views/AnimatedValueSubscription.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _class,
      _temp2,
      _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-navigation/src/views/Header/Header.js";

  var _react = _require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1], "react-native");

  var _PlatformHelpers = _require(_dependencyMap[2], "../../PlatformHelpers");

  var _reactNativeSafeAreaView = _require(_dependencyMap[3], "react-native-safe-area-view");

  var _reactNativeSafeAreaView2 = babelHelpers.interopRequireDefault(_reactNativeSafeAreaView);

  var _HeaderTitle = _require(_dependencyMap[4], "./HeaderTitle");

  var _HeaderTitle2 = babelHelpers.interopRequireDefault(_HeaderTitle);

  var _HeaderBackButton = _require(_dependencyMap[5], "./HeaderBackButton");

  var _HeaderBackButton2 = babelHelpers.interopRequireDefault(_HeaderBackButton);

  var _ModularHeaderBackButton = _require(_dependencyMap[6], "./ModularHeaderBackButton");

  var _ModularHeaderBackButton2 = babelHelpers.interopRequireDefault(_ModularHeaderBackButton);

  var _HeaderStyleInterpolator = _require(_dependencyMap[7], "./HeaderStyleInterpolator");

  var _HeaderStyleInterpolator2 = babelHelpers.interopRequireDefault(_HeaderStyleInterpolator);

  var _withOrientation = _require(_dependencyMap[8], "../withOrientation");

  var _withOrientation2 = babelHelpers.interopRequireDefault(_withOrientation);

  var APPBAR_HEIGHT = _reactNative.Platform.OS === 'ios' ? 44 : 56;
  var STATUSBAR_HEIGHT = _reactNative.Platform.OS === 'ios' ? 20 : 0;
  var TITLE_OFFSET = _reactNative.Platform.OS === 'ios' ? 70 : 56;

  var getAppBarHeight = function getAppBarHeight(isLandscape) {
    return _reactNative.Platform.OS === 'ios' ? isLandscape && !_reactNative.Platform.isPad ? 32 : 44 : 56;
  };

  var Header = (_temp2 = _class = function (_React$PureComponent) {
    babelHelpers.inherits(Header, _React$PureComponent);

    function Header() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, Header);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = Header.__proto__ || Object.getPrototypeOf(Header)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
        widths: {}
      }, _this._navigateBack = function () {
        requestAnimationFrame(function () {
          _this.props.navigation.goBack(_this.props.scene.route.key);
        });
      }, _this._renderTitleComponent = function (props) {
        var details = _this.props.getScreenDetails(props.scene);

        var headerTitle = details.options.headerTitle;

        if (_react2.default.isValidElement(headerTitle)) {
          return headerTitle;
        }

        var titleString = _this._getHeaderTitleString(props.scene);

        var titleStyle = details.options.headerTitleStyle;
        var color = details.options.headerTintColor;
        var allowFontScaling = details.options.headerTitleAllowFontScaling;
        var onLayoutIOS = _reactNative.Platform.OS === 'ios' ? function (e) {
          _this.setState({
            widths: babelHelpers.extends({}, _this.state.widths, babelHelpers.defineProperty({}, props.scene.key, e.nativeEvent.layout.width))
          });
        } : undefined;
        var RenderedHeaderTitle = headerTitle && typeof headerTitle !== 'string' ? headerTitle : _HeaderTitle2.default;
        return _react2.default.createElement(
          RenderedHeaderTitle,
          {
            onLayout: onLayoutIOS,
            allowFontScaling: allowFontScaling == null ? true : allowFontScaling,
            style: [color ? {
              color: color
            } : null, titleStyle],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 119
            }
          },
          titleString
        );
      }, _this._renderLeftComponent = function (props) {
        var _this$props$getScreen = _this.props.getScreenDetails(props.scene),
            options = _this$props$getScreen.options;

        if (_react2.default.isValidElement(options.headerLeft) || options.headerLeft === null) {
          return options.headerLeft;
        }

        if (props.scene.index === 0) {
          return;
        }

        var backButtonTitle = _this._getBackButtonTitleString(props.scene);

        var truncatedBackButtonTitle = _this._getTruncatedBackButtonTitle(props.scene);

        var width = _this.state.widths[props.scene.key] ? (_this.props.layout.initWidth - _this.state.widths[props.scene.key]) / 2 : undefined;
        var RenderedLeftComponent = options.headerLeft || _HeaderBackButton2.default;
        return _react2.default.createElement(RenderedLeftComponent, {
          onPress: _this._navigateBack,
          pressColorAndroid: options.headerPressColorAndroid,
          tintColor: options.headerTintColor,
          buttonImage: options.headerBackImage,
          title: backButtonTitle,
          truncatedTitle: truncatedBackButtonTitle,
          titleStyle: options.headerBackTitleStyle,
          width: width,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 152
          }
        });
      }, _this._renderModularLeftComponent = function (props, ButtonContainerComponent, LabelContainerComponent) {
        var _this$props$getScreen2 = _this.props.getScreenDetails(props.scene),
            options = _this$props$getScreen2.options;

        var backButtonTitle = _this._getBackButtonTitleString(props.scene);

        var truncatedBackButtonTitle = _this._getTruncatedBackButtonTitle(props.scene);

        var width = _this.state.widths[props.scene.key] ? (_this.props.layout.initWidth - _this.state.widths[props.scene.key]) / 2 : undefined;
        return _react2.default.createElement(_ModularHeaderBackButton2.default, {
          onPress: _this._navigateBack,
          ButtonContainerComponent: ButtonContainerComponent,
          LabelContainerComponent: LabelContainerComponent,
          pressColorAndroid: options.headerPressColorAndroid,
          tintColor: options.headerTintColor,
          buttonImage: options.headerBackImage,
          title: backButtonTitle,
          truncatedTitle: truncatedBackButtonTitle,
          titleStyle: options.headerBackTitleStyle,
          width: width,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 180
          }
        });
      }, _this._renderRightComponent = function (props) {
        var details = _this.props.getScreenDetails(props.scene);

        var headerRight = details.options.headerRight;
        return headerRight || null;
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(Header, [{
      key: "_getHeaderTitleString",
      value: function _getHeaderTitleString(scene) {
        var sceneOptions = this.props.getScreenDetails(scene).options;

        if (typeof sceneOptions.headerTitle === 'string') {
          return sceneOptions.headerTitle;
        }

        return sceneOptions.title;
      }
    }, {
      key: "_getLastScene",
      value: function _getLastScene(scene) {
        return this.props.scenes.find(function (s) {
          return s.index === scene.index - 1;
        });
      }
    }, {
      key: "_getBackButtonTitleString",
      value: function _getBackButtonTitleString(scene) {
        var lastScene = this._getLastScene(scene);

        if (!lastScene) {
          return null;
        }

        var headerBackTitle = this.props.getScreenDetails(lastScene).options.headerBackTitle;

        if (headerBackTitle || headerBackTitle === null) {
          return headerBackTitle;
        }

        return this._getHeaderTitleString(lastScene);
      }
    }, {
      key: "_getTruncatedBackButtonTitle",
      value: function _getTruncatedBackButtonTitle(scene) {
        var lastScene = this._getLastScene(scene);

        if (!lastScene) {
          return null;
        }

        return this.props.getScreenDetails(lastScene).options.headerTruncatedBackTitle;
      }
    }, {
      key: "_renderLeft",
      value: function _renderLeft(props) {
        var _props$getScreenDetai = this.props.getScreenDetails(props.scene),
            options = _props$getScreenDetai.options;

        var transitionPreset = this.props.transitionPreset;

        if (transitionPreset !== 'uikit' || options.headerBackImage || options.headerLeft || options.headerLeft === null) {
          return this._renderSubView(props, 'left', this._renderLeftComponent, this.props.leftInterpolator);
        } else {
          return this._renderModularSubView(props, 'left', this._renderModularLeftComponent, this.props.leftLabelInterpolator, this.props.leftButtonInterpolator);
        }
      }
    }, {
      key: "_renderTitle",
      value: function _renderTitle(props, options) {
        var style = {};
        var transitionPreset = this.props.transitionPreset;

        if (_reactNative.Platform.OS === 'android') {
          if (!options.hasLeftComponent) {
            style.left = 0;
          }

          if (!options.hasRightComponent) {
            style.right = 0;
          }
        } else if (_reactNative.Platform.OS === 'ios' && !options.hasLeftComponent && !options.hasRightComponent) {
          style.left = 0;
          style.right = 0;
        }

        return this._renderSubView(babelHelpers.extends({}, props, {
          style: style
        }), 'title', this._renderTitleComponent, transitionPreset === 'uikit' ? this.props.titleFromLeftInterpolator : this.props.titleInterpolator);
      }
    }, {
      key: "_renderRight",
      value: function _renderRight(props) {
        return this._renderSubView(props, 'right', this._renderRightComponent, this.props.rightInterpolator);
      }
    }, {
      key: "_renderModularSubView",
      value: function _renderModularSubView(props, name, renderer, labelStyleInterpolator, buttonStyleInterpolator) {
        var _this2 = this;

        var scene = props.scene;
        var index = scene.index,
            isStale = scene.isStale,
            key = scene.key;

        if (index === 0) {
          return;
        }

        var offset = this.props.navigation.state.index - index;

        if (Math.abs(offset) > 2) {
          return null;
        }

        var ButtonContainer = function ButtonContainer(_ref2) {
          var children = _ref2.children;
          return _react2.default.createElement(
            _reactNative.Animated.View,
            {
              style: [buttonStyleInterpolator(babelHelpers.extends({}, _this2.props, props))],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 294
              }
            },
            children
          );
        };

        var LabelContainer = function LabelContainer(_ref3) {
          var children = _ref3.children;
          return _react2.default.createElement(
            _reactNative.Animated.View,
            {
              style: [labelStyleInterpolator(babelHelpers.extends({}, _this2.props, props))],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 302
              }
            },
            children
          );
        };

        var subView = renderer(props, ButtonContainer, LabelContainer);

        if (subView === null) {
          return subView;
        }

        var pointerEvents = offset !== 0 || isStale ? 'none' : 'box-none';
        return _react2.default.createElement(
          _reactNative.View,
          {
            key: name + "_" + key,
            pointerEvents: pointerEvents,
            style: [styles.item, styles[name], props.style],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 318
            }
          },
          subView
        );
      }
    }, {
      key: "_renderSubView",
      value: function _renderSubView(props, name, renderer, styleInterpolator) {
        var scene = props.scene;
        var index = scene.index,
            isStale = scene.isStale,
            key = scene.key;
        var offset = this.props.navigation.state.index - index;

        if (Math.abs(offset) > 2) {
          return null;
        }

        var subView = renderer(props);

        if (subView == null) {
          return null;
        }

        var pointerEvents = offset !== 0 || isStale ? 'none' : 'box-none';
        return _react2.default.createElement(
          _reactNative.Animated.View,
          {
            pointerEvents: pointerEvents,
            key: name + "_" + key,
            style: [styles.item, styles[name], props.style, styleInterpolator(babelHelpers.extends({}, this.props, props))],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 349
            }
          },
          subView
        );
      }
    }, {
      key: "_renderHeader",
      value: function _renderHeader(props) {
        var left = this._renderLeft(props);

        var right = this._renderRight(props);

        var title = this._renderTitle(props, {
          hasLeftComponent: !!left,
          hasRightComponent: !!right
        });

        var _props = this.props,
            isLandscape = _props.isLandscape,
            transitionPreset = _props.transitionPreset;

        var _props$getScreenDetai2 = this.props.getScreenDetails(props.scene),
            options = _props$getScreenDetai2.options;

        var wrapperProps = {
          style: styles.header,
          key: "scene_" + props.scene.key
        };

        if (options.headerLeft || options.headerBackImage || _reactNative.Platform.OS !== 'ios' || transitionPreset !== 'uikit') {
          return _react2.default.createElement(
            _reactNative.View,
            babelHelpers.extends({}, wrapperProps, {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 391
              }
            }),
            title,
            left,
            right
          );
        } else {
          return _react2.default.createElement(
            _PlatformHelpers.MaskedViewIOS,
            babelHelpers.extends({}, wrapperProps, {
              maskElement: _react2.default.createElement(
                _reactNative.View,
                {
                  style: styles.iconMaskContainer,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 402
                  }
                },
                _react2.default.createElement(_reactNative.Image, {
                  source: _require(_dependencyMap[9], '../assets/back-icon-mask.png'),
                  style: styles.iconMask,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 403
                  }
                }),
                _react2.default.createElement(_reactNative.View, {
                  style: styles.iconMaskFillerRect,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 407
                  }
                })
              ),
              __source: {
                fileName: _jsxFileName,
                lineNumber: 399
              }
            }),
            title,
            left,
            right
          );
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;

        var appBar = void 0;
        var _props2 = this.props,
            mode = _props2.mode,
            scene = _props2.scene,
            isLandscape = _props2.isLandscape;

        if (mode === 'float') {
          var scenesByIndex = {};
          this.props.scenes.forEach(function (scene) {
            scenesByIndex[scene.index] = scene;
          });
          var scenesProps = Object.values(scenesByIndex).map(function (scene) {
            return {
              position: _this3.props.position,
              progress: _this3.props.progress,
              scene: scene
            };
          });
          appBar = scenesProps.map(this._renderHeader, this);
        } else {
          appBar = this._renderHeader({
            position: new _reactNative.Animated.Value(this.props.scene.index),
            progress: new _reactNative.Animated.Value(0),
            scene: this.props.scene
          });
        }

        var _props$getScreenDetai3 = this.props.getScreenDetails(scene),
            options = _props$getScreenDetai3.options;

        var _options$headerStyle = options.headerStyle,
            headerStyle = _options$headerStyle === undefined ? {} : _options$headerStyle;

        var headerStyleObj = _reactNative.StyleSheet.flatten(headerStyle);

        var appBarHeight = getAppBarHeight(isLandscape);
        var alignItems = headerStyleObj.alignItems,
            justifyContent = headerStyleObj.justifyContent,
            flex = headerStyleObj.flex,
            flexDirection = headerStyleObj.flexDirection,
            flexGrow = headerStyleObj.flexGrow,
            flexShrink = headerStyleObj.flexShrink,
            flexBasis = headerStyleObj.flexBasis,
            flexWrap = headerStyleObj.flexWrap,
            safeHeaderStyle = babelHelpers.objectWithoutProperties(headerStyleObj, ["alignItems", "justifyContent", "flex", "flexDirection", "flexGrow", "flexShrink", "flexBasis", "flexWrap"]);

        if (__DEV__) {
          warnIfHeaderStyleDefined(alignItems, 'alignItems');
          warnIfHeaderStyleDefined(justifyContent, 'justifyContent');
          warnIfHeaderStyleDefined(flex, 'flex');
          warnIfHeaderStyleDefined(flexDirection, 'flexDirection');
          warnIfHeaderStyleDefined(flexGrow, 'flexGrow');
          warnIfHeaderStyleDefined(flexShrink, 'flexShrink');
          warnIfHeaderStyleDefined(flexBasis, 'flexBasis');
          warnIfHeaderStyleDefined(flexWrap, 'flexWrap');
        }

        var containerStyles = [options.headerTransparent ? styles.transparentContainer : styles.container, {
          height: appBarHeight
        }, safeHeaderStyle];
        var headerForceInset = options.headerForceInset;
        var forceInset = headerForceInset || {
          top: 'always',
          bottom: 'never'
        };
        return _react2.default.createElement(
          _reactNativeSafeAreaView2.default,
          {
            forceInset: forceInset,
            style: containerStyles,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 483
            }
          },
          _react2.default.createElement(
            _reactNative.View,
            {
              style: _reactNative.StyleSheet.absoluteFill,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 484
              }
            },
            options.headerBackground
          ),
          _react2.default.createElement(
            _reactNative.View,
            {
              style: {
                flex: 1
              },
              __source: {
                fileName: _jsxFileName,
                lineNumber: 485
              }
            },
            appBar
          )
        );
      }
    }], [{
      key: "HEIGHT",
      get: function get() {
        return APPBAR_HEIGHT + STATUSBAR_HEIGHT;
      }
    }]);
    return Header;
  }(_react2.default.PureComponent), _class.defaultProps = {
    leftInterpolator: _HeaderStyleInterpolator2.default.forLeft,
    leftButtonInterpolator: _HeaderStyleInterpolator2.default.forLeftButton,
    leftLabelInterpolator: _HeaderStyleInterpolator2.default.forLeftLabel,
    titleFromLeftInterpolator: _HeaderStyleInterpolator2.default.forCenterFromLeft,
    titleInterpolator: _HeaderStyleInterpolator2.default.forCenter,
    rightInterpolator: _HeaderStyleInterpolator2.default.forRight
  }, _temp2);

  function warnIfHeaderStyleDefined(value, styleProp) {
    if (value !== undefined) {
      console.warn(styleProp + " was given a value of " + value + ", this has no effect on headerStyle.");
    }
  }

  var platformContainerStyles = void 0;

  if (_reactNative.Platform.OS === 'ios') {
    platformContainerStyles = {
      borderBottomWidth: _reactNative.StyleSheet.hairlineWidth,
      borderBottomColor: '#A7A7AA'
    };
  } else {
    platformContainerStyles = {
      shadowColor: 'black',
      shadowOpacity: 0.1,
      shadowRadius: _reactNative.StyleSheet.hairlineWidth,
      shadowOffset: {
        height: _reactNative.StyleSheet.hairlineWidth
      },
      elevation: 4
    };
  }

  var styles = _reactNative.StyleSheet.create({
    container: babelHelpers.extends({
      backgroundColor: _reactNative.Platform.OS === 'ios' ? '#F7F7F7' : '#FFF'
    }, platformContainerStyles),
    transparentContainer: babelHelpers.extends({
      position: 'absolute',
      top: 0,
      left: 0,
      right: 0
    }, platformContainerStyles),
    header: babelHelpers.extends({}, _reactNative.StyleSheet.absoluteFillObject, {
      flexDirection: 'row'
    }),
    item: {
      backgroundColor: 'transparent'
    },
    iconMaskContainer: {
      flex: 1,
      flexDirection: 'row',
      justifyContent: 'center'
    },
    iconMaskFillerRect: {
      flex: 1,
      backgroundColor: '#d8d8d8',
      marginLeft: -3
    },
    iconMask: {
      height: 21,
      width: 12,
      marginLeft: 9,
      marginTop: -0.5,
      alignSelf: 'center',
      resizeMode: 'contain'
    },
    title: {
      bottom: 0,
      top: 0,
      left: TITLE_OFFSET,
      right: TITLE_OFFSET,
      position: 'absolute',
      alignItems: 'center',
      flexDirection: 'row',
      justifyContent: _reactNative.Platform.OS === 'ios' ? 'center' : 'flex-start'
    },
    left: {
      left: 0,
      bottom: 0,
      top: 0,
      position: 'absolute',
      alignItems: 'center',
      flexDirection: 'row'
    },
    right: {
      right: 0,
      bottom: 0,
      top: 0,
      position: 'absolute',
      flexDirection: 'row',
      alignItems: 'center'
    }
  });

  exports.default = (0, _withOrientation2.default)(Header);
},386,[114,12,373,387,390,391,394,395,397,398],"node_modules/react-navigation/src/views/Header/Header.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _class,
      _temp2,
      _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-native-safe-area-view/index.js";

  var _react = _require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1], "react-native");

  var _withOrientation = _require(_dependencyMap[2], "./withOrientation");

  var _withOrientation2 = babelHelpers.interopRequireDefault(_withOrientation);

  var X_WIDTH = 375;
  var X_HEIGHT = 812;
  var PAD_WIDTH = 768;
  var PAD_HEIGHT = 1024;

  var _Dimensions$get = _reactNative.Dimensions.get('window'),
      D_HEIGHT = _Dimensions$get.height,
      D_WIDTH = _Dimensions$get.width;

  var _NativeModules$Platfo = _reactNative.NativeModules.PlatformConstants,
      PlatformConstants = _NativeModules$Platfo === undefined ? {} : _NativeModules$Platfo;

  var _ref = PlatformConstants.reactNativeVersion || {},
      _ref$minor = _ref.minor,
      minor = _ref$minor === undefined ? 0 : _ref$minor;

  var isIPhoneX = function () {
    if (_reactNative.Platform.OS === 'web') return false;

    if (minor >= 50) {
      return _reactNative.DeviceInfo.isIPhoneX_deprecated;
    }

    return _reactNative.Platform.OS === 'ios' && (D_HEIGHT === X_HEIGHT && D_WIDTH === X_WIDTH || D_HEIGHT === X_WIDTH && D_WIDTH === X_HEIGHT);
  }();

  var isIPad = function () {
    if (_reactNative.Platform.OS !== 'ios' || isIPhoneX) return false;

    if (D_HEIGHT > D_WIDTH && D_WIDTH < PAD_WIDTH) {
      return false;
    }

    if (D_WIDTH > D_HEIGHT && D_HEIGHT < PAD_WIDTH) {
      return false;
    }

    return true;
  }();

  var _customStatusBarHeight = null;

  var statusBarHeight = function statusBarHeight(isLandscape) {
    if (_customStatusBarHeight !== null) {
      return _customStatusBarHeight;
    }

    if (_reactNative.Platform.OS === 'android') {
      if (global.Expo) {
        return global.Expo.Constants.statusBarHeight;
      } else {
        return 0;
      }
    }

    if (isIPhoneX) {
      return isLandscape ? 0 : 44;
    }

    if (isIPad) {
      return 20;
    }

    return isLandscape ? 0 : 20;
  };

  var doubleFromPercentString = function doubleFromPercentString(percent) {
    if (!percent.includes('%')) {
      return 0;
    }

    var dbl = parseFloat(percent) / 100;
    if (isNaN(dbl)) return 0;
    return dbl;
  };

  var SafeView = (_temp2 = _class = function (_Component) {
    babelHelpers.inherits(SafeView, _Component);

    function SafeView() {
      var _ref2;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, SafeView);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref2 = SafeView.__proto__ || Object.getPrototypeOf(SafeView)).call.apply(_ref2, [this].concat(args))), _this), _this.state = {
        touchesTop: true,
        touchesBottom: true,
        touchesLeft: true,
        touchesRight: true,
        orientation: null,
        viewWidth: 0,
        viewHeight: 0
      }, _this._onLayout = function () {
        if (!_this.view) return;
        var isLandscape = _this.props.isLandscape;
        var orientation = _this.state.orientation;
        var newOrientation = isLandscape ? 'landscape' : 'portrait';

        if (orientation && orientation === newOrientation) {
          return;
        }

        var WIDTH = isLandscape ? X_HEIGHT : X_WIDTH;
        var HEIGHT = isLandscape ? X_WIDTH : X_HEIGHT;

        _this.view._component.measureInWindow(function (winX, winY, winWidth, winHeight) {
          var realY = winY;
          var realX = winX;

          if (realY >= HEIGHT) {
            realY = realY % HEIGHT;
          } else if (realY < 0) {
            realY = realY % HEIGHT + HEIGHT;
          }

          if (realX >= WIDTH) {
            realX = realX % WIDTH;
          } else if (realX < 0) {
            realX = realX % WIDTH + WIDTH;
          }

          var touchesTop = realY === 0;
          var touchesBottom = realY + winHeight >= HEIGHT;
          var touchesLeft = realX === 0;
          var touchesRight = realX + winWidth >= WIDTH;

          _this.setState({
            touchesTop: touchesTop,
            touchesBottom: touchesBottom,
            touchesLeft: touchesLeft,
            touchesRight: touchesRight,
            orientation: newOrientation,
            viewWidth: winWidth,
            viewHeight: winHeight
          });
        });
      }, _this._getSafeAreaStyle = function () {
        var _this$state = _this.state,
            touchesTop = _this$state.touchesTop,
            touchesBottom = _this$state.touchesBottom,
            touchesLeft = _this$state.touchesLeft,
            touchesRight = _this$state.touchesRight;
        var _this$props = _this.props,
            forceInset = _this$props.forceInset,
            isLandscape = _this$props.isLandscape;

        var _this$_getViewStyles = _this._getViewStyles(),
            paddingTop = _this$_getViewStyles.paddingTop,
            paddingBottom = _this$_getViewStyles.paddingBottom,
            paddingLeft = _this$_getViewStyles.paddingLeft,
            paddingRight = _this$_getViewStyles.paddingRight,
            viewStyle = _this$_getViewStyles.viewStyle;

        var style = babelHelpers.extends({}, viewStyle, {
          paddingTop: touchesTop ? _this._getInset('top') : 0,
          paddingBottom: touchesBottom ? _this._getInset('bottom') : 0,
          paddingLeft: touchesLeft ? _this._getInset('left') : 0,
          paddingRight: touchesRight ? _this._getInset('right') : 0
        });

        if (forceInset) {
          Object.keys(forceInset).forEach(function (key) {
            var inset = forceInset[key];

            if (inset === 'always') {
              inset = _this._getInset(key);
            }

            if (inset === 'never') {
              inset = 0;
            }

            switch (key) {
              case 'horizontal':
                {
                  style.paddingLeft = inset;
                  style.paddingRight = inset;
                  break;
                }

              case 'vertical':
                {
                  style.paddingTop = inset;
                  style.paddingBottom = inset;
                  break;
                }

              case 'left':
              case 'right':
              case 'top':
              case 'bottom':
                {
                  var padding = "padding" + key[0].toUpperCase() + key.slice(1);
                  style[padding] = inset;
                  break;
                }
            }
          });
        }

        if (style.height && typeof style.height === 'number') {
          style.height += style.paddingTop + style.paddingBottom;
        }

        if (style.width && typeof style.width === 'number') {
          style.width += style.paddingLeft + style.paddingRight;
        }

        style.paddingTop = Math.max(style.paddingTop, paddingTop);
        style.paddingBottom = Math.max(style.paddingBottom, paddingBottom);
        style.paddingLeft = Math.max(style.paddingLeft, paddingLeft);
        style.paddingRight = Math.max(style.paddingRight, paddingRight);
        return style;
      }, _this._getViewStyles = function () {
        var viewWidth = _this.state.viewWidth;

        var _StyleSheet$flatten = _reactNative.StyleSheet.flatten(_this.props.style || {}),
            _StyleSheet$flatten$p = _StyleSheet$flatten.padding,
            padding = _StyleSheet$flatten$p === undefined ? 0 : _StyleSheet$flatten$p,
            _StyleSheet$flatten$p2 = _StyleSheet$flatten.paddingVertical,
            paddingVertical = _StyleSheet$flatten$p2 === undefined ? padding : _StyleSheet$flatten$p2,
            _StyleSheet$flatten$p3 = _StyleSheet$flatten.paddingHorizontal,
            paddingHorizontal = _StyleSheet$flatten$p3 === undefined ? padding : _StyleSheet$flatten$p3,
            _StyleSheet$flatten$p4 = _StyleSheet$flatten.paddingTop,
            paddingTop = _StyleSheet$flatten$p4 === undefined ? paddingVertical : _StyleSheet$flatten$p4,
            _StyleSheet$flatten$p5 = _StyleSheet$flatten.paddingBottom,
            paddingBottom = _StyleSheet$flatten$p5 === undefined ? paddingVertical : _StyleSheet$flatten$p5,
            _StyleSheet$flatten$p6 = _StyleSheet$flatten.paddingLeft,
            paddingLeft = _StyleSheet$flatten$p6 === undefined ? paddingHorizontal : _StyleSheet$flatten$p6,
            _StyleSheet$flatten$p7 = _StyleSheet$flatten.paddingRight,
            paddingRight = _StyleSheet$flatten$p7 === undefined ? paddingHorizontal : _StyleSheet$flatten$p7,
            viewStyle = babelHelpers.objectWithoutProperties(_StyleSheet$flatten, ["padding", "paddingVertical", "paddingHorizontal", "paddingTop", "paddingBottom", "paddingLeft", "paddingRight"]);

        if (typeof paddingTop !== 'number') {
          paddingTop = doubleFromPercentString(paddingTop) * viewWidth;
        }

        if (typeof paddingBottom !== 'number') {
          paddingBottom = doubleFromPercentString(paddingBottom) * viewWidth;
        }

        if (typeof paddingLeft !== 'number') {
          paddingLeft = doubleFromPercentString(paddingLeft) * viewWidth;
        }

        if (typeof paddingRight !== 'number') {
          paddingRight = doubleFromPercentString(paddingRight) * viewWidth;
        }

        return {
          paddingTop: paddingTop,
          paddingBottom: paddingBottom,
          paddingLeft: paddingLeft,
          paddingRight: paddingRight,
          viewStyle: viewStyle
        };
      }, _this._getInset = function (key) {
        var isLandscape = _this.props.isLandscape;

        switch (key) {
          case 'horizontal':
          case 'right':
          case 'left':
            {
              return isLandscape ? isIPhoneX ? 44 : 0 : 0;
            }

          case 'vertical':
          case 'top':
            {
              return statusBarHeight(isLandscape);
            }

          case 'bottom':
            {
              return isIPhoneX ? isLandscape ? 24 : 34 : 0;
            }
        }
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(SafeView, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;

        _reactNative.InteractionManager.runAfterInteractions(function () {
          _this2._onLayout();
        });
      }
    }, {
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps() {
        this._onLayout();
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;

        var _props = this.props,
            _props$forceInset = _props.forceInset,
            forceInset = _props$forceInset === undefined ? false : _props$forceInset,
            isLandscape = _props.isLandscape,
            children = _props.children,
            style = _props.style;

        var safeAreaStyle = this._getSafeAreaStyle();

        return _react2.default.createElement(
          _reactNative.Animated.View,
          {
            ref: function ref(c) {
              return _this3.view = c;
            },
            onLayout: this._onLayout,
            style: safeAreaStyle,
            pointerEvents: "box-none",
            __source: {
              fileName: _jsxFileName,
              lineNumber: 128
            }
          },
          this.props.children
        );
      }
    }]);
    return SafeView;
  }(_react.Component), _class.setStatusBarHeight = function (height) {
    _customStatusBarHeight = height;
  }, _temp2);
  exports.default = (0, _withOrientation2.default)(SafeView);
},387,[114,12,388],"node_modules/react-native-safe-area-view/index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.isOrientationLandscape = undefined;
  var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-native-safe-area-view/withOrientation.js";

  exports.default = function (WrappedComponent) {
    var _class, _temp, _initialiseProps;

    var withOrientation = (_temp = _class = function (_React$Component) {
      babelHelpers.inherits(withOrientation, _React$Component);

      function withOrientation() {
        babelHelpers.classCallCheck(this, withOrientation);

        var _this = babelHelpers.possibleConstructorReturn(this, (withOrientation.__proto__ || Object.getPrototypeOf(withOrientation)).call(this));

        _initialiseProps.call(_this);

        var isLandscape = isOrientationLandscape(_reactNative.Dimensions.get('window'));
        _this.state = {
          isLandscape: isLandscape
        };
        return _this;
      }

      babelHelpers.createClass(withOrientation, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          _reactNative.Dimensions.addEventListener('change', this.handleOrientationChange);
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          _reactNative.Dimensions.removeEventListener('change', this.handleOrientationChange);
        }
      }, {
        key: "render",
        value: function render() {
          return React.createElement(WrappedComponent, babelHelpers.extends({}, this.props, this.state, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 50
            }
          }));
        }
      }]);
      return withOrientation;
    }(React.Component), _initialiseProps = function _initialiseProps() {
      var _this2 = this;

      this.handleOrientationChange = function (_ref2) {
        var window = _ref2.window;
        var isLandscape = isOrientationLandscape(window);

        _this2.setState({
          isLandscape: isLandscape
        });
      };
    }, _temp);
    return (0, _hoistNonReactStatics2.default)(withOrientation, WrappedComponent);
  };

  var _react = _require(_dependencyMap[0], "react");

  var React = babelHelpers.interopRequireWildcard(_react);

  var _reactNative = _require(_dependencyMap[1], "react-native");

  var _hoistNonReactStatics = _require(_dependencyMap[2], "hoist-non-react-statics");

  var _hoistNonReactStatics2 = babelHelpers.interopRequireDefault(_hoistNonReactStatics);

  var isOrientationLandscape = exports.isOrientationLandscape = function isOrientationLandscape(_ref) {
    var width = _ref.width,
        height = _ref.height;
    return width > height;
  };
},388,[114,12,389],"node_modules/react-native-safe-area-view/withOrientation.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    (function (global, factory) {
        typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.hoistNonReactStatics = factory();
    })(this, function () {
        'use strict';

        var REACT_STATICS = {
            childContextTypes: true,
            contextTypes: true,
            defaultProps: true,
            displayName: true,
            getDefaultProps: true,
            getDerivedStateFromProps: true,
            mixins: true,
            propTypes: true,
            type: true
        };
        var KNOWN_STATICS = {
            name: true,
            length: true,
            prototype: true,
            caller: true,
            callee: true,
            arguments: true,
            arity: true
        };
        var defineProperty = Object.defineProperty;
        var getOwnPropertyNames = Object.getOwnPropertyNames;
        var getOwnPropertySymbols = Object.getOwnPropertySymbols;
        var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
        var getPrototypeOf = Object.getPrototypeOf;
        var objectPrototype = getPrototypeOf && getPrototypeOf(Object);
        return function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
            if (typeof sourceComponent !== 'string') {
                if (objectPrototype) {
                    var inheritedComponent = getPrototypeOf(sourceComponent);

                    if (inheritedComponent && inheritedComponent !== objectPrototype) {
                        hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
                    }
                }

                var keys = getOwnPropertyNames(sourceComponent);

                if (getOwnPropertySymbols) {
                    keys = keys.concat(getOwnPropertySymbols(sourceComponent));
                }

                for (var i = 0; i < keys.length; ++i) {
                    var key = keys[i];

                    if (!REACT_STATICS[key] && !KNOWN_STATICS[key] && (!blacklist || !blacklist[key])) {
                        var descriptor = getOwnPropertyDescriptor(sourceComponent, key);

                        try {
                            defineProperty(targetComponent, key, descriptor);
                        } catch (e) {}
                    }
                }

                return targetComponent;
            }

            return targetComponent;
        };
    });
},389,[],"node_modules/hoist-non-react-statics/index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-navigation/src/views/Header/HeaderTitle.js";

  var _react = _require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1], "react-native");

  var AnimatedText = _reactNative.Animated.Text;

  var HeaderTitle = function HeaderTitle(_ref) {
    var style = _ref.style,
        rest = babelHelpers.objectWithoutProperties(_ref, ["style"]);
    return _react2.default.createElement(AnimatedText, babelHelpers.extends({
      numberOfLines: 1
    }, rest, {
      style: [styles.title, style],
      accessibilityTraits: "header",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 7
      }
    }));
  };

  var styles = _reactNative.StyleSheet.create({
    title: {
      fontSize: _reactNative.Platform.OS === 'ios' ? 17 : 20,
      fontWeight: _reactNative.Platform.OS === 'ios' ? '700' : '500',
      color: 'rgba(0, 0, 0, .9)',
      textAlign: _reactNative.Platform.OS === 'ios' ? 'center' : 'left',
      marginHorizontal: 16
    }
  });

  exports.default = HeaderTitle;
},390,[114,12],"node_modules/react-navigation/src/views/Header/HeaderTitle.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _class,
      _temp2,
      _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-navigation/src/views/Header/HeaderBackButton.js";

  var _react = _require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1], "react-native");

  var _TouchableItem = _require(_dependencyMap[2], "../TouchableItem");

  var _TouchableItem2 = babelHelpers.interopRequireDefault(_TouchableItem);

  var HeaderBackButton = (_temp2 = _class = function (_React$PureComponent) {
    babelHelpers.inherits(HeaderBackButton, _React$PureComponent);

    function HeaderBackButton() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, HeaderBackButton);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = HeaderBackButton.__proto__ || Object.getPrototypeOf(HeaderBackButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {}, _this._onTextLayout = function (e) {
        if (_this.state.initialTextWidth) {
          return;
        }

        _this.setState({
          initialTextWidth: e.nativeEvent.layout.x + e.nativeEvent.layout.width
        });
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(HeaderBackButton, [{
      key: "render",
      value: function render() {
        var _props = this.props,
            buttonImage = _props.buttonImage,
            onPress = _props.onPress,
            pressColorAndroid = _props.pressColorAndroid,
            width = _props.width,
            title = _props.title,
            titleStyle = _props.titleStyle,
            tintColor = _props.tintColor,
            truncatedTitle = _props.truncatedTitle;
        var renderTruncated = this.state.initialTextWidth && width ? this.state.initialTextWidth > width : false;
        var backButtonTitle = renderTruncated ? truncatedTitle : title;
        return _react2.default.createElement(
          _TouchableItem2.default,
          {
            accessibilityComponentType: "button",
            accessibilityLabel: backButtonTitle,
            accessibilityTraits: "button",
            testID: "header-back",
            delayPressIn: 0,
            onPress: onPress,
            pressColor: pressColorAndroid,
            style: styles.container,
            borderless: true,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 55
            }
          },
          _react2.default.createElement(
            _reactNative.View,
            {
              style: styles.container,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 66
              }
            },
            _react2.default.createElement(_reactNative.Image, {
              style: [styles.icon, !!title && styles.iconWithTitle, !!tintColor && {
                tintColor: tintColor
              }],
              source: buttonImage,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 67
              }
            }),
            _reactNative.Platform.OS === 'ios' && typeof backButtonTitle === 'string' && _react2.default.createElement(
              _reactNative.Text,
              {
                onLayout: this._onTextLayout,
                style: [styles.title, !!tintColor && {
                  color: tintColor
                }, titleStyle],
                numberOfLines: 1,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 77
                }
              },
              backButtonTitle
            )
          )
        );
      }
    }]);
    return HeaderBackButton;
  }(_react2.default.PureComponent), _class.defaultProps = {
    pressColorAndroid: 'rgba(0, 0, 0, .32)',
    tintColor: _reactNative.Platform.select({
      ios: '#037aff'
    }),
    truncatedTitle: 'Back',
    buttonImage: _require(_dependencyMap[3], '../assets/back-icon.png')
  }, _temp2);

  var styles = _reactNative.StyleSheet.create({
    container: {
      alignItems: 'center',
      flexDirection: 'row',
      backgroundColor: 'transparent'
    },
    title: {
      fontSize: 17,
      paddingRight: 10
    },
    icon: _reactNative.Platform.OS === 'ios' ? {
      height: 21,
      width: 13,
      marginLeft: 9,
      marginRight: 22,
      marginVertical: 12,
      resizeMode: 'contain',
      transform: [{
        scaleX: _reactNative.I18nManager.isRTL ? -1 : 1
      }]
    } : {
      height: 24,
      width: 24,
      margin: 16,
      resizeMode: 'contain',
      transform: [{
        scaleX: _reactNative.I18nManager.isRTL ? -1 : 1
      }]
    },
    iconWithTitle: _reactNative.Platform.OS === 'ios' ? {
      marginRight: 6
    } : {}
  });

  exports.default = HeaderBackButton;
},391,[114,12,392,393],"node_modules/react-navigation/src/views/Header/HeaderBackButton.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _class,
      _temp,
      _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-navigation/src/views/TouchableItem.js";

  var _react = _require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1], "react-native");

  var ANDROID_VERSION_LOLLIPOP = 21;
  var TouchableItem = (_temp = _class = function (_React$Component) {
    babelHelpers.inherits(TouchableItem, _React$Component);

    function TouchableItem() {
      babelHelpers.classCallCheck(this, TouchableItem);
      return babelHelpers.possibleConstructorReturn(this, (TouchableItem.__proto__ || Object.getPrototypeOf(TouchableItem)).apply(this, arguments));
    }

    babelHelpers.createClass(TouchableItem, [{
      key: "render",
      value: function render() {
        if (_reactNative.Platform.OS === 'android' && _reactNative.Platform.Version >= ANDROID_VERSION_LOLLIPOP) {
          var _props = this.props,
              style = _props.style,
              rest = babelHelpers.objectWithoutProperties(_props, ["style"]);
          return _react2.default.createElement(
            _reactNative.TouchableNativeFeedback,
            babelHelpers.extends({}, rest, {
              style: null,
              background: _reactNative.TouchableNativeFeedback.Ripple(this.props.pressColor, this.props.borderless),
              __source: {
                fileName: _jsxFileName,
                lineNumber: 41
              }
            }),
            _react2.default.createElement(
              _reactNative.View,
              {
                style: style,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 49
                }
              },
              _react2.default.Children.only(this.props.children)
            )
          );
        }

        return _react2.default.createElement(
          _reactNative.TouchableOpacity,
          babelHelpers.extends({}, this.props, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 55
            }
          }),
          this.props.children
        );
      }
    }]);
    return TouchableItem;
  }(_react2.default.Component), _class.defaultProps = {
    borderless: false,
    pressColor: 'rgba(0, 0, 0, .32)'
  }, _temp);
  exports.default = TouchableItem;
},392,[114,12],"node_modules/react-navigation/src/views/TouchableItem.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = _require(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/node_modules/react-navigation/src/views/assets",
    "width": 12,
    "height": 21,
    "scales": [1, 1.5, 2, 3, 4],
    "hash": "955cfb5df91f57a3406ad257d9efe4eb",
    "name": "back-icon",
    "type": "png"
  });
},393,[175],"node_modules/react-navigation/src/views/assets/back-icon.png");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _class,
      _temp2,
      _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-navigation/src/views/Header/ModularHeaderBackButton.js";

  var _react = _require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1], "react-native");

  var _TouchableItem = _require(_dependencyMap[2], "../TouchableItem");

  var _TouchableItem2 = babelHelpers.interopRequireDefault(_TouchableItem);

  var ModularHeaderBackButton = (_temp2 = _class = function (_React$PureComponent) {
    babelHelpers.inherits(ModularHeaderBackButton, _React$PureComponent);

    function ModularHeaderBackButton() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, ModularHeaderBackButton);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = ModularHeaderBackButton.__proto__ || Object.getPrototypeOf(ModularHeaderBackButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {}, _this._onTextLayout = function (e) {
        if (_this.state.initialTextWidth) {
          return;
        }

        _this.setState({
          initialTextWidth: e.nativeEvent.layout.x + e.nativeEvent.layout.width
        });
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(ModularHeaderBackButton, [{
      key: "render",
      value: function render() {
        var _props = this.props,
            buttonImage = _props.buttonImage,
            onPress = _props.onPress,
            width = _props.width,
            title = _props.title,
            titleStyle = _props.titleStyle,
            tintColor = _props.tintColor,
            truncatedTitle = _props.truncatedTitle;
        var renderTruncated = this.state.initialTextWidth && width ? this.state.initialTextWidth > width : false;
        var backButtonTitle = renderTruncated ? truncatedTitle : title;

        if (backButtonTitle && backButtonTitle.length > 8) {
          backButtonTitle = truncatedTitle;
        }

        var _props2 = this.props,
            ButtonContainerComponent = _props2.ButtonContainerComponent,
            LabelContainerComponent = _props2.LabelContainerComponent;
        return _react2.default.createElement(
          _TouchableItem2.default,
          {
            accessibilityComponentType: "button",
            accessibilityLabel: backButtonTitle,
            accessibilityTraits: "button",
            testID: "header-back",
            delayPressIn: 0,
            onPress: onPress,
            style: styles.container,
            borderless: true,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 52
            }
          },
          _react2.default.createElement(
            _reactNative.View,
            {
              style: styles.container,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 62
              }
            },
            _react2.default.createElement(
              ButtonContainerComponent,
              {
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 63
                }
              },
              _react2.default.createElement(_reactNative.Image, {
                style: [styles.icon, !!title && styles.iconWithTitle, !!tintColor && {
                  tintColor: tintColor
                }],
                source: buttonImage,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 64
                }
              })
            ),
            typeof backButtonTitle === 'string' && _react2.default.createElement(
              LabelContainerComponent,
              {
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 74
                }
              },
              _react2.default.createElement(
                _reactNative.Text,
                {
                  onLayout: this._onTextLayout,
                  style: [styles.title, !!tintColor && {
                    color: tintColor
                  }, titleStyle],
                  numberOfLines: 1,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 75
                  }
                },
                backButtonTitle
              )
            )
          )
        );
      }
    }]);
    return ModularHeaderBackButton;
  }(_react2.default.PureComponent), _class.defaultProps = {
    tintColor: '#037aff',
    truncatedTitle: 'Back',
    buttonImage: _require(_dependencyMap[3], '../assets/back-icon.png')
  }, _temp2);

  var styles = _reactNative.StyleSheet.create({
    container: {
      alignItems: 'center',
      flexDirection: 'row',
      backgroundColor: 'transparent'
    },
    title: {
      fontSize: 17,
      paddingRight: 10
    },
    icon: {
      height: 21,
      width: 12,
      marginLeft: 9,
      marginRight: 22,
      marginVertical: 12,
      resizeMode: 'contain',
      transform: [{
        scaleX: _reactNative.I18nManager.isRTL ? -1 : 1
      }]
    },
    iconWithTitle: {
      marginRight: 3
    }
  });

  exports.default = ModularHeaderBackButton;
},394,[114,12,392,393],"node_modules/react-navigation/src/views/Header/ModularHeaderBackButton.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNative = _require(_dependencyMap[0], "react-native");

  var _getSceneIndicesForInterpolationInputRange = _require(_dependencyMap[1], "../../utils/getSceneIndicesForInterpolationInputRange");

  var _getSceneIndicesForInterpolationInputRange2 = babelHelpers.interopRequireDefault(_getSceneIndicesForInterpolationInputRange);

  var crossFadeInterpolation = function crossFadeInterpolation(first, index, last) {
    return {
      inputRange: [first, index - 0.9, index - 0.2, index, last],
      outputRange: [0, 0, 0.3, 1, 0]
    };
  };

  function forLeft(props) {
    var position = props.position,
        scene = props.scene,
        scenes = props.scenes;
    var interpolate = (0, _getSceneIndicesForInterpolationInputRange2.default)(props);
    if (!interpolate) return {
      opacity: 0
    };
    var first = interpolate.first,
        last = interpolate.last;
    var index = scene.index;
    return {
      opacity: position.interpolate(crossFadeInterpolation(first, index, last))
    };
  }

  function forCenter(props) {
    var position = props.position,
        scene = props.scene;
    var interpolate = (0, _getSceneIndicesForInterpolationInputRange2.default)(props);
    if (!interpolate) return {
      opacity: 0
    };
    var first = interpolate.first,
        last = interpolate.last;
    var index = scene.index;
    return {
      opacity: position.interpolate(crossFadeInterpolation(first, index, last))
    };
  }

  function forRight(props) {
    var position = props.position,
        scene = props.scene;
    var interpolate = (0, _getSceneIndicesForInterpolationInputRange2.default)(props);
    if (!interpolate) return {
      opacity: 0
    };
    var first = interpolate.first,
        last = interpolate.last;
    var index = scene.index;
    return {
      opacity: position.interpolate(crossFadeInterpolation(first, index, last))
    };
  }

  function forLeftButton(props) {
    var position = props.position,
        scene = props.scene,
        scenes = props.scenes;
    var interpolate = (0, _getSceneIndicesForInterpolationInputRange2.default)(props);
    if (!interpolate) return {
      opacity: 0
    };
    var first = interpolate.first,
        last = interpolate.last;
    var index = scene.index;
    return {
      opacity: position.interpolate({
        inputRange: [first, first + Math.abs(index - first) / 2, index, last - Math.abs(last - index) / 2, last],
        outputRange: [0, 0.5, 1, 0.5, 0]
      })
    };
  }

  var LEFT_LABEL_OFFSET = _reactNative.Dimensions.get('window').width / 2 - 70 - 25;

  function forLeftLabel(props) {
    var position = props.position,
        scene = props.scene,
        scenes = props.scenes;
    var interpolate = (0, _getSceneIndicesForInterpolationInputRange2.default)(props);
    if (!interpolate) return {
      opacity: 0
    };
    var first = interpolate.first,
        last = interpolate.last;
    var index = scene.index;
    var offset = LEFT_LABEL_OFFSET;
    return {
      opacity: position.interpolate({
        inputRange: [first, index - 0.35, index, index + 0.5, last],
        outputRange: [0, 0, 1, 0.5, 0]
      }),
      transform: [{
        translateX: position.interpolate({
          inputRange: [first, index, last],
          outputRange: _reactNative.I18nManager.isRTL ? [-offset, 0, offset] : [offset, 0, -offset * 1.5]
        })
      }]
    };
  }

  var TITLE_OFFSET_IOS = _reactNative.Dimensions.get('window').width / 2 - 70 + 25;

  function forCenterFromLeft(props) {
    var position = props.position,
        scene = props.scene;
    var interpolate = (0, _getSceneIndicesForInterpolationInputRange2.default)(props);
    if (!interpolate) return {
      opacity: 0
    };
    var first = interpolate.first,
        last = interpolate.last;
    var index = scene.index;
    var inputRange = [first, index - 0.5, index, index + 0.5, last];
    var offset = TITLE_OFFSET_IOS;
    return {
      opacity: position.interpolate({
        inputRange: [first, index - 0.5, index, index + 0.7, last],
        outputRange: [0, 0, 1, 0, 0]
      }),
      transform: [{
        translateX: position.interpolate({
          inputRange: [first, index, last],
          outputRange: _reactNative.I18nManager.isRTL ? [-offset, 0, offset] : [offset, 0, -offset]
        })
      }]
    };
  }

  exports.default = {
    forLeft: forLeft,
    forLeftButton: forLeftButton,
    forLeftLabel: forLeftLabel,
    forCenterFromLeft: forCenterFromLeft,
    forCenter: forCenter,
    forRight: forRight
  };
},395,[12,396],"node_modules/react-navigation/src/views/Header/HeaderStyleInterpolator.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  function getSceneIndicesForInterpolationInputRange(props) {
    var scene = props.scene,
        scenes = props.scenes;
    var index = scene.index;
    var lastSceneIndexInScenes = scenes.length - 1;
    var isBack = !scenes[lastSceneIndexInScenes].isActive;

    if (isBack) {
      var currentSceneIndexInScenes = scenes.findIndex(function (item) {
        return item === scene;
      });
      var targetSceneIndexInScenes = scenes.findIndex(function (item) {
        return item.isActive;
      });
      var targetSceneIndex = scenes[targetSceneIndexInScenes].index;
      var lastSceneIndex = scenes[lastSceneIndexInScenes].index;

      if (index !== targetSceneIndex && currentSceneIndexInScenes === lastSceneIndexInScenes) {
        return {
          first: Math.min(targetSceneIndex, index - 1),
          last: index + 1
        };
      } else if (index === targetSceneIndex && currentSceneIndexInScenes === targetSceneIndexInScenes) {
        return {
          first: index - 1,
          last: Math.max(lastSceneIndex, index + 1)
        };
      } else if (index === targetSceneIndex || currentSceneIndexInScenes > targetSceneIndexInScenes) {
        return null;
      } else {
        return {
          first: index - 1,
          last: index + 1
        };
      }
    } else {
      return {
        first: index - 1,
        last: index + 1
      };
    }
  }

  exports.default = getSceneIndicesForInterpolationInputRange;
},396,[],"node_modules/react-navigation/src/utils/getSceneIndicesForInterpolationInputRange.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.isOrientationLandscape = undefined;
  var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-navigation/src/views/withOrientation.js";

  exports.default = function (WrappedComponent) {
    var _class, _temp, _initialiseProps;

    var withOrientation = (_temp = _class = function (_React$Component) {
      babelHelpers.inherits(withOrientation, _React$Component);

      function withOrientation() {
        babelHelpers.classCallCheck(this, withOrientation);

        var _this = babelHelpers.possibleConstructorReturn(this, (withOrientation.__proto__ || Object.getPrototypeOf(withOrientation)).call(this));

        _initialiseProps.call(_this);

        var isLandscape = isOrientationLandscape(_reactNative.Dimensions.get('window'));
        _this.state = {
          isLandscape: isLandscape
        };
        return _this;
      }

      babelHelpers.createClass(withOrientation, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          _reactNative.Dimensions.addEventListener('change', this.handleOrientationChange);
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          _reactNative.Dimensions.removeEventListener('change', this.handleOrientationChange);
        }
      }, {
        key: "render",
        value: function render() {
          return _react2.default.createElement(WrappedComponent, babelHelpers.extends({}, this.props, this.state, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 30
            }
          }));
        }
      }]);
      return withOrientation;
    }(_react2.default.Component), _initialiseProps = function _initialiseProps() {
      var _this2 = this;

      this.handleOrientationChange = function (_ref2) {
        var window = _ref2.window;
        var isLandscape = isOrientationLandscape(window);

        _this2.setState({
          isLandscape: isLandscape
        });
      };
    }, _temp);
    return (0, _hoistNonReactStatics2.default)(withOrientation, WrappedComponent);
  };

  var _react = _require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1], "react-native");

  var _hoistNonReactStatics = _require(_dependencyMap[2], "hoist-non-react-statics");

  var _hoistNonReactStatics2 = babelHelpers.interopRequireDefault(_hoistNonReactStatics);

  var isOrientationLandscape = exports.isOrientationLandscape = function isOrientationLandscape(_ref) {
    var width = _ref.width,
        height = _ref.height;
    return width > height;
  };
},397,[114,12,389],"node_modules/react-navigation/src/views/withOrientation.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = _require(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/node_modules/react-navigation/src/views/assets",
    "width": 48,
    "height": 82,
    "scales": [1],
    "hash": "1c7339b1dcf76fbc66536a0728963705",
    "name": "back-icon-mask",
    "type": "png"
  });
},398,[175],"node_modules/react-navigation/src/views/assets/back-icon-mask.png");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = getChildEventSubscriber;

  function getChildEventSubscriber(addListener, key) {
    var actionSubscribers = new Set();
    var willFocusSubscribers = new Set();
    var didFocusSubscribers = new Set();
    var willBlurSubscribers = new Set();
    var didBlurSubscribers = new Set();

    var getChildSubscribers = function getChildSubscribers(evtName) {
      switch (evtName) {
        case 'action':
          return actionSubscribers;

        case 'willFocus':
          return willFocusSubscribers;

        case 'didFocus':
          return didFocusSubscribers;

        case 'willBlur':
          return willBlurSubscribers;

        case 'didBlur':
          return didBlurSubscribers;

        default:
          return null;
      }
    };

    var emit = function emit(type, payload) {
      var payloadWithType = babelHelpers.extends({}, payload, {
        type: type
      });
      var subscribers = getChildSubscribers(type);
      subscribers && subscribers.forEach(function (subs) {
        subs(payloadWithType);
      });
    };

    var lastEmittedEvent = 'didBlur';

    var cleanup = function cleanup() {
      upstreamSubscribers.forEach(function (subs) {
        return subs && subs.remove();
      });
    };

    var upstreamEvents = ['willFocus', 'didFocus', 'willBlur', 'didBlur', 'action'];
    var upstreamSubscribers = upstreamEvents.map(function (eventName) {
      return addListener(eventName, function (payload) {
        var state = payload.state,
            lastState = payload.lastState,
            action = payload.action;
        var lastRoutes = lastState && lastState.routes;
        var routes = state && state.routes;
        var lastFocusKey = lastState && lastState.routes && lastState.routes[lastState.index].key;
        var focusKey = routes && routes[state.index].key;
        var isChildFocused = focusKey === key;
        var lastRoute = lastRoutes && lastRoutes.find(function (route) {
          return route.key === key;
        });
        var newRoute = routes && routes.find(function (route) {
          return route.key === key;
        });
        var childPayload = {
          context: key + ":" + action.type + "_" + (payload.context || 'Root'),
          state: newRoute,
          lastState: lastRoute,
          action: action,
          type: eventName
        };
        var isTransitioning = !!state && state.isTransitioning;
        var previouslyLastEmittedEvent = lastEmittedEvent;

        if (lastEmittedEvent === 'didBlur') {
          if (eventName === 'willFocus' && isChildFocused) {
            emit(lastEmittedEvent = 'willFocus', childPayload);
          } else if (eventName === 'action' && isChildFocused) {
            emit(lastEmittedEvent = 'willFocus', childPayload);
          }
        }

        if (lastEmittedEvent === 'willFocus') {
          if (eventName === 'didFocus' && isChildFocused && !isTransitioning) {
            emit(lastEmittedEvent = 'didFocus', childPayload);
          } else if (eventName === 'action' && isChildFocused && !isTransitioning) {
            emit(lastEmittedEvent = 'didFocus', childPayload);
          }
        }

        if (lastEmittedEvent === 'didFocus') {
          if (!isChildFocused) {
            emit(lastEmittedEvent = 'willBlur', childPayload);
          } else if (eventName === 'willBlur') {
            emit(lastEmittedEvent = 'willBlur', childPayload);
          } else if (eventName === 'action' && previouslyLastEmittedEvent === 'didFocus') {
            emit('action', childPayload);
          }
        }

        if (lastEmittedEvent === 'willBlur') {
          if (eventName === 'action' && !isChildFocused && !isTransitioning) {
            emit(lastEmittedEvent = 'didBlur', childPayload);
          } else if (eventName === 'didBlur') {
            emit(lastEmittedEvent = 'didBlur', childPayload);
          }
        }
      });
    });
    return function (eventName, eventHandler) {
      var subscribers = getChildSubscribers(eventName);

      if (!subscribers) {
        throw new Error("Invalid event name \"" + eventName + "\"");
      }

      subscribers.add(eventHandler);

      var remove = function remove() {
        subscribers.delete(eventHandler);
      };

      return {
        remove: remove
      };
    };
  }
},399,[],"node_modules/react-navigation/src/getChildEventSubscriber.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _class,
      _temp,
      _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-navigation/src/views/SceneView.js";

  var _react = _require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _propTypes = _require(_dependencyMap[1], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var SceneView = (_temp = _class = function (_React$PureComponent) {
    babelHelpers.inherits(SceneView, _React$PureComponent);

    function SceneView() {
      babelHelpers.classCallCheck(this, SceneView);
      return babelHelpers.possibleConstructorReturn(this, (SceneView.__proto__ || Object.getPrototypeOf(SceneView)).apply(this, arguments));
    }

    babelHelpers.createClass(SceneView, [{
      key: "getChildContext",
      value: function getChildContext() {
        return {
          navigation: this.props.navigation
        };
      }
    }, {
      key: "render",
      value: function render() {
        var _props = this.props,
            screenProps = _props.screenProps,
            navigation = _props.navigation,
            Component = _props.component;
        return _react2.default.createElement(Component, {
          screenProps: screenProps,
          navigation: navigation,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 17
          }
        });
      }
    }]);
    return SceneView;
  }(_react2.default.PureComponent), _class.childContextTypes = {
    navigation: _propTypes2.default.object.isRequired
  }, _temp);
  exports.default = SceneView;
},400,[114,141],"node_modules/react-navigation/src/views/SceneView.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNative = _require(_dependencyMap[0], "react-native");

  var _CardStackStyleInterpolator = _require(_dependencyMap[1], "./CardStackStyleInterpolator");

  var _CardStackStyleInterpolator2 = babelHelpers.interopRequireDefault(_CardStackStyleInterpolator);

  var _ReactNativeFeatures = _require(_dependencyMap[2], "../../utils/ReactNativeFeatures");

  var ReactNativeFeatures = babelHelpers.interopRequireWildcard(_ReactNativeFeatures);
  var IOSTransitionSpec = void 0;

  if (ReactNativeFeatures.supportsImprovedSpringAnimation()) {
    IOSTransitionSpec = {
      timing: _reactNative.Animated.spring,
      stiffness: 1000,
      damping: 500,
      mass: 3
    };
  } else {
    IOSTransitionSpec = {
      duration: 500,
      easing: _reactNative.Easing.bezier(0.2833, 0.99, 0.31833, 0.99),
      timing: _reactNative.Animated.timing
    };
  }

  var SlideFromRightIOS = {
    transitionSpec: IOSTransitionSpec,
    screenInterpolator: _CardStackStyleInterpolator2.default.forHorizontal,
    containerStyle: {
      backgroundColor: '#000'
    }
  };
  var ModalSlideFromBottomIOS = {
    transitionSpec: IOSTransitionSpec,
    screenInterpolator: _CardStackStyleInterpolator2.default.forVertical,
    containerStyle: {
      backgroundColor: '#000'
    }
  };
  var FadeInFromBottomAndroid = {
    transitionSpec: {
      duration: 350,
      easing: _reactNative.Easing.out(_reactNative.Easing.poly(5)),
      timing: _reactNative.Animated.timing
    },
    screenInterpolator: _CardStackStyleInterpolator2.default.forFadeFromBottomAndroid
  };
  var FadeOutToBottomAndroid = {
    transitionSpec: {
      duration: 230,
      easing: _reactNative.Easing.in(_reactNative.Easing.poly(4)),
      timing: _reactNative.Animated.timing
    },
    screenInterpolator: _CardStackStyleInterpolator2.default.forFadeFromBottomAndroid
  };

  function defaultTransitionConfig(transitionProps, prevTransitionProps, isModal) {
    if (_reactNative.Platform.OS === 'android') {
      if (prevTransitionProps && transitionProps.index < prevTransitionProps.index) {
        return FadeOutToBottomAndroid;
      }

      return FadeInFromBottomAndroid;
    }

    if (isModal) {
      return ModalSlideFromBottomIOS;
    }

    return SlideFromRightIOS;
  }

  function getTransitionConfig(transitionConfigurer, transitionProps, prevTransitionProps, isModal) {
    var defaultConfig = defaultTransitionConfig(transitionProps, prevTransitionProps, isModal);

    if (transitionConfigurer) {
      return babelHelpers.extends({}, defaultConfig, transitionConfigurer(transitionProps, prevTransitionProps, isModal));
    }

    return defaultConfig;
  }

  exports.default = {
    defaultTransitionConfig: defaultTransitionConfig,
    getTransitionConfig: getTransitionConfig
  };
},401,[12,402,403],"node_modules/react-navigation/src/views/CardStack/TransitionConfigs.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNative = _require(_dependencyMap[0], "react-native");

  var _getSceneIndicesForInterpolationInputRange = _require(_dependencyMap[1], "../../utils/getSceneIndicesForInterpolationInputRange");

  var _getSceneIndicesForInterpolationInputRange2 = babelHelpers.interopRequireDefault(_getSceneIndicesForInterpolationInputRange);

  function forInitial(props) {
    var navigation = props.navigation,
        scene = props.scene;
    var focused = navigation.state.index === scene.index;
    var opacity = focused ? 1 : 0;
    var translate = focused ? 0 : 1000000;
    return {
      opacity: opacity,
      transform: [{
        translateX: translate
      }, {
        translateY: translate
      }]
    };
  }

  function forHorizontal(props) {
    var layout = props.layout,
        position = props.position,
        scene = props.scene;

    if (!layout.isMeasured) {
      return forInitial(props);
    }

    var interpolate = (0, _getSceneIndicesForInterpolationInputRange2.default)(props);
    if (!interpolate) return {
      opacity: 0
    };
    var first = interpolate.first,
        last = interpolate.last;
    var index = scene.index;
    var opacity = position.interpolate({
      inputRange: [first, first + 0.01, index, last - 0.01, last],
      outputRange: [0, 1, 1, 0.85, 0]
    });
    var width = layout.initWidth;
    var translateX = position.interpolate({
      inputRange: [first, index, last],
      outputRange: _reactNative.I18nManager.isRTL ? [-width, 0, width * 0.3] : [width, 0, width * -0.3]
    });
    var translateY = 0;
    return {
      opacity: opacity,
      transform: [{
        translateX: translateX
      }, {
        translateY: translateY
      }]
    };
  }

  function forVertical(props) {
    var layout = props.layout,
        position = props.position,
        scene = props.scene;

    if (!layout.isMeasured) {
      return forInitial(props);
    }

    var interpolate = (0, _getSceneIndicesForInterpolationInputRange2.default)(props);
    if (!interpolate) return {
      opacity: 0
    };
    var first = interpolate.first,
        last = interpolate.last;
    var index = scene.index;
    var opacity = position.interpolate({
      inputRange: [first, first + 0.01, index, last - 0.01, last],
      outputRange: [0, 1, 1, 0.85, 0]
    });
    var height = layout.initHeight;
    var translateY = position.interpolate({
      inputRange: [first, index, last],
      outputRange: [height, 0, 0]
    });
    var translateX = 0;
    return {
      opacity: opacity,
      transform: [{
        translateX: translateX
      }, {
        translateY: translateY
      }]
    };
  }

  function forFadeFromBottomAndroid(props) {
    var layout = props.layout,
        position = props.position,
        scene = props.scene;

    if (!layout.isMeasured) {
      return forInitial(props);
    }

    var interpolate = (0, _getSceneIndicesForInterpolationInputRange2.default)(props);
    if (!interpolate) return {
      opacity: 0
    };
    var first = interpolate.first,
        last = interpolate.last;
    var index = scene.index;
    var inputRange = [first, index, last - 0.01, last];
    var opacity = position.interpolate({
      inputRange: inputRange,
      outputRange: [0, 1, 1, 0]
    });
    var translateY = position.interpolate({
      inputRange: inputRange,
      outputRange: [50, 0, 0, 0]
    });
    var translateX = 0;
    return {
      opacity: opacity,
      transform: [{
        translateX: translateX
      }, {
        translateY: translateY
      }]
    };
  }

  function forFade(props) {
    var layout = props.layout,
        position = props.position,
        scene = props.scene;

    if (!layout.isMeasured) {
      return forInitial(props);
    }

    var interpolate = (0, _getSceneIndicesForInterpolationInputRange2.default)(props);
    if (!interpolate) return {
      opacity: 0
    };
    var first = interpolate.first,
        last = interpolate.last;
    var index = scene.index;
    var opacity = position.interpolate({
      inputRange: [first, index, last],
      outputRange: [0, 1, 1]
    });
    return {
      opacity: opacity
    };
  }

  function canUseNativeDriver() {
    return true;
  }

  exports.default = {
    forHorizontal: forHorizontal,
    forVertical: forVertical,
    forFadeFromBottomAndroid: forFadeFromBottomAndroid,
    forFade: forFade,
    canUseNativeDriver: canUseNativeDriver
  };
},402,[12,396],"node_modules/react-navigation/src/views/CardStack/CardStackStyleInterpolator.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.supportsImprovedSpringAnimation = undefined;

  var _reactNative = _require(_dependencyMap[0], "react-native");

  var PlatformConstants = _reactNative.NativeModules.PlatformConstants;

  var supportsImprovedSpringAnimation = exports.supportsImprovedSpringAnimation = function supportsImprovedSpringAnimation() {
    if (PlatformConstants && PlatformConstants.reactNativeVersion) {
      var _PlatformConstants$re = PlatformConstants.reactNativeVersion,
          major = _PlatformConstants$re.major,
          minor = _PlatformConstants$re.minor;
      return minor >= 50 || major === 0 && minor === 0;
    }

    return false;
  };
},403,[12],"node_modules/react-navigation/src/utils/ReactNativeFeatures.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-navigation/src/views/Transitioner.js";

  var _react = _require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1], "react-native");

  var _invariant = _require(_dependencyMap[2], "../utils/invariant");

  var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

  var _ScenesReducer = _require(_dependencyMap[3], "./ScenesReducer");

  var _ScenesReducer2 = babelHelpers.interopRequireDefault(_ScenesReducer);

  var DefaultTransitionSpec = {
    duration: 250,
    easing: _reactNative.Easing.inOut(_reactNative.Easing.ease),
    timing: _reactNative.Animated.timing
  };

  var Transitioner = function (_React$Component) {
    babelHelpers.inherits(Transitioner, _React$Component);

    function Transitioner(props, context) {
      babelHelpers.classCallCheck(this, Transitioner);

      var _this = babelHelpers.possibleConstructorReturn(this, (Transitioner.__proto__ || Object.getPrototypeOf(Transitioner)).call(this, props, context));

      var layout = {
        height: new _reactNative.Animated.Value(0),
        initHeight: 0,
        initWidth: 0,
        isMeasured: false,
        width: new _reactNative.Animated.Value(0)
      };
      _this.state = {
        layout: layout,
        position: new _reactNative.Animated.Value(_this.props.navigation.state.index),
        progress: new _reactNative.Animated.Value(1),
        scenes: (0, _ScenesReducer2.default)([], _this.props.navigation.state)
      };
      _this._prevTransitionProps = null;
      _this._transitionProps = buildTransitionProps(props, _this.state);
      _this._isMounted = false;
      _this._isTransitionRunning = false;
      _this._queuedTransition = null;
      return _this;
    }

    babelHelpers.createClass(Transitioner, [{
      key: "componentWillMount",
      value: function componentWillMount() {
        this._onLayout = this._onLayout.bind(this);
        this._onTransitionEnd = this._onTransitionEnd.bind(this);
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        this._isMounted = true;
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this._isMounted = false;
      }
    }, {
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(nextProps) {
        var nextScenes = (0, _ScenesReducer2.default)(this.state.scenes, nextProps.navigation.state, this.props.navigation.state);

        if (nextScenes === this.state.scenes) {
          return;
        }

        var indexHasChanged = nextProps.navigation.state.index !== this.props.navigation.state.index;

        if (this._isTransitionRunning) {
          this._queuedTransition = {
            nextProps: nextProps,
            nextScenes: nextScenes,
            indexHasChanged: indexHasChanged
          };
          return;
        }

        this._startTransition(nextProps, nextScenes, indexHasChanged);
      }
    }, {
      key: "_startTransition",
      value: function _startTransition(nextProps, nextScenes, indexHasChanged) {
        var _this2 = this;

        var nextState = babelHelpers.extends({}, this.state, {
          scenes: nextScenes
        });
        var position = nextState.position,
            progress = nextState.progress;
        progress.setValue(0);
        this._prevTransitionProps = this._transitionProps;
        this._transitionProps = buildTransitionProps(nextProps, nextState);
        var transitionUserSpec = nextProps.configureTransition ? nextProps.configureTransition(this._transitionProps, this._prevTransitionProps) : null;
        var transitionSpec = babelHelpers.extends({}, DefaultTransitionSpec, transitionUserSpec);
        var timing = transitionSpec.timing;
        delete transitionSpec.timing;
        var toValue = nextProps.navigation.state.index;
        var positionHasChanged = position.__getValue() !== toValue;
        var animations = indexHasChanged && positionHasChanged ? [timing(progress, babelHelpers.extends({}, transitionSpec, {
          toValue: 1
        })), timing(position, babelHelpers.extends({}, transitionSpec, {
          toValue: nextProps.navigation.state.index
        }))] : [];
        this._isTransitionRunning = true;
        this.setState(nextState, function _callee() {
          var result;
          return regeneratorRuntime.async(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  if (!nextProps.onTransitionStart) {
                    _context.next = 5;
                    break;
                  }

                  result = nextProps.onTransitionStart(_this2._transitionProps, _this2._prevTransitionProps);

                  if (!(result instanceof Promise)) {
                    _context.next = 5;
                    break;
                  }

                  _context.next = 5;
                  return regeneratorRuntime.awrap(result);

                case 5:
                  _reactNative.Animated.parallel(animations).start(_this2._onTransitionEnd);

                case 6:
                case "end":
                  return _context.stop();
              }
            }
          }, null, _this2);
        });
      }
    }, {
      key: "render",
      value: function render() {
        return _react2.default.createElement(
          _reactNative.View,
          {
            onLayout: this._onLayout,
            style: [styles.main],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 142
            }
          },
          this.props.render(this._transitionProps, this._prevTransitionProps)
        );
      }
    }, {
      key: "_onLayout",
      value: function _onLayout(event) {
        var _event$nativeEvent$la = event.nativeEvent.layout,
            height = _event$nativeEvent$la.height,
            width = _event$nativeEvent$la.width;

        if (this.state.layout.initWidth === width && this.state.layout.initHeight === height) {
          return;
        }

        var layout = babelHelpers.extends({}, this.state.layout, {
          initHeight: height,
          initWidth: width,
          isMeasured: true
        });
        layout.height.setValue(height);
        layout.width.setValue(width);
        var nextState = babelHelpers.extends({}, this.state, {
          layout: layout
        });
        this._transitionProps = buildTransitionProps(this.props, nextState);
        this.setState(nextState);
      }
    }, {
      key: "_onTransitionEnd",
      value: function _onTransitionEnd() {
        var _this3 = this;

        if (!this._isMounted) {
          return;
        }

        var prevTransitionProps = this._prevTransitionProps;
        this._prevTransitionProps = null;
        var scenes = this.state.scenes.filter(isSceneNotStale);
        var nextState = babelHelpers.extends({}, this.state, {
          scenes: this.state.scenes.length === scenes.length ? this.state.scenes : scenes
        });
        this._transitionProps = buildTransitionProps(this.props, nextState);
        this.setState(nextState, function _callee2() {
          var result;
          return regeneratorRuntime.async(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  if (!_this3.props.onTransitionEnd) {
                    _context2.next = 5;
                    break;
                  }

                  result = _this3.props.onTransitionEnd(_this3._transitionProps, prevTransitionProps);

                  if (!(result instanceof Promise)) {
                    _context2.next = 5;
                    break;
                  }

                  _context2.next = 5;
                  return regeneratorRuntime.awrap(result);

                case 5:
                  if (_this3._queuedTransition) {
                    _this3._startTransition(_this3._queuedTransition.nextProps, _this3._queuedTransition.nextScenes, _this3._queuedTransition.indexHasChanged);

                    _this3._queuedTransition = null;
                  } else {
                    _this3._isTransitionRunning = false;
                  }

                case 6:
                case "end":
                  return _context2.stop();
              }
            }
          }, null, _this3);
        });
      }
    }]);
    return Transitioner;
  }(_react2.default.Component);

  function buildTransitionProps(props, state) {
    var navigation = props.navigation;
    var layout = state.layout,
        position = state.position,
        progress = state.progress,
        scenes = state.scenes;
    var scene = scenes.find(isSceneActive);
    (0, _invariant2.default)(scene, 'Could not find active scene');
    return {
      layout: layout,
      navigation: navigation,
      position: position,
      progress: progress,
      scenes: scenes,
      scene: scene,
      index: scene.index
    };
  }

  function isSceneNotStale(scene) {
    return !scene.isStale;
  }

  function isSceneActive(scene) {
    return scene.isActive;
  }

  var styles = _reactNative.StyleSheet.create({
    main: {
      flex: 1
    }
  });

  exports.default = Transitioner;
},404,[114,12,376,405],"node_modules/react-navigation/src/views/Transitioner.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = ScenesReducer;

  var _invariant = _require(_dependencyMap[0], "../utils/invariant");

  var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

  var _shallowEqual = _require(_dependencyMap[1], "../utils/shallowEqual");

  var _shallowEqual2 = babelHelpers.interopRequireDefault(_shallowEqual);

  var SCENE_KEY_PREFIX = 'scene_';

  function compareKey(one, two) {
    var delta = one.length - two.length;

    if (delta > 0) {
      return 1;
    }

    if (delta < 0) {
      return -1;
    }

    return one > two ? 1 : -1;
  }

  function compareScenes(one, two) {
    if (one.index > two.index) {
      return 1;
    }

    if (one.index < two.index) {
      return -1;
    }

    return compareKey(one.key, two.key);
  }

  function areScenesShallowEqual(one, two) {
    return one.key === two.key && one.index === two.index && one.isStale === two.isStale && one.isActive === two.isActive && areRoutesShallowEqual(one.route, two.route);
  }

  function areRoutesShallowEqual(one, two) {
    if (!one || !two) {
      return one === two;
    }

    if (one.key !== two.key) {
      return false;
    }

    return (0, _shallowEqual2.default)(one, two);
  }

  function ScenesReducer(scenes, nextState, prevState) {
    if (prevState === nextState) {
      return scenes;
    }

    var prevScenes = new Map();
    var freshScenes = new Map();
    var staleScenes = new Map();
    scenes.forEach(function (scene) {
      var key = scene.key;

      if (scene.isStale) {
        staleScenes.set(key, scene);
      }

      prevScenes.set(key, scene);
    });
    var nextKeys = new Set();
    nextState.routes.forEach(function (route, index) {
      var key = SCENE_KEY_PREFIX + route.key;
      var scene = {
        index: index,
        isActive: false,
        isStale: false,
        key: key,
        route: route
      };
      (0, _invariant2.default)(!nextKeys.has(key), "navigation.state.routes[" + index + "].key \"" + key + "\" conflicts with " + 'another route!');
      nextKeys.add(key);

      if (staleScenes.has(key)) {
        staleScenes.delete(key);
      }

      freshScenes.set(key, scene);
    });

    if (prevState) {
      prevState.routes.forEach(function (route, index) {
        var key = SCENE_KEY_PREFIX + route.key;

        if (freshScenes.has(key)) {
          return;
        }

        staleScenes.set(key, {
          index: index,
          isActive: false,
          isStale: true,
          key: key,
          route: route
        });
      });
    }

    var nextScenes = [];

    var mergeScene = function mergeScene(nextScene) {
      var key = nextScene.key;
      var prevScene = prevScenes.has(key) ? prevScenes.get(key) : null;

      if (prevScene && areScenesShallowEqual(prevScene, nextScene)) {
        nextScenes.push(prevScene);
      } else {
        nextScenes.push(nextScene);
      }
    };

    staleScenes.forEach(mergeScene);
    freshScenes.forEach(mergeScene);
    nextScenes.sort(compareScenes);
    var activeScenesCount = 0;
    nextScenes.forEach(function (scene, ii) {
      var isActive = !scene.isStale && scene.index === nextState.index;

      if (isActive !== scene.isActive) {
        nextScenes[ii] = babelHelpers.extends({}, scene, {
          isActive: isActive
        });
      }

      if (isActive) {
        activeScenesCount++;
      }
    });
    (0, _invariant2.default)(activeScenesCount === 1, 'there should always be only one scene active, not %s.', activeScenesCount);

    if (nextScenes.length !== scenes.length) {
      return nextScenes;
    }

    if (nextScenes.some(function (scene, index) {
      return !areScenesShallowEqual(scenes[index], scene);
    })) {
      return nextScenes;
    }

    return scenes;
  }
},405,[376,406],"node_modules/react-navigation/src/views/ScenesReducer.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var hasOwnProperty = Object.prototype.hasOwnProperty;

  function is(x, y) {
    if (x === y) {
      return x !== 0 || y !== 0 || 1 / x === 1 / y;
    } else {
      return x !== x && y !== y;
    }
  }

  function shallowEqual(objA, objB) {
    if (is(objA, objB)) {
      return true;
    }

    if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
      return false;
    }

    var keysA = Object.keys(objA);
    var keysB = Object.keys(objB);

    if (keysA.length !== keysB.length) {
      return false;
    }

    for (var i = 0; i < keysA.length; i++) {
      if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
        return false;
      }
    }

    return true;
  }

  module.exports = shallowEqual;
},406,[],"node_modules/react-navigation/src/utils/shallowEqual.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _pathToRegexp = _require(_dependencyMap[0], "path-to-regexp");

  var _pathToRegexp2 = babelHelpers.interopRequireDefault(_pathToRegexp);

  var _NavigationActions = _require(_dependencyMap[1], "../NavigationActions");

  var _NavigationActions2 = babelHelpers.interopRequireDefault(_NavigationActions);

  var _createConfigGetter = _require(_dependencyMap[2], "./createConfigGetter");

  var _createConfigGetter2 = babelHelpers.interopRequireDefault(_createConfigGetter);

  var _getScreenForRouteName = _require(_dependencyMap[3], "./getScreenForRouteName");

  var _getScreenForRouteName2 = babelHelpers.interopRequireDefault(_getScreenForRouteName);

  var _StateUtils = _require(_dependencyMap[4], "../StateUtils");

  var _StateUtils2 = babelHelpers.interopRequireDefault(_StateUtils);

  var _validateRouteConfigMap = _require(_dependencyMap[5], "./validateRouteConfigMap");

  var _validateRouteConfigMap2 = babelHelpers.interopRequireDefault(_validateRouteConfigMap);

  var _getScreenConfigDeprecated = _require(_dependencyMap[6], "./getScreenConfigDeprecated");

  var _getScreenConfigDeprecated2 = babelHelpers.interopRequireDefault(_getScreenConfigDeprecated);

  var _invariant = _require(_dependencyMap[7], "../utils/invariant");

  var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

  var _KeyGenerator = _require(_dependencyMap[8], "./KeyGenerator");

  function isEmpty(obj) {
    if (!obj) return true;

    for (var key in obj) {
      return false;
    }

    return true;
  }

  function behavesLikePushAction(action) {
    return action.type === _NavigationActions2.default.NAVIGATE || action.type === _NavigationActions2.default.PUSH;
  }

  exports.default = function (routeConfigs) {
    var stackConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    (0, _validateRouteConfigMap2.default)(routeConfigs);
    var childRouters = {};
    var routeNames = Object.keys(routeConfigs);
    routeNames.forEach(function (routeName) {
      var screen = (0, _getScreenForRouteName2.default)(routeConfigs, routeName);

      if (screen && screen.router) {
        childRouters[routeName] = screen.router;
      } else {
        childRouters[routeName] = null;
      }
    });
    var initialRouteParams = stackConfig.initialRouteParams;
    var initialRouteName = stackConfig.initialRouteName || routeNames[0];
    var initialChildRouter = childRouters[initialRouteName];
    var pathsByRouteNames = babelHelpers.extends({}, stackConfig.paths) || {};
    var paths = [];

    function getInitialState(action) {
      var route = {};
      var childRouter = childRouters[action.routeName];

      if (behavesLikePushAction(action) && childRouter !== undefined) {
        var childState = {};

        if (childRouter !== null) {
          var childAction = action.action || _NavigationActions2.default.init({
            params: action.params
          });

          childState = childRouter.getStateForAction(childAction);
        }

        return {
          key: 'StackRouterRoot',
          isTransitioning: false,
          index: 0,
          routes: [babelHelpers.extends({
            params: action.params
          }, childState, {
            key: action.key || (0, _KeyGenerator.generateKey)(),
            routeName: action.routeName
          })]
        };
      }

      if (initialChildRouter) {
        route = initialChildRouter.getStateForAction(_NavigationActions2.default.navigate({
          routeName: initialRouteName,
          params: initialRouteParams
        }));
      }

      var params = (route.params || action.params || initialRouteParams) && babelHelpers.extends({}, route.params || {}, action.params || {}, initialRouteParams || {});
      var initialRouteKey = stackConfig.initialRouteKey;
      route = babelHelpers.extends({}, route, params ? {
        params: params
      } : {}, {
        routeName: initialRouteName,
        key: action.key || initialRouteKey || (0, _KeyGenerator.generateKey)()
      });
      return {
        key: 'StackRouterRoot',
        isTransitioning: false,
        index: 0,
        routes: [route]
      };
    }

    routeNames.forEach(function (routeName) {
      var pathPattern = pathsByRouteNames[routeName] || routeConfigs[routeName].path;
      var matchExact = !!pathPattern && !childRouters[routeName];

      if (pathPattern === undefined) {
        pathPattern = routeName;
      }

      var keys = [];
      var re = void 0,
          toPath = void 0,
          priority = void 0;

      if (typeof pathPattern === 'string') {
        re = (0, _pathToRegexp2.default)(pathPattern, keys);
        toPath = _pathToRegexp2.default.compile(pathPattern);
        priority = 0;
      } else {
        re = (0, _pathToRegexp2.default)('*', keys);

        toPath = function toPath() {
          return '';
        };

        matchExact = true;
        priority = -1;
      }

      if (!matchExact) {
        var wildcardRe = (0, _pathToRegexp2.default)(pathPattern + "/*", keys);
        re = new RegExp("(?:" + re.source + ")|(?:" + wildcardRe.source + ")");
      }

      pathsByRouteNames[routeName] = {
        re: re,
        keys: keys,
        toPath: toPath,
        priority: priority
      };
    });
    paths = Object.entries(pathsByRouteNames);
    paths.sort(function (a, b) {
      return b[1].priority - a[1].priority;
    });
    return {
      getComponentForState: function getComponentForState(state) {
        var activeChildRoute = state.routes[state.index];
        var routeName = activeChildRoute.routeName;

        if (childRouters[routeName]) {
          return childRouters[routeName].getComponentForState(activeChildRoute);
        }

        return (0, _getScreenForRouteName2.default)(routeConfigs, routeName);
      },
      getComponentForRouteName: function getComponentForRouteName(routeName) {
        return (0, _getScreenForRouteName2.default)(routeConfigs, routeName);
      },
      getStateForAction: function getStateForAction(action, state) {
        if (!state) {
          return getInitialState(action);
        }

        if (action.type !== _NavigationActions2.default.RESET || action.key !== null) {
          var keyIndex = action.key ? _StateUtils2.default.indexOf(state, action.key) : -1;
          var childIndex = keyIndex >= 0 ? keyIndex : state.index;
          var childRoute = state.routes[childIndex];
          (0, _invariant2.default)(childRoute, "StateUtils erroneously thought index " + childIndex + " exists");
          var childRouter = childRouters[childRoute.routeName];

          if (childRouter) {
            var route = childRouter.getStateForAction(action, childRoute);

            if (route === null) {
              return state;
            }

            if (route && route !== childRoute) {
              return _StateUtils2.default.replaceAt(state, childRoute.key, route);
            }
          }
        }

        if (behavesLikePushAction(action) && childRouters[action.routeName] !== undefined) {
          var _childRouter = childRouters[action.routeName];

          var _route = void 0;

          (0, _invariant2.default)(action.type !== _NavigationActions2.default.PUSH || action.key == null, 'StackRouter does not support key on the push action');

          if (action.key) {
            var lastRouteIndex = state.routes.findIndex(function (r) {
              return r.key === action.key;
            });

            if (lastRouteIndex !== -1) {
              if (state.index === lastRouteIndex && !action.params) {
                return state;
              }

              var routes = state.routes.slice(0, lastRouteIndex + 1);

              if (action.params) {
                var _route2 = state.routes.find(function (r) {
                  return r.key === action.key;
                });

                routes[lastRouteIndex] = babelHelpers.extends({}, _route2, {
                  params: babelHelpers.extends({}, _route2.params, action.params)
                });
              }

              return babelHelpers.extends({}, state, {
                isTransitioning: state.index !== lastRouteIndex ? action.immediate !== true : undefined,
                index: lastRouteIndex,
                routes: routes
              });
            }
          }

          if (_childRouter) {
            var childAction = action.action || _NavigationActions2.default.init({
              params: action.params
            });

            _route = babelHelpers.extends({
              params: action.params
            }, _childRouter.getStateForAction(childAction), {
              routeName: action.routeName,
              key: action.key || (0, _KeyGenerator.generateKey)()
            });
          } else {
            _route = {
              params: action.params,
              routeName: action.routeName,
              key: action.key || (0, _KeyGenerator.generateKey)()
            };
          }

          return babelHelpers.extends({}, _StateUtils2.default.push(state, _route), {
            isTransitioning: action.immediate !== true
          });
        } else if (action.type === _NavigationActions2.default.PUSH && childRouters[action.routeName] === undefined) {
          return babelHelpers.extends({}, state);
        }

        if (behavesLikePushAction(action)) {
          var childRouterNames = Object.keys(childRouters);

          for (var i = 0; i < childRouterNames.length; i++) {
            var childRouterName = childRouterNames[i];
            var _childRouter2 = childRouters[childRouterName];

            if (_childRouter2) {
              var initChildRoute = _childRouter2.getStateForAction(_NavigationActions2.default.init());

              var navigatedChildRoute = _childRouter2.getStateForAction(action, initChildRoute);

              var routeToPush = null;

              if (navigatedChildRoute === null) {
                routeToPush = initChildRoute;
              } else if (navigatedChildRoute !== initChildRoute) {
                routeToPush = navigatedChildRoute;
              }

              if (routeToPush) {
                var _route3 = babelHelpers.extends({}, routeToPush, {
                  routeName: childRouterName,
                  key: action.key || (0, _KeyGenerator.generateKey)()
                });

                return _StateUtils2.default.push(state, _route3);
              }
            }
          }
        }

        if (action.type === _NavigationActions2.default.POP_TO_TOP) {
          if (action.key && state.key !== action.key) {
            return state;
          }

          if (state.index === 0) {
            return babelHelpers.extends({}, state);
          } else {
            return babelHelpers.extends({}, state, {
              isTransitioning: action.immediate !== true,
              index: 0,
              routes: [state.routes[0]]
            });
          }

          return state;
        }

        if (action.type === _NavigationActions2.default.REPLACE) {
          var routeIndex = state.routes.findIndex(function (r) {
            return r.key === action.key;
          });

          if (routeIndex !== -1) {
            var _childRouter3 = childRouters[action.routeName];
            var childState = {};

            if (_childRouter3) {
              var _childAction = action.action || _NavigationActions2.default.init({
                params: action.params
              });

              childState = _childRouter3.getStateForAction(_childAction);
            }

            var _routes = [].concat(babelHelpers.toConsumableArray(state.routes));

            _routes[routeIndex] = babelHelpers.extends({
              params: action.params
            }, childState, {
              routeName: action.routeName,
              key: action.newKey || (0, _KeyGenerator.generateKey)()
            });
            return babelHelpers.extends({}, state, {
              routes: _routes
            });
          }
        }

        if (action.type === _NavigationActions2.default.COMPLETE_TRANSITION && (action.key == null || action.key === state.key) && state.isTransitioning) {
          return babelHelpers.extends({}, state, {
            isTransitioning: false
          });
        }

        if (action.type === _NavigationActions2.default.SET_PARAMS) {
          var key = action.key;
          var lastRoute = state.routes.find(function (route) {
            return route.key === key;
          });

          if (lastRoute) {
            var params = babelHelpers.extends({}, lastRoute.params, action.params);

            var _routes2 = [].concat(babelHelpers.toConsumableArray(state.routes));

            _routes2[state.routes.indexOf(lastRoute)] = babelHelpers.extends({}, lastRoute, {
              params: params
            });
            return babelHelpers.extends({}, state, {
              routes: _routes2
            });
          }
        }

        if (action.type === _NavigationActions2.default.RESET) {
          if (action.key != null && action.key != state.key) {
            return state;
          }

          var newStackActions = action.actions;
          return babelHelpers.extends({}, state, {
            routes: newStackActions.map(function (newStackAction) {
              var router = childRouters[newStackAction.routeName];
              var childState = {};

              if (router) {
                var _childAction2 = newStackAction.action || _NavigationActions2.default.init({
                  params: newStackAction.params
                });

                childState = router.getStateForAction(_childAction2);
              }

              return babelHelpers.extends({
                params: newStackAction.params
              }, childState, {
                routeName: newStackAction.routeName,
                key: newStackAction.key || (0, _KeyGenerator.generateKey)()
              });
            }),
            index: action.index
          });
        }

        if (action.type === _NavigationActions2.default.BACK || action.type === _NavigationActions2.default.POP) {
          var _key = action.key,
              n = action.n,
              immediate = action.immediate;
          var backRouteIndex = state.index;

          if (action.type === _NavigationActions2.default.POP && n != null) {
            backRouteIndex = Math.max(1, state.index - n + 1);
          } else if (_key) {
            var backRoute = state.routes.find(function (route) {
              return route.key === _key;
            });
            backRouteIndex = state.routes.indexOf(backRoute);
          }

          if (backRouteIndex > 0) {
            return babelHelpers.extends({}, state, {
              routes: state.routes.slice(0, backRouteIndex),
              index: backRouteIndex - 1,
              isTransitioning: immediate !== true
            });
          } else if (backRouteIndex === 0 && action.type === _NavigationActions2.default.POP) {
            return babelHelpers.extends({}, state);
          }
        }

        return state;
      },
      getPathAndParamsForState: function getPathAndParamsForState(state) {
        var route = state.routes[state.index];
        var routeName = route.routeName;
        var screen = (0, _getScreenForRouteName2.default)(routeConfigs, routeName);
        var subPath = pathsByRouteNames[routeName].toPath(route.params);
        var path = subPath;
        var params = route.params;

        if (screen && screen.router) {
          var stateRoute = route;
          var child = screen.router.getPathAndParamsForState(stateRoute);
          path = subPath ? subPath + "/" + child.path : child.path;
          params = child.params ? babelHelpers.extends({}, params, child.params) : params;
        }

        return {
          path: path,
          params: params
        };
      },
      getActionForPathAndParams: function getActionForPathAndParams(pathToResolve, inputParams) {
        if (!pathToResolve) {
          return _NavigationActions2.default.navigate({
            routeName: initialRouteName
          });
        }

        var _pathToResolve$split = pathToResolve.split('?'),
            _pathToResolve$split2 = babelHelpers.slicedToArray(_pathToResolve$split, 2),
            pathNameToResolve = _pathToResolve$split2[0],
            queryString = _pathToResolve$split2[1];

        var matchedRouteName = void 0;
        var pathMatch = void 0;
        var pathMatchKeys = void 0;

        for (var _iterator = paths, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
          var _ref3;

          if (_isArray) {
            if (_i >= _iterator.length) break;
            _ref3 = _iterator[_i++];
          } else {
            _i = _iterator.next();
            if (_i.done) break;
            _ref3 = _i.value;
          }

          var _ref = _ref3;

          var _ref2 = babelHelpers.slicedToArray(_ref, 2);

          var routeName = _ref2[0];
          var path = _ref2[1];
          var re = path.re,
              keys = path.keys;
          pathMatch = re.exec(pathNameToResolve);

          if (pathMatch && pathMatch.length) {
            pathMatchKeys = keys;
            matchedRouteName = routeName;
            break;
          }
        }

        if (!matchedRouteName) {
          if (!pathToResolve) {
            return _NavigationActions2.default.navigate({
              routeName: initialRouteName
            });
          }

          return null;
        }

        var nestedAction = void 0;
        var nestedQueryString = queryString ? '?' + queryString : '';

        if (childRouters[matchedRouteName]) {
          nestedAction = childRouters[matchedRouteName].getActionForPathAndParams(pathMatch.slice(pathMatchKeys.length).join('/') + nestedQueryString);

          if (!nestedAction) {
            return null;
          }
        }

        var queryParams = !isEmpty(inputParams) ? inputParams : (queryString || '').split('&').reduce(function (result, item) {
          if (item !== '') {
            var nextResult = result || {};

            var _item$split = item.split('='),
                _item$split2 = babelHelpers.slicedToArray(_item$split, 2),
                key = _item$split2[0],
                value = _item$split2[1];

            nextResult[key] = value;
            return nextResult;
          }

          return result;
        }, null);
        var params = pathMatch.slice(1).reduce(function (result, matchResult, i) {
          var key = pathMatchKeys[i];

          if (key.asterisk || !key) {
            return result;
          }

          var nextResult = result || {};
          var paramName = key.name;
          var decodedMatchResult = void 0;

          try {
            decodedMatchResult = decodeURIComponent(matchResult);
          } catch (e) {}

          nextResult[paramName] = decodedMatchResult || matchResult;
          return nextResult;
        }, queryParams);
        return _NavigationActions2.default.navigate(babelHelpers.extends({
          routeName: matchedRouteName
        }, params ? {
          params: params
        } : {}, nestedAction ? {
          action: nestedAction
        } : {}));
      },
      getScreenOptions: (0, _createConfigGetter2.default)(routeConfigs, stackConfig.navigationOptions),
      getScreenConfig: _getScreenConfigDeprecated2.default
    };
  };
},407,[408,374,410,411,377,413,414,376,415],"node_modules/react-navigation/src/routers/StackRouter.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var isarray = _require(_dependencyMap[0], 'isarray');

  module.exports = pathToRegexp;
  module.exports.parse = parse;
  module.exports.compile = compile;
  module.exports.tokensToFunction = tokensToFunction;
  module.exports.tokensToRegExp = tokensToRegExp;
  var PATH_REGEXP = new RegExp(['(\\\\.)', '([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))'].join('|'), 'g');

  function parse(str, options) {
    var tokens = [];
    var key = 0;
    var index = 0;
    var path = '';
    var defaultDelimiter = options && options.delimiter || '/';
    var res;

    while ((res = PATH_REGEXP.exec(str)) != null) {
      var m = res[0];
      var escaped = res[1];
      var offset = res.index;
      path += str.slice(index, offset);
      index = offset + m.length;

      if (escaped) {
        path += escaped[1];
        continue;
      }

      var next = str[index];
      var prefix = res[2];
      var name = res[3];
      var capture = res[4];
      var group = res[5];
      var modifier = res[6];
      var asterisk = res[7];

      if (path) {
        tokens.push(path);
        path = '';
      }

      var partial = prefix != null && next != null && next !== prefix;
      var repeat = modifier === '+' || modifier === '*';
      var optional = modifier === '?' || modifier === '*';
      var delimiter = res[2] || defaultDelimiter;
      var pattern = capture || group;
      tokens.push({
        name: name || key++,
        prefix: prefix || '',
        delimiter: delimiter,
        optional: optional,
        repeat: repeat,
        partial: partial,
        asterisk: !!asterisk,
        pattern: pattern ? escapeGroup(pattern) : asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?'
      });
    }

    if (index < str.length) {
      path += str.substr(index);
    }

    if (path) {
      tokens.push(path);
    }

    return tokens;
  }

  function compile(str, options) {
    return tokensToFunction(parse(str, options));
  }

  function encodeURIComponentPretty(str) {
    return encodeURI(str).replace(/[\/?#]/g, function (c) {
      return '%' + c.charCodeAt(0).toString(16).toUpperCase();
    });
  }

  function encodeAsterisk(str) {
    return encodeURI(str).replace(/[?#]/g, function (c) {
      return '%' + c.charCodeAt(0).toString(16).toUpperCase();
    });
  }

  function tokensToFunction(tokens) {
    var matches = new Array(tokens.length);

    for (var i = 0; i < tokens.length; i++) {
      if (typeof tokens[i] === 'object') {
        matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$');
      }
    }

    return function (obj, opts) {
      var path = '';
      var data = obj || {};
      var options = opts || {};
      var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent;

      for (var i = 0; i < tokens.length; i++) {
        var token = tokens[i];

        if (typeof token === 'string') {
          path += token;
          continue;
        }

        var value = data[token.name];
        var segment;

        if (value == null) {
          if (token.optional) {
            if (token.partial) {
              path += token.prefix;
            }

            continue;
          } else {
            throw new TypeError('Expected "' + token.name + '" to be defined');
          }
        }

        if (isarray(value)) {
          if (!token.repeat) {
            throw new TypeError('Expected "' + token.name + '" to not repeat, but received `' + JSON.stringify(value) + '`');
          }

          if (value.length === 0) {
            if (token.optional) {
              continue;
            } else {
              throw new TypeError('Expected "' + token.name + '" to not be empty');
            }
          }

          for (var j = 0; j < value.length; j++) {
            segment = encode(value[j]);

            if (!matches[i].test(segment)) {
              throw new TypeError('Expected all "' + token.name + '" to match "' + token.pattern + '", but received `' + JSON.stringify(segment) + '`');
            }

            path += (j === 0 ? token.prefix : token.delimiter) + segment;
          }

          continue;
        }

        segment = token.asterisk ? encodeAsterisk(value) : encode(value);

        if (!matches[i].test(segment)) {
          throw new TypeError('Expected "' + token.name + '" to match "' + token.pattern + '", but received "' + segment + '"');
        }

        path += token.prefix + segment;
      }

      return path;
    };
  }

  function escapeString(str) {
    return str.replace(/([.+*?=^!:${}()[\]|\/\\])/g, '\\$1');
  }

  function escapeGroup(group) {
    return group.replace(/([=!:$\/()])/g, '\\$1');
  }

  function attachKeys(re, keys) {
    re.keys = keys;
    return re;
  }

  function flags(options) {
    return options.sensitive ? '' : 'i';
  }

  function regexpToRegexp(path, keys) {
    var groups = path.source.match(/\((?!\?)/g);

    if (groups) {
      for (var i = 0; i < groups.length; i++) {
        keys.push({
          name: i,
          prefix: null,
          delimiter: null,
          optional: false,
          repeat: false,
          partial: false,
          asterisk: false,
          pattern: null
        });
      }
    }

    return attachKeys(path, keys);
  }

  function arrayToRegexp(path, keys, options) {
    var parts = [];

    for (var i = 0; i < path.length; i++) {
      parts.push(pathToRegexp(path[i], keys, options).source);
    }

    var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options));
    return attachKeys(regexp, keys);
  }

  function stringToRegexp(path, keys, options) {
    return tokensToRegExp(parse(path, options), keys, options);
  }

  function tokensToRegExp(tokens, keys, options) {
    if (!isarray(keys)) {
      options = keys || options;
      keys = [];
    }

    options = options || {};
    var strict = options.strict;
    var end = options.end !== false;
    var route = '';

    for (var i = 0; i < tokens.length; i++) {
      var token = tokens[i];

      if (typeof token === 'string') {
        route += escapeString(token);
      } else {
        var prefix = escapeString(token.prefix);
        var capture = '(?:' + token.pattern + ')';
        keys.push(token);

        if (token.repeat) {
          capture += '(?:' + prefix + capture + ')*';
        }

        if (token.optional) {
          if (!token.partial) {
            capture = '(?:' + prefix + '(' + capture + '))?';
          } else {
            capture = prefix + '(' + capture + ')?';
          }
        } else {
          capture = prefix + '(' + capture + ')';
        }

        route += capture;
      }
    }

    var delimiter = escapeString(options.delimiter || '/');
    var endsWithDelimiter = route.slice(-delimiter.length) === delimiter;

    if (!strict) {
      route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?';
    }

    if (end) {
      route += '$';
    } else {
      route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)';
    }

    return attachKeys(new RegExp('^' + route, flags(options)), keys);
  }

  function pathToRegexp(path, keys, options) {
    if (!isarray(keys)) {
      options = keys || options;
      keys = [];
    }

    options = options || {};

    if (path instanceof RegExp) {
      return regexpToRegexp(path, keys);
    }

    if (isarray(path)) {
      return arrayToRegexp(path, keys, options);
    }

    return stringToRegexp(path, keys, options);
  }
},408,[409],"node_modules/path-to-regexp/index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = Array.isArray || function (arr) {
    return Object.prototype.toString.call(arr) == '[object Array]';
  };
},409,[],"node_modules/isarray/index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _invariant = _require(_dependencyMap[0], "../utils/invariant");

  var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

  var _getScreenForRouteName = _require(_dependencyMap[1], "./getScreenForRouteName");

  var _getScreenForRouteName2 = babelHelpers.interopRequireDefault(_getScreenForRouteName);

  var _addNavigationHelpers = _require(_dependencyMap[2], "../addNavigationHelpers");

  var _addNavigationHelpers2 = babelHelpers.interopRequireDefault(_addNavigationHelpers);

  var _validateScreenOptions = _require(_dependencyMap[3], "./validateScreenOptions");

  var _validateScreenOptions2 = babelHelpers.interopRequireDefault(_validateScreenOptions);

  var _getChildEventSubscriber = _require(_dependencyMap[4], "../getChildEventSubscriber");

  var _getChildEventSubscriber2 = babelHelpers.interopRequireDefault(_getChildEventSubscriber);

  function applyConfig(configurer, navigationOptions, configProps) {
    if (typeof configurer === 'function') {
      return babelHelpers.extends({}, navigationOptions, configurer(babelHelpers.extends({}, configProps, {
        navigationOptions: navigationOptions
      })));
    }

    if (typeof configurer === 'object') {
      return babelHelpers.extends({}, navigationOptions, configurer);
    }

    return navigationOptions;
  }

  exports.default = function (routeConfigs, navigatorScreenConfig) {
    return function (navigation, screenProps) {
      var state = navigation.state,
          dispatch = navigation.dispatch;
      var route = state;
      (0, _invariant2.default)(route.routeName && typeof route.routeName === 'string', 'Cannot get config because the route does not have a routeName.');
      var Component = (0, _getScreenForRouteName2.default)(routeConfigs, route.routeName);
      var outputConfig = {};
      var router = Component.router;

      if (router) {
        var routes = route.routes,
            index = route.index;

        if (!route || !routes || index == null) {
          throw new Error("Expect nav state to have routes and index, " + JSON.stringify(route));
        }

        var childRoute = routes[index];
        var childNavigation = (0, _addNavigationHelpers2.default)({
          state: childRoute,
          dispatch: dispatch,
          addListener: (0, _getChildEventSubscriber2.default)(navigation.addListener, childRoute.key)
        });
        outputConfig = router.getScreenOptions(childNavigation, screenProps);
      }

      var routeConfig = routeConfigs[route.routeName];
      var routeScreenConfig = routeConfig.navigationOptions;
      var componentScreenConfig = Component.navigationOptions;
      var configOptions = {
        navigation: navigation,
        screenProps: screenProps || {}
      };
      outputConfig = applyConfig(navigatorScreenConfig, outputConfig, configOptions);
      outputConfig = applyConfig(componentScreenConfig, outputConfig, configOptions);
      outputConfig = applyConfig(routeScreenConfig, outputConfig, configOptions);
      (0, _validateScreenOptions2.default)(outputConfig, route);
      return outputConfig;
    };
  };
},410,[376,411,375,412,399],"node_modules/react-navigation/src/routers/createConfigGetter.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = getScreenForRouteName;

  var _invariant = _require(_dependencyMap[0], "../utils/invariant");

  var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

  function getScreenForRouteName(routeConfigs, routeName) {
    var routeConfig = routeConfigs[routeName];

    if (!routeConfig) {
      throw new Error("There is no route defined for key " + routeName + ".\n" + ("Must be one of: " + Object.keys(routeConfigs).map(function (a) {
        return "'" + a + "'";
      }).join(',')));
    }

    if (routeConfig.screen) {
      return routeConfig.screen;
    }

    if (typeof routeConfig.getScreen === 'function') {
      var screen = routeConfig.getScreen();
      (0, _invariant2.default)(typeof screen === 'function', "The getScreen defined for route '" + routeName + " didn't return a valid " + 'screen or navigator.\n\n' + 'Please pass it like this:\n' + (routeName + ": {\n  getScreen: () => require('./MyScreen').default\n}"));
      return screen;
    }

    return routeConfig;
  }
},411,[376],"node_modules/react-navigation/src/routers/getScreenForRouteName.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var deprecatedKeys = ['tabBar'];

  exports.default = function (screenOptions, route) {
    var keys = Object.keys(screenOptions);
    var deprecatedKey = keys.find(function (key) {
      return deprecatedKeys.includes(key);
    });

    if (typeof screenOptions.title === 'function') {
      throw new Error(["`title` cannot be defined as a function in navigation options for `" + route.routeName + "` screen. \n", 'Try replacing the following:', '{', '    title: ({ state }) => state...', '}', '', 'with:', '({ navigation }) => ({', '    title: navigation.state...', '})'].join('\n'));
    }

    if (deprecatedKey && typeof screenOptions[deprecatedKey] === 'function') {
      throw new Error(["`" + deprecatedKey + "` cannot be defined as a function in navigation options for `" + route.routeName + "` screen. \n", 'Try replacing the following:', '{', "    " + deprecatedKey + ": ({ state }) => ({", '         key: state...', '    })', '}', '', 'with:', '({ navigation }) => ({', "    " + deprecatedKey + "Key: navigation.state...", '})'].join('\n'));
    }

    if (deprecatedKey && typeof screenOptions[deprecatedKey] === 'object') {
      throw new Error(["Invalid key `" + deprecatedKey + "` defined in navigation options for `" + route.routeName + "` screen.", '\n', 'Try replacing the following navigation options:', '{', "    " + deprecatedKey + ": {"].concat(babelHelpers.toConsumableArray(Object.keys(screenOptions[deprecatedKey]).map(function (key) {
        return "        " + key + ": ...,";
      })), ['    },', '}', '\n', 'with:', '{'], babelHelpers.toConsumableArray(Object.keys(screenOptions[deprecatedKey]).map(function (key) {
        return "    " + (deprecatedKey + key[0].toUpperCase() + key.slice(1)) + ": ...,";
      })), ['}']).join('\n'));
    }
  };
},412,[],"node_modules/react-navigation/src/routers/validateScreenOptions.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _invariant = _require(_dependencyMap[0], "../utils/invariant");

  var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

  function validateRouteConfigMap(routeConfigs) {
    var routeNames = Object.keys(routeConfigs);
    (0, _invariant2.default)(routeNames.length > 0, 'Please specify at least one route when configuring a navigator.');
    routeNames.forEach(function (routeName) {
      var routeConfig = routeConfigs[routeName];
      var screenComponent = getScreenComponent(routeConfig);

      if (!screenComponent || typeof screenComponent !== 'function' && typeof screenComponent !== 'string' && !routeConfig.getScreen) {
        throw new Error("The component for route '" + routeName + "' must be a " + 'React component. For example:\n\n' + "import MyScreen from './MyScreen';\n" + '...\n' + (routeName + ": MyScreen,\n") + '}\n\n' + 'You can also use a navigator:\n\n' + "import MyNavigator from './MyNavigator';\n" + '...\n' + (routeName + ": MyNavigator,\n") + '}');
      }

      if (routeConfig.screen && routeConfig.getScreen) {
        throw new Error("Route '" + routeName + "' should declare a screen or " + 'a getScreen, not both.');
      }
    });
  }

  function getScreenComponent(routeConfig) {
    if (!routeConfig) {
      return null;
    }

    return routeConfig.screen ? routeConfig.screen : routeConfig;
  }

  exports.default = validateRouteConfigMap;
},413,[376],"node_modules/react-navigation/src/routers/validateRouteConfigMap.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _invariant = _require(_dependencyMap[0], "../utils/invariant");

  var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

  exports.default = function () {
    return (0, _invariant2.default)(false, '`getScreenConfig` has been replaced with `getScreenOptions`');
  };
},414,[376],"node_modules/react-navigation/src/routers/getScreenConfigDeprecated.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports._TESTING_ONLY_normalize_keys = _TESTING_ONLY_normalize_keys;
  exports.generateKey = generateKey;
  var uniqueBaseId = "id-" + Date.now();
  var uuidCount = 0;

  function _TESTING_ONLY_normalize_keys() {
    uniqueBaseId = 'id';
    uuidCount = 0;
  }

  function generateKey() {
    return uniqueBaseId + "-" + uuidCount++;
  }
},415,[],"node_modules/react-navigation/src/routers/KeyGenerator.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-navigation/src/navigators/SwitchNavigator.js";

  var _react = _require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _SwitchRouter = _require(_dependencyMap[1], "../routers/SwitchRouter");

  var _SwitchRouter2 = babelHelpers.interopRequireDefault(_SwitchRouter);

  var _SwitchView = _require(_dependencyMap[2], "../views/SwitchView/SwitchView");

  var _SwitchView2 = babelHelpers.interopRequireDefault(_SwitchView);

  var _createNavigationContainer = _require(_dependencyMap[3], "../createNavigationContainer");

  var _createNavigationContainer2 = babelHelpers.interopRequireDefault(_createNavigationContainer);

  var _createNavigator = _require(_dependencyMap[4], "../navigators/createNavigator");

  var _createNavigator2 = babelHelpers.interopRequireDefault(_createNavigator);

  exports.default = function (routeConfigMap) {
    var switchConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var router = (0, _SwitchRouter2.default)(routeConfigMap, switchConfig);
    var navigator = (0, _createNavigator2.default)(router, routeConfigMap, switchConfig)(function (props) {
      return _react2.default.createElement(_SwitchView2.default, babelHelpers.extends({}, props, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 11
        }
      }));
    });
    return (0, _createNavigationContainer2.default)(navigator);
  };
},416,[114,417,418,372,378],"node_modules/react-navigation/src/navigators/SwitchNavigator.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _invariant = _require(_dependencyMap[0], "../utils/invariant");

  var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

  var _getScreenForRouteName = _require(_dependencyMap[1], "./getScreenForRouteName");

  var _getScreenForRouteName2 = babelHelpers.interopRequireDefault(_getScreenForRouteName);

  var _createConfigGetter = _require(_dependencyMap[2], "./createConfigGetter");

  var _createConfigGetter2 = babelHelpers.interopRequireDefault(_createConfigGetter);

  var _NavigationActions = _require(_dependencyMap[3], "../NavigationActions");

  var _NavigationActions2 = babelHelpers.interopRequireDefault(_NavigationActions);

  var _validateRouteConfigMap = _require(_dependencyMap[4], "./validateRouteConfigMap");

  var _validateRouteConfigMap2 = babelHelpers.interopRequireDefault(_validateRouteConfigMap);

  var _getScreenConfigDeprecated = _require(_dependencyMap[5], "./getScreenConfigDeprecated");

  var _getScreenConfigDeprecated2 = babelHelpers.interopRequireDefault(_getScreenConfigDeprecated);

  function childrenUpdateWithoutSwitchingIndex(actionType) {
    return [_NavigationActions2.default.SET_PARAMS, _NavigationActions2.default.COMPLETE_TRANSITION].includes(actionType);
  }

  exports.default = function (routeConfigs) {
    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    (0, _validateRouteConfigMap2.default)(routeConfigs);
    var order = config.order || Object.keys(routeConfigs);
    var paths = config.paths || {};
    var initialRouteParams = config.initialRouteParams;
    var initialRouteName = config.initialRouteName || order[0];
    var backBehavior = config.backBehavior || 'none';
    var shouldBackNavigateToInitialRoute = backBehavior === 'initialRoute';
    var resetOnBlur = config.hasOwnProperty('resetOnBlur') ? config.resetOnBlur : true;
    var initialRouteIndex = order.indexOf(initialRouteName);
    var childRouters = {};
    order.forEach(function (routeName) {
      var routeConfig = routeConfigs[routeName];
      paths[routeName] = typeof routeConfig.path === 'string' ? routeConfig.path : routeName;
      childRouters[routeName] = null;
      var screen = (0, _getScreenForRouteName2.default)(routeConfigs, routeName);

      if (screen.router) {
        childRouters[routeName] = screen.router;
      }
    });

    if (initialRouteIndex === -1) {
      throw new Error("Invalid initialRouteName '" + initialRouteName + "'." + ("Should be one of " + order.map(function (n) {
        return "\"" + n + "\"";
      }).join(', ')));
    }

    function resetChildRoute(routeName) {
      var params = routeName === initialRouteName ? initialRouteParams : undefined;
      var childRouter = childRouters[routeName];

      if (childRouter) {
        var childAction = _NavigationActions2.default.init();

        return babelHelpers.extends({}, childRouter.getStateForAction(childAction), {
          key: routeName,
          routeName: routeName,
          params: params
        });
      }

      return {
        key: routeName,
        routeName: routeName,
        params: params
      };
    }

    return {
      getInitialState: function getInitialState() {
        var routes = order.map(resetChildRoute);
        return {
          routes: routes,
          index: initialRouteIndex,
          isTransitioning: false
        };
      },
      getNextState: function getNextState(prevState, possibleNextState) {
        var nextState = void 0;

        if (prevState.index !== possibleNextState.index && resetOnBlur) {
          var prevRouteName = prevState.routes[prevState.index].routeName;
          var nextRoutes = [].concat(babelHelpers.toConsumableArray(possibleNextState.routes));
          nextRoutes[prevState.index] = resetChildRoute(prevRouteName);
          return babelHelpers.extends({}, possibleNextState, {
            routes: nextRoutes
          });
        } else {
          nextState = possibleNextState;
        }

        return nextState;
      },
      getStateForAction: function getStateForAction(action, inputState) {
        var prevState = inputState ? babelHelpers.extends({}, inputState) : inputState;
        var state = inputState || this.getInitialState();
        var activeChildIndex = state.index;

        if (action.type === _NavigationActions2.default.INIT) {
          var params = action.params;

          if (params) {
            state.routes = state.routes.map(function (route) {
              return babelHelpers.extends({}, route, {
                params: babelHelpers.extends({}, route.params, params, route.routeName === initialRouteName ? initialRouteParams : null)
              });
            });
          }
        }

        var activeChildLastState = state.routes[state.index];
        var activeChildRouter = childRouters[order[state.index]];

        if (activeChildRouter) {
          var activeChildState = activeChildRouter.getStateForAction(action, activeChildLastState);

          if (!activeChildState && inputState) {
            return null;
          }

          if (activeChildState && activeChildState !== activeChildLastState) {
            var _routes = [].concat(babelHelpers.toConsumableArray(state.routes));

            _routes[state.index] = activeChildState;
            return this.getNextState(prevState, babelHelpers.extends({}, state, {
              routes: _routes
            }));
          }
        }

        if (backBehavior !== 'none') {
          var isBackEligible = action.key == null || action.key === activeChildLastState.key;

          if (action.type === _NavigationActions2.default.BACK) {
            if (isBackEligible && shouldBackNavigateToInitialRoute) {
              activeChildIndex = initialRouteIndex;
            } else {
              return state;
            }
          }
        }

        var didNavigate = false;

        if (action.type === _NavigationActions2.default.NAVIGATE) {
          var navigateAction = action;
          didNavigate = !!order.find(function (childId, i) {
            if (childId === navigateAction.routeName) {
              activeChildIndex = i;
              return true;
            }

            return false;
          });

          if (didNavigate) {
            var childState = state.routes[activeChildIndex];
            var newChildState = void 0;
            var childRouter = childRouters[action.routeName];

            if (action.action) {
              newChildState = childRouter ? childRouter.getStateForAction(action.action, childState) : null;
            } else if (!childRouter && action.params) {
              newChildState = babelHelpers.extends({}, childState, {
                params: babelHelpers.extends({}, childState.params || {}, action.params)
              });
            }

            if (newChildState && newChildState !== childState) {
              var _routes2 = [].concat(babelHelpers.toConsumableArray(state.routes));

              _routes2[activeChildIndex] = newChildState;
              return this.getNextState(prevState, babelHelpers.extends({}, state, {
                routes: _routes2,
                index: activeChildIndex
              }));
            }
          }
        }

        if (action.type === _NavigationActions2.default.SET_PARAMS) {
          var key = action.key;
          var lastRoute = state.routes.find(function (route) {
            return route.key === key;
          });

          if (lastRoute) {
            var _params = babelHelpers.extends({}, lastRoute.params, action.params);

            var _routes3 = [].concat(babelHelpers.toConsumableArray(state.routes));

            _routes3[state.routes.indexOf(lastRoute)] = babelHelpers.extends({}, lastRoute, {
              params: _params
            });
            return this.getNextState(prevState, babelHelpers.extends({}, state, {
              routes: _routes3
            }));
          }
        }

        if (activeChildIndex !== state.index) {
          return this.getNextState(prevState, babelHelpers.extends({}, state, {
            index: activeChildIndex
          }));
        } else if (didNavigate && !inputState) {
          return state;
        } else if (didNavigate) {
          return null;
        }

        var index = state.index;
        var routes = state.routes;
        order.find(function (childId, i) {
          var childRouter = childRouters[childId];

          if (i === index) {
            return false;
          }

          var childState = routes[i];

          if (childRouter) {
            childState = childRouter.getStateForAction(action, childState);
          }

          if (!childState) {
            index = i;
            return true;
          }

          if (childState !== routes[i]) {
            routes = [].concat(babelHelpers.toConsumableArray(routes));
            routes[i] = childState;
            index = i;
            return true;
          }

          return false;
        });

        if (childrenUpdateWithoutSwitchingIndex(action.type)) {
          index = state.index;
        }

        if (index !== state.index || routes !== state.routes) {
          return this.getNextState(prevState, babelHelpers.extends({}, state, {
            index: index,
            routes: routes
          }));
        }

        return state;
      },
      getComponentForState: function getComponentForState(state) {
        var routeName = state.routes[state.index].routeName;
        (0, _invariant2.default)(routeName, "There is no route defined for index " + state.index + ". Check that\n        that you passed in a navigation state with a valid tab/screen index.");
        var childRouter = childRouters[routeName];

        if (childRouter) {
          return childRouter.getComponentForState(state.routes[state.index]);
        }

        return (0, _getScreenForRouteName2.default)(routeConfigs, routeName);
      },
      getComponentForRouteName: function getComponentForRouteName(routeName) {
        return (0, _getScreenForRouteName2.default)(routeConfigs, routeName);
      },
      getPathAndParamsForState: function getPathAndParamsForState(state) {
        var route = state.routes[state.index];
        var routeName = order[state.index];
        var subPath = paths[routeName];
        var screen = (0, _getScreenForRouteName2.default)(routeConfigs, routeName);
        var path = subPath;
        var params = route.params;

        if (screen && screen.router) {
          var stateRoute = route;
          var child = screen.router.getPathAndParamsForState(stateRoute);
          path = subPath ? subPath + "/" + child.path : child.path;
          params = child.params ? babelHelpers.extends({}, params, child.params) : params;
        }

        return {
          path: path,
          params: params
        };
      },
      getActionForPathAndParams: function getActionForPathAndParams(path, params) {
        return order.map(function (childId) {
          var parts = path.split('/');
          var pathToTest = paths[childId];

          if (parts[0] === pathToTest) {
            var childRouter = childRouters[childId];

            var action = _NavigationActions2.default.navigate({
              routeName: childId
            });

            if (childRouter && childRouter.getActionForPathAndParams) {
              action.action = childRouter.getActionForPathAndParams(parts.slice(1).join('/'), params);
            } else if (params) {
              action.params = params;
            }

            return action;
          }

          return null;
        }).find(function (action) {
          return !!action;
        }) || order.map(function (childId) {
          var childRouter = childRouters[childId];
          return childRouter && childRouter.getActionForPathAndParams(path, params);
        }).find(function (action) {
          return !!action;
        }) || null;
      },
      getScreenOptions: (0, _createConfigGetter2.default)(routeConfigs, config.navigationOptions),
      getScreenConfig: _getScreenConfigDeprecated2.default
    };
  };
},417,[376,411,410,374,413,414],"node_modules/react-navigation/src/routers/SwitchRouter.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-navigation/src/views/SwitchView/SwitchView.js";

  var _react = _require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _SceneView = _require(_dependencyMap[1], "../SceneView");

  var _SceneView2 = babelHelpers.interopRequireDefault(_SceneView);

  var _withCachedChildNavigation = _require(_dependencyMap[2], "../../withCachedChildNavigation");

  var _withCachedChildNavigation2 = babelHelpers.interopRequireDefault(_withCachedChildNavigation);

  var SwitchContainer = function (_React$Component) {
    babelHelpers.inherits(SwitchContainer, _React$Component);

    function SwitchContainer() {
      babelHelpers.classCallCheck(this, SwitchContainer);
      return babelHelpers.possibleConstructorReturn(this, (SwitchContainer.__proto__ || Object.getPrototypeOf(SwitchContainer)).apply(this, arguments));
    }

    babelHelpers.createClass(SwitchContainer, [{
      key: "render",
      value: function render() {
        var screenProps = this.props.screenProps;
        var route = this.props.navigation.state.routes[this.props.navigation.state.index];
        var childNavigation = this.props.childNavigationProps[route.key];
        var ChildComponent = this.props.router.getComponentForRouteName(route.routeName);
        return _react2.default.createElement(_SceneView2.default, {
          component: ChildComponent,
          navigation: childNavigation,
          screenProps: screenProps,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 18
          }
        });
      }
    }]);
    return SwitchContainer;
  }(_react2.default.Component);

  exports.default = (0, _withCachedChildNavigation2.default)(SwitchContainer);
},418,[114,400,419],"node_modules/react-navigation/src/views/SwitchView/SwitchView.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-navigation/src/withCachedChildNavigation.js";
  exports.default = withCachedChildNavigation;

  var _react = _require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _addNavigationHelpers = _require(_dependencyMap[1], "./addNavigationHelpers");

  var _addNavigationHelpers2 = babelHelpers.interopRequireDefault(_addNavigationHelpers);

  var _getChildEventSubscriber = _require(_dependencyMap[2], "./getChildEventSubscriber");

  var _getChildEventSubscriber2 = babelHelpers.interopRequireDefault(_getChildEventSubscriber);

  function withCachedChildNavigation(Comp) {
    var _class, _temp2;

    var displayName = Comp.displayName || Comp.name;
    return _temp2 = _class = function (_React$PureComponent) {
      babelHelpers.inherits(_class, _React$PureComponent);

      function _class() {
        var _ref;

        var _temp, _this, _ret;

        babelHelpers.classCallCheck(this, _class);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = _class.__proto__ || Object.getPrototypeOf(_class)).call.apply(_ref, [this].concat(args))), _this), _this._childEventSubscribers = {}, _this._isRouteFocused = function (route) {
          var state = _this.props.navigation.state;
          var focusedRoute = state.routes[state.index];
          return route === focusedRoute;
        }, _this._updateNavigationProps = function (navigation) {
          if (!_this._childNavigationProps) {
            _this._childNavigationProps = {};
          }

          navigation.state.routes.forEach(function (route) {
            var childNavigation = _this._childNavigationProps[route.key];

            if (childNavigation && childNavigation.state === route) {
              return;
            }

            if (!_this._childEventSubscribers[route.key]) {
              _this._childEventSubscribers[route.key] = (0, _getChildEventSubscriber2.default)(navigation.addListener, route.key);
            }

            _this._childNavigationProps[route.key] = (0, _addNavigationHelpers2.default)({
              dispatch: navigation.dispatch,
              state: route,
              isFocused: function isFocused() {
                return _this._isRouteFocused(route);
              },
              addListener: _this._childEventSubscribers[route.key]
            });
          });
        }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
      }

      babelHelpers.createClass(_class, [{
        key: "componentWillMount",
        value: function componentWillMount() {
          this._updateNavigationProps(this.props.navigation);
        }
      }, {
        key: "componentWillReceiveProps",
        value: function componentWillReceiveProps(nextProps) {
          this._updateNavigationProps(nextProps.navigation);
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate() {
          var _this2 = this;

          var activeKeys = this.props.navigation.state.routes.map(function (route) {
            return route.key;
          });
          Object.keys(this._childEventSubscribers).forEach(function (key) {
            if (!activeKeys.includes(key)) {
              delete _this2._childEventSubscribers[key];
            }
          });
        }
      }, {
        key: "render",
        value: function render() {
          return _react2.default.createElement(Comp, babelHelpers.extends({}, this.props, {
            childNavigationProps: this._childNavigationProps,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 69
            }
          }));
        }
      }]);
      return _class;
    }(_react2.default.PureComponent), _class.displayName = "withCachedChildNavigation(" + displayName + ")", _temp2;
  }
},419,[114,375,399],"node_modules/react-navigation/src/withCachedChildNavigation.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-navigation/src/navigators/TabNavigator.js";

  var _react = _require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1], "react-native");

  var _createNavigator = _require(_dependencyMap[2], "./createNavigator");

  var _createNavigator2 = babelHelpers.interopRequireDefault(_createNavigator);

  var _createNavigationContainer = _require(_dependencyMap[3], "../createNavigationContainer");

  var _createNavigationContainer2 = babelHelpers.interopRequireDefault(_createNavigationContainer);

  var _TabRouter = _require(_dependencyMap[4], "../routers/TabRouter");

  var _TabRouter2 = babelHelpers.interopRequireDefault(_TabRouter);

  var _TabView = _require(_dependencyMap[5], "../views/TabView/TabView");

  var _TabView2 = babelHelpers.interopRequireDefault(_TabView);

  var _TabBarTop = _require(_dependencyMap[6], "../views/TabView/TabBarTop");

  var _TabBarTop2 = babelHelpers.interopRequireDefault(_TabBarTop);

  var _TabBarBottom = _require(_dependencyMap[7], "../views/TabView/TabBarBottom");

  var _TabBarBottom2 = babelHelpers.interopRequireDefault(_TabBarBottom);

  var TabNavigator = function TabNavigator(routeConfigs) {
    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var mergedConfig = babelHelpers.extends({}, TabNavigator.Presets.Default, config);
    var tabBarComponent = mergedConfig.tabBarComponent,
        tabBarPosition = mergedConfig.tabBarPosition,
        tabBarOptions = mergedConfig.tabBarOptions,
        lazy = mergedConfig.lazy,
        removeClippedSubviews = mergedConfig.removeClippedSubviews,
        swipeEnabled = mergedConfig.swipeEnabled,
        animationEnabled = mergedConfig.animationEnabled,
        configureTransition = mergedConfig.configureTransition,
        initialLayout = mergedConfig.initialLayout,
        tabsConfig = babelHelpers.objectWithoutProperties(mergedConfig, ["tabBarComponent", "tabBarPosition", "tabBarOptions", "lazy", "removeClippedSubviews", "swipeEnabled", "animationEnabled", "configureTransition", "initialLayout"]);
    var router = (0, _TabRouter2.default)(routeConfigs, tabsConfig);
    var navigator = (0, _createNavigator2.default)(router, routeConfigs, config)(function (props) {
      return _react2.default.createElement(_TabView2.default, babelHelpers.extends({}, props, {
        lazy: lazy,
        removeClippedSubviews: removeClippedSubviews,
        tabBarComponent: tabBarComponent,
        tabBarPosition: tabBarPosition,
        tabBarOptions: tabBarOptions,
        swipeEnabled: swipeEnabled,
        animationEnabled: animationEnabled,
        configureTransition: configureTransition,
        initialLayout: initialLayout,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 34
        }
      }));
    });
    return (0, _createNavigationContainer2.default)(navigator);
  };

  var Presets = {
    iOSBottomTabs: {
      tabBarComponent: _TabBarBottom2.default,
      tabBarPosition: 'bottom',
      swipeEnabled: false,
      animationEnabled: false,
      initialLayout: undefined
    },
    AndroidTopTabs: {
      tabBarComponent: _TabBarTop2.default,
      tabBarPosition: 'top',
      swipeEnabled: true,
      animationEnabled: true,
      initialLayout: undefined
    }
  };
  TabNavigator.Presets = {
    iOSBottomTabs: Presets.iOSBottomTabs,
    AndroidTopTabs: Presets.AndroidTopTabs,
    Default: _reactNative.Platform.OS === 'ios' ? Presets.iOSBottomTabs : Presets.AndroidTopTabs
  };
  exports.default = TabNavigator;
},420,[114,12,378,372,421,422,435,437],"node_modules/react-navigation/src/navigators/TabNavigator.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _invariant = _require(_dependencyMap[0], "../utils/invariant");

  var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

  var _getScreenForRouteName = _require(_dependencyMap[1], "./getScreenForRouteName");

  var _getScreenForRouteName2 = babelHelpers.interopRequireDefault(_getScreenForRouteName);

  var _createConfigGetter = _require(_dependencyMap[2], "./createConfigGetter");

  var _createConfigGetter2 = babelHelpers.interopRequireDefault(_createConfigGetter);

  var _NavigationActions = _require(_dependencyMap[3], "../NavigationActions");

  var _NavigationActions2 = babelHelpers.interopRequireDefault(_NavigationActions);

  var _validateRouteConfigMap = _require(_dependencyMap[4], "./validateRouteConfigMap");

  var _validateRouteConfigMap2 = babelHelpers.interopRequireDefault(_validateRouteConfigMap);

  var _getScreenConfigDeprecated = _require(_dependencyMap[5], "./getScreenConfigDeprecated");

  var _getScreenConfigDeprecated2 = babelHelpers.interopRequireDefault(_getScreenConfigDeprecated);

  function childrenUpdateWithoutSwitchingIndex(actionType) {
    return [_NavigationActions2.default.SET_PARAMS, _NavigationActions2.default.COMPLETE_TRANSITION].includes(actionType);
  }

  exports.default = function (routeConfigs) {
    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    (0, _validateRouteConfigMap2.default)(routeConfigs);
    var order = config.order || Object.keys(routeConfigs);
    var paths = config.paths || {};
    var initialRouteParams = config.initialRouteParams;
    var initialRouteName = config.initialRouteName || order[0];
    var initialRouteIndex = order.indexOf(initialRouteName);
    var backBehavior = config.backBehavior || 'initialRoute';
    var shouldBackNavigateToInitialRoute = backBehavior === 'initialRoute';
    var tabRouters = {};
    order.forEach(function (routeName) {
      var routeConfig = routeConfigs[routeName];
      paths[routeName] = typeof routeConfig.path === 'string' ? routeConfig.path : routeName;
      tabRouters[routeName] = null;
      var screen = (0, _getScreenForRouteName2.default)(routeConfigs, routeName);

      if (screen.router) {
        tabRouters[routeName] = screen.router;
      }
    });

    if (initialRouteIndex === -1) {
      throw new Error("Invalid initialRouteName '" + initialRouteName + "' for TabRouter. " + ("Should be one of " + order.map(function (n) {
        return "\"" + n + "\"";
      }).join(', ')));
    }

    return {
      getStateForAction: function getStateForAction(action, inputState) {
        var state = inputState;

        if (!state) {
          var _routes = order.map(function (routeName) {
            var params = routeName === initialRouteName ? initialRouteParams : undefined;
            var tabRouter = tabRouters[routeName];

            if (tabRouter) {
              var childAction = _NavigationActions2.default.init();

              return babelHelpers.extends({}, tabRouter.getStateForAction(childAction), {
                key: routeName,
                routeName: routeName,
                params: params
              });
            }

            return {
              key: routeName,
              routeName: routeName,
              params: params
            };
          });

          state = {
            routes: _routes,
            index: initialRouteIndex,
            isTransitioning: false
          };
        }

        if (action.type === _NavigationActions2.default.INIT) {
          var params = action.params;

          if (params) {
            state.routes = state.routes.map(function (route) {
              return babelHelpers.extends({}, route, {
                params: babelHelpers.extends({}, route.params, params, route.routeName === initialRouteName ? initialRouteParams : null)
              });
            });
          }
        }

        var activeTabLastState = state.routes[state.index];
        var activeTabRouter = tabRouters[order[state.index]];

        if (activeTabRouter) {
          var activeTabState = activeTabRouter.getStateForAction(action, activeTabLastState);

          if (!activeTabState && inputState) {
            return null;
          }

          if (activeTabState && activeTabState !== activeTabLastState) {
            var _routes2 = [].concat(babelHelpers.toConsumableArray(state.routes));

            _routes2[state.index] = activeTabState;
            return babelHelpers.extends({}, state, {
              routes: _routes2
            });
          }
        }

        var activeTabIndex = state.index;
        var isBackEligible = action.key == null || action.key === activeTabLastState.key;

        if (action.type === _NavigationActions2.default.BACK) {
          if (isBackEligible && shouldBackNavigateToInitialRoute) {
            activeTabIndex = initialRouteIndex;
          } else {
            return state;
          }
        }

        var didNavigate = false;

        if (action.type === _NavigationActions2.default.NAVIGATE) {
          var navigateAction = action;
          didNavigate = !!order.find(function (tabId, i) {
            if (tabId === navigateAction.routeName) {
              activeTabIndex = i;
              return true;
            }

            return false;
          });

          if (didNavigate) {
            var childState = state.routes[activeTabIndex];
            var newChildState = void 0;
            var tabRouter = tabRouters[action.routeName];

            if (action.action) {
              newChildState = tabRouter ? tabRouter.getStateForAction(action.action, childState) : null;
            } else if (!tabRouter && action.params) {
              newChildState = babelHelpers.extends({}, childState, {
                params: babelHelpers.extends({}, childState.params || {}, action.params)
              });
            }

            if (newChildState && newChildState !== childState) {
              var _routes3 = [].concat(babelHelpers.toConsumableArray(state.routes));

              _routes3[activeTabIndex] = newChildState;
              return babelHelpers.extends({}, state, {
                routes: _routes3,
                index: activeTabIndex
              });
            }
          }
        }

        if (action.type === _NavigationActions2.default.SET_PARAMS) {
          var key = action.key;
          var lastRoute = state.routes.find(function (route) {
            return route.key === key;
          });

          if (lastRoute) {
            var _params = babelHelpers.extends({}, lastRoute.params, action.params);

            var _routes4 = [].concat(babelHelpers.toConsumableArray(state.routes));

            _routes4[state.routes.indexOf(lastRoute)] = babelHelpers.extends({}, lastRoute, {
              params: _params
            });
            return babelHelpers.extends({}, state, {
              routes: _routes4
            });
          }
        }

        if (activeTabIndex !== state.index) {
          return babelHelpers.extends({}, state, {
            index: activeTabIndex
          });
        } else if (didNavigate && !inputState) {
          return state;
        } else if (didNavigate) {
          return null;
        }

        var index = state.index;
        var routes = state.routes;
        order.find(function (tabId, i) {
          var tabRouter = tabRouters[tabId];

          if (i === index) {
            return false;
          }

          var tabState = routes[i];

          if (tabRouter) {
            tabState = tabRouter.getStateForAction(action, tabState);
          }

          if (!tabState) {
            index = i;
            return true;
          }

          if (tabState !== routes[i]) {
            routes = [].concat(babelHelpers.toConsumableArray(routes));
            routes[i] = tabState;
            index = i;
            return true;
          }

          return false;
        });

        if (childrenUpdateWithoutSwitchingIndex(action.type)) {
          index = state.index;
        }

        if (index !== state.index || routes !== state.routes) {
          return babelHelpers.extends({}, state, {
            index: index,
            routes: routes
          });
        }

        return state;
      },
      getComponentForState: function getComponentForState(state) {
        var routeName = state.routes[state.index].routeName;
        (0, _invariant2.default)(routeName, "There is no route defined for index " + state.index + ". Check that\n        that you passed in a navigation state with a valid tab/screen index.");
        var childRouter = tabRouters[routeName];

        if (childRouter) {
          return childRouter.getComponentForState(state.routes[state.index]);
        }

        return (0, _getScreenForRouteName2.default)(routeConfigs, routeName);
      },
      getComponentForRouteName: function getComponentForRouteName(routeName) {
        return (0, _getScreenForRouteName2.default)(routeConfigs, routeName);
      },
      getPathAndParamsForState: function getPathAndParamsForState(state) {
        var route = state.routes[state.index];
        var routeName = order[state.index];
        var subPath = paths[routeName];
        var screen = (0, _getScreenForRouteName2.default)(routeConfigs, routeName);
        var path = subPath;
        var params = route.params;

        if (screen && screen.router) {
          var stateRoute = route;
          var child = screen.router.getPathAndParamsForState(stateRoute);
          path = subPath ? subPath + "/" + child.path : child.path;
          params = child.params ? babelHelpers.extends({}, params, child.params) : params;
        }

        return {
          path: path,
          params: params
        };
      },
      getActionForPathAndParams: function getActionForPathAndParams(path, params) {
        return order.map(function (tabId) {
          var parts = path.split('/');
          var pathToTest = paths[tabId];

          if (parts[0] === pathToTest) {
            var tabRouter = tabRouters[tabId];

            var action = _NavigationActions2.default.navigate({
              routeName: tabId
            });

            if (tabRouter && tabRouter.getActionForPathAndParams) {
              action.action = tabRouter.getActionForPathAndParams(parts.slice(1).join('/'), params);
            } else if (params) {
              action.params = params;
            }

            return action;
          }

          return null;
        }).find(function (action) {
          return !!action;
        }) || order.map(function (tabId) {
          var tabRouter = tabRouters[tabId];
          return tabRouter && tabRouter.getActionForPathAndParams(path, params);
        }).find(function (action) {
          return !!action;
        }) || null;
      },
      getScreenOptions: (0, _createConfigGetter2.default)(routeConfigs, config.navigationOptions),
      getScreenConfig: _getScreenConfigDeprecated2.default
    };
  };
},421,[376,411,410,374,413,414],"node_modules/react-navigation/src/routers/TabRouter.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _class,
      _temp2,
      _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-navigation/src/views/TabView/TabView.js";

  var _react = _require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1], "react-native");

  var _reactNativeTabView = _require(_dependencyMap[2], "react-native-tab-view");

  var _reactNativeSafeAreaView = _require(_dependencyMap[3], "react-native-safe-area-view");

  var _reactNativeSafeAreaView2 = babelHelpers.interopRequireDefault(_reactNativeSafeAreaView);

  var _ResourceSavingSceneView = _require(_dependencyMap[4], "../ResourceSavingSceneView");

  var _ResourceSavingSceneView2 = babelHelpers.interopRequireDefault(_ResourceSavingSceneView);

  var _withCachedChildNavigation = _require(_dependencyMap[5], "../../withCachedChildNavigation");

  var _withCachedChildNavigation2 = babelHelpers.interopRequireDefault(_withCachedChildNavigation);

  var TabView = (_temp2 = _class = function (_React$PureComponent) {
    babelHelpers.inherits(TabView, _React$PureComponent);

    function TabView() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, TabView);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = TabView.__proto__ || Object.getPrototypeOf(TabView)).call.apply(_ref, [this].concat(args))), _this), _this._handlePageChanged = function (index) {
        var navigation = _this.props.navigation;
        navigation.navigate(navigation.state.routes[index].routeName);
      }, _this._renderScene = function (_ref2) {
        var route = _ref2.route;
        var _this$props = _this.props,
            screenProps = _this$props.screenProps,
            navigation = _this$props.navigation;
        var focusedIndex = navigation.state.index;
        var focusedKey = navigation.state.routes[focusedIndex].key;
        var key = route.key;
        var childNavigation = _this.props.childNavigationProps[route.key];

        var TabComponent = _this.props.router.getComponentForRouteName(route.routeName);

        return _react2.default.createElement(_ResourceSavingSceneView2.default, {
          lazy: _this.props.lazy,
          isFocused: focusedKey === key,
          removeClippedSubViews: _this.props.removeClippedSubviews,
          animationEnabled: _this.props.animationEnabled,
          swipeEnabled: _this.props.swipeEnabled,
          screenProps: screenProps,
          component: TabComponent,
          navigation: _this.props.navigation,
          childNavigation: childNavigation,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 35
          }
        });
      }, _this._getLabel = function (_ref3) {
        var route = _ref3.route,
            tintColor = _ref3.tintColor,
            focused = _ref3.focused;

        var options = _this.props.router.getScreenOptions(_this.props.childNavigationProps[route.key], _this.props.screenProps || {});

        if (options.tabBarLabel) {
          return typeof options.tabBarLabel === 'function' ? options.tabBarLabel({
            tintColor: tintColor,
            focused: focused
          }) : options.tabBarLabel;
        }

        if (typeof options.title === 'string') {
          return options.title;
        }

        return route.routeName;
      }, _this._getOnPress = function (previousScene, _ref4) {
        var route = _ref4.route;

        var options = _this.props.router.getScreenOptions(_this.props.childNavigationProps[route.key], _this.props.screenProps || {});

        return options.tabBarOnPress;
      }, _this._getTestIDProps = function (_ref5) {
        var route = _ref5.route,
            focused = _ref5.focused;

        var options = _this.props.router.getScreenOptions(_this.props.childNavigationProps[route.key], _this.props.screenProps || {});

        return typeof options.tabBarTestIDProps === 'function' ? options.tabBarTestIDProps({
          focused: focused
        }) : options.tabBarTestIDProps;
      }, _this._renderIcon = function (_ref6) {
        var focused = _ref6.focused,
            route = _ref6.route,
            tintColor = _ref6.tintColor;

        var options = _this.props.router.getScreenOptions(_this.props.childNavigationProps[route.key], _this.props.screenProps || {});

        if (options.tabBarIcon) {
          return typeof options.tabBarIcon === 'function' ? options.tabBarIcon({
            tintColor: tintColor,
            focused: focused
          }) : options.tabBarIcon;
        }

        return null;
      }, _this._renderTabBar = function (props) {
        var _this$props2 = _this.props,
            tabBarOptions = _this$props2.tabBarOptions,
            TabBarComponent = _this$props2.tabBarComponent,
            animationEnabled = _this$props2.animationEnabled;

        if (typeof TabBarComponent === 'undefined') {
          return null;
        }

        return _react2.default.createElement(TabBarComponent, babelHelpers.extends({}, props, tabBarOptions, {
          tabBarPosition: _this.props.tabBarPosition,
          screenProps: _this.props.screenProps,
          navigation: _this.props.navigation,
          getLabel: _this._getLabel,
          getTestIDProps: _this._getTestIDProps,
          getOnPress: _this._getOnPress,
          renderIcon: _this._renderIcon,
          animationEnabled: animationEnabled,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 112
          }
        }));
      }, _this._renderPager = function (props) {
        return _react2.default.createElement(_reactNativeTabView.TabViewPagerPan, babelHelpers.extends({}, props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 127
          }
        }));
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(TabView, [{
      key: "render",
      value: function render() {
        var _props = this.props,
            router = _props.router,
            tabBarComponent = _props.tabBarComponent,
            tabBarPosition = _props.tabBarPosition,
            animationEnabled = _props.animationEnabled,
            configureTransition = _props.configureTransition,
            initialLayout = _props.initialLayout,
            screenProps = _props.screenProps;
        var renderHeader = void 0;
        var renderFooter = void 0;
        var renderPager = void 0;
        var state = this.props.navigation.state;
        var options = router.getScreenOptions(this.props.childNavigationProps[state.routes[state.index].key], screenProps || {});
        var tabBarVisible = options.tabBarVisible == null ? true : options.tabBarVisible;
        var swipeEnabled = options.swipeEnabled == null ? this.props.swipeEnabled : options.swipeEnabled;

        if (typeof swipeEnabled === 'function') {
          swipeEnabled = swipeEnabled(state);
        }

        if (tabBarComponent !== undefined && tabBarVisible) {
          if (tabBarPosition === 'bottom') {
            renderFooter = this._renderTabBar;
          } else {
            renderHeader = this._renderTabBar;
          }
        }

        if (animationEnabled === false && swipeEnabled === false || typeof configureTransition === 'function') {
          renderPager = this._renderPager;
        }

        var props = {
          initialLayout: initialLayout,
          animationEnabled: animationEnabled,
          configureTransition: configureTransition,
          swipeEnabled: swipeEnabled,
          renderPager: renderPager,
          renderHeader: renderHeader,
          renderFooter: renderFooter,
          renderScene: this._renderScene,
          onIndexChange: this._handlePageChanged,
          navigationState: this.props.navigation.state,
          screenProps: this.props.screenProps,
          style: styles.container
        };
        return _react2.default.createElement(_reactNativeTabView.TabViewAnimated, babelHelpers.extends({}, props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 192
          }
        }));
      }
    }]);
    return TabView;
  }(_react2.default.PureComponent), _class.defaultProps = {
    lazy: true,
    removedClippedSubviews: true,
    initialLayout: _reactNative.Platform.select({
      android: {
        width: 1,
        height: 0
      }
    })
  }, _temp2);
  exports.default = (0, _withCachedChildNavigation2.default)(TabView);

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1
    }
  });
},422,[114,12,423,387,433,419],"node_modules/react-navigation/src/views/TabView/TabView.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = {
    get TabViewAnimated() {
      return _require(_dependencyMap[0], './TabViewAnimated').default;
    },

    get TabViewPagerPan() {
      return _require(_dependencyMap[1], './TabViewPagerPan').default;
    },

    get TabViewPagerScroll() {
      return _require(_dependencyMap[2], './TabViewPagerScroll').default;
    },

    get TabViewPagerAndroid() {
      return _require(_dependencyMap[3], './TabViewPagerAndroid').default;
    },

    get TabViewPagerExperimental() {
      return _require(_dependencyMap[4], './TabViewPagerExperimental').default;
    },

    get TabBar() {
      return _require(_dependencyMap[5], './TabBar').default;
    },

    get SceneMap() {
      return _require(_dependencyMap[6], './SceneMap').default;
    }

  };
},423,[424,428,427,426,429,430,432],"node_modules/react-navigation/node_modules/react-native-tab-view/src/index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _class,
      _temp,
      _initialiseProps,
      _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-navigation/node_modules/react-native-tab-view/src/TabViewAnimated.js";

  var _react = _require(_dependencyMap[0], "react");

  var React = babelHelpers.interopRequireWildcard(_react);

  var _propTypes = _require(_dependencyMap[1], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[2], "react-native");

  var _TabViewPropTypes = _require(_dependencyMap[3], "./TabViewPropTypes");

  var TabViewPager = void 0;

  switch (_reactNative.Platform.OS) {
    case 'android':
      TabViewPager = _require(_dependencyMap[4], './TabViewPagerAndroid').default;
      break;

    case 'ios':
      TabViewPager = _require(_dependencyMap[5], './TabViewPagerScroll').default;
      break;

    default:
      TabViewPager = _require(_dependencyMap[6], './TabViewPagerPan').default;
      break;
  }

  var TabViewAnimated = (_temp = _class = function (_React$Component) {
    babelHelpers.inherits(TabViewAnimated, _React$Component);

    function TabViewAnimated(props) {
      babelHelpers.classCallCheck(this, TabViewAnimated);

      var _this = babelHelpers.possibleConstructorReturn(this, (TabViewAnimated.__proto__ || Object.getPrototypeOf(TabViewAnimated)).call(this, props));

      _initialiseProps.call(_this);

      var navigationState = _this.props.navigationState;
      var layout = babelHelpers.extends({}, _this.props.initialLayout, {
        measured: false
      });
      var panX = new _reactNative.Animated.Value(0);
      var offsetX = new _reactNative.Animated.Value(-navigationState.index * layout.width);
      var layoutXY = new _reactNative.Animated.ValueXY({
        x: layout.width || 0.001,
        y: layout.height || 0.001
      });

      var position = _reactNative.Animated.multiply(_reactNative.Animated.divide(_reactNative.Animated.add(panX, offsetX), layoutXY.x), -1);

      _this.state = {
        loaded: [navigationState.index],
        layout: layout,
        layoutXY: layoutXY,
        panX: panX,
        offsetX: offsetX,
        position: position
      };
      return _this;
    }

    babelHelpers.createClass(TabViewAnimated, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this._mounted = true;
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this._mounted = false;
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var _props = this.props,
            navigationState = _props.navigationState,
            onIndexChange = _props.onIndexChange,
            initialLayout = _props.initialLayout,
            renderScene = _props.renderScene,
            renderPager = _props.renderPager,
            renderHeader = _props.renderHeader,
            renderFooter = _props.renderFooter,
            rest = babelHelpers.objectWithoutProperties(_props, ["navigationState", "onIndexChange", "initialLayout", "renderScene", "renderPager", "renderHeader", "renderFooter"]);

        var props = this._buildSceneRendererProps();

        return React.createElement(
          _reactNative.View,
          {
            onLayout: this._handleLayout,
            loaded: this.state.loaded,
            style: [styles.container, this.props.style],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 194
            }
          },
          renderHeader && renderHeader(props),
          renderPager(babelHelpers.extends({}, props, rest, {
            panX: this.state.panX,
            offsetX: this.state.offsetX,
            children: navigationState.routes.map(function (route, index) {
              var scene = _this2._renderScene(babelHelpers.extends({}, props, {
                route: route,
                index: index,
                focused: index === navigationState.index
              }));

              if (scene) {
                return React.cloneElement(scene, {
                  key: route.key
                });
              }

              return scene;
            })
          })),
          renderFooter && renderFooter(props)
        );
      }
    }]);
    return TabViewAnimated;
  }(React.Component), _class.propTypes = {
    navigationState: _TabViewPropTypes.NavigationStatePropType.isRequired,
    onIndexChange: _propTypes2.default.func.isRequired,
    initialLayout: _propTypes2.default.shape({
      height: _propTypes2.default.number.isRequired,
      width: _propTypes2.default.number.isRequired
    }),
    canJumpToTab: _propTypes2.default.func.isRequired,
    renderPager: _propTypes2.default.func.isRequired,
    renderScene: _propTypes2.default.func.isRequired,
    renderHeader: _propTypes2.default.func,
    renderFooter: _propTypes2.default.func
  }, _class.defaultProps = {
    canJumpToTab: function canJumpToTab() {
      return true;
    },
    renderPager: function renderPager(props) {
      return React.createElement(TabViewPager, babelHelpers.extends({}, props, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 71
        }
      }));
    },
    initialLayout: {
      height: 0,
      width: 0
    },
    useNativeDriver: false
  }, _initialiseProps = function _initialiseProps() {
    var _this3 = this;

    this._mounted = false;

    this._renderScene = function (props) {
      return _this3.props.renderScene(props);
    };

    this._handleLayout = function (e) {
      var _e$nativeEvent$layout = e.nativeEvent.layout,
          height = _e$nativeEvent$layout.height,
          width = _e$nativeEvent$layout.width;

      if (_this3.state.layout.width === width && _this3.state.layout.height === height) {
        return;
      }

      _this3.state.offsetX.setValue(-_this3.props.navigationState.index * width);

      _this3.state.layoutXY.setValue({
        x: width || 0.001,
        y: height || 0.001
      });

      _this3.setState({
        layout: {
          measured: true,
          height: height,
          width: width
        }
      });
    };

    this._buildSceneRendererProps = function () {
      return {
        panX: _this3.state.panX,
        offsetX: _this3.state.offsetX,
        position: _this3.state.position,
        layout: _this3.state.layout,
        navigationState: _this3.props.navigationState,
        jumpToIndex: _this3._jumpToIndex,
        useNativeDriver: _this3.props.useNativeDriver === true
      };
    };

    this._jumpToIndex = function (index) {
      if (!_this3._mounted) {
        return;
      }

      var _props2 = _this3.props,
          canJumpToTab = _props2.canJumpToTab,
          navigationState = _props2.navigationState;

      if (!canJumpToTab(navigationState.routes[index])) {
        return;
      }

      if (index !== navigationState.index) {
        _this3.props.onIndexChange(index);
      }
    };
  }, _temp);
  exports.default = TabViewAnimated;

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      overflow: 'hidden'
    }
  });
},424,[114,141,12,425,426,427,428],"node_modules/react-navigation/node_modules/react-native-tab-view/src/TabViewAnimated.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.PagerRendererPropType = exports.SceneRendererPropType = exports.NavigationStatePropType = exports.NavigationRoutePropType = undefined;

  var _propTypes = _require(_dependencyMap[0], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[1], "react-native");

  var NavigationRoutePropType = exports.NavigationRoutePropType = _propTypes2.default.shape({
    title: _propTypes2.default.string,
    key: _propTypes2.default.string.isRequired
  });

  var NavigationStatePropType = exports.NavigationStatePropType = _propTypes2.default.shape({
    routes: _propTypes2.default.arrayOf(NavigationRoutePropType).isRequired,
    index: _propTypes2.default.number.isRequired
  });

  var SceneRendererPropType = exports.SceneRendererPropType = {
    panX: _propTypes2.default.object.isRequired,
    offsetX: _propTypes2.default.object.isRequired,
    layout: _propTypes2.default.shape({
      measured: _propTypes2.default.bool.isRequired,
      height: _propTypes2.default.number.isRequired,
      width: _propTypes2.default.number.isRequired
    }).isRequired,
    navigationState: NavigationStatePropType.isRequired,
    position: _propTypes2.default.object.isRequired,
    jumpToIndex: _propTypes2.default.func.isRequired,
    useNativeDriver: _propTypes2.default.bool
  };
  var PagerRendererPropType = exports.PagerRendererPropType = {
    layout: _propTypes2.default.shape({
      measured: _propTypes2.default.bool.isRequired,
      height: _propTypes2.default.number.isRequired,
      width: _propTypes2.default.number.isRequired
    }).isRequired,
    navigationState: NavigationStatePropType.isRequired,
    panX: _propTypes2.default.instanceOf(_reactNative.Animated.Value).isRequired,
    offsetX: _propTypes2.default.instanceOf(_reactNative.Animated.Value).isRequired,
    canJumpToTab: _propTypes2.default.func.isRequired,
    jumpToIndex: _propTypes2.default.func.isRequired,
    animationEnabled: _propTypes2.default.bool,
    swipeEnabled: _propTypes2.default.bool,
    useNativeDriver: _propTypes2.default.bool,
    children: _propTypes2.default.node.isRequired
  };
},425,[141,12],"node_modules/react-navigation/node_modules/react-native-tab-view/src/TabViewPropTypes.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _class,
      _temp,
      _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-navigation/node_modules/react-native-tab-view/src/TabViewPagerAndroid.js";

  var _react = _require(_dependencyMap[0], "react");

  var React = babelHelpers.interopRequireWildcard(_react);

  var _reactNative = _require(_dependencyMap[1], "react-native");

  var _TabViewPropTypes = _require(_dependencyMap[2], "./TabViewPropTypes");

  var TabViewPagerAndroid = (_temp = _class = function (_React$Component) {
    babelHelpers.inherits(TabViewPagerAndroid, _React$Component);

    function TabViewPagerAndroid(props) {
      babelHelpers.classCallCheck(this, TabViewPagerAndroid);

      var _this = babelHelpers.possibleConstructorReturn(this, (TabViewPagerAndroid.__proto__ || Object.getPrototypeOf(TabViewPagerAndroid)).call(this, props));

      _this._isIdle = true;
      _this._currentIndex = 0;

      _this._getPageIndex = function (index) {
        return _reactNative.I18nManager.isRTL ? _this.props.navigationState.routes.length - (index + 1) : index;
      };

      _this._setPage = function (index) {
        var animated = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        var pager = _this._viewPager;

        if (pager) {
          var page = _this._getPageIndex(index);

          if (_this.props.animationEnabled === false || animated === false) {
            pager.setPageWithoutAnimation(page);
          } else {
            pager.setPage(page);
          }
        }
      };

      _this._handlePageChange = function (index) {
        if (_this._isIdle && _this._currentIndex !== index) {
          _this._setPage(index);

          _this._currentIndex = index;
        }
      };

      _this._handlePageScroll = function (e) {
        _this.props.offsetX.setValue(e.nativeEvent.position * _this.props.layout.width * (_reactNative.I18nManager.isRTL ? 1 : -1));

        _this.props.panX.setValue(e.nativeEvent.offset * _this.props.layout.width * (_reactNative.I18nManager.isRTL ? 1 : -1));
      };

      _this._handlePageScrollStateChanged = function (e) {
        _this._isIdle = e === 'idle';
        var nextIndex = _this._currentIndex;

        if (_this.props.canJumpToTab(_this.props.navigationState.routes[nextIndex])) {
          _this.props.jumpToIndex(nextIndex);
        } else {
          _this._setPage(_this.props.navigationState.index);

          _this._currentIndex = _this.props.navigationState.index;
        }
      };

      _this._handlePageSelected = function (e) {
        var index = _this._getPageIndex(e.nativeEvent.position);

        _this._currentIndex = index;
      };

      _this._setRef = function (el) {
        return _this._viewPager = el;
      };

      _this._currentIndex = _this.props.navigationState.index;
      return _this;
    }

    babelHelpers.createClass(TabViewPagerAndroid, [{
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        if (this.props.layout !== prevProps.layout || this.props.navigationState.routes.length !== prevProps.navigationState.routes.length || this.props.navigationState.index !== prevProps.navigationState.index) {
          this._handlePageChange(this.props.navigationState.index);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _props = this.props,
            children = _props.children,
            navigationState = _props.navigationState,
            swipeEnabled = _props.swipeEnabled;
        var content = React.Children.map(children, function (child, i) {
          return React.createElement(
            _reactNative.View,
            {
              key: navigationState.routes[i].key,
              testID: navigationState.routes[i].testID,
              style: styles.page,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 111
              }
            },
            child
          );
        });

        if (_reactNative.I18nManager.isRTL) {
          content.reverse();
        }

        var initialPage = this._getPageIndex(navigationState.index);

        return React.createElement(
          _reactNative.ViewPagerAndroid,
          {
            key: navigationState.routes.length,
            keyboardDismissMode: "on-drag",
            initialPage: initialPage,
            scrollEnabled: swipeEnabled !== false,
            onPageScroll: this._handlePageScroll,
            onPageScrollStateChanged: this._handlePageScrollStateChanged,
            onPageSelected: this._handlePageSelected,
            style: styles.container,
            ref: this._setRef,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 127
            }
          },
          content
        );
      }
    }]);
    return TabViewPagerAndroid;
  }(React.Component), _class.propTypes = _TabViewPropTypes.PagerRendererPropType, _class.defaultProps = {
    canJumpToTab: function canJumpToTab() {
      return true;
    }
  }, _temp);
  exports.default = TabViewPagerAndroid;

  var styles = _reactNative.StyleSheet.create({
    container: {
      flexGrow: 1
    },
    page: {
      overflow: 'hidden'
    }
  });
},426,[114,12,425],"node_modules/react-navigation/node_modules/react-native-tab-view/src/TabViewPagerAndroid.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _class,
      _temp,
      _initialiseProps,
      _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-navigation/node_modules/react-native-tab-view/src/TabViewPagerScroll.js";

  var _react = _require(_dependencyMap[0], "react");

  var React = babelHelpers.interopRequireWildcard(_react);

  var _reactNative = _require(_dependencyMap[1], "react-native");

  var _TabViewPropTypes = _require(_dependencyMap[2], "./TabViewPropTypes");

  var TabViewPagerScroll = (_temp = _class = function (_React$Component) {
    babelHelpers.inherits(TabViewPagerScroll, _React$Component);

    function TabViewPagerScroll(props) {
      babelHelpers.classCallCheck(this, TabViewPagerScroll);

      var _this = babelHelpers.possibleConstructorReturn(this, (TabViewPagerScroll.__proto__ || Object.getPrototypeOf(TabViewPagerScroll)).call(this, props));

      _initialiseProps.call(_this);

      var _this$props = _this.props,
          navigationState = _this$props.navigationState,
          layout = _this$props.layout;
      _this.state = {
        initialOffset: {
          x: navigationState.index * layout.width,
          y: 0
        }
      };
      return _this;
    }

    babelHelpers.createClass(TabViewPagerScroll, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this._setInitialPage();
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        if (prevProps.layout.width !== this.props.layout.width || prevProps.navigationState !== this.props.navigationState) {
          this._scrollTo(this.props.navigationState.index * this.props.layout.width, prevProps.layout.width === this.props.layout.width);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var _props = this.props,
            children = _props.children,
            layout = _props.layout,
            navigationState = _props.navigationState;
        return React.createElement(
          _reactNative.ScrollView,
          {
            horizontal: true,
            pagingEnabled: true,
            directionalLockEnabled: true,
            keyboardDismissMode: "on-drag",
            keyboardShouldPersistTaps: "always",
            overScrollMode: "never",
            scrollEnabled: this.props.swipeEnabled,
            automaticallyAdjustContentInsets: false,
            bounces: false,
            alwaysBounceHorizontal: false,
            scrollsToTop: false,
            showsHorizontalScrollIndicator: false,
            scrollEventThrottle: 1,
            onScroll: this._handleScroll,
            onMomentumScrollEnd: this._handleMomentumScrollEnd,
            contentOffset: this.state.initialOffset,
            style: styles.container,
            contentContainerStyle: layout.width ? null : styles.container,
            ref: function ref(el) {
              return _this2._scrollView = el;
            },
            __source: {
              fileName: _jsxFileName,
              lineNumber: 128
            }
          },
          React.Children.map(children, function (child, i) {
            return React.createElement(
              _reactNative.View,
              {
                key: navigationState.routes[i].key,
                testID: navigationState.routes[i].testID,
                style: layout.width ? {
                  width: layout.width,
                  overflow: 'hidden'
                } : i === navigationState.index ? styles.page : null,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 150
                }
              },
              i === navigationState.index || layout.width ? child : null
            );
          })
        );
      }
    }]);
    return TabViewPagerScroll;
  }(React.Component), _class.propTypes = _TabViewPropTypes.PagerRendererPropType, _class.defaultProps = {
    canJumpToTab: function canJumpToTab() {
      return true;
    }
  }, _initialiseProps = function _initialiseProps() {
    var _this3 = this;

    this._isIdle = true;
    this._isInitial = true;

    this._setInitialPage = function () {
      if (_this3.props.layout.width) {
        _this3._isInitial = true;

        _this3._scrollTo(_this3.props.navigationState.index * _this3.props.layout.width, false);
      }

      setTimeout(function () {
        _this3._isInitial = false;
      }, 50);
    };

    this._scrollTo = function (x, animated) {
      if (_this3._isIdle && _this3._scrollView) {
        _this3._scrollView.scrollTo({
          x: x,
          animated: animated && _this3.props.animationEnabled !== false
        });
      }
    };

    this._handleMomentumScrollEnd = function (e) {
      var nextIndex = Math.round(e.nativeEvent.contentOffset.x / _this3.props.layout.width);

      if (_this3.props.canJumpToTab(_this3.props.navigationState.routes[nextIndex])) {
        _this3.props.jumpToIndex(nextIndex);
      } else {
        global.requestAnimationFrame(function () {
          _this3._scrollTo(_this3.props.navigationState.index * _this3.props.layout.width);
        });
      }
    };

    this._handleScroll = function (e) {
      if (_this3._isInitial) {
        return;
      }

      var _props2 = _this3.props,
          navigationState = _props2.navigationState,
          layout = _props2.layout;
      var offset = navigationState.index * layout.width;

      _this3.props.offsetX.setValue(-offset);

      _this3.props.panX.setValue(offset - e.nativeEvent.contentOffset.x);

      global.cancelAnimationFrame(_this3._idleCallback);
      _this3._isIdle = false;
      _this3._idleCallback = global.requestAnimationFrame(function () {
        _this3._isIdle = true;
      });
    };
  }, _temp);
  exports.default = TabViewPagerScroll;

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1
    },
    page: {
      flex: 1,
      overflow: 'hidden'
    }
  });
},427,[114,12,425],"node_modules/react-navigation/node_modules/react-native-tab-view/src/TabViewPagerScroll.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _class,
      _temp2,
      _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-navigation/node_modules/react-native-tab-view/src/TabViewPagerPan.js";

  var _react = _require(_dependencyMap[0], "react");

  var React = babelHelpers.interopRequireWildcard(_react);

  var _propTypes = _require(_dependencyMap[1], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[2], "react-native");

  var _TabViewPropTypes = _require(_dependencyMap[3], "./TabViewPropTypes");

  var DEAD_ZONE = 12;
  var DefaultTransitionSpec = {
    timing: _reactNative.Animated.spring,
    tension: 300,
    friction: 35
  };
  var TabViewPagerPan = (_temp2 = _class = function (_React$Component) {
    babelHelpers.inherits(TabViewPagerPan, _React$Component);

    function TabViewPagerPan() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, TabViewPagerPan);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = TabViewPagerPan.__proto__ || Object.getPrototypeOf(TabViewPagerPan)).call.apply(_ref, [this].concat(args))), _this), _this._isMovingHorizontally = function (evt, gestureState) {
        return Math.abs(gestureState.dx) > Math.abs(gestureState.dy * 2) && Math.abs(gestureState.vx) > Math.abs(gestureState.vy * 2);
      }, _this._canMoveScreen = function (evt, gestureState) {
        if (_this.props.swipeEnabled === false) {
          return false;
        }

        var _this$props$navigatio = _this.props.navigationState,
            routes = _this$props$navigatio.routes,
            index = _this$props$navigatio.index;
        return _this._isMovingHorizontally(evt, gestureState) && (gestureState.dx >= DEAD_ZONE && index >= 0 || gestureState.dx <= -DEAD_ZONE && index <= routes.length - 1);
      }, _this._startGesture = function (evt, gestureState) {
        if (typeof _this.props.onSwipeStart === 'function') {
          _this.props.onSwipeStart(evt, gestureState);
        }

        _this.props.panX.stopAnimation();
      }, _this._respondToGesture = function (evt, gestureState) {
        var _this$props$navigatio2 = _this.props.navigationState,
            routes = _this$props$navigatio2.routes,
            index = _this$props$navigatio2.index;

        if (gestureState.dx > 0 && index <= 0 || gestureState.dx < 0 && index >= routes.length - 1) {
          return;
        }

        _this.props.panX.setValue(gestureState.dx);
      }, _this._finishGesture = function (evt, gestureState) {
        var _this$props = _this.props,
            navigationState = _this$props.navigationState,
            layout = _this$props.layout,
            _this$props$swipeDist = _this$props.swipeDistanceThreshold,
            swipeDistanceThreshold = _this$props$swipeDist === undefined ? layout.width / 1.75 : _this$props$swipeDist;
        var _this$props$swipeVelo = _this.props.swipeVelocityThreshold,
            swipeVelocityThreshold = _this$props$swipeVelo === undefined ? 0.15 : _this$props$swipeVelo;

        if (_reactNative.Platform.OS === 'android') {
          swipeVelocityThreshold /= 1000000;
        }

        var currentIndex = typeof _this._pendingIndex === 'number' ? _this._pendingIndex : navigationState.index;
        var nextIndex = currentIndex;

        if (Math.abs(gestureState.dx) > Math.abs(gestureState.dy) && Math.abs(gestureState.vx) > Math.abs(gestureState.vy) && (Math.abs(gestureState.dx) > swipeDistanceThreshold || Math.abs(gestureState.vx) > swipeVelocityThreshold)) {
          nextIndex = Math.round(Math.min(Math.max(0, currentIndex - gestureState.dx / Math.abs(gestureState.dx)), navigationState.routes.length - 1));
        }

        if (!isFinite(nextIndex) || !_this.props.canJumpToTab(_this.props.navigationState.routes[nextIndex])) {
          nextIndex = currentIndex;
        }

        _this._transitionTo(nextIndex);
      }, _this._transitionTo = function (index) {
        var offset = -index * _this.props.layout.width;

        if (_this.props.animationEnabled === false) {
          _this.props.panX.setValue(0);

          _this.props.offsetX.setValue(offset);

          return;
        }

        var timing = DefaultTransitionSpec.timing,
            transitionConfig = babelHelpers.objectWithoutProperties(DefaultTransitionSpec, ["timing"]);

        _reactNative.Animated.parallel([timing(_this.props.panX, babelHelpers.extends({}, transitionConfig, {
          toValue: 0
        })), timing(_this.props.offsetX, babelHelpers.extends({}, transitionConfig, {
          toValue: offset
        }))]).start(function (_ref2) {
          var finished = _ref2.finished;

          if (finished) {
            _this.props.jumpToIndex(index);

            _this._pendingIndex = null;
          }
        });

        _this._pendingIndex = index;
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(TabViewPagerPan, [{
      key: "componentWillMount",
      value: function componentWillMount() {
        this._panResponder = _reactNative.PanResponder.create({
          onMoveShouldSetPanResponder: this._canMoveScreen,
          onMoveShouldSetPanResponderCapture: this._canMoveScreen,
          onPanResponderGrant: this._startGesture,
          onPanResponderMove: this._respondToGesture,
          onPanResponderTerminate: this._finishGesture,
          onPanResponderRelease: this._finishGesture,
          onPanResponderTerminationRequest: function onPanResponderTerminationRequest() {
            return true;
          }
        });
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        if (prevProps.navigationState.index !== this.props.navigationState.index) {
          this._transitionTo(this.props.navigationState.index);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _props = this.props,
            panX = _props.panX,
            offsetX = _props.offsetX,
            navigationState = _props.navigationState,
            layout = _props.layout,
            children = _props.children;
        var width = layout.width;
        var routes = navigationState.routes;
        var maxTranslate = width * (routes.length - 1);

        var translateX = _reactNative.Animated.add(panX, offsetX).interpolate({
          inputRange: [-maxTranslate, 0],
          outputRange: [-maxTranslate, 0],
          extrapolate: 'clamp'
        });

        return React.createElement(
          _reactNative.Animated.View,
          babelHelpers.extends({
            style: [styles.sheet, width ? {
              width: routes.length * width,
              transform: [{
                translateX: translateX
              }]
            } : null]
          }, this._panResponder.panHandlers, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 238
            }
          }),
          React.Children.map(children, function (child, i) {
            return React.createElement(
              _reactNative.View,
              {
                key: navigationState.routes[i].key,
                testID: navigationState.routes[i].testID,
                style: width ? {
                  width: width
                } : i === navigationState.index ? _reactNative.StyleSheet.absoluteFill : null,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 251
                }
              },
              i === navigationState.index || width ? child : null
            );
          })
        );
      }
    }]);
    return TabViewPagerPan;
  }(React.Component), _class.propTypes = babelHelpers.extends({}, _TabViewPropTypes.PagerRendererPropType, {
    configureTransition: _propTypes2.default.func.isRequired,
    swipeDistanceThreshold: _propTypes2.default.number,
    swipeVelocityThreshold: _propTypes2.default.number,
    onSwipeStart: _propTypes2.default.func,
    onSwipeEnd: _propTypes2.default.func
  }), _class.defaultProps = {
    canJumpToTab: function canJumpToTab() {
      return true;
    },
    configureTransition: function configureTransition() {
      return DefaultTransitionSpec;
    },
    initialLayout: {
      height: 0,
      width: 0
    }
  }, _temp2);
  exports.default = TabViewPagerPan;

  var styles = _reactNative.StyleSheet.create({
    sheet: {
      flex: 1,
      flexDirection: 'row',
      alignItems: 'stretch'
    }
  });
},428,[114,141,12,425],"node_modules/react-navigation/node_modules/react-native-tab-view/src/TabViewPagerPan.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _class,
      _temp2,
      _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-navigation/node_modules/react-native-tab-view/src/TabViewPagerExperimental.js";

  var _react = _require(_dependencyMap[0], "react");

  var React = babelHelpers.interopRequireWildcard(_react);

  var _propTypes = _require(_dependencyMap[1], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[2], "react-native");

  var _TabViewPropTypes = _require(_dependencyMap[3], "./TabViewPropTypes");

  var DefaultTransitionSpec = {
    timing: _reactNative.Animated.spring,
    tension: 75,
    friction: 25
  };
  var TabViewPagerExperimental = (_temp2 = _class = function (_React$Component) {
    babelHelpers.inherits(TabViewPagerExperimental, _React$Component);

    function TabViewPagerExperimental() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, TabViewPagerExperimental);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = TabViewPagerExperimental.__proto__ || Object.getPrototypeOf(TabViewPagerExperimental)).call.apply(_ref, [this].concat(args))), _this), _this._handleHandlerStateChange = function (event) {
        var GestureHandler = _this.props.GestureHandler;

        if (event.nativeEvent.state === GestureHandler.State.END) {
          var _this$props = _this.props,
              navigationState = _this$props.navigationState,
              layout = _this$props.layout,
              _this$props$swipeDist = _this$props.swipeDistanceThreshold,
              _swipeDistanceThreshold = _this$props$swipeDist === undefined ? layout.width / 1.75 : _this$props$swipeDist,
              _this$props$swipeVelo = _this$props.swipeVelocityThreshold,
              _swipeVelocityThreshold = _this$props$swipeVelo === undefined ? 150 : _this$props$swipeVelo;

          var _event$nativeEvent = event.nativeEvent,
              translationX = _event$nativeEvent.translationX,
              translationY = _event$nativeEvent.translationY,
              velocityX = _event$nativeEvent.velocityX,
              velocityY = _event$nativeEvent.velocityY;
          var currentIndex = typeof _this._pendingIndex === 'number' ? _this._pendingIndex : navigationState.index;
          var nextIndex = currentIndex;

          if (Math.abs(translationX) > Math.abs(translationY) && Math.abs(velocityX) > Math.abs(velocityY) && (Math.abs(translationX) > _swipeDistanceThreshold || Math.abs(velocityX) > _swipeVelocityThreshold)) {
            nextIndex = Math.round(Math.min(Math.max(0, currentIndex - translationX / Math.abs(translationX)), navigationState.routes.length - 1));
          }

          if (!isFinite(nextIndex) || !_this.props.canJumpToTab(_this.props.navigationState.routes[nextIndex])) {
            nextIndex = currentIndex;
          }

          _this._transitionTo(nextIndex, velocityX);
        }
      }, _this._transitionTo = function (index, velocity) {
        var offset = -index * _this.props.layout.width;

        if (_this.props.animationEnabled === false) {
          _this.props.panX.setValue(0);

          _this.props.offsetX.setValue(offset);

          return;
        }

        var timing = DefaultTransitionSpec.timing,
            transitionConfig = babelHelpers.objectWithoutProperties(DefaultTransitionSpec, ["timing"]);
        var useNativeDriver = _this.props.useNativeDriver;

        _reactNative.Animated.parallel([timing(_this.props.panX, babelHelpers.extends({}, transitionConfig, {
          toValue: 0,
          velocity: velocity,
          useNativeDriver: useNativeDriver
        })), timing(_this.props.offsetX, babelHelpers.extends({}, transitionConfig, {
          toValue: offset,
          velocity: velocity,
          useNativeDriver: useNativeDriver
        }))]).start(function (_ref2) {
          var finished = _ref2.finished;

          if (finished) {
            _this.props.jumpToIndex(index);

            _this._pendingIndex = null;
          }
        });

        _this._pendingIndex = index;
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(TabViewPagerExperimental, [{
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        if (prevProps.navigationState.index !== this.props.navigationState.index) {
          this._transitionTo(this.props.navigationState.index);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _props = this.props,
            GestureHandler = _props.GestureHandler,
            panX = _props.panX,
            offsetX = _props.offsetX,
            layout = _props.layout,
            navigationState = _props.navigationState,
            swipeEnabled = _props.swipeEnabled,
            children = _props.children;
        var width = layout.width;
        var routes = navigationState.routes;
        var maxTranslate = width * (routes.length - 1);

        var translateX = _reactNative.Animated.add(panX, offsetX).interpolate({
          inputRange: [-maxTranslate, 0],
          outputRange: [-maxTranslate, 0],
          extrapolate: 'clamp'
        });

        return React.createElement(
          GestureHandler.PanGestureHandler,
          {
            enabled: layout.width !== 0 && swipeEnabled !== false,
            minDeltaX: 10,
            onGestureEvent: _reactNative.Animated.event([{
              nativeEvent: {
                translationX: this.props.panX
              }
            }], {
              useNativeDriver: this.props.useNativeDriver
            }),
            onHandlerStateChange: this._handleHandlerStateChange,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 150
            }
          },
          React.createElement(
            _reactNative.Animated.View,
            {
              style: [styles.sheet, width ? {
                width: routes.length * width,
                transform: [{
                  translateX: translateX
                }]
              } : null],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 159
              }
            },
            React.Children.map(children, function (child, i) {
              return React.createElement(
                _reactNative.View,
                {
                  key: navigationState.routes[i].key,
                  testID: navigationState.routes[i].testID,
                  style: width ? {
                    width: width
                  } : i === navigationState.index ? _reactNative.StyleSheet.absoluteFill : null,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 168
                  }
                },
                i === navigationState.index || width ? child : null
              );
            })
          )
        );
      }
    }]);
    return TabViewPagerExperimental;
  }(React.Component), _class.propTypes = babelHelpers.extends({}, _TabViewPropTypes.PagerRendererPropType, {
    swipeDistanceThreshold: _propTypes2.default.number,
    swipeVelocityThreshold: _propTypes2.default.number,
    GestureHandler: _propTypes2.default.object
  }), _class.defaultProps = {
    GestureHandler: global.__expo && global.__expo.DangerZone ? global.__expo.DangerZone.GestureHandler : undefined,
    canJumpToTab: function canJumpToTab() {
      return true;
    }
  }, _temp2);
  exports.default = TabViewPagerExperimental;

  var styles = _reactNative.StyleSheet.create({
    sheet: {
      flex: 1,
      flexDirection: 'row',
      alignItems: 'stretch'
    }
  });
},429,[114,141,12,425],"node_modules/react-navigation/node_modules/react-native-tab-view/src/TabViewPagerExperimental.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _class,
      _temp,
      _initialiseProps,
      _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-navigation/node_modules/react-native-tab-view/src/TabBar.js";

  var _react = _require(_dependencyMap[0], "react");

  var React = babelHelpers.interopRequireWildcard(_react);

  var _propTypes = _require(_dependencyMap[1], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[2], "react-native");

  var _TouchableItem = _require(_dependencyMap[3], "./TouchableItem");

  var _TouchableItem2 = babelHelpers.interopRequireDefault(_TouchableItem);

  var _TabViewPropTypes = _require(_dependencyMap[4], "./TabViewPropTypes");

  var useNativeDriver = Boolean(_reactNative.NativeModules.NativeAnimatedModule);
  var TabBar = (_temp = _class = function (_React$Component) {
    babelHelpers.inherits(TabBar, _React$Component);

    function TabBar(props) {
      babelHelpers.classCallCheck(this, TabBar);

      var _this = babelHelpers.possibleConstructorReturn(this, (TabBar.__proto__ || Object.getPrototypeOf(TabBar)).call(this, props));

      _initialiseProps.call(_this);

      var initialVisibility = 1;

      if (_this.props.scrollEnabled) {
        var tabWidth = _this._getTabWidth(_this.props);

        if (!tabWidth) {
          initialVisibility = 0;
        }
      }

      var initialOffset = _this.props.scrollEnabled && _this.props.layout.width ? {
        x: _this._getScrollAmount(_this.props, _this.props.navigationState.index),
        y: 0
      } : undefined;
      _this.state = {
        visibility: new _reactNative.Animated.Value(initialVisibility),
        scrollAmount: new _reactNative.Animated.Value(0),
        initialOffset: initialOffset
      };
      return _this;
    }

    babelHelpers.createClass(TabBar, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this._adjustScroll(this.props.navigationState.index);

        this.props.scrollEnabled && this._startTrackingPosition();
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        var prevTabWidth = this._getTabWidth(prevProps);

        var currentTabWidth = this._getTabWidth(this.props);

        if (prevTabWidth !== currentTabWidth && currentTabWidth) {
          this.state.visibility.setValue(1);
        }

        if ((prevProps.navigationState !== this.props.navigationState || prevProps.layout !== this.props.layout || prevTabWidth !== currentTabWidth) && this.props.navigationState.index !== this._pendingIndex) {
          this._resetScroll(this.props.navigationState.index, Boolean(prevProps.layout.width));

          this._pendingIndex = null;
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this._stopTrackingPosition();
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var _props = this.props,
            position = _props.position,
            navigationState = _props.navigationState,
            scrollEnabled = _props.scrollEnabled;
        var routes = navigationState.routes,
            index = navigationState.index;

        var tabWidth = this._getTabWidth(this.props);

        var tabBarWidth = tabWidth * routes.length;
        var inputRange = [-1].concat(babelHelpers.toConsumableArray(routes.map(function (x, i) {
          return i;
        })));

        var translateX = _reactNative.Animated.multiply(this.state.scrollAmount, -1);

        return React.createElement(
          _reactNative.Animated.View,
          {
            style: [styles.tabBar, this.props.style],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 346
            }
          },
          React.createElement(
            _reactNative.Animated.View,
            {
              pointerEvents: "none",
              style: [styles.indicatorContainer, scrollEnabled ? {
                width: tabBarWidth,
                transform: [{
                  translateX: translateX
                }]
              } : null],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 347
              }
            },
            this._renderIndicator(babelHelpers.extends({}, this.props, {
              width: tabWidth
            }))
          ),
          React.createElement(
            _reactNative.View,
            {
              style: styles.scroll,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 361
              }
            },
            React.createElement(
              _reactNative.Animated.ScrollView,
              {
                horizontal: true,
                keyboardShouldPersistTaps: "handled",
                scrollEnabled: scrollEnabled,
                bounces: false,
                alwaysBounceHorizontal: false,
                scrollsToTop: false,
                showsHorizontalScrollIndicator: false,
                automaticallyAdjustContentInsets: false,
                overScrollMode: "never",
                contentContainerStyle: [styles.tabContent, scrollEnabled ? null : styles.container],
                scrollEventThrottle: 1,
                onScroll: _reactNative.Animated.event([{
                  nativeEvent: {
                    contentOffset: {
                      x: this.state.scrollAmount
                    }
                  }
                }], {
                  useNativeDriver: useNativeDriver,
                  listener: this._handleScroll
                }),
                onScrollBeginDrag: this._handleBeginDrag,
                onScrollEndDrag: this._handleEndDrag,
                onMomentumScrollBegin: this._handleMomentumScrollBegin,
                onMomentumScrollEnd: this._handleMomentumScrollEnd,
                contentOffset: this.state.initialOffset,
                ref: this._setRef,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 362
                }
              },
              routes.map(function (route, i) {
                var focused = index === i;
                var outputRange = inputRange.map(function (inputIndex) {
                  return inputIndex === i ? 1 : 0.7;
                });

                var opacity = _reactNative.Animated.multiply(_this2.state.visibility, position.interpolate({
                  inputRange: inputRange,
                  outputRange: outputRange
                }));

                var scene = {
                  route: route,
                  focused: focused,
                  index: i
                };

                var label = _this2._renderLabel(scene);

                var icon = _this2.props.renderIcon ? _this2.props.renderIcon(scene) : null;
                var badge = _this2.props.renderBadge ? _this2.props.renderBadge(scene) : null;
                var tabStyle = {};
                tabStyle.opacity = opacity;

                if (icon) {
                  if (label) {
                    tabStyle.paddingTop = 8;
                  } else {
                    tabStyle.padding = 12;
                  }
                }

                var passedTabStyle = _reactNative.StyleSheet.flatten(_this2.props.tabStyle);

                var isWidthSet = passedTabStyle && typeof passedTabStyle.width !== 'undefined' || scrollEnabled === true;
                var tabContainerStyle = {};

                if (isWidthSet) {
                  tabStyle.width = tabWidth;
                }

                if (passedTabStyle && typeof passedTabStyle.flex === 'number') {
                  tabContainerStyle.flex = passedTabStyle.flex;
                } else if (!isWidthSet) {
                  tabContainerStyle.flex = 1;
                }

                var accessibilityLabel = route.accessibilityLabel || route.title;
                return React.createElement(
                  _TouchableItem2.default,
                  {
                    borderless: true,
                    key: route.key,
                    testID: route.testID,
                    accessible: route.accessible,
                    accessibilityLabel: accessibilityLabel,
                    accessibilityTraits: "button",
                    pressColor: _this2.props.pressColor,
                    pressOpacity: _this2.props.pressOpacity,
                    delayPressIn: 0,
                    onPress: function onPress() {
                      return _this2._handleTabPress(scene);
                    },
                    style: tabContainerStyle,
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 452
                    }
                  },
                  React.createElement(
                    _reactNative.View,
                    {
                      pointerEvents: "none",
                      style: styles.container,
                      __source: {
                        fileName: _jsxFileName,
                        lineNumber: 465
                      }
                    },
                    React.createElement(
                      _reactNative.Animated.View,
                      {
                        style: [styles.tabItem, tabStyle, passedTabStyle, styles.container],
                        __source: {
                          fileName: _jsxFileName,
                          lineNumber: 466
                        }
                      },
                      icon,
                      label
                    ),
                    badge ? React.createElement(
                      _reactNative.Animated.View,
                      {
                        style: [styles.badge, {
                          opacity: _this2.state.visibility
                        }],
                        __source: {
                          fileName: _jsxFileName,
                          lineNumber: 478
                        }
                      },
                      badge
                    ) : null
                  )
                );
              })
            )
          )
        );
      }
    }]);
    return TabBar;
  }(React.Component), _class.propTypes = babelHelpers.extends({}, _TabViewPropTypes.SceneRendererPropType, {
    scrollEnabled: _propTypes2.default.bool,
    pressColor: _TouchableItem2.default.propTypes.pressColor,
    pressOpacity: _TouchableItem2.default.propTypes.pressOpacity,
    getLabelText: _propTypes2.default.func,
    renderIcon: _propTypes2.default.func,
    renderLabel: _propTypes2.default.func,
    renderIndicator: _propTypes2.default.func,
    onTabPress: _propTypes2.default.func,
    labelStyle: _propTypes2.default.any,
    style: _propTypes2.default.any
  }), _class.defaultProps = {
    getLabelText: function getLabelText(_ref) {
      var route = _ref.route;
      return typeof route.title === 'string' ? route.title.toUpperCase() : route.title;
    }
  }, _initialiseProps = function _initialiseProps() {
    var _this3 = this;

    this._isManualScroll = false;
    this._isMomentumScroll = false;
    this._scrollDelta = 0;

    this._startTrackingPosition = function () {
      _this3._offsetXListener = _this3.props.offsetX.addListener(function (_ref2) {
        var value = _ref2.value;
        _this3._lastOffsetX = value;

        _this3._handlePosition();
      });
      _this3._panXListener = _this3.props.panX.addListener(function (_ref3) {
        var value = _ref3.value;
        _this3._lastPanX = value;

        _this3._handlePosition();
      });
    };

    this._stopTrackingPosition = function () {
      _this3.props.offsetX.removeListener(_this3._offsetXListener);

      _this3.props.panX.removeListener(_this3._panXListener);
    };

    this._handlePosition = function () {
      var _props2 = _this3.props,
          navigationState = _props2.navigationState,
          layout = _props2.layout;
      var panX = typeof _this3._lastPanX === 'number' ? _this3._lastPanX : 0;
      var offsetX = typeof _this3._lastOffsetX === 'number' ? _this3._lastOffsetX : -navigationState.index * layout.width;
      var value = (panX + offsetX) / -(layout.width || 0.001);

      _this3._adjustScroll(value);
    };

    this._renderLabel = function (scene) {
      if (typeof _this3.props.renderLabel !== 'undefined') {
        return _this3.props.renderLabel(scene);
      }

      var label = _this3.props.getLabelText(scene);

      if (typeof label !== 'string') {
        return null;
      }

      return React.createElement(
        _reactNative.Animated.Text,
        {
          style: [styles.tabLabel, _this3.props.labelStyle],
          __source: {
            fileName: _jsxFileName,
            lineNumber: 180
          }
        },
        label
      );
    };

    this._renderIndicator = function (props) {
      if (typeof _this3.props.renderIndicator !== 'undefined') {
        return _this3.props.renderIndicator(props);
      }

      var width = props.width,
          position = props.position,
          navigationState = props.navigationState;

      var translateX = _reactNative.Animated.multiply(_reactNative.Animated.multiply(position.interpolate({
        inputRange: [0, navigationState.routes.length - 1],
        outputRange: [0, navigationState.routes.length - 1],
        extrapolate: 'clamp'
      }), width), _reactNative.I18nManager.isRTL ? -1 : 1);

      return React.createElement(_reactNative.Animated.View, {
        style: [styles.indicator, {
          width: width,
          transform: [{
            translateX: translateX
          }]
        }, _this3.props.indicatorStyle],
        __source: {
          fileName: _jsxFileName,
          lineNumber: 203
        }
      });
    };

    this._getTabWidth = function (props) {
      var layout = props.layout,
          navigationState = props.navigationState,
          tabStyle = props.tabStyle;

      var flattened = _reactNative.StyleSheet.flatten(tabStyle);

      if (flattened) {
        switch (typeof flattened.width) {
          case 'number':
            return flattened.width;

          case 'string':
            if (flattened.width.endsWith('%')) {
              var _width = parseFloat(flattened.width);

              if (Number.isFinite(_width)) {
                return layout.width * (_width / 100);
              }
            }

        }
      }

      if (props.scrollEnabled) {
        return layout.width / 5 * 2;
      }

      return layout.width / navigationState.routes.length;
    };

    this._handleTabPress = function (scene) {
      _this3._pendingIndex = scene.index;

      _this3.props.jumpToIndex(scene.index);

      if (_this3.props.onTabPress) {
        _this3.props.onTabPress(scene);
      }
    };

    this._handleScroll = function (event) {
      if (_this3._isManualScroll) {
        _this3._scrollDelta = _this3._getScrollAmount(_this3.props, _this3.props.navigationState.index) - event.nativeEvent.contentOffset.x;
      }
    };

    this._normalizeScrollValue = function (props, value) {
      var layout = props.layout,
          navigationState = props.navigationState;

      var tabWidth = _this3._getTabWidth(props);

      var tabBarWidth = Math.max(tabWidth * navigationState.routes.length, layout.width);
      var maxDistance = tabBarWidth - layout.width;
      return Math.max(Math.min(value, maxDistance), 0);
    };

    this._getScrollAmount = function (props, i) {
      var layout = props.layout;

      var tabWidth = _this3._getTabWidth(props);

      var centerDistance = tabWidth * (i + 1 / 2);
      var scrollAmount = centerDistance - layout.width / 2;
      return _this3._normalizeScrollValue(props, scrollAmount);
    };

    this._adjustScroll = function (value) {
      if (_this3.props.scrollEnabled) {
        global.cancelAnimationFrame(_this3._scrollResetCallback);
        _this3._scrollView && _this3._scrollView.scrollTo({
          x: _this3._normalizeScrollValue(_this3.props, _this3._getScrollAmount(_this3.props, value) - _this3._scrollDelta),
          animated: false
        });
      }
    };

    this._resetScroll = function (value) {
      var animated = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

      if (_this3.props.scrollEnabled) {
        global.cancelAnimationFrame(_this3._scrollResetCallback);
        _this3._scrollResetCallback = global.requestAnimationFrame(function () {
          _this3._scrollDelta = 0;
          _this3._scrollView && _this3._scrollView.scrollTo({
            x: _this3._getScrollAmount(_this3.props, value),
            animated: animated
          });
        });
      }
    };

    this._handleBeginDrag = function () {
      _this3._isManualScroll = true;
      _this3._isMomentumScroll = false;
    };

    this._handleEndDrag = function () {
      global.requestAnimationFrame(function () {
        if (_this3._isMomentumScroll) {
          return;
        }

        _this3._isManualScroll = false;
      });
    };

    this._handleMomentumScrollBegin = function () {
      _this3._isMomentumScroll = true;
    };

    this._handleMomentumScrollEnd = function () {
      _this3._isMomentumScroll = false;
      _this3._isManualScroll = false;
    };

    this._setRef = function (el) {
      return _this3._scrollView = el && el._component;
    };
  }, _temp);
  exports.default = TabBar;

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1
    },
    scroll: {
      overflow: _reactNative.Platform.OS === 'web' ? 'auto' : 'scroll'
    },
    tabBar: {
      backgroundColor: '#2196f3',
      elevation: 4,
      shadowColor: 'black',
      shadowOpacity: 0.1,
      shadowRadius: _reactNative.StyleSheet.hairlineWidth,
      shadowOffset: {
        height: _reactNative.StyleSheet.hairlineWidth
      },
      zIndex: _reactNative.Platform.OS === 'android' ? 0 : 1
    },
    tabContent: {
      flexDirection: 'row',
      flexWrap: 'nowrap'
    },
    tabLabel: {
      backgroundColor: 'transparent',
      color: 'white',
      margin: 8
    },
    tabItem: {
      flex: 1,
      padding: 8,
      alignItems: 'center',
      justifyContent: 'center'
    },
    badge: {
      position: 'absolute',
      top: 0,
      right: 0
    },
    indicatorContainer: {
      position: 'absolute',
      top: 0,
      left: 0,
      right: 0,
      bottom: 0
    },
    indicator: {
      backgroundColor: '#ffeb3b',
      position: 'absolute',
      left: 0,
      bottom: 0,
      right: 0,
      height: 2
    }
  });
},430,[114,141,12,431,425],"node_modules/react-navigation/node_modules/react-native-tab-view/src/TabBar.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _class,
      _temp2,
      _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-navigation/node_modules/react-native-tab-view/src/TouchableItem.js";

  var _react = _require(_dependencyMap[0], "react");

  var React = babelHelpers.interopRequireWildcard(_react);

  var _propTypes = _require(_dependencyMap[1], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[2], "react-native");

  var LOLLIPOP = 21;
  var TouchableItem = (_temp2 = _class = function (_React$Component) {
    babelHelpers.inherits(TouchableItem, _React$Component);

    function TouchableItem() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, TouchableItem);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = TouchableItem.__proto__ || Object.getPrototypeOf(TouchableItem)).call.apply(_ref, [this].concat(args))), _this), _this._handlePress = function () {
        global.requestAnimationFrame(_this.props.onPress);
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(TouchableItem, [{
      key: "render",
      value: function render() {
        var _props = this.props,
            style = _props.style,
            pressOpacity = _props.pressOpacity,
            pressColor = _props.pressColor,
            borderless = _props.borderless,
            rest = babelHelpers.objectWithoutProperties(_props, ["style", "pressOpacity", "pressColor", "borderless"]);

        if (_reactNative.Platform.OS === 'android' && _reactNative.Platform.Version >= LOLLIPOP) {
          return React.createElement(
            _reactNative.TouchableNativeFeedback,
            babelHelpers.extends({}, rest, {
              onPress: this._handlePress,
              background: _reactNative.TouchableNativeFeedback.Ripple(pressColor, borderless),
              __source: {
                fileName: _jsxFileName,
                lineNumber: 48
              }
            }),
            React.createElement(
              _reactNative.View,
              {
                style: style,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 53
                }
              },
              React.Children.only(this.props.children)
            )
          );
        } else {
          return React.createElement(
            _reactNative.TouchableOpacity,
            babelHelpers.extends({}, rest, {
              onPress: this._handlePress,
              style: style,
              activeOpacity: pressOpacity,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 58
              }
            }),
            this.props.children
          );
        }
      }
    }]);
    return TouchableItem;
  }(React.Component), _class.propTypes = {
    onPress: _propTypes2.default.func.isRequired,
    delayPressIn: _propTypes2.default.number,
    borderless: _propTypes2.default.bool,
    pressColor: _propTypes2.default.string,
    pressOpacity: _propTypes2.default.number,
    children: _propTypes2.default.node.isRequired
  }, _class.defaultProps = {
    pressColor: 'rgba(255, 255, 255, .4)'
  }, _temp2);
  exports.default = TouchableItem;
},431,[114,141,12],"node_modules/react-navigation/node_modules/react-native-tab-view/src/TouchableItem.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-navigation/node_modules/react-native-tab-view/src/SceneMap.js";
  exports.default = SceneMap;

  var _react = _require(_dependencyMap[0], "react");

  var React = babelHelpers.interopRequireWildcard(_react);

  function SceneMap(scenes) {
    var SceneComponent = function (_React$PureComponent) {
      babelHelpers.inherits(SceneComponent, _React$PureComponent);

      function SceneComponent() {
        babelHelpers.classCallCheck(this, SceneComponent);
        return babelHelpers.possibleConstructorReturn(this, (SceneComponent.__proto__ || Object.getPrototypeOf(SceneComponent)).apply(this, arguments));
      }

      babelHelpers.createClass(SceneComponent, [{
        key: "render",
        value: function render() {
          return React.createElement(scenes[this.props.route.key], this.props);
        }
      }]);
      return SceneComponent;
    }(React.PureComponent);

    return function (_ref) {
      var route = _ref.route;
      return React.createElement(SceneComponent, {
        key: route.key,
        route: route,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 12
        }
      });
    };
  }
},432,[114],"node_modules/react-navigation/node_modules/react-native-tab-view/src/SceneMap.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-navigation/src/views/ResourceSavingSceneView.js";

  var _react = _require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1], "react-native");

  var _propTypes = _require(_dependencyMap[2], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactLifecyclesCompat = _require(_dependencyMap[3], "react-lifecycles-compat");

  var _reactLifecyclesCompat2 = babelHelpers.interopRequireDefault(_reactLifecyclesCompat);

  var _SceneView = _require(_dependencyMap[4], "./SceneView");

  var _SceneView2 = babelHelpers.interopRequireDefault(_SceneView);

  var FAR_FAR_AWAY = 3000;

  var ResourceSavingSceneView = function (_React$PureComponent) {
    babelHelpers.inherits(ResourceSavingSceneView, _React$PureComponent);

    function ResourceSavingSceneView(props) {
      babelHelpers.classCallCheck(this, ResourceSavingSceneView);

      var _this = babelHelpers.possibleConstructorReturn(this, (ResourceSavingSceneView.__proto__ || Object.getPrototypeOf(ResourceSavingSceneView)).call(this));

      _this._mustAlwaysBeVisible = function () {
        return _this.props.animationEnabled || _this.props.swipeEnabled;
      };

      _this.state = {
        awake: props.lazy ? props.isFocused : true
      };
      return _this;
    }

    babelHelpers.createClass(ResourceSavingSceneView, [{
      key: "render",
      value: function render() {
        var awake = this.state.awake;
        var _props = this.props,
            isFocused = _props.isFocused,
            childNavigation = _props.childNavigation,
            navigation = _props.navigation,
            removeClippedSubviews = _props.removeClippedSubviews,
            lazy = _props.lazy,
            rest = babelHelpers.objectWithoutProperties(_props, ["isFocused", "childNavigation", "navigation", "removeClippedSubviews", "lazy"]);
        return _react2.default.createElement(
          _reactNative.View,
          {
            style: styles.container,
            collapsable: false,
            removeClippedSubviews: _reactNative.Platform.OS === 'android' ? removeClippedSubviews : !isFocused && removeClippedSubviews,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 39
            }
          },
          _react2.default.createElement(
            _reactNative.View,
            {
              style: this._mustAlwaysBeVisible() || isFocused ? styles.innerAttached : styles.innerDetached,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 48
              }
            },
            awake ? _react2.default.createElement(_SceneView2.default, babelHelpers.extends({}, rest, {
              navigation: childNavigation,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 55
              }
            })) : null
          )
        );
      }
    }], [{
      key: "getDerivedStateFromProps",
      value: function getDerivedStateFromProps(nextProps, prevState) {
        if (nextProps.isFocused && !prevState.awake) {
          return {
            awake: true
          };
        }

        return null;
      }
    }]);
    return ResourceSavingSceneView;
  }(_react2.default.PureComponent);

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      overflow: 'hidden'
    },
    innerAttached: {
      flex: 1
    },
    innerDetached: {
      flex: 1,
      top: FAR_FAR_AWAY
    }
  });

  exports.default = (0, _reactLifecyclesCompat2.default)(ResourceSavingSceneView);
},433,[114,12,141,434,400],"node_modules/react-navigation/src/views/ResourceSavingSceneView.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  function componentWillMount() {
    var state = this.constructor.getDerivedStateFromProps(this.props, this.state);

    if (state !== null && state !== undefined) {
      this.setState(state);
    }
  }

  function componentWillReceiveProps(nextProps) {
    var state = this.constructor.getDerivedStateFromProps(nextProps, this.state);

    if (state !== null && state !== undefined) {
      this.setState(state);
    }
  }

  function componentWillUpdate(nextProps, nextState) {
    try {
      var prevProps = this.props;
      var prevState = this.state;
      this.props = nextProps;
      this.state = nextState;
      this.__reactInternalSnapshot = this.getSnapshotBeforeUpdate(prevProps, prevState);
    } finally {
      this.props = prevProps;
      this.state = prevState;
    }
  }

  componentWillMount.__suppressDeprecationWarning = true;
  componentWillReceiveProps.__suppressDeprecationWarning = true;
  componentWillUpdate.__suppressDeprecationWarning = true;

  function polyfill(Component) {
    if (!Component.prototype || !Component.prototype.isReactComponent) {
      throw new Error('Can only polyfill class components');
    }

    if (typeof Component.getDerivedStateFromProps === 'function') {
      if (typeof Component.prototype.componentWillMount === 'function') {
        throw new Error('Cannot polyfill getDerivedStateFromProps() for components that define componentWillMount()');
      } else if (typeof Component.prototype.componentWillReceiveProps === 'function') {
        throw new Error('Cannot polyfill getDerivedStateFromProps() for components that define componentWillReceiveProps()');
      }

      Component.prototype.componentWillMount = componentWillMount;
      Component.prototype.componentWillReceiveProps = componentWillReceiveProps;
    }

    if (typeof Component.prototype.getSnapshotBeforeUpdate === 'function') {
      if (typeof Component.prototype.componentWillUpdate === 'function') {
        throw new Error('Cannot polyfill getSnapshotBeforeUpdate() for components that define componentWillUpdate()');
      }

      if (typeof Component.prototype.componentDidUpdate !== 'function') {
        throw new Error('Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype');
      }

      Component.prototype.componentWillUpdate = componentWillUpdate;
      var componentDidUpdate = Component.prototype.componentDidUpdate;

      Component.prototype.componentDidUpdate = function componentDidUpdatePolyfill(prevProps, prevState) {
        componentDidUpdate.call(this, prevProps, prevState, this.__reactInternalSnapshot);
      };
    }

    return Component;
  }

  module.exports = polyfill;
},434,[],"node_modules/react-lifecycles-compat/react-lifecycles-compat.cjs.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _class,
      _temp2,
      _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-navigation/src/views/TabView/TabBarTop.js";

  var _react = _require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1], "react-native");

  var _reactNativeTabView = _require(_dependencyMap[2], "react-native-tab-view");

  var _TabBarIcon = _require(_dependencyMap[3], "./TabBarIcon");

  var _TabBarIcon2 = babelHelpers.interopRequireDefault(_TabBarIcon);

  var TabBarTop = (_temp2 = _class = function (_React$PureComponent) {
    babelHelpers.inherits(TabBarTop, _React$PureComponent);

    function TabBarTop() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, TabBarTop);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = TabBarTop.__proto__ || Object.getPrototypeOf(TabBarTop)).call.apply(_ref, [this].concat(args))), _this), _this._renderLabel = function (scene) {
        var _this$props = _this.props,
            position = _this$props.position,
            tabBarPosition = _this$props.tabBarPosition,
            navigation = _this$props.navigation,
            activeTintColor = _this$props.activeTintColor,
            inactiveTintColor = _this$props.inactiveTintColor,
            showLabel = _this$props.showLabel,
            upperCaseLabel = _this$props.upperCaseLabel,
            labelStyle = _this$props.labelStyle,
            allowFontScaling = _this$props.allowFontScaling;

        if (showLabel === false) {
          return null;
        }

        var index = scene.index;
        var routes = navigation.state.routes;
        var inputRange = [-1].concat(babelHelpers.toConsumableArray(routes.map(function (x, i) {
          return i;
        })));
        var outputRange = inputRange.map(function (inputIndex) {
          return inputIndex === index ? activeTintColor : inactiveTintColor;
        });
        var color = position.interpolate({
          inputRange: inputRange,
          outputRange: outputRange
        });
        var tintColor = scene.focused ? activeTintColor : inactiveTintColor;

        var label = _this.props.getLabel(babelHelpers.extends({}, scene, {
          tintColor: tintColor
        }));

        if (typeof label === 'string') {
          return _react2.default.createElement(
            _reactNative.Animated.Text,
            {
              style: [styles.label, {
                color: color
              }, labelStyle],
              allowFontScaling: allowFontScaling,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 47
              }
            },
            upperCaseLabel ? label.toUpperCase() : label
          );
        }

        if (typeof label === 'function') {
          return label(babelHelpers.extends({}, scene, {
            tintColor: tintColor
          }));
        }

        return label;
      }, _this._renderIcon = function (scene) {
        var _this$props2 = _this.props,
            position = _this$props2.position,
            navigation = _this$props2.navigation,
            activeTintColor = _this$props2.activeTintColor,
            inactiveTintColor = _this$props2.inactiveTintColor,
            renderIcon = _this$props2.renderIcon,
            showIcon = _this$props2.showIcon,
            iconStyle = _this$props2.iconStyle;

        if (showIcon === false) {
          return null;
        }

        return _react2.default.createElement(_TabBarIcon2.default, {
          position: position,
          navigation: navigation,
          activeTintColor: activeTintColor,
          inactiveTintColor: inactiveTintColor,
          renderIcon: renderIcon,
          scene: scene,
          style: [styles.icon, iconStyle],
          __source: {
            fileName: _jsxFileName,
            lineNumber: 76
          }
        });
      }, _this._handleOnPress = function (scene) {
        var _this$props3 = _this.props,
            getOnPress = _this$props3.getOnPress,
            jumpToIndex = _this$props3.jumpToIndex,
            navigation = _this$props3.navigation;
        var previousScene = navigation.state.routes[navigation.state.index];
        var onPress = getOnPress(previousScene, scene);

        if (onPress) {
          onPress({
            previousScene: previousScene,
            scene: scene,
            jumpToIndex: jumpToIndex,
            defaultHandler: jumpToIndex
          });
        } else {
          jumpToIndex(scene.index);
        }
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(TabBarTop, [{
      key: "render",
      value: function render() {
        var props = this.props;
        return _react2.default.createElement(_reactNativeTabView.TabBar, babelHelpers.extends({}, props, {
          onTabPress: this._handleOnPress,
          jumpToIndex: function jumpToIndex() {},
          renderIcon: this._renderIcon,
          renderLabel: this._renderLabel,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 113
          }
        }));
      }
    }]);
    return TabBarTop;
  }(_react2.default.PureComponent), _class.defaultProps = {
    activeTintColor: '#fff',
    inactiveTintColor: '#fff',
    showIcon: false,
    showLabel: true,
    upperCaseLabel: true,
    allowFontScaling: true
  }, _temp2);
  exports.default = TabBarTop;

  var styles = _reactNative.StyleSheet.create({
    icon: {
      height: 24,
      width: 24
    },
    label: {
      textAlign: 'center',
      fontSize: 13,
      margin: 8,
      backgroundColor: 'transparent'
    }
  });
},435,[114,12,423,436],"node_modules/react-navigation/src/views/TabView/TabBarTop.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-navigation/src/views/TabView/TabBarIcon.js";

  var _react = _require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1], "react-native");

  var TabBarIcon = function (_React$PureComponent) {
    babelHelpers.inherits(TabBarIcon, _React$PureComponent);

    function TabBarIcon() {
      babelHelpers.classCallCheck(this, TabBarIcon);
      return babelHelpers.possibleConstructorReturn(this, (TabBarIcon.__proto__ || Object.getPrototypeOf(TabBarIcon)).apply(this, arguments));
    }

    babelHelpers.createClass(TabBarIcon, [{
      key: "render",
      value: function render() {
        var _props = this.props,
            position = _props.position,
            scene = _props.scene,
            navigation = _props.navigation,
            activeTintColor = _props.activeTintColor,
            inactiveTintColor = _props.inactiveTintColor,
            style = _props.style;
        var route = scene.route,
            index = scene.index;
        var routes = navigation.state.routes;
        var inputRange = [-1].concat(babelHelpers.toConsumableArray(routes.map(function (x, i) {
          return i;
        })));
        var activeOpacity = position.interpolate({
          inputRange: inputRange,
          outputRange: inputRange.map(function (i) {
            return i === index ? 1 : 0;
          })
        });
        var inactiveOpacity = position.interpolate({
          inputRange: inputRange,
          outputRange: inputRange.map(function (i) {
            return i === index ? 0 : 1;
          })
        });
        return _react2.default.createElement(
          _reactNative.View,
          {
            style: style,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 30
            }
          },
          _react2.default.createElement(
            _reactNative.Animated.View,
            {
              style: [styles.icon, {
                opacity: activeOpacity
              }],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 31
              }
            },
            this.props.renderIcon({
              route: route,
              index: index,
              focused: true,
              tintColor: activeTintColor
            })
          ),
          _react2.default.createElement(
            _reactNative.Animated.View,
            {
              style: [styles.icon, {
                opacity: inactiveOpacity
              }],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 39
              }
            },
            this.props.renderIcon({
              route: route,
              index: index,
              focused: false,
              tintColor: inactiveTintColor
            })
          )
        );
      }
    }]);
    return TabBarIcon;
  }(_react2.default.PureComponent);

  exports.default = TabBarIcon;

  var styles = _reactNative.StyleSheet.create({
    icon: {
      position: 'absolute',
      alignSelf: 'center',
      alignItems: 'center',
      justifyContent: 'center',
      height: '100%',
      width: '100%',
      minWidth: 30
    }
  });
},436,[114,12],"node_modules/react-navigation/src/views/TabView/TabBarIcon.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _class,
      _temp2,
      _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-navigation/src/views/TabView/TabBarBottom.js";

  var _react = _require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1], "react-native");

  var _reactNativeSafeAreaView = _require(_dependencyMap[2], "react-native-safe-area-view");

  var _reactNativeSafeAreaView2 = babelHelpers.interopRequireDefault(_reactNativeSafeAreaView);

  var _TabBarIcon = _require(_dependencyMap[3], "./TabBarIcon");

  var _TabBarIcon2 = babelHelpers.interopRequireDefault(_TabBarIcon);

  var _NavigationActions = _require(_dependencyMap[4], "../../NavigationActions");

  var _NavigationActions2 = babelHelpers.interopRequireDefault(_NavigationActions);

  var _withOrientation = _require(_dependencyMap[5], "../withOrientation");

  var _withOrientation2 = babelHelpers.interopRequireDefault(_withOrientation);

  var majorVersion = parseInt(_reactNative.Platform.Version, 10);
  var isIos = _reactNative.Platform.OS === 'ios';
  var isIOS11 = majorVersion >= 11 && isIos;
  var defaultMaxTabBarItemWidth = 125;
  var TabBarBottom = (_temp2 = _class = function (_React$PureComponent) {
    babelHelpers.inherits(TabBarBottom, _React$PureComponent);

    function TabBarBottom() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, TabBarBottom);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = TabBarBottom.__proto__ || Object.getPrototypeOf(TabBarBottom)).call.apply(_ref, [this].concat(args))), _this), _this._renderLabel = function (scene) {
        var _this$props = _this.props,
            position = _this$props.position,
            navigation = _this$props.navigation,
            activeTintColor = _this$props.activeTintColor,
            inactiveTintColor = _this$props.inactiveTintColor,
            labelStyle = _this$props.labelStyle,
            showLabel = _this$props.showLabel,
            showIcon = _this$props.showIcon,
            isLandscape = _this$props.isLandscape,
            allowFontScaling = _this$props.allowFontScaling;

        if (showLabel === false) {
          return null;
        }

        var index = scene.index;
        var routes = navigation.state.routes;
        var inputRange = [-1].concat(babelHelpers.toConsumableArray(routes.map(function (x, i) {
          return i;
        })));
        var outputRange = inputRange.map(function (inputIndex) {
          return inputIndex === index ? activeTintColor : inactiveTintColor;
        });
        var color = position.interpolate({
          inputRange: inputRange,
          outputRange: outputRange
        });
        var tintColor = scene.focused ? activeTintColor : inactiveTintColor;

        var label = _this.props.getLabel(babelHelpers.extends({}, scene, {
          tintColor: tintColor
        }));

        if (typeof label === 'string') {
          return _react2.default.createElement(
            _reactNative.Animated.Text,
            {
              numberOfLines: 1,
              style: [styles.label, {
                color: color
              }, showIcon && _this._shouldUseHorizontalTabs() ? styles.labelBeside : styles.labelBeneath, labelStyle],
              allowFontScaling: allowFontScaling,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 66
              }
            },
            label
          );
        }

        if (typeof label === 'function') {
          return label(babelHelpers.extends({}, scene, {
            tintColor: tintColor
          }));
        }

        return label;
      }, _this._renderIcon = function (scene) {
        var _this$props2 = _this.props,
            position = _this$props2.position,
            navigation = _this$props2.navigation,
            activeTintColor = _this$props2.activeTintColor,
            inactiveTintColor = _this$props2.inactiveTintColor,
            renderIcon = _this$props2.renderIcon,
            showIcon = _this$props2.showIcon,
            showLabel = _this$props2.showLabel;

        if (showIcon === false) {
          return null;
        }

        var horizontal = _this._shouldUseHorizontalTabs();

        return _react2.default.createElement(_TabBarIcon2.default, {
          position: position,
          navigation: navigation,
          activeTintColor: activeTintColor,
          inactiveTintColor: inactiveTintColor,
          renderIcon: renderIcon,
          scene: scene,
          style: [styles.iconWithExplicitHeight, showLabel === false && !horizontal && styles.iconWithoutLabel, showLabel !== false && !horizontal && styles.iconWithLabel],
          __source: {
            fileName: _jsxFileName,
            lineNumber: 107
          }
        });
      }, _this._renderTestIDProps = function (scene) {
        var testIDProps = _this.props.getTestIDProps && _this.props.getTestIDProps(scene);

        return testIDProps;
      }, _this._handleTabPress = function (index) {
        var _this$props3 = _this.props,
            jumpToIndex = _this$props3.jumpToIndex,
            navigation = _this$props3.navigation;
        var currentIndex = navigation.state.index;

        if (currentIndex === index) {
          var childRoute = navigation.state.routes[index];

          if (childRoute.hasOwnProperty('index') && childRoute.index > 0) {
            navigation.dispatch(_NavigationActions2.default.popToTop({
              key: childRoute.key
            }));
          } else {}
        } else {
          jumpToIndex(index);
        }
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(TabBarBottom, [{
      key: "_tabItemMaxWidth",
      value: function _tabItemMaxWidth() {
        var _props = this.props,
            tabStyle = _props.tabStyle,
            layout = _props.layout;
        var maxTabBarItemWidth = void 0;

        var flattenedTabStyle = _reactNative.StyleSheet.flatten(tabStyle);

        if (flattenedTabStyle) {
          if (typeof flattenedTabStyle.width === 'number') {
            maxTabBarItemWidth = flattenedTabStyle.width;
          } else if (typeof flattenedTabStyle.width === 'string' && flattenedTabStyle.endsWith('%')) {
            var width = parseFloat(flattenedTabStyle.width);

            if (Number.isFinite(width)) {
              maxTabBarItemWidth = layout.width * (width / 100);
            }
          } else if (typeof flattenedTabStyle.maxWidth === 'number') {
            maxTabBarItemWidth = flattenedTabStyle.maxWidth;
          } else if (typeof flattenedTabStyle.maxWidth === 'string' && flattenedTabStyle.endsWith('%')) {
            var _width = parseFloat(flattenedTabStyle.maxWidth);

            if (Number.isFinite(_width)) {
              maxTabBarItemWidth = layout.width * (_width / 100);
            }
          }
        }

        if (!maxTabBarItemWidth) {
          maxTabBarItemWidth = defaultMaxTabBarItemWidth;
        }

        return maxTabBarItemWidth;
      }
    }, {
      key: "_shouldUseHorizontalTabs",
      value: function _shouldUseHorizontalTabs() {
        var routes = this.props.navigation.state.routes;
        var _props2 = this.props,
            isLandscape = _props2.isLandscape,
            layout = _props2.layout,
            adaptive = _props2.adaptive,
            tabStyle = _props2.tabStyle;

        if (!adaptive) {
          return false;
        }

        var tabBarWidth = layout.width;

        if (tabBarWidth === 0) {
          return _reactNative.Platform.isPad;
        }

        if (!_reactNative.Platform.isPad) {
          return isLandscape;
        } else {
          var maxTabBarItemWidth = this._tabItemMaxWidth();

          return routes.length * maxTabBarItemWidth <= tabBarWidth;
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var _props3 = this.props,
            position = _props3.position,
            navigation = _props3.navigation,
            jumpToIndex = _props3.jumpToIndex,
            getOnPress = _props3.getOnPress,
            getTestIDProps = _props3.getTestIDProps,
            activeBackgroundColor = _props3.activeBackgroundColor,
            inactiveBackgroundColor = _props3.inactiveBackgroundColor,
            style = _props3.style,
            animateStyle = _props3.animateStyle,
            tabStyle = _props3.tabStyle,
            isLandscape = _props3.isLandscape;
        var routes = navigation.state.routes;
        var previousScene = routes[navigation.state.index];
        var inputRange = [-1].concat(babelHelpers.toConsumableArray(routes.map(function (x, i) {
          return i;
        })));
        var tabBarStyle = [styles.tabBar, this._shouldUseHorizontalTabs() && !_reactNative.Platform.isPad ? styles.tabBarCompact : styles.tabBarRegular, style];
        return _react2.default.createElement(
          _reactNative.Animated.View,
          {
            style: animateStyle,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 233
            }
          },
          _react2.default.createElement(
            _reactNativeSafeAreaView2.default,
            {
              style: tabBarStyle,
              forceInset: {
                bottom: 'always',
                top: 'never'
              },
              __source: {
                fileName: _jsxFileName,
                lineNumber: 234
              }
            },
            routes.map(function (route, index) {
              var focused = index === navigation.state.index;
              var scene = {
                route: route,
                index: index,
                focused: focused
              };

              var _onPress = getOnPress(previousScene, scene);

              var outputRange = inputRange.map(function (inputIndex) {
                return inputIndex === index ? activeBackgroundColor : inactiveBackgroundColor;
              });
              var backgroundColor = position.interpolate({
                inputRange: inputRange,
                outputRange: outputRange
              });
              var justifyContent = _this2.props.showIcon ? 'flex-end' : 'center';
              var extraProps = _this2._renderTestIDProps(scene) || {};
              var testID = extraProps.testID,
                  accessibilityLabel = extraProps.accessibilityLabel;
              return _react2.default.createElement(
                _reactNative.TouchableWithoutFeedback,
                {
                  key: route.key,
                  testID: testID,
                  accessibilityLabel: accessibilityLabel,
                  onPress: function onPress() {
                    return _onPress ? _onPress({
                      previousScene: previousScene,
                      scene: scene,
                      jumpToIndex: jumpToIndex,
                      defaultHandler: _this2._handleTabPress
                    }) : _this2._handleTabPress(index);
                  },
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 258
                  }
                },
                _react2.default.createElement(
                  _reactNative.Animated.View,
                  {
                    style: [styles.tab, {
                      backgroundColor: backgroundColor
                    }],
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 273
                    }
                  },
                  _react2.default.createElement(
                    _reactNative.View,
                    {
                      style: [styles.tab, _this2._shouldUseHorizontalTabs() ? styles.tabLandscape : styles.tabPortrait, tabStyle],
                      __source: {
                        fileName: _jsxFileName,
                        lineNumber: 274
                      }
                    },
                    _this2._renderIcon(scene),
                    _this2._renderLabel(scene)
                  )
                )
              );
            })
          )
        );
      }
    }]);
    return TabBarBottom;
  }(_react2.default.PureComponent), _class.defaultProps = {
    activeTintColor: '#3478f6',
    activeBackgroundColor: 'transparent',
    inactiveTintColor: '#929292',
    inactiveBackgroundColor: 'transparent',
    showLabel: true,
    showIcon: true,
    allowFontScaling: true,
    adaptive: isIOS11
  }, _temp2);
  var DEFAULT_HEIGHT = 49;
  var COMPACT_HEIGHT = 29;

  var styles = _reactNative.StyleSheet.create({
    tabBar: {
      backgroundColor: '#F7F7F7',
      borderTopWidth: _reactNative.StyleSheet.hairlineWidth,
      borderTopColor: 'rgba(0, 0, 0, .3)',
      flexDirection: 'row'
    },
    tabBarCompact: {
      height: COMPACT_HEIGHT
    },
    tabBarRegular: {
      height: DEFAULT_HEIGHT
    },
    tab: {
      flex: 1,
      alignItems: isIos ? 'center' : 'stretch'
    },
    tabPortrait: {
      justifyContent: 'flex-end',
      flexDirection: 'column'
    },
    tabLandscape: {
      justifyContent: 'center',
      flexDirection: 'row'
    },
    iconWithoutLabel: {
      flex: 1
    },
    iconWithLabel: {
      flexGrow: 1
    },
    iconWithExplicitHeight: {
      height: _reactNative.Platform.isPad ? DEFAULT_HEIGHT : COMPACT_HEIGHT
    },
    label: {
      textAlign: 'center',
      backgroundColor: 'transparent'
    },
    labelBeneath: {
      fontSize: 10,
      marginBottom: 1.5
    },
    labelBeside: {
      fontSize: 13,
      marginLeft: 20
    }
  });

  exports.default = (0, _withOrientation2.default)(TabBarBottom);
},437,[114,12,387,436,374,397],"node_modules/react-navigation/src/views/TabView/TabBarBottom.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-navigation/src/navigators/DrawerNavigator.js";

  var _react = _require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1], "react-native");

  var _reactNativeSafeAreaView = _require(_dependencyMap[2], "react-native-safe-area-view");

  var _reactNativeSafeAreaView2 = babelHelpers.interopRequireDefault(_reactNativeSafeAreaView);

  var _createNavigator = _require(_dependencyMap[3], "./createNavigator");

  var _createNavigator2 = babelHelpers.interopRequireDefault(_createNavigator);

  var _createNavigationContainer = _require(_dependencyMap[4], "../createNavigationContainer");

  var _createNavigationContainer2 = babelHelpers.interopRequireDefault(_createNavigationContainer);

  var _TabRouter2 = _require(_dependencyMap[5], "../routers/TabRouter");

  var _TabRouter3 = babelHelpers.interopRequireDefault(_TabRouter2);

  var _DrawerScreen = _require(_dependencyMap[6], "../views/Drawer/DrawerScreen");

  var _DrawerScreen2 = babelHelpers.interopRequireDefault(_DrawerScreen);

  var _DrawerView = _require(_dependencyMap[7], "../views/Drawer/DrawerView");

  var _DrawerView2 = babelHelpers.interopRequireDefault(_DrawerView);

  var _DrawerNavigatorItems = _require(_dependencyMap[8], "../views/Drawer/DrawerNavigatorItems");

  var _DrawerNavigatorItems2 = babelHelpers.interopRequireDefault(_DrawerNavigatorItems);

  var defaultContentComponent = function defaultContentComponent(props) {
    return _react2.default.createElement(
      _reactNative.ScrollView,
      {
        alwaysBounceVertical: false,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 17
        }
      },
      _react2.default.createElement(
        _reactNativeSafeAreaView2.default,
        {
          forceInset: {
            top: 'always',
            horizontal: 'never'
          },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 18
          }
        },
        _react2.default.createElement(_DrawerNavigatorItems2.default, babelHelpers.extends({}, props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 19
          }
        }))
      )
    );
  };

  var DefaultDrawerConfig = {
    drawerWidth: function drawerWidth() {
      var _Dimensions$get = _reactNative.Dimensions.get('window'),
          height = _Dimensions$get.height,
          width = _Dimensions$get.width;

      var smallerAxisSize = Math.min(height, width);
      var isLandscape = width > height;
      var isTablet = smallerAxisSize >= 600;
      var appBarHeight = _reactNative.Platform.OS === 'ios' ? isLandscape ? 32 : 44 : 56;
      var maxWidth = isTablet ? 320 : 280;
      return Math.min(smallerAxisSize - appBarHeight, maxWidth);
    },
    contentComponent: defaultContentComponent,
    drawerOpenRoute: 'DrawerOpen',
    drawerCloseRoute: 'DrawerClose',
    drawerToggleRoute: 'DrawerToggle',
    drawerPosition: 'left',
    drawerBackgroundColor: 'white',
    useNativeAnimations: true
  };

  var DrawerNavigator = function DrawerNavigator(routeConfigs) {
    var _TabRouter;

    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var mergedConfig = babelHelpers.extends({}, DefaultDrawerConfig, config);
    var containerConfig = mergedConfig.containerConfig,
        drawerWidth = mergedConfig.drawerWidth,
        drawerLockMode = mergedConfig.drawerLockMode,
        contentComponent = mergedConfig.contentComponent,
        contentOptions = mergedConfig.contentOptions,
        drawerPosition = mergedConfig.drawerPosition,
        useNativeAnimations = mergedConfig.useNativeAnimations,
        drawerBackgroundColor = mergedConfig.drawerBackgroundColor,
        drawerOpenRoute = mergedConfig.drawerOpenRoute,
        drawerCloseRoute = mergedConfig.drawerCloseRoute,
        drawerToggleRoute = mergedConfig.drawerToggleRoute,
        tabsConfig = babelHelpers.objectWithoutProperties(mergedConfig, ["containerConfig", "drawerWidth", "drawerLockMode", "contentComponent", "contentOptions", "drawerPosition", "useNativeAnimations", "drawerBackgroundColor", "drawerOpenRoute", "drawerCloseRoute", "drawerToggleRoute"]);
    var contentRouter = (0, _TabRouter3.default)(routeConfigs, tabsConfig);
    var drawerRouter = (0, _TabRouter3.default)((_TabRouter = {}, babelHelpers.defineProperty(_TabRouter, drawerCloseRoute, {
      screen: (0, _createNavigator2.default)(contentRouter, routeConfigs, config)(function (props) {
        return _react2.default.createElement(_DrawerScreen2.default, babelHelpers.extends({}, props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 71
          }
        }));
      })
    }), babelHelpers.defineProperty(_TabRouter, drawerOpenRoute, {
      screen: function screen() {
        return null;
      }
    }), babelHelpers.defineProperty(_TabRouter, drawerToggleRoute, {
      screen: function screen() {
        return null;
      }
    }), _TabRouter), {
      initialRouteName: drawerCloseRoute
    });
    var navigator = (0, _createNavigator2.default)(drawerRouter, routeConfigs, config)(function (props) {
      return _react2.default.createElement(_DrawerView2.default, babelHelpers.extends({}, props, {
        drawerBackgroundColor: drawerBackgroundColor,
        drawerLockMode: drawerLockMode,
        useNativeAnimations: useNativeAnimations,
        drawerWidth: drawerWidth,
        contentComponent: contentComponent,
        contentOptions: contentOptions,
        drawerPosition: drawerPosition,
        drawerOpenRoute: drawerOpenRoute,
        drawerCloseRoute: drawerCloseRoute,
        drawerToggleRoute: drawerToggleRoute,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 88
        }
      }));
    });
    return (0, _createNavigationContainer2.default)(navigator);
  };

  exports.default = DrawerNavigator;
},438,[114,12,387,378,372,421,439,440,445],"node_modules/react-navigation/src/navigators/DrawerNavigator.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-navigation/src/views/Drawer/DrawerScreen.js";

  var _react = _require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _SceneView = _require(_dependencyMap[1], "../SceneView");

  var _SceneView2 = babelHelpers.interopRequireDefault(_SceneView);

  var _withCachedChildNavigation = _require(_dependencyMap[2], "../../withCachedChildNavigation");

  var _withCachedChildNavigation2 = babelHelpers.interopRequireDefault(_withCachedChildNavigation);

  var DrawerScreen = function (_React$PureComponent) {
    babelHelpers.inherits(DrawerScreen, _React$PureComponent);

    function DrawerScreen() {
      babelHelpers.classCallCheck(this, DrawerScreen);
      return babelHelpers.possibleConstructorReturn(this, (DrawerScreen.__proto__ || Object.getPrototypeOf(DrawerScreen)).apply(this, arguments));
    }

    babelHelpers.createClass(DrawerScreen, [{
      key: "render",
      value: function render() {
        var _props = this.props,
            router = _props.router,
            navigation = _props.navigation,
            childNavigationProps = _props.childNavigationProps,
            screenProps = _props.screenProps;
        var _navigation$state = navigation.state,
            routes = _navigation$state.routes,
            index = _navigation$state.index;
        var childNavigation = childNavigationProps[routes[index].key];
        var Content = router.getComponentForRouteName(routes[index].routeName);
        return _react2.default.createElement(_SceneView2.default, {
          screenProps: screenProps,
          component: Content,
          navigation: childNavigation,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 21
          }
        });
      }
    }]);
    return DrawerScreen;
  }(_react2.default.PureComponent);

  exports.default = (0, _withCachedChildNavigation2.default)(DrawerScreen);
},439,[114,400,419],"node_modules/react-navigation/src/views/Drawer/DrawerScreen.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-navigation/src/views/Drawer/DrawerView.js";

  var _react = _require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1], "react-native");

  var _reactNativeDrawerLayoutPolyfill = _require(_dependencyMap[2], "react-native-drawer-layout-polyfill");

  var _reactNativeDrawerLayoutPolyfill2 = babelHelpers.interopRequireDefault(_reactNativeDrawerLayoutPolyfill);

  var _addNavigationHelpers = _require(_dependencyMap[3], "../../addNavigationHelpers");

  var _addNavigationHelpers2 = babelHelpers.interopRequireDefault(_addNavigationHelpers);

  var _DrawerSidebar = _require(_dependencyMap[4], "./DrawerSidebar");

  var _DrawerSidebar2 = babelHelpers.interopRequireDefault(_DrawerSidebar);

  var _getChildEventSubscriber = _require(_dependencyMap[5], "../../getChildEventSubscriber");

  var _getChildEventSubscriber2 = babelHelpers.interopRequireDefault(_getChildEventSubscriber);

  var DrawerView = function (_React$PureComponent) {
    babelHelpers.inherits(DrawerView, _React$PureComponent);

    function DrawerView() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, DrawerView);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = DrawerView.__proto__ || Object.getPrototypeOf(DrawerView)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
        drawerWidth: typeof _this.props.drawerWidth === 'function' ? _this.props.drawerWidth() : _this.props.drawerWidth
      }, _this._childEventSubscribers = {}, _this._handleDrawerOpen = function () {
        var _this$props = _this.props,
            navigation = _this$props.navigation,
            drawerOpenRoute = _this$props.drawerOpenRoute;
        var _navigation$state = navigation.state,
            routes = _navigation$state.routes,
            index = _navigation$state.index;

        if (routes[index].routeName !== drawerOpenRoute) {
          _this.props.navigation.navigate(drawerOpenRoute);
        }
      }, _this._handleDrawerClose = function () {
        var _this$props2 = _this.props,
            navigation = _this$props2.navigation,
            drawerCloseRoute = _this$props2.drawerCloseRoute;
        var _navigation$state2 = navigation.state,
            routes = _navigation$state2.routes,
            index = _navigation$state2.index;

        if (routes[index].routeName !== drawerCloseRoute) {
          _this.props.navigation.navigate(drawerCloseRoute);
        }
      }, _this._isRouteFocused = function (route) {
        return function () {
          var state = _this.props.navigation.state;
          var focusedRoute = state.routes[state.index];
          return route === focusedRoute;
        };
      }, _this._updateScreenNavigation = function (navigation) {
        var drawerCloseRoute = _this.props.drawerCloseRoute;
        var navigationState = navigation.state.routes.find(function (route) {
          return route.routeName === drawerCloseRoute;
        });

        if (_this._screenNavigationProp && _this._screenNavigationProp.state === navigationState) {
          return;
        }

        if (!_this._childEventSubscribers[navigationState.key]) {
          _this._childEventSubscribers[navigationState.key] = (0, _getChildEventSubscriber2.default)(navigation.addListener, navigationState.key);
        }

        _this._screenNavigationProp = (0, _addNavigationHelpers2.default)({
          dispatch: navigation.dispatch,
          state: navigationState,
          isFocused: function isFocused() {
            return _this._isRouteFocused(navigationState);
          },
          addListener: _this._childEventSubscribers[navigationState.key]
        });
      }, _this._updateWidth = function () {
        var drawerWidth = typeof _this.props.drawerWidth === 'function' ? _this.props.drawerWidth() : _this.props.drawerWidth;

        if (_this.state.drawerWidth !== drawerWidth) {
          _this.setState({
            drawerWidth: drawerWidth
          });
        }
      }, _this._getNavigationState = function (navigation) {
        var drawerCloseRoute = _this.props.drawerCloseRoute;
        var navigationState = navigation.state.routes.find(function (route) {
          return route.routeName === drawerCloseRoute;
        });
        return navigationState;
      }, _this._renderNavigationView = function () {
        return _react2.default.createElement(_DrawerSidebar2.default, {
          screenProps: _this.props.screenProps,
          navigation: _this._screenNavigationProp,
          router: _this.props.router,
          contentComponent: _this.props.contentComponent,
          contentOptions: _this.props.contentOptions,
          drawerPosition: _this.props.drawerPosition,
          style: _this.props.style,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 136
          }
        });
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(DrawerView, [{
      key: "componentWillMount",
      value: function componentWillMount() {
        this._updateScreenNavigation(this.props.navigation);

        _reactNative.Dimensions.addEventListener('change', this._updateWidth);
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        _reactNative.Dimensions.removeEventListener('change', this._updateWidth);
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate() {
        var _this2 = this;

        var activeKeys = this.props.navigation.state.routes.map(function (route) {
          return route.key;
        });
        Object.keys(this._childEventSubscribers).forEach(function (key) {
          if (!activeKeys.includes(key)) {
            delete _this2._childEventSubscribers[key];
          }
        });
      }
    }, {
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(nextProps) {
        if (this.props.navigation.state.index !== nextProps.navigation.state.index) {
          var _props = this.props,
              drawerOpenRoute = _props.drawerOpenRoute,
              drawerCloseRoute = _props.drawerCloseRoute,
              drawerToggleRoute = _props.drawerToggleRoute;
          var _nextProps$navigation = nextProps.navigation.state,
              routes = _nextProps$navigation.routes,
              index = _nextProps$navigation.index;

          if (routes[index].routeName === drawerOpenRoute) {
            this._drawer.openDrawer();
          } else if (routes[index].routeName === drawerToggleRoute) {
            if (this.props.navigation.state.index === 0) {
              this.props.navigation.navigate(drawerOpenRoute);
            } else {
              this.props.navigation.navigate(drawerCloseRoute);
            }
          } else {
            this._drawer.closeDrawer();
          }
        }

        this._updateScreenNavigation(nextProps.navigation);
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;

        var DrawerScreen = this.props.router.getComponentForRouteName(this.props.drawerCloseRoute);
        var config = this.props.router.getScreenOptions(this._screenNavigationProp, this.props.screenProps);
        return _react2.default.createElement(
          _reactNativeDrawerLayoutPolyfill2.default,
          {
            ref: function ref(c) {
              _this3._drawer = c;
            },
            drawerLockMode: this.props.screenProps && this.props.screenProps.drawerLockMode || config && config.drawerLockMode,
            drawerBackgroundColor: this.props.drawerBackgroundColor,
            drawerWidth: this.state.drawerWidth,
            onDrawerOpen: this._handleDrawerOpen,
            onDrawerClose: this._handleDrawerClose,
            useNativeAnimations: this.props.useNativeAnimations,
            renderNavigationView: this._renderNavigationView,
            drawerPosition: this.props.drawerPosition === 'right' ? _reactNativeDrawerLayoutPolyfill2.default.positions.Right : _reactNativeDrawerLayoutPolyfill2.default.positions.Left,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 158
            }
          },
          _react2.default.createElement(DrawerScreen, {
            screenProps: this.props.screenProps,
            navigation: this._screenNavigationProp,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 178
            }
          })
        );
      }
    }]);
    return DrawerView;
  }(_react2.default.PureComponent);

  exports.default = DrawerView;
},440,[114,12,441,375,444,399],"node_modules/react-navigation/src/views/Drawer/DrawerView.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNativeDrawerLayout = _require(_dependencyMap[0], 'react-native-drawer-layout');

  var _reactNativeDrawerLayout2 = _interopRequireDefault(_reactNativeDrawerLayout);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  exports.default = _reactNativeDrawerLayout2.default;
},441,[442],"node_modules/react-native-drawer-layout-polyfill/dist/index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var _class, _temp;

  var _react = _require(_dependencyMap[0], 'react');

  var _react2 = _interopRequireDefault(_react);

  var _reactNativeDismissKeyboard = _require(_dependencyMap[1], 'react-native-dismiss-keyboard');

  var _reactNativeDismissKeyboard2 = _interopRequireDefault(_reactNativeDismissKeyboard);

  var _reactNative = _require(_dependencyMap[2], 'react-native');

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var MIN_SWIPE_DISTANCE = 3;
  var DEVICE_WIDTH = parseFloat(_reactNative.Dimensions.get('window').width);
  var THRESHOLD = DEVICE_WIDTH / 2;
  var VX_MAX = 0.1;
  var IDLE = 'Idle';
  var DRAGGING = 'Dragging';
  var SETTLING = 'Settling';
  var DrawerLayout = (_temp = _class = function (_Component) {
    _inherits(DrawerLayout, _Component);

    function DrawerLayout(props, context) {
      _classCallCheck(this, DrawerLayout);

      var _this = _possibleConstructorReturn(this, (DrawerLayout.__proto__ || Object.getPrototypeOf(DrawerLayout)).call(this, props, context));

      _this._onOverlayClick = function (e) {
        e.stopPropagation();

        if (!_this._isLockedClosed() && !_this._isLockedOpen()) {
          _this.closeDrawer();
        }
      };

      _this._emitStateChanged = function (newState) {
        if (_this.props.onDrawerStateChanged) {
          _this.props.onDrawerStateChanged(newState);
        }
      };

      _this.openDrawer = function () {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        _this._emitStateChanged(SETTLING);

        _reactNative.Animated.spring(_this.state.openValue, _extends({
          toValue: 1,
          bounciness: 0,
          restSpeedThreshold: 0.1,
          useNativeDriver: _this.props.useNativeAnimations
        }, options)).start(function () {
          if (_this.props.onDrawerOpen) {
            _this.props.onDrawerOpen();
          }

          _this._emitStateChanged(IDLE);
        });
      };

      _this.closeDrawer = function () {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        _this._emitStateChanged(SETTLING);

        _reactNative.Animated.spring(_this.state.openValue, _extends({
          toValue: 0,
          bounciness: 0,
          restSpeedThreshold: 1,
          useNativeDriver: _this.props.useNativeAnimations
        }, options)).start(function () {
          if (_this.props.onDrawerClose) {
            _this.props.onDrawerClose();
          }

          _this._emitStateChanged(IDLE);
        });
      };

      _this._handleDrawerOpen = function () {
        if (_this.props.onDrawerOpen) {
          _this.props.onDrawerOpen();
        }
      };

      _this._handleDrawerClose = function () {
        if (_this.props.onDrawerClose) {
          _this.props.onDrawerClose();
        }
      };

      _this._shouldSetPanResponder = function (e, _ref) {
        var moveX = _ref.moveX,
            dx = _ref.dx,
            dy = _ref.dy;

        if (!dx || !dy || Math.abs(dx) < MIN_SWIPE_DISTANCE) {
          return false;
        }

        if (_this._isLockedClosed() || _this._isLockedOpen()) {
          return false;
        }

        if (_this.getDrawerPosition() === 'left') {
          var overlayArea = DEVICE_WIDTH - (DEVICE_WIDTH - _this.props.drawerWidth);

          if (_this._lastOpenValue === 1) {
            if (dx < 0 && Math.abs(dx) > Math.abs(dy) * 3 || moveX > overlayArea) {
              _this._isClosing = true;
              _this._closingAnchorValue = _this._getOpenValueForX(moveX);
              return true;
            }
          } else {
            if (moveX <= 35 && dx > 0) {
              _this._isClosing = false;
              return true;
            }

            return false;
          }
        } else {
          var _overlayArea = DEVICE_WIDTH - _this.props.drawerWidth;

          if (_this._lastOpenValue === 1) {
            if (dx > 0 && Math.abs(dx) > Math.abs(dy) * 3 || moveX < _overlayArea) {
              _this._isClosing = true;
              _this._closingAnchorValue = _this._getOpenValueForX(moveX);
              return true;
            }
          } else {
            if (moveX >= DEVICE_WIDTH - 35 && dx < 0) {
              _this._isClosing = false;
              return true;
            }

            return false;
          }
        }
      };

      _this._panResponderGrant = function () {
        _this._emitStateChanged(DRAGGING);
      };

      _this._panResponderMove = function (e, _ref2) {
        var moveX = _ref2.moveX;

        var openValue = _this._getOpenValueForX(moveX);

        if (_this._isClosing) {
          openValue = 1 - (_this._closingAnchorValue - openValue);
        }

        if (openValue > 1) {
          openValue = 1;
        } else if (openValue < 0) {
          openValue = 0;
        }

        _this.state.openValue.setValue(openValue);
      };

      _this._panResponderRelease = function (e, _ref3) {
        var moveX = _ref3.moveX,
            vx = _ref3.vx;
        var previouslyOpen = _this._isClosing;
        var isWithinVelocityThreshold = vx < VX_MAX && vx > -VX_MAX;

        if (_this.getDrawerPosition() === 'left') {
          if (vx > 0 && moveX > THRESHOLD || vx >= VX_MAX || isWithinVelocityThreshold && previouslyOpen && moveX > THRESHOLD) {
            _this.openDrawer({
              velocity: vx
            });
          } else if (vx < 0 && moveX < THRESHOLD || vx < -VX_MAX || isWithinVelocityThreshold && !previouslyOpen) {
            _this.closeDrawer({
              velocity: vx
            });
          } else if (previouslyOpen) {
            _this.openDrawer();
          } else {
            _this.closeDrawer();
          }
        } else {
          if (vx < 0 && moveX < THRESHOLD || vx <= -VX_MAX || isWithinVelocityThreshold && previouslyOpen && moveX < THRESHOLD) {
            _this.openDrawer({
              velocity: -1 * vx
            });
          } else if (vx > 0 && moveX > THRESHOLD || vx > VX_MAX || isWithinVelocityThreshold && !previouslyOpen) {
            _this.closeDrawer({
              velocity: -1 * vx
            });
          } else if (previouslyOpen) {
            _this.openDrawer();
          } else {
            _this.closeDrawer();
          }
        }
      };

      _this._isLockedClosed = function () {
        return _this.props.drawerLockMode === 'locked-closed' && !_this.state.drawerShown;
      };

      _this._isLockedOpen = function () {
        return _this.props.drawerLockMode === 'locked-open' && _this.state.drawerShown;
      };

      _this.state = {
        accessibilityViewIsModal: false,
        drawerShown: false,
        openValue: new _reactNative.Animated.Value(0)
      };
      return _this;
    }

    _createClass(DrawerLayout, [{
      key: 'getDrawerPosition',
      value: function getDrawerPosition() {
        var drawerPosition = this.props.drawerPosition;
        var rtl = _reactNative.I18nManager.isRTL;
        return rtl ? drawerPosition === 'left' ? 'right' : 'left' : drawerPosition;
      }
    }, {
      key: 'componentWillMount',
      value: function componentWillMount() {
        var _this2 = this;

        var openValue = this.state.openValue;
        openValue.addListener(function (_ref4) {
          var value = _ref4.value;
          var drawerShown = value > 0;
          var accessibilityViewIsModal = drawerShown;

          if (drawerShown !== _this2.state.drawerShown) {
            _this2.setState({
              drawerShown: drawerShown,
              accessibilityViewIsModal: accessibilityViewIsModal
            });
          }

          if (_this2.props.keyboardDismissMode === 'on-drag') {
            (0, _reactNativeDismissKeyboard2.default)();
          }

          _this2._lastOpenValue = value;

          if (_this2.props.onDrawerSlide) {
            _this2.props.onDrawerSlide({
              nativeEvent: {
                offset: value
              }
            });
          }
        });
        this._panResponder = _reactNative.PanResponder.create({
          onMoveShouldSetPanResponder: this._shouldSetPanResponder,
          onPanResponderGrant: this._panResponderGrant,
          onPanResponderMove: this._panResponderMove,
          onPanResponderTerminationRequest: function onPanResponderTerminationRequest() {
            return false;
          },
          onPanResponderRelease: this._panResponderRelease,
          onPanResponderTerminate: function onPanResponderTerminate() {}
        });
      }
    }, {
      key: 'render',
      value: function render() {
        var _state = this.state,
            accessibilityViewIsModal = _state.accessibilityViewIsModal,
            drawerShown = _state.drawerShown,
            openValue = _state.openValue;
        var _props = this.props,
            drawerBackgroundColor = _props.drawerBackgroundColor,
            drawerWidth = _props.drawerWidth,
            drawerPosition = _props.drawerPosition;
        var dynamicDrawerStyles = {
          backgroundColor: drawerBackgroundColor,
          width: drawerWidth,
          left: drawerPosition === 'left' ? 0 : null,
          right: drawerPosition === 'right' ? 0 : null
        };
        var outputRange = void 0;

        if (this.getDrawerPosition() === 'left') {
          outputRange = [-drawerWidth, 0];
        } else {
          outputRange = [drawerWidth, 0];
        }

        var drawerTranslateX = openValue.interpolate({
          inputRange: [0, 1],
          outputRange: outputRange,
          extrapolate: 'clamp'
        });
        var animatedDrawerStyles = {
          transform: [{
            translateX: drawerTranslateX
          }]
        };
        var overlayOpacity = openValue.interpolate({
          inputRange: [0, 1],
          outputRange: [0, 0.7],
          extrapolate: 'clamp'
        });
        var animatedOverlayStyles = {
          opacity: overlayOpacity
        };
        var pointerEvents = drawerShown ? 'auto' : 'none';
        return _react2.default.createElement(_reactNative.View, _extends({
          style: {
            flex: 1,
            backgroundColor: 'transparent'
          }
        }, this._panResponder.panHandlers), _react2.default.createElement(_reactNative.Animated.View, {
          style: styles.main
        }, this.props.children), _react2.default.createElement(_reactNative.TouchableWithoutFeedback, {
          pointerEvents: pointerEvents,
          onPress: this._onOverlayClick
        }, _react2.default.createElement(_reactNative.Animated.View, {
          pointerEvents: pointerEvents,
          style: [styles.overlay, animatedOverlayStyles]
        })), _react2.default.createElement(_reactNative.Animated.View, {
          accessibilityViewIsModal: accessibilityViewIsModal,
          style: [styles.drawer, dynamicDrawerStyles, animatedDrawerStyles]
        }, this.props.renderNavigationView()));
      }
    }, {
      key: '_getOpenValueForX',
      value: function _getOpenValueForX(x) {
        var drawerWidth = this.props.drawerWidth;

        if (this.getDrawerPosition() === 'left') {
          return x / drawerWidth;
        }

        return (DEVICE_WIDTH - x) / drawerWidth;
      }
    }]);

    return DrawerLayout;
  }(_react.Component), _class.defaultProps = {
    drawerWidth: 0,
    drawerPosition: 'left',
    useNativeAnimations: false
  }, _class.positions = {
    Left: 'left',
    Right: 'right'
  }, _temp);
  exports.default = DrawerLayout;

  var styles = _reactNative.StyleSheet.create({
    drawer: {
      position: 'absolute',
      top: 0,
      bottom: 0,
      zIndex: 1001
    },
    main: {
      flex: 1,
      zIndex: 0
    },
    overlay: {
      backgroundColor: '#000',
      position: 'absolute',
      top: 0,
      left: 0,
      bottom: 0,
      right: 0,
      zIndex: 1000
    }
  });
},442,[114,443,12],"node_modules/react-native-drawer-layout/dist/DrawerLayout.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, '__esModule', {
    value: true
  });
  exports.default = dismissKeyboard;

  var _reactNative = _require(_dependencyMap[0], 'react-native');

  var TextInputState = _reactNative.TextInput.State;

  function dismissKeyboard() {
    TextInputState.blurTextInput(TextInputState.currentlyFocusedField());
  }

  module.exports = exports.default;
},443,[12],"node_modules/react-native-dismiss-keyboard/dist/index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-navigation/src/views/Drawer/DrawerSidebar.js";

  var _react = _require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1], "react-native");

  var _reactNativeSafeAreaView = _require(_dependencyMap[2], "react-native-safe-area-view");

  var _reactNativeSafeAreaView2 = babelHelpers.interopRequireDefault(_reactNativeSafeAreaView);

  var _withCachedChildNavigation = _require(_dependencyMap[3], "../../withCachedChildNavigation");

  var _withCachedChildNavigation2 = babelHelpers.interopRequireDefault(_withCachedChildNavigation);

  var _NavigationActions = _require(_dependencyMap[4], "../../NavigationActions");

  var _NavigationActions2 = babelHelpers.interopRequireDefault(_NavigationActions);

  var _invariant = _require(_dependencyMap[5], "../../utils/invariant");

  var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

  var DrawerSidebar = function (_React$PureComponent) {
    babelHelpers.inherits(DrawerSidebar, _React$PureComponent);

    function DrawerSidebar() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, DrawerSidebar);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = DrawerSidebar.__proto__ || Object.getPrototypeOf(DrawerSidebar)).call.apply(_ref, [this].concat(args))), _this), _this._getScreenOptions = function (routeKey) {
        var DrawerScreen = _this.props.router.getComponentForRouteName('DrawerClose');

        (0, _invariant2.default)(DrawerScreen.router, 'NavigationComponent with routeName DrawerClose should be a Navigator');
        var childNavigation = _this.props.childNavigationProps[routeKey];
        return DrawerScreen.router.getScreenOptions(childNavigation.state.index !== undefined ? babelHelpers.extends({}, childNavigation, {
          state: babelHelpers.extends({}, childNavigation.state, {
            index: 0
          })
        }) : childNavigation, _this.props.screenProps);
      }, _this._getLabel = function (_ref2) {
        var focused = _ref2.focused,
            tintColor = _ref2.tintColor,
            route = _ref2.route;

        var _this$_getScreenOptio = _this._getScreenOptions(route.key),
            drawerLabel = _this$_getScreenOptio.drawerLabel,
            title = _this$_getScreenOptio.title;

        if (drawerLabel) {
          return typeof drawerLabel === 'function' ? drawerLabel({
            tintColor: tintColor,
            focused: focused
          }) : drawerLabel;
        }

        if (typeof title === 'string') {
          return title;
        }

        return route.routeName;
      }, _this._renderIcon = function (_ref3) {
        var focused = _ref3.focused,
            tintColor = _ref3.tintColor,
            route = _ref3.route;

        var _this$_getScreenOptio2 = _this._getScreenOptions(route.key),
            drawerIcon = _this$_getScreenOptio2.drawerIcon;

        if (drawerIcon) {
          return typeof drawerIcon === 'function' ? drawerIcon({
            tintColor: tintColor,
            focused: focused
          }) : drawerIcon;
        }

        return null;
      }, _this._onItemPress = function (_ref4) {
        var route = _ref4.route,
            focused = _ref4.focused;

        _this.props.navigation.navigate('DrawerClose');

        if (!focused) {
          var subAction = void 0;

          if (route.index !== undefined && route.index !== 0) {
            subAction = _NavigationActions2.default.reset({
              index: 0,
              actions: [_NavigationActions2.default.navigate({
                routeName: route.routes[0].routeName
              })]
            });
          }

          _this.props.navigation.navigate(route.routeName, undefined, subAction);
        }
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(DrawerSidebar, [{
      key: "render",
      value: function render() {
        var ContentComponent = this.props.contentComponent;

        if (!ContentComponent) {
          return null;
        }

        var state = this.props.navigation.state;
        (0, _invariant2.default)(typeof state.index === 'number', 'should be set');
        return _react2.default.createElement(
          _reactNative.View,
          {
            style: [styles.container, this.props.style],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 85
            }
          },
          _react2.default.createElement(ContentComponent, babelHelpers.extends({}, this.props.contentOptions, {
            navigation: this.props.navigation,
            items: state.routes,
            activeItemKey: state.routes[state.index] ? state.routes[state.index].key : null,
            screenProps: this.props.screenProps,
            getLabel: this._getLabel,
            renderIcon: this._renderIcon,
            onItemPress: this._onItemPress,
            router: this.props.router,
            drawerPosition: this.props.drawerPosition,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 86
            }
          }))
        );
      }
    }]);
    return DrawerSidebar;
  }(_react2.default.PureComponent);

  exports.default = (0, _withCachedChildNavigation2.default)(DrawerSidebar);

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1
    }
  });
},444,[114,12,387,419,374,376],"node_modules/react-navigation/src/views/Drawer/DrawerSidebar.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-navigation/src/views/Drawer/DrawerNavigatorItems.js";

  var _react = _require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1], "react-native");

  var _reactNativeSafeAreaView = _require(_dependencyMap[2], "react-native-safe-area-view");

  var _reactNativeSafeAreaView2 = babelHelpers.interopRequireDefault(_reactNativeSafeAreaView);

  var _TouchableItem = _require(_dependencyMap[3], "../TouchableItem");

  var _TouchableItem2 = babelHelpers.interopRequireDefault(_TouchableItem);

  var DrawerNavigatorItems = function DrawerNavigatorItems(_ref) {
    var _ref$navigation = _ref.navigation,
        state = _ref$navigation.state,
        navigate = _ref$navigation.navigate,
        items = _ref.items,
        activeItemKey = _ref.activeItemKey,
        activeTintColor = _ref.activeTintColor,
        activeBackgroundColor = _ref.activeBackgroundColor,
        inactiveTintColor = _ref.inactiveTintColor,
        inactiveBackgroundColor = _ref.inactiveBackgroundColor,
        getLabel = _ref.getLabel,
        renderIcon = _ref.renderIcon,
        onItemPress = _ref.onItemPress,
        itemsContainerStyle = _ref.itemsContainerStyle,
        itemStyle = _ref.itemStyle,
        labelStyle = _ref.labelStyle,
        activeLabelStyle = _ref.activeLabelStyle,
        inactiveLabelStyle = _ref.inactiveLabelStyle,
        iconContainerStyle = _ref.iconContainerStyle,
        drawerPosition = _ref.drawerPosition;
    return _react2.default.createElement(
      _reactNative.View,
      {
        style: [styles.container, itemsContainerStyle],
        __source: {
          fileName: _jsxFileName,
          lineNumber: 29
        }
      },
      items.map(function (route, index) {
        var _ref2;

        var focused = activeItemKey === route.key;
        var color = focused ? activeTintColor : inactiveTintColor;
        var backgroundColor = focused ? activeBackgroundColor : inactiveBackgroundColor;
        var scene = {
          route: route,
          index: index,
          focused: focused,
          tintColor: color
        };
        var icon = renderIcon(scene);
        var label = getLabel(scene);
        var extraLabelStyle = focused ? activeLabelStyle : inactiveLabelStyle;
        return _react2.default.createElement(
          _TouchableItem2.default,
          {
            key: route.key,
            onPress: function onPress() {
              onItemPress({
                route: route,
                focused: focused
              });
            },
            delayPressIn: 0,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 41
            }
          },
          _react2.default.createElement(
            _reactNativeSafeAreaView2.default,
            {
              style: {
                backgroundColor: backgroundColor
              },
              forceInset: (_ref2 = {}, babelHelpers.defineProperty(_ref2, drawerPosition, 'always'), babelHelpers.defineProperty(_ref2, drawerPosition === 'left' ? 'right' : 'left', 'never'), babelHelpers.defineProperty(_ref2, "vertical", 'never'), _ref2),
              __source: {
                fileName: _jsxFileName,
                lineNumber: 48
              }
            },
            _react2.default.createElement(
              _reactNative.View,
              {
                style: [styles.item, itemStyle],
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 56
                }
              },
              icon ? _react2.default.createElement(
                _reactNative.View,
                {
                  style: [styles.icon, focused ? null : styles.inactiveIcon, iconContainerStyle],
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 58
                  }
                },
                icon
              ) : null,
              typeof label === 'string' ? _react2.default.createElement(
                _reactNative.Text,
                {
                  style: [styles.label, {
                    color: color
                  }, labelStyle, extraLabelStyle],
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 69
                  }
                },
                label
              ) : label
            )
          )
        );
      })
    );
  };

  DrawerNavigatorItems.defaultProps = {
    activeTintColor: '#2196f3',
    activeBackgroundColor: 'rgba(0, 0, 0, .04)',
    inactiveTintColor: 'rgba(0, 0, 0, .87)',
    inactiveBackgroundColor: 'transparent'
  };

  var styles = _reactNative.StyleSheet.create({
    container: {
      paddingVertical: 4
    },
    item: {
      flexDirection: 'row',
      alignItems: 'center'
    },
    icon: {
      marginHorizontal: 16,
      width: 24,
      alignItems: 'center'
    },
    inactiveIcon: {
      opacity: 0.62
    },
    label: {
      margin: 16,
      fontWeight: 'bold'
    }
  });

  exports.default = DrawerNavigatorItems;
},445,[114,12,387,392],"node_modules/react-navigation/src/views/Drawer/DrawerNavigatorItems.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-navigation/src/views/withNavigation.js";
  exports.default = withNavigation;

  var _react = _require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _propTypes = _require(_dependencyMap[1], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _hoistNonReactStatics = _require(_dependencyMap[2], "hoist-non-react-statics");

  var _hoistNonReactStatics2 = babelHelpers.interopRequireDefault(_hoistNonReactStatics);

  function withNavigation(Component) {
    var _class, _temp;

    var ComponentWithNavigation = (_temp = _class = function (_React$Component) {
      babelHelpers.inherits(ComponentWithNavigation, _React$Component);

      function ComponentWithNavigation() {
        babelHelpers.classCallCheck(this, ComponentWithNavigation);
        return babelHelpers.possibleConstructorReturn(this, (ComponentWithNavigation.__proto__ || Object.getPrototypeOf(ComponentWithNavigation)).apply(this, arguments));
      }

      babelHelpers.createClass(ComponentWithNavigation, [{
        key: "render",
        value: function render() {
          var navigation = this.context.navigation;
          return _react2.default.createElement(Component, babelHelpers.extends({}, this.props, {
            navigation: navigation,
            ref: this.props.onRef,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 17
            }
          }));
        }
      }]);
      return ComponentWithNavigation;
    }(_react2.default.Component), _class.displayName = "withNavigation(" + (Component.displayName || Component.name) + ")", _class.contextTypes = {
      navigation: _propTypes2.default.object.isRequired
    }, _temp);
    return (0, _hoistNonReactStatics2.default)(ComponentWithNavigation, Component);
  }
},446,[114,141,389],"node_modules/react-navigation/src/views/withNavigation.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-navigation/src/views/withNavigationFocus.js";
  exports.default = withNavigationFocus;

  var _react = _require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _propTypes = _require(_dependencyMap[1], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _hoistNonReactStatics = _require(_dependencyMap[2], "hoist-non-react-statics");

  var _hoistNonReactStatics2 = babelHelpers.interopRequireDefault(_hoistNonReactStatics);

  var _invariant = _require(_dependencyMap[3], "../utils/invariant");

  var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

  function withNavigationFocus(Component) {
    var _class, _temp, _initialiseProps;

    var ComponentWithNavigationFocus = (_temp = _class = function (_React$Component) {
      babelHelpers.inherits(ComponentWithNavigationFocus, _React$Component);

      function ComponentWithNavigationFocus(props, context) {
        babelHelpers.classCallCheck(this, ComponentWithNavigationFocus);

        var _this = babelHelpers.possibleConstructorReturn(this, (ComponentWithNavigationFocus.__proto__ || Object.getPrototypeOf(ComponentWithNavigationFocus)).call(this));

        _initialiseProps.call(_this);

        _this.state = {
          isFocused: _this.getNavigation(props, context).isFocused()
        };
        return _this;
      }

      babelHelpers.createClass(ComponentWithNavigationFocus, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          var _this2 = this;

          var navigation = this.getNavigation();
          this.subscriptions = [navigation.addListener('didFocus', function () {
            return _this2.setState({
              isFocused: true
            });
          }), navigation.addListener('willBlur', function () {
            return _this2.setState({
              isFocused: false
            });
          })];
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this.subscriptions.forEach(function (sub) {
            return sub.remove();
          });
        }
      }, {
        key: "render",
        value: function render() {
          return _react2.default.createElement(Component, babelHelpers.extends({}, this.props, {
            isFocused: this.state.isFocused,
            ref: this.props.onRef,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 50
            }
          }));
        }
      }]);
      return ComponentWithNavigationFocus;
    }(_react2.default.Component), _class.displayName = "withNavigationFocus(" + (Component.displayName || Component.name) + ")", _class.contextTypes = {
      navigation: _propTypes2.default.object.isRequired
    }, _initialiseProps = function _initialiseProps() {
      var _this3 = this;

      this.getNavigation = function () {
        var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this3.props;
        var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this3.context;
        var navigation = props.navigation || context.navigation;
        (0, _invariant2.default)(!!navigation, 'withNavigationFocus can only be used on a view hierarchy of a navigator. The wrapped component is unable to get access to navigation from props or context.');
        return navigation;
      };
    }, _temp);
    return (0, _hoistNonReactStatics2.default)(ComponentWithNavigationFocus, Component);
  }
},447,[114,141,389,376],"node_modules/react-navigation/src/views/withNavigationFocus.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = undefined;
    var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/app/scene/ETTHomeScene.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    var _reactNativeEasyToast = _require(_dependencyMap[2], "react-native-easy-toast");

    var _reactNativeEasyToast2 = babelHelpers.interopRequireDefault(_reactNativeEasyToast);

    var _ETTDevice = _require(_dependencyMap[3], "../res/values/ETTDevice");

    var _ETTDevice2 = babelHelpers.interopRequireDefault(_ETTDevice);

    var _ETTStatusBar = _require(_dependencyMap[4], "../common/ETTStatusBar");

    var _reactNativeSwiper = _require(_dependencyMap[5], "react-native-swiper");

    var _reactNativeSwiper2 = babelHelpers.interopRequireDefault(_reactNativeSwiper);

    var _ETTHomeStyles = _require(_dependencyMap[6], "../res/styles/ETTHomeStyles");

    var _ETTHomeStyles2 = babelHelpers.interopRequireDefault(_ETTHomeStyles);

    var _ETTHomeSimpleCell = _require(_dependencyMap[7], "../common/ETTHomeSimpleCell");

    var _ETTHomeSimpleCell2 = babelHelpers.interopRequireDefault(_ETTHomeSimpleCell);

    var _ETTInlineFuction = _require(_dependencyMap[8], "../res/values/ETTInlineFuction");

    var _ETTURLConfig = _require(_dependencyMap[9], "../res/values/ETTURLConfig");

    var _ETTURLConfig2 = babelHelpers.interopRequireDefault(_ETTURLConfig);

    var _ETTRequestModel = _require(_dependencyMap[10], "../mobx/ETTRequestModel");

    var _ETTRequestModel2 = babelHelpers.interopRequireDefault(_ETTRequestModel);

    var _ETTNetworkUtil = _require(_dependencyMap[11], "../utils/ETTNetworkUtil");

    var _ETTNetworkUtil2 = babelHelpers.interopRequireDefault(_ETTNetworkUtil);

    var _ETTNetResponseHelper = _require(_dependencyMap[12], "../utils/ETTNetResponseHelper");

    var _ETTNetResponseHelper2 = babelHelpers.interopRequireDefault(_ETTNetResponseHelper);

    var _goodses = _require(_dependencyMap[13], "../common/goodses");

    var _goodses2 = babelHelpers.interopRequireDefault(_goodses);

    var _ETTLogStyles = _require(_dependencyMap[14], "../res/styles/ETTLogStyles");

    var _ETTLogStyles2 = babelHelpers.interopRequireDefault(_ETTLogStyles);

    var _ETTLoadingAnimation = _require(_dependencyMap[15], "../common/ETTLoadingAnimation");

    var _ETTLoadingAnimation2 = babelHelpers.interopRequireDefault(_ETTLoadingAnimation);

    var _ETTProductDeatilScene = _require(_dependencyMap[16], "./ETTProductDeatilScene");

    var _ETTProductDeatilScene2 = babelHelpers.interopRequireDefault(_ETTProductDeatilScene);

    var ETTHomeScene = function (_Component) {
        babelHelpers.inherits(ETTHomeScene, _Component);

        function ETTHomeScene(props) {
            babelHelpers.classCallCheck(this, ETTHomeScene);

            var _this = babelHelpers.possibleConstructorReturn(this, (ETTHomeScene.__proto__ || Object.getPrototypeOf(ETTHomeScene)).call(this, props));

            _this._keyExtractor = function (item, index) {
                return index;
            };

            _this.zhihuiRenderRow = function (rowData) {
                var marketPrice = rowData.marketPrice;
                var plist = '';

                if (marketPrice.includes('-')) {
                    plist = marketPrice.split('-');
                } else {
                    plist = marketPrice;
                }

                var price = '';

                if (plist.length == 2) {
                    price = '￥' + plist[0] + '~￥' + plist[1];
                } else {
                    price = '￥' + plist;
                }

                return _react2.default.createElement(
                    _reactNative.TouchableOpacity,
                    {
                        onPress: function onPress(goodsesId) {
                            _this.zhihuiJumpDetail(rowData.goodsesId);
                        },
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 185
                        }
                    },
                    _react2.default.createElement(_ETTHomeSimpleCell2.default, {
                        title: rowData.name,
                        isShowPrice: true,
                        introduc: rowData.introduction,
                        itemId: rowData.goodsesld,
                        mainPicture: rowData.mainPicture,
                        price: price,
                        key: _this._keyExtractor,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 188
                        }
                    })
                );
            };

            _this.benziRenderRow = function (rowData) {
                return _react2.default.createElement(_ETTHomeSimpleCell2.default, {
                    title: rowData.courseName,
                    isShowPrice: false,
                    introduc: rowData.introduction,
                    itemId: rowData.goodsesld,
                    onPress: function onPress(courseId) {
                        _this.benziJumpDetail(rowData.courseId);
                    },
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 222
                    }
                });
            };

            _reactNative.StatusBar.setBarStyle('dark-content');

            var bz = new _reactNative.ListView.DataSource({
                rowHasChanged: function rowHasChanged(oldRow, newRow) {
                    return oldRow !== newRow;
                }
            });
            _this.state = {
                beiziData: bz,
                zhihuiData: '',
                showBenzi: false,
                show: false
            };
            console.log("ETTHomeScene");
            console.log(_goodses2.default.data);
            return _this;
        }

        babelHelpers.createClass(ETTHomeScene, [{
            key: "componentDidMount",
            value: function componentDidMount() {
                this.homeDetailRequest();
            }
        }, {
            key: "componentWillMount",
            value: function componentWillMount() {}
        }, {
            key: "homeDetailRequest",
            value: function homeDetailRequest() {
                var _this2 = this;

                this.refs.loading._show(null);

                var requetModel = new _ETTRequestModel2.default();
                requetModel._method = 'GET';
                requetModel._path = _ETTURLConfig2.default.SERVICE_TRADING + _ETTURLConfig2.default.goodses_list;
                requetModel._bodyData = "";
                requetModel._getInfo = requetModel.getAvoidLoginTokenRequesetData();

                _ETTNetworkUtil2.default.requestAvoidLoginWithToken(requetModel, function (json) {
                    var result = _ETTNetResponseHelper2.default.responseJson(json);

                    _this2.refs.loading._hiden();

                    if (result.code != 1) {
                        _this2.refs.loading._hiden();

                        _this2.refs.toast.show(result.msg);
                    } else {
                        var zh = new _reactNative.ListView.DataSource({
                            rowHasChanged: function rowHasChanged(oldRow, newRow) {
                                return oldRow !== newRow;
                            }
                        });

                        _this2.setState({
                            show: true,
                            zhihuiData: zh.cloneWithRows(result.data)
                        });
                    }
                });
            }
        }, {
            key: "topView",
            value: function topView() {
                return _react2.default.createElement(
                    _reactNative.View,
                    {
                        style: _ETTHomeStyles2.default.bannerViewStyle,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 101
                        }
                    },
                    _react2.default.createElement(
                        _reactNativeSwiper2.default,
                        {
                            style: {
                                height: 200,
                                backgroundColor: "#F5F5F5"
                            },
                            height: 200,
                            loop: true,
                            autoplay: true,
                            autoplayTimeout: 4,
                            horizontal: true,
                            paginationStyle: {
                                bottom: 10
                            },
                            showsButtons: false,
                            showsPagination: false,
                            dot: _react2.default.createElement(_reactNative.View, {
                                style: _ETTHomeStyles2.default.bannerDotStyle,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 114
                                }
                            }),
                            activeDot: _react2.default.createElement(_reactNative.View, {
                                style: _ETTHomeStyles2.default.bannerActiveDotStyle,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 117
                                }
                            }),
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 104
                            }
                        },
                        _react2.default.createElement(_reactNative.Image, {
                            source: _require(_dependencyMap[17], '../res/images/1.png'),
                            style: _ETTHomeStyles2.default.bannerImgStyle,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 122
                            }
                        })
                    )
                );
            }
        }, {
            key: "_showDeatilView",
            value: function _showDeatilView() {
                if (this.state.showDeatil === true) {
                    return _react2.default.createElement(_ETTProductDeatilScene2.default, {
                        goodsesId: goodsesId,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 131
                        }
                    });
                    {}
                    {}
                    {}
                    {}
                } else {
                    return null;
                }
            }
        }, {
            key: "benziJumpDetail",
            value: function benziJumpDetail(goodsesId) {
                this.props.navigation.navigate('ProductDeatilScene', {
                    title: '酷蒙在线',
                    isVisible: false,
                    goodsesId: goodsesId,
                    callback: function callback(data) {
                        console.log("callback" + data);
                    }
                });
            }
        }, {
            key: "zhihuiJumpDetail",
            value: function zhihuiJumpDetail(goodsesId) {
                this.props.navigation.navigate('ProductDeatilScene', {
                    title: '酷蒙在线',
                    isVisible: false,
                    goodsesId: goodsesId,
                    callback: function callback(data) {
                        console.log("callback" + data);
                    }
                });
            }
        }, {
            key: "zhihuiCourseStyle",
            value: function zhihuiCourseStyle() {
                if (this.state.showBenzi == true) {
                    return {
                        marginTop: (0, _ETTInlineFuction.scaleSize)(5),
                        flex: 1,
                        flexDirection: 'column',
                        backgroundColor: 'white'
                    };
                }

                return {
                    flex: 1,
                    flexDirection: 'column',
                    backgroundColor: 'white'
                };
            }
        }, {
            key: "zhihuiCourse",
            value: function zhihuiCourse() {
                var _this3 = this;

                return _react2.default.createElement(
                    _reactNative.View,
                    {
                        style: this.zhihuiCourseStyle(),
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 210
                        }
                    },
                    _react2.default.createElement(_reactNative.Image, {
                        style: {
                            marginTop: (0, _ETTInlineFuction.scaleSize)(15),
                            marginLeft: (0, _ETTInlineFuction.scaleSize)(15),
                            width: _ETTDevice2.default.ScreenWidth - (0, _ETTInlineFuction.scaleSize)(15) * 2,
                            resizeMode: 'stretch',
                            height: (0, _ETTInlineFuction.scaleSize)(160)
                        },
                        source: _require(_dependencyMap[18], '../res/images/3.png'),
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 211
                        }
                    }),
                    _react2.default.createElement(_reactNative.ListView, {
                        dataSource: this.state.zhihuiData,
                        renderRow: function renderRow(rowData) {
                            return _this3.zhihuiRenderRow(rowData);
                        },
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 212
                        }
                    })
                );
            }
        }, {
            key: "benziMembersCourse",
            value: function benziMembersCourse() {
                var _this4 = this;

                if (this.state.showBenzi == false) {
                    return _react2.default.createElement(_reactNative.View, {
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 235
                        }
                    });
                }

                var introduction = this.state.beiziData.introduction ? this.state.beiziData.introduction : 'Mercedes me 车主俱乐部联合北京四中网校，为会员打造精品课程，让会员孩子赢在起点。';
                return _react2.default.createElement(
                    _reactNative.View,
                    {
                        style: {
                            flexDirection: 'column',
                            flex: 1,
                            backgroundColor: '#fff',
                            width: _ETTDevice2.default.ScreenWidth,
                            backgroundColor: 'white'
                        },
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 238
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.View,
                        {
                            style: {
                                flexDirection: 'cloumn',
                                width: _ETTDevice2.default.ScreenWidth,
                                marginTop: (0, _ETTInlineFuction.scaleSize)(20)
                            },
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 239
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.View,
                            {
                                style: {
                                    flexDirection: 'row'
                                },
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 240
                                }
                            },
                            _react2.default.createElement(_reactNative.View, {
                                style: {
                                    backgroundColor: 'blue',
                                    width: (0, _ETTInlineFuction.scaleSize)(2),
                                    height: (0, _ETTInlineFuction.scaleSize)(10),
                                    marginLeft: (0, _ETTInlineFuction.scaleSize)(10)
                                },
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 241
                                }
                            }),
                            _react2.default.createElement(
                                _reactNative.Text,
                                {
                                    style: {
                                        marginLeft: (0, _ETTInlineFuction.scaleSize)(8),
                                        fontSize: 20,
                                        color: '#000'
                                    },
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 243
                                    }
                                },
                                "\u5954\u9A70\u4F1A\u5458\u4E13\u4EAB\u8BFE\u7A0B"
                            )
                        ),
                        _react2.default.createElement(
                            _reactNative.Text,
                            {
                                style: {
                                    marginLeft: (0, _ETTInlineFuction.scaleSize)(20),
                                    marginTop: (0, _ETTInlineFuction.scaleSize)(10),
                                    marginRight: (0, _ETTInlineFuction.scaleSize)(20),
                                    fontSize: 14
                                },
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 247
                                }
                            },
                            introduction
                        )
                    ),
                    _react2.default.createElement(_reactNative.ListView, {
                        dataSource: this.state.beiziData,
                        renderRow: function renderRow(rowData) {
                            return _this4.benziRenderRow(rowData);
                        },
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 252
                        }
                    }),
                    _react2.default.createElement(
                        _reactNative.TouchableOpacity,
                        {
                            onPress: function onPress() {
                                alert("我是查看更多");
                            },
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 258
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.View,
                            {
                                style: {
                                    flexDirection: 'column',
                                    height: (0, _ETTInlineFuction.scaleSize)(80)
                                },
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 262
                                }
                            },
                            _react2.default.createElement(_reactNative.View, {
                                style: {
                                    backgroundColor: 'grey',
                                    height: (0, _ETTInlineFuction.scaleSize)(0.5)
                                },
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 263
                                }
                            }),
                            _react2.default.createElement(
                                _reactNative.Text,
                                {
                                    style: {
                                        color: 'blue',
                                        alignSelf: 'center',
                                        width: (0, _ETTInlineFuction.scaleSize)(80),
                                        justifyContent: 'center',
                                        alignItems: 'center'
                                    },
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 265
                                    }
                                },
                                "\u67E5\u770B\u66F4\u591A > "
                            )
                        )
                    )
                );
            }
        }, {
            key: "render",
            value: function render() {
                if (this.state.show == false) {
                    return _react2.default.createElement(
                        _reactNative.View,
                        {
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 277
                            }
                        },
                        _react2.default.createElement(_reactNativeEasyToast2.default, {
                            ref: "toast",
                            style: _ETTLogStyles2.default.reg_toast,
                            opacity: 0.8,
                            position: "center",
                            positionValue: 400,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 278
                            }
                        }),
                        _react2.default.createElement(_ETTLoadingAnimation2.default, {
                            ref: "loading",
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 285
                            }
                        })
                    );
                } else {
                    return _react2.default.createElement(
                        _reactNative.ScrollView,
                        {
                            style: {
                                flex: 1,
                                width: _ETTDevice2.default.ScreenWidth
                            },
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 298
                            }
                        },
                        this.topView(),
                        this.zhihuiCourse(),
                        _react2.default.createElement(_reactNativeEasyToast2.default, {
                            ref: "toast",
                            style: _ETTLogStyles2.default.reg_toast,
                            opacity: 0.8,
                            position: "center",
                            positionValue: 200,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 304
                            }
                        }),
                        _react2.default.createElement(_ETTLoadingAnimation2.default, {
                            ref: "loading",
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 311
                            }
                        })
                    );
                }
            }
        }]);
        return ETTHomeScene;
    }(_react.Component);

    exports.default = ETTHomeScene;
},448,[114,12,449,342,450,454,456,457,452,360,361,362,369,459,460,461,463,522,523],"app/scene/ETTHomeScene.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = exports.DURATION = undefined;
    var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-native-easy-toast/index.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    var _propTypes = _require(_dependencyMap[2], "prop-types");

    var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

    var ViewPropTypes = _reactNative.ViewPropTypes || _reactNative.View.propTypes;
    var DURATION = exports.DURATION = {
        LENGTH_SHORT: 500,
        FOREVER: 0
    };

    var _Dimensions$get = _reactNative.Dimensions.get('window'),
        height = _Dimensions$get.height,
        width = _Dimensions$get.width;

    var Toast = function (_Component) {
        babelHelpers.inherits(Toast, _Component);

        function Toast(props) {
            babelHelpers.classCallCheck(this, Toast);

            var _this = babelHelpers.possibleConstructorReturn(this, (Toast.__proto__ || Object.getPrototypeOf(Toast)).call(this, props));

            _this.state = {
                isShow: false,
                text: '',
                opacityValue: new _reactNative.Animated.Value(_this.props.opacity)
            };
            return _this;
        }

        babelHelpers.createClass(Toast, [{
            key: "show",
            value: function show(text, duration, callback) {
                var _this2 = this;

                this.duration = typeof duration === 'number' ? duration : DURATION.LENGTH_SHORT;
                this.callback = callback;
                this.setState({
                    isShow: true,
                    text: text
                });

                _reactNative.Animated.timing(this.state.opacityValue, {
                    toValue: this.props.opacity,
                    duration: this.props.fadeInDuration
                }).start(function () {
                    _this2.isShow = true;
                    if (duration !== DURATION.FOREVER) _this2.close();
                });
            }
        }, {
            key: "close",
            value: function close(duration) {
                var _this3 = this;

                var delay = typeof duration === 'undefined' ? this.duration : duration;
                if (delay === DURATION.FOREVER) delay = this.props.defaultCloseDelay || 250;
                if (!this.isShow && !this.state.isShow) return;
                this.timer && clearTimeout(this.timer);
                this.timer = setTimeout(function () {
                    _reactNative.Animated.timing(_this3.state.opacityValue, {
                        toValue: 0.0,
                        duration: _this3.props.fadeOutDuration
                    }).start(function () {
                        _this3.setState({
                            isShow: false
                        });

                        _this3.isShow = false;

                        if (typeof _this3.callback === 'function') {
                            _this3.callback();
                        }
                    });
                }, delay);
            }
        }, {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
                this.timer && clearTimeout(this.timer);
            }
        }, {
            key: "render",
            value: function render() {
                var pos = void 0;

                switch (this.props.position) {
                    case 'top':
                        pos = this.props.positionValue;
                        break;

                    case 'center':
                        pos = height / 2;
                        break;

                    case 'bottom':
                        pos = height - this.props.positionValue;
                        break;
                }

                var view = this.state.isShow ? _react2.default.createElement(
                    _reactNative.View,
                    {
                        style: [styles.container, {
                            top: pos
                        }],
                        pointerEvents: "none",
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 104
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.Animated.View,
                        {
                            style: [styles.content, {
                                opacity: this.state.opacityValue
                            }, this.props.style],
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 108
                            }
                        },
                        _react2.default.isValidElement(this.state.text) ? this.state.text : _react2.default.createElement(
                            _reactNative.Text,
                            {
                                style: this.props.textStyle,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 111
                                }
                            },
                            this.state.text
                        )
                    )
                ) : null;
                return view;
            }
        }]);
        return Toast;
    }(_react.Component);

    exports.default = Toast;

    var styles = _reactNative.StyleSheet.create({
        container: {
            position: 'absolute',
            left: 0,
            right: 0,
            elevation: 999,
            alignItems: 'center',
            zIndex: 10000
        },
        content: {
            backgroundColor: 'black',
            borderRadius: 5,
            padding: 10
        },
        text: {
            color: 'white'
        }
    });

    Toast.propTypes = {
        style: ViewPropTypes.style,
        position: _propTypes2.default.oneOf(['top', 'center', 'bottom']),
        textStyle: _reactNative.Text.propTypes.style,
        positionValue: _propTypes2.default.number,
        fadeInDuration: _propTypes2.default.number,
        fadeOutDuration: _propTypes2.default.number,
        opacity: _propTypes2.default.number
    };
    Toast.defaultProps = {
        position: 'bottom',
        textStyle: styles.text,
        positionValue: 120,
        fadeInDuration: 500,
        fadeOutDuration: 500,
        opacity: 1
    };
},449,[114,12,141],"node_modules/react-native-easy-toast/index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.ETTDarkStatus = exports.ETTLightStatus = undefined;
    var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/app/common/ETTStatusBar.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    var _ETTHeaderStyles = _require(_dependencyMap[2], "../res/styles/ETTHeaderStyles");

    var _ETTHeaderStyles2 = babelHelpers.interopRequireDefault(_ETTHeaderStyles);

    var ETTLightStatus = exports.ETTLightStatus = function (_Component) {
        babelHelpers.inherits(ETTLightStatus, _Component);

        function ETTLightStatus() {
            babelHelpers.classCallCheck(this, ETTLightStatus);
            return babelHelpers.possibleConstructorReturn(this, (ETTLightStatus.__proto__ || Object.getPrototypeOf(ETTLightStatus)).apply(this, arguments));
        }

        babelHelpers.createClass(ETTLightStatus, [{
            key: "render",
            value: function render() {
                return _react2.default.createElement(_reactNative.StatusBar, {
                    animated: true,
                    hidden: false,
                    networkActivityIndicatorVisible: false,
                    showHideTransition: 'fade',
                    backgroundColor: _ETTHeaderStyles2.default.headerStyle,
                    translucent: false,
                    barStyle: 'light-content',
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 13
                    }
                });
            }
        }]);
        return ETTLightStatus;
    }(_react.Component);

    var ETTDarkStatus = exports.ETTDarkStatus = function (_Component2) {
        babelHelpers.inherits(ETTDarkStatus, _Component2);

        function ETTDarkStatus() {
            babelHelpers.classCallCheck(this, ETTDarkStatus);
            return babelHelpers.possibleConstructorReturn(this, (ETTDarkStatus.__proto__ || Object.getPrototypeOf(ETTDarkStatus)).apply(this, arguments));
        }

        babelHelpers.createClass(ETTDarkStatus, [{
            key: "render",
            value: function render() {
                return _react2.default.createElement(_reactNative.StatusBar, {
                    animated: true,
                    hidden: false,
                    backgroundColor: 'white',
                    translucent: false,
                    barStyle: 'dark-content',
                    networkActivityIndicatorVisible: false,
                    showHideTransition: 'fade',
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 33
                    }
                });
            }
        }]);
        return ETTDarkStatus;
    }(_react.Component);
},450,[114,12,451],"app/common/ETTStatusBar.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    var _react = _require(_dependencyMap[0], "react");

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    var _ETTDevice = _require(_dependencyMap[2], "../values/ETTDevice");

    var _ETTInlineFuction = _require(_dependencyMap[3], "../values/ETTInlineFuction");

    var _ETTColor = _require(_dependencyMap[4], "../values/ETTColor");

    var _ETTColor2 = babelHelpers.interopRequireDefault(_ETTColor);

    var ETTHeaderStyles = _reactNative.StyleSheet.create({
        headerStyle: {
            backgroundColor: '#1C1D21'
        },
        headerTitleStyle: {
            flex: 1,
            alignSelf: 'center',
            fontSize: (0, _ETTInlineFuction.scaleSize)(36),
            color: _ETTColor2.default.white,
            textAlign: 'center'
        },
        headerTitleBackStyle: {
            fontSize: (0, _ETTInlineFuction.scaleSize)(28),
            color: _ETTColor2.default.white,
            marginLeft: (0, _ETTInlineFuction.scaleSize)(15)
        },
        headerBackStyle: {
            flexDirection: "row",
            alignItems: "center"
        },
        headerBackImageStyle: {
            height: (0, _ETTInlineFuction.scaleSize)(34),
            width: (0, _ETTInlineFuction.scaleSize)(21),
            marginLeft: (0, _ETTInlineFuction.scaleSize)(15)
        },
        headerBackTextStyle: {
            fontSize: (0, _ETTInlineFuction.scaleSize)(28),
            color: _ETTColor2.default.white,
            marginLeft: (0, _ETTInlineFuction.scaleSize)(15)
        },
        bigTextPrompt: {
            width: 300,
            backgroundColor: 'gray',
            color: 'white',
            textAlign: 'center',
            fontSize: 20
        }
    });

    var ETTWitheHeaderStyles = _reactNative.StyleSheet.create({
        headerStyle: {
            backgroundColor: _ETTColor2.default.white,
            elevation: 0,
            shadowOpacity: 0
        },
        headerTitleStyle: {
            flex: 1,
            alignSelf: 'center',
            fontSize: (0, _ETTInlineFuction.scaleSize)(40),
            color: _ETTColor2.default.f1,
            textAlign: 'center'
        },
        headerBackImageStyle: {
            height: (0, _ETTInlineFuction.scaleSize)(34),
            width: (0, _ETTInlineFuction.scaleSize)(21),
            marginLeft: (0, _ETTInlineFuction.scaleSize)(15)
        },
        headerBackTextStyle: {
            fontSize: (0, _ETTInlineFuction.scaleSize)(28),
            color: _ETTColor2.default.f1,
            marginLeft: (0, _ETTInlineFuction.scaleSize)(15)
        },
        bigTextPrompt: {
            width: 300,
            backgroundColor: 'gray',
            color: 'white',
            textAlign: 'center',
            fontSize: 20
        }
    });

    module.exports = {
        ETTHeaderStyles: ETTHeaderStyles,
        ETTWitheHeaderStyles: ETTWitheHeaderStyles
    };
},451,[114,12,342,452,453],"app/res/styles/ETTHeaderStyles.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.sum = sum;
    exports.adaptationText = adaptationText;
    exports.scaleSize = scaleSize;

    var _reactNative = _require(_dependencyMap[0], "react-native");

    var _ETTDevice = _require(_dependencyMap[1], "./ETTDevice");

    var _ETTDevice2 = babelHelpers.interopRequireDefault(_ETTDevice);

    function sum(numa, numb) {
        return numa + numb;
    }

    var defaultPixel = 2;
    var w2 = 750 / defaultPixel;
    var h2 = 1334 / defaultPixel;
    var scale = Math.min(_ETTDevice2.default.ScreenHeight / h2, _ETTDevice2.default.ScreenWidth / w2);

    function adaptationText(size) {
        size = Math.round((size * scale + 0.5) * _ETTDevice2.default.PixelRatio / _ETTDevice2.default.FontScale);
        return size / defaultPixel;
    }

    function scaleSize(size) {
        size = Math.round(size * scale + 0.5);
        return size / defaultPixel;
    }
},452,[12,342],"app/res/values/ETTInlineFuction.js");
__d(function (global, _require, module, exports, _dependencyMap) {
     Object.defineProperty(exports, "__esModule", {
          value: true
     });
     exports.default = {
          'BKFontColor1': '#3B3C3E',
          'GYFontColor1': '#858687',
          'BGColor1': '#F2F3F5',
          'BGLineColor': '#F3F4F5',
          'BGColor2': '#FFFFFF',
          'REDFontColor1': '#F92900',
          'c1': '#1f1f1f',
          'c2': '#f5f5f5',
          'c3': '#ff5000',
          'c4': '#fff2ec',
          'c5': '#cccccc',
          'c6': '#00adef',
          'c7': '#ececec',
          'c8': '#00aef4',
          'c9': '#333333',
          'c10': '#666666',
          'c11': '#999999',
          'c12': '#e5e5e5',
          'f1': '#333333',
          'f2': '#666666',
          'f3': '#999999',
          'f4': '#00aef4',
          'f5': '#ff5000',
          'l1': '#ececec',
          'white': '#ffffff',
          'black_t60': '#000000'
     };
},453,[],"app/res/values/ETTColor.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  var _src = _require(_dependencyMap[0], "./src/");

  var _src2 = babelHelpers.interopRequireDefault(_src);

  module.exports = _src2.default;
},454,[455],"node_modules/react-native-swiper/index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _class,
      _temp2,
      _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-native-swiper/src/index.js";

  var _react = _require(_dependencyMap[0], "react");

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _propTypes = _require(_dependencyMap[1], "prop-types");

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[2], "react-native");

  var styles = {
    container: {
      backgroundColor: 'transparent',
      position: 'relative',
      flex: 1
    },
    wrapperIOS: {
      backgroundColor: 'transparent'
    },
    wrapperAndroid: {
      backgroundColor: 'transparent',
      flex: 1
    },
    slide: {
      backgroundColor: 'transparent'
    },
    pagination_x: {
      position: 'absolute',
      bottom: 25,
      left: 0,
      right: 0,
      flexDirection: 'row',
      flex: 1,
      justifyContent: 'center',
      alignItems: 'center',
      backgroundColor: 'transparent'
    },
    pagination_y: {
      position: 'absolute',
      right: 15,
      top: 0,
      bottom: 0,
      flexDirection: 'column',
      flex: 1,
      justifyContent: 'center',
      alignItems: 'center',
      backgroundColor: 'transparent'
    },
    title: {
      height: 30,
      justifyContent: 'center',
      position: 'absolute',
      paddingLeft: 10,
      bottom: -30,
      left: 0,
      flexWrap: 'nowrap',
      width: 250,
      backgroundColor: 'transparent'
    },
    buttonWrapper: {
      backgroundColor: 'transparent',
      flexDirection: 'row',
      position: 'absolute',
      top: 0,
      left: 0,
      flex: 1,
      paddingHorizontal: 10,
      paddingVertical: 10,
      justifyContent: 'space-between',
      alignItems: 'center'
    },
    buttonText: {
      fontSize: 50,
      color: '#007aff',
      fontFamily: 'Arial'
    }
  };

  var _default = (_temp2 = _class = function (_Component) {
    babelHelpers.inherits(_default, _Component);

    function _default() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, _default);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = _default.__proto__ || Object.getPrototypeOf(_default)).call.apply(_ref, [this].concat(args))), _this), _this.state = _this.initState(_this.props), _this.initialRender = true, _this.autoplayTimer = null, _this.loopJumpTimer = null, _this.onLayout = function (event) {
        var _event$nativeEvent$la = event.nativeEvent.layout,
            width = _event$nativeEvent$la.width,
            height = _event$nativeEvent$la.height;
        var offset = _this.internals.offset = {};
        var state = {
          width: width,
          height: height
        };

        if (_this.state.total > 1) {
          var setup = _this.state.index;

          if (_this.props.loop) {
            setup++;
          }

          offset[_this.state.dir] = _this.state.dir === 'y' ? height * setup : width * setup;
        }

        if (!_this.state.offset || width !== _this.state.width || height !== _this.state.height) {
          state.offset = offset;
        }

        if (_reactNative.Platform.OS === 'ios') {
          if (_this.initialRender && _this.state.total > 1) {
            _this.scrollView.scrollTo(babelHelpers.extends({}, offset, {
              animated: false
            }));

            _this.initialRender = false;
          }
        }

        _this.setState(state);
      }, _this.loopJump = function () {
        if (!_this.state.loopJump) return;
        var i = _this.state.index + (_this.props.loop ? 1 : 0);
        var scrollView = _this.scrollView;
        _this.loopJumpTimer = setTimeout(function () {
          return scrollView.setPageWithoutAnimation && scrollView.setPageWithoutAnimation(i);
        }, 50);
      }, _this.autoplay = function () {
        if (!Array.isArray(_this.props.children) || !_this.props.autoplay || _this.internals.isScrolling || _this.state.autoplayEnd) return;
        _this.autoplayTimer && clearTimeout(_this.autoplayTimer);
        _this.autoplayTimer = setTimeout(function () {
          if (!_this.props.loop && (_this.props.autoplayDirection ? _this.state.index === _this.state.total - 1 : _this.state.index === 0)) return _this.setState({
            autoplayEnd: true
          });

          _this.scrollBy(_this.props.autoplayDirection ? 1 : -1);
        }, _this.props.autoplayTimeout * 1000);
      }, _this.onScrollBegin = function (e) {
        _this.internals.isScrolling = true;
        _this.props.onScrollBeginDrag && _this.props.onScrollBeginDrag(e, _this.fullState(), _this);
      }, _this.onScrollEnd = function (e) {
        _this.internals.isScrolling = false;

        if (!e.nativeEvent.contentOffset) {
          if (_this.state.dir === 'x') {
            e.nativeEvent.contentOffset = {
              x: e.nativeEvent.position * _this.state.width
            };
          } else {
            e.nativeEvent.contentOffset = {
              y: e.nativeEvent.position * _this.state.height
            };
          }
        }

        _this.updateIndex(e.nativeEvent.contentOffset, _this.state.dir, function () {
          _this.autoplay();

          _this.loopJump();

          _this.props.onMomentumScrollEnd && _this.props.onMomentumScrollEnd(e, _this.fullState(), _this);
        });
      }, _this.onScrollEndDrag = function (e) {
        var contentOffset = e.nativeEvent.contentOffset;
        var _this$props = _this.props,
            horizontal = _this$props.horizontal,
            children = _this$props.children;
        var index = _this.state.index;
        var offset = _this.internals.offset;
        var previousOffset = horizontal ? offset.x : offset.y;
        var newOffset = horizontal ? contentOffset.x : contentOffset.y;

        if (previousOffset === newOffset && (index === 0 || index === children.length - 1)) {
          _this.internals.isScrolling = false;
        }
      }, _this.updateIndex = function (offset, dir, cb) {
        var state = _this.state;
        var index = state.index;
        var diff = offset[dir] - _this.internals.offset[dir];
        var step = dir === 'x' ? state.width : state.height;
        var loopJump = false;
        if (!diff) return;
        index = parseInt(index + Math.round(diff / step));

        if (_this.props.loop) {
          if (index <= -1) {
            index = state.total - 1;
            offset[dir] = step * state.total;
            loopJump = true;
          } else if (index >= state.total) {
            index = 0;
            offset[dir] = step;
            loopJump = true;
          }
        }

        var newState = {};
        newState.index = index;
        newState.loopJump = loopJump;
        _this.internals.offset = offset;

        if (loopJump) {
          if (offset[dir] === _this.internals.offset[dir]) {
            newState.offset = {
              x: 0,
              y: 0
            };
            newState.offset[dir] = offset[dir] + 1;

            _this.setState(newState, function () {
              _this.setState({
                offset: offset
              }, cb);
            });
          } else {
            newState.offset = offset;

            _this.setState(newState, cb);
          }
        } else {
          _this.setState(newState, cb);
        }
      }, _this.scrollBy = function (index) {
        var animated = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        if (_this.internals.isScrolling || _this.state.total < 2) return;
        var state = _this.state;
        var diff = (_this.props.loop ? 1 : 0) + index + _this.state.index;
        var x = 0;
        var y = 0;
        if (state.dir === 'x') x = diff * state.width;
        if (state.dir === 'y') y = diff * state.height;

        if (_reactNative.Platform.OS !== 'ios') {
          _this.scrollView && _this.scrollView[animated ? 'setPage' : 'setPageWithoutAnimation'](diff);
        } else {
          _this.scrollView && _this.scrollView.scrollTo({
            x: x,
            y: y,
            animated: animated
          });
        }

        _this.internals.isScrolling = true;

        _this.setState({
          autoplayEnd: false
        });

        if (!animated || _reactNative.Platform.OS !== 'ios') {
          setImmediate(function () {
            _this.onScrollEnd({
              nativeEvent: {
                position: diff
              }
            });
          });
        }
      }, _this.scrollViewPropOverrides = function () {
        var props = _this.props;
        var overrides = {};

        for (var prop in props) {
          if (typeof props[prop] === 'function' && prop !== 'onMomentumScrollEnd' && prop !== 'renderPagination' && prop !== 'onScrollBeginDrag') {
            (function () {
              var originResponder = props[prop];

              overrides[prop] = function (e) {
                return originResponder(e, _this.fullState(), _this);
              };
            })();
          }
        }

        return overrides;
      }, _this.renderPagination = function () {
        if (_this.state.total <= 1) return null;
        var dots = [];

        var ActiveDot = _this.props.activeDot || _react2.default.createElement(_reactNative.View, {
          style: [{
            backgroundColor: _this.props.activeDotColor || '#007aff',
            width: 8,
            height: 8,
            borderRadius: 4,
            marginLeft: 3,
            marginRight: 3,
            marginTop: 3,
            marginBottom: 3
          }, _this.props.activeDotStyle],
          __source: {
            fileName: _jsxFileName,
            lineNumber: 527
          }
        });

        var Dot = _this.props.dot || _react2.default.createElement(_reactNative.View, {
          style: [{
            backgroundColor: _this.props.dotColor || 'rgba(0,0,0,.2)',
            width: 8,
            height: 8,
            borderRadius: 4,
            marginLeft: 3,
            marginRight: 3,
            marginTop: 3,
            marginBottom: 3
          }, _this.props.dotStyle],
          __source: {
            fileName: _jsxFileName,
            lineNumber: 537
          }
        });

        for (var i = 0; i < _this.state.total; i++) {
          dots.push(i === _this.state.index ? _react2.default.cloneElement(ActiveDot, {
            key: i
          }) : _react2.default.cloneElement(Dot, {
            key: i
          }));
        }

        return _react2.default.createElement(
          _reactNative.View,
          {
            pointerEvents: "none",
            style: [styles['pagination_' + _this.state.dir], _this.props.paginationStyle],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 555
            }
          },
          dots
        );
      }, _this.renderTitle = function () {
        var child = _this.props.children[_this.state.index];
        var title = child && child.props && child.props.title;
        return title ? _react2.default.createElement(
          _reactNative.View,
          {
            style: styles.title,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 565
            }
          },
          _this.props.children[_this.state.index].props.title
        ) : null;
      }, _this.renderNextButton = function () {
        var button = null;

        if (_this.props.loop || _this.state.index !== _this.state.total - 1) {
          button = _this.props.nextButton || _react2.default.createElement(
            _reactNative.Text,
            {
              style: styles.buttonText,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 576
              }
            },
            "\u203A"
          );
        }

        return _react2.default.createElement(
          _reactNative.TouchableOpacity,
          {
            onPress: function onPress() {
              return button !== null && _this.scrollBy(1);
            },
            disabled: _this.props.disableNextButton,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 580
            }
          },
          _react2.default.createElement(
            _reactNative.View,
            {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 584
              }
            },
            button
          )
        );
      }, _this.renderPrevButton = function () {
        var button = null;

        if (_this.props.loop || _this.state.index !== 0) {
          button = _this.props.prevButton || _react2.default.createElement(
            _reactNative.Text,
            {
              style: styles.buttonText,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 595
              }
            },
            "\u2039"
          );
        }

        return _react2.default.createElement(
          _reactNative.TouchableOpacity,
          {
            onPress: function onPress() {
              return button !== null && _this.scrollBy(-1);
            },
            __source: {
              fileName: _jsxFileName,
              lineNumber: 599
            }
          },
          _react2.default.createElement(
            _reactNative.View,
            {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 600
              }
            },
            button
          )
        );
      }, _this.renderButtons = function () {
        return _react2.default.createElement(
          _reactNative.View,
          {
            pointerEvents: "box-none",
            style: [styles.buttonWrapper, {
              width: _this.state.width,
              height: _this.state.height
            }, _this.props.buttonWrapperStyle],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 609
            }
          },
          _this.renderPrevButton(),
          _this.renderNextButton()
        );
      }, _this.refScrollView = function (view) {
        _this.scrollView = view;
      }, _this.renderScrollView = function (pages) {
        if (_reactNative.Platform.OS === 'ios') {
          return _react2.default.createElement(
            _reactNative.ScrollView,
            babelHelpers.extends({
              ref: _this.refScrollView
            }, _this.props, _this.scrollViewPropOverrides(), {
              contentContainerStyle: [styles.wrapperIOS, _this.props.style],
              contentOffset: _this.state.offset,
              onScrollBeginDrag: _this.onScrollBegin,
              onMomentumScrollEnd: _this.onScrollEnd,
              onScrollEndDrag: _this.onScrollEndDrag,
              style: _this.props.scrollViewStyle,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 626
              }
            }),
            pages
          );
        }

        return _react2.default.createElement(
          _reactNative.ViewPagerAndroid,
          babelHelpers.extends({
            ref: _this.refScrollView
          }, _this.props, {
            initialPage: _this.props.loop ? _this.state.index + 1 : _this.state.index,
            onPageSelected: _this.onScrollEnd,
            key: pages.length,
            style: [styles.wrapperAndroid, _this.props.style],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 640
            }
          }),
          pages
        );
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(_default, [{
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(nextProps) {
        if (!nextProps.autoplay && this.autoplayTimer) clearTimeout(this.autoplayTimer);
        this.setState(this.initState(nextProps, this.props.index !== nextProps.index));
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        this.autoplay();
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.autoplayTimer && clearTimeout(this.autoplayTimer);
        this.loopJumpTimer && clearTimeout(this.loopJumpTimer);
      }
    }, {
      key: "componentWillUpdate",
      value: function componentWillUpdate(nextProps, nextState) {
        if (this.state.index !== nextState.index) this.props.onIndexChanged(nextState.index);
      }
    }, {
      key: "initState",
      value: function initState(props) {
        var updateIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        var state = this.state || {
          width: 0,
          height: 0,
          offset: {
            x: 0,
            y: 0
          }
        };
        var initState = {
          autoplayEnd: false,
          loopJump: false,
          offset: {}
        };
        initState.total = props.children ? props.children.length || 1 : 0;

        if (state.total === initState.total && !updateIndex) {
          initState.index = state.index;
        } else {
          initState.index = initState.total > 1 ? Math.min(props.index, initState.total - 1) : 0;
        }

        var _Dimensions$get = _reactNative.Dimensions.get('window'),
            width = _Dimensions$get.width,
            height = _Dimensions$get.height;

        initState.dir = props.horizontal === false ? 'y' : 'x';

        if (props.width) {
          initState.width = props.width;
        } else if (this.state && this.state.width) {
          initState.width = this.state.width;
        } else {
          initState.width = width;
        }

        if (props.height) {
          initState.height = props.height;
        } else if (this.state && this.state.height) {
          initState.height = this.state.height;
        } else {
          initState.height = height;
        }

        initState.offset[initState.dir] = initState.dir === 'y' ? height * props.index : width * props.index;
        this.internals = babelHelpers.extends({}, this.internals, {
          isScrolling: false
        });
        return initState;
      }
    }, {
      key: "fullState",
      value: function fullState() {
        return babelHelpers.extends({}, this.state, this.internals);
      }
    }, {
      key: "render",
      value: function render() {
        var state = this.state;
        var props = this.props;
        var _state = this.state,
            index = _state.index,
            total = _state.total,
            width = _state.width,
            height = _state.height;
        var _props = this.props,
            children = _props.children,
            containerStyle = _props.containerStyle,
            loop = _props.loop,
            loadMinimal = _props.loadMinimal,
            loadMinimalSize = _props.loadMinimalSize,
            loadMinimalLoader = _props.loadMinimalLoader,
            renderPagination = _props.renderPagination,
            showsButtons = _props.showsButtons,
            showsPagination = _props.showsPagination;
        var loopVal = loop ? 1 : 0;
        var pages = [];
        var pageStyle = [{
          width: width,
          height: height
        }, styles.slide];
        var pageStyleLoading = {
          width: width,
          height: height,
          flex: 1,
          justifyContent: 'center',
          alignItems: 'center'
        };

        if (total > 1) {
          pages = Object.keys(children);

          if (loop) {
            pages.unshift(total - 1 + '');
            pages.push('0');
          }

          pages = pages.map(function (page, i) {
            if (loadMinimal) {
              if (i >= index + loopVal - loadMinimalSize && i <= index + loopVal + loadMinimalSize) {
                return _react2.default.createElement(
                  _reactNative.View,
                  {
                    style: pageStyle,
                    key: i,
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 702
                    }
                  },
                  children[page]
                );
              } else {
                return _react2.default.createElement(
                  _reactNative.View,
                  {
                    style: pageStyleLoading,
                    key: i,
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 705
                    }
                  },
                  loadMinimalLoader ? loadMinimalLoader : _react2.default.createElement(_reactNative.ActivityIndicator, {
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 706
                    }
                  })
                );
              }
            } else {
              return _react2.default.createElement(
                _reactNative.View,
                {
                  style: pageStyle,
                  key: i,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 711
                  }
                },
                children[page]
              );
            }
          });
        } else {
          pages = _react2.default.createElement(
            _reactNative.View,
            {
              style: pageStyle,
              key: 0,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 715
              }
            },
            children
          );
        }

        return _react2.default.createElement(
          _reactNative.View,
          {
            style: [styles.container, containerStyle],
            onLayout: this.onLayout,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 719
            }
          },
          this.renderScrollView(pages),
          showsPagination && (renderPagination ? renderPagination(index, total, this) : this.renderPagination()),
          this.renderTitle(),
          showsButtons && this.renderButtons()
        );
      }
    }]);
    return _default;
  }(_react.Component), _class.propTypes = {
    horizontal: _propTypes2.default.bool,
    children: _propTypes2.default.node.isRequired,
    containerStyle: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number]),
    style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number]),
    scrollViewStyle: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number]),
    pagingEnabled: _propTypes2.default.bool,
    showsHorizontalScrollIndicator: _propTypes2.default.bool,
    showsVerticalScrollIndicator: _propTypes2.default.bool,
    bounces: _propTypes2.default.bool,
    scrollsToTop: _propTypes2.default.bool,
    removeClippedSubviews: _propTypes2.default.bool,
    automaticallyAdjustContentInsets: _propTypes2.default.bool,
    showsPagination: _propTypes2.default.bool,
    showsButtons: _propTypes2.default.bool,
    disableNextButton: _propTypes2.default.bool,
    loadMinimal: _propTypes2.default.bool,
    loadMinimalSize: _propTypes2.default.number,
    loadMinimalLoader: _propTypes2.default.element,
    loop: _propTypes2.default.bool,
    autoplay: _propTypes2.default.bool,
    autoplayTimeout: _propTypes2.default.number,
    autoplayDirection: _propTypes2.default.bool,
    index: _propTypes2.default.number,
    renderPagination: _propTypes2.default.func,
    dotStyle: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number]),
    activeDotStyle: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number]),
    dotColor: _propTypes2.default.string,
    activeDotColor: _propTypes2.default.string,
    onIndexChanged: _propTypes2.default.func
  }, _class.defaultProps = {
    horizontal: true,
    pagingEnabled: true,
    showsHorizontalScrollIndicator: false,
    showsVerticalScrollIndicator: false,
    bounces: false,
    scrollsToTop: false,
    removeClippedSubviews: true,
    automaticallyAdjustContentInsets: false,
    showsPagination: true,
    showsButtons: false,
    disableNextButton: false,
    loop: true,
    loadMinimal: false,
    loadMinimalSize: 1,
    autoplay: false,
    autoplayTimeout: 2.5,
    autoplayDirection: true,
    index: 0,
    onIndexChanged: function onIndexChanged() {
      return null;
    }
  }, _temp2);

  exports.default = _default;
},455,[114,141,12],"node_modules/react-native-swiper/src/index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    var _react = _require(_dependencyMap[0], "react");

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    var _ETTDevice = _require(_dependencyMap[2], "../values/ETTDevice");

    var _ETTDevice2 = babelHelpers.interopRequireDefault(_ETTDevice);

    var _ETTInlineFuction = _require(_dependencyMap[3], "../values/ETTInlineFuction");

    var ETTHomeStyles = _reactNative.StyleSheet.create({
        container: {
            flex: 1,
            backgroundColor: 'white',
            height: _ETTDevice2.default.ScreenHeight,
            width: _ETTDevice2.default.ScreenWidth
        },
        navRight: {
            width: 30,
            height: 30
        },
        headerTitleStyles: {
            color: 'white',
            fontSize: 20,
            alignSelf: 'center'
        },
        topViewStyle: {
            width: _ETTDevice2.default.ScreenWidth,
            height: 40,
            backgroundColor: '#78fe6f',
            flexDirection: 'row'
        },
        topTextStyle: {
            backgroundColor: 'red',
            marginLeft: 15,
            marginTop: 10,
            justifyContent: 'center',
            width: _ETTDevice2.default.ScreenWidth - 80,
            height: 20,
            fontSize: 16,
            color: 'white'
        },
        topImageStyle: {
            marginLeft: 25,
            marginTop: 10,
            width: 20,
            height: 20
        },
        bannerViewStyle: {
            flexDirection: 'column',
            width: _ETTDevice2.default.ScreenWidth,
            height: (0, _ETTInlineFuction.scaleSize)(434)
        },
        bannerImgStyle: {
            resizeMode: 'stretch',
            width: _ETTDevice2.default.ScreenWidth,
            height: (0, _ETTInlineFuction.scaleSize)(434)
        },
        bannerDotStyle: {
            backgroundColor: 'rgba(0,0,0,.2)',
            width: 9,
            height: 9,
            borderRadius: 4,
            marginLeft: 10,
            marginRight: 9,
            marginTop: 9,
            marginBottom: 9
        },
        bannerActiveDotStyle: {
            backgroundColor: '#007aff',
            width: 9,
            height: 9,
            borderRadius: 4,
            marginLeft: 10,
            marginRight: 9,
            marginTop: 9,
            marginBottom: 9
        },
        sectionFooterViewStyle: {
            height: 60,
            width: _ETTDevice2.default.ScreenWidth,
            backgroundColor: '#202021',
            alignItems: 'center',
            justifyContent: 'center'
        },
        sectionFooterTextStyle: {
            color: 'white',
            fontSize: 15,
            borderRadius: 2,
            borderColor: 'white',
            borderWidth: 1,
            textAlign: 'center',
            textAlignVertical: 'center',
            paddingHorizontal: 20,
            paddingVertical: 5
        }
    });

    module.exports = ETTHomeStyles;
},456,[114,12,342,452],"app/res/styles/ETTHomeStyles.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = undefined;
    var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/app/common/ETTHomeSimpleCell.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    var _ETTDevice = _require(_dependencyMap[2], "../res/values/ETTDevice");

    var _ETTDevice2 = babelHelpers.interopRequireDefault(_ETTDevice);

    var _ETTInlineFuction = _require(_dependencyMap[3], "../res/values/ETTInlineFuction");

    var ETTHomeSimpleCell = function (_Component) {
        babelHelpers.inherits(ETTHomeSimpleCell, _Component);

        function ETTHomeSimpleCell(props) {
            babelHelpers.classCallCheck(this, ETTHomeSimpleCell);

            var _this = babelHelpers.possibleConstructorReturn(this, (ETTHomeSimpleCell.__proto__ || Object.getPrototypeOf(ETTHomeSimpleCell)).call(this, props));

            console.log("我是ETTHomeSimpleCell");
            return _this;
        }

        babelHelpers.createClass(ETTHomeSimpleCell, [{
            key: "showPrice",
            value: function showPrice() {
                return this.props.isShowPrice === true ? _react2.default.createElement(
                    _reactNative.Text,
                    {
                        style: {
                            color: '#ff453a',
                            fontSize: 14,
                            marginTop: (0, _ETTInlineFuction.scaleSize)(10),
                            width: _ETTDevice2.default.ScreenWidth - (0, _ETTInlineFuction.scaleSize)(220)
                        },
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 40
                        }
                    },
                    this.props.price
                ) : null;
            }
        }, {
            key: "render",
            value: function render() {
                return _react2.default.createElement(
                    _reactNative.View,
                    {
                        style: {
                            marginLeft: (0, _ETTInlineFuction.scaleSize)(15),
                            flexDirection: 'row',
                            backgroundColor: "#fff",
                            marginTop: (0, _ETTInlineFuction.scaleSize)(10),
                            paddingBottom: (0, _ETTInlineFuction.scaleSize)(10),
                            overflow: 'hidden'
                        },
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 46
                        }
                    },
                    _react2.default.createElement(_reactNative.Image, {
                        style: {
                            width: (0, _ETTInlineFuction.scaleSize)(200),
                            height: (0, _ETTInlineFuction.scaleSize)(150),
                            marginTop: (0, _ETTInlineFuction.scaleSize)(20),
                            borderRadius: 4
                        },
                        source: this.props.mainPicture ? {
                            uri: this.props.mainPicture
                        } : _require(_dependencyMap[4], '../res/images/avatar.png'),
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 47
                        }
                    }),
                    _react2.default.createElement(
                        _reactNative.View,
                        {
                            style: {
                                marginLeft: (0, _ETTInlineFuction.scaleSize)(10),
                                marginTop: (0, _ETTInlineFuction.scaleSize)(10)
                            },
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 48
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.Text,
                            {
                                style: {
                                    marginTop: (0, _ETTInlineFuction.scaleSize)(10),
                                    color: '#000',
                                    fontSize: 16,
                                    width: _ETTDevice2.default.ScreenWidth - (0, _ETTInlineFuction.scaleSize)(220)
                                },
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 49
                                }
                            },
                            this.props.title
                        ),
                        _react2.default.createElement(
                            _reactNative.Text,
                            {
                                style: {
                                    color: '#000',
                                    fontSize: 14,
                                    marginTop: (0, _ETTInlineFuction.scaleSize)(10),
                                    width: _ETTDevice2.default.ScreenWidth - (0, _ETTInlineFuction.scaleSize)(230)
                                },
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 50
                                }
                            },
                            this.props.introduc
                        ),
                        this.showPrice()
                    )
                );
            }
        }]);
        return ETTHomeSimpleCell;
    }(_react.Component);

    exports.default = ETTHomeSimpleCell;
    {}
    {}
    {}
    {}
    {}
    {}
    {}
    {}
},457,[114,12,342,452,458],"app/common/ETTHomeSimpleCell.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = _require(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/app/res/images",
    "width": 648,
    "height": 648,
    "scales": [1],
    "hash": "761028b7b39f919ccd4211c129200e2b",
    "name": "avatar",
    "type": "png"
  });
},458,[175],"app/res/images/avatar.png");
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = {
    "code": 1,
    "msg": "操作成功",
    "data": [{
      "goodsesId": "PBH201804280001",
      "name": "智慧课堂（初中）",
      "introduction": "北京四中名师主讲精彩课程，AI自适应智慧学习",
      "marketPrice": "1580-1780",
      "mainPicture": "http://ke.etiantian.com/attach/goods/PBH201804280001.png"
    }, {
      "goodsesId": "PBH201804280002",
      "name": "智慧课堂（高中）",
      "introduction": "北京四中名师主讲精彩课程，AI自适应智慧学习",
      "marketPrice": "1780",
      "mainPicture": "http://ke.etiantian.com/attach/goods/PBH201804280002.png"
    }]
  };
},459,[],"app/common/goodses.json");
__d(function (global, _require, module, exports, _dependencyMap) {
    var _react = _require(_dependencyMap[0], "react");

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    var _ETTDevice = _require(_dependencyMap[2], "../values/ETTDevice");

    var _ETTDevice2 = babelHelpers.interopRequireDefault(_ETTDevice);

    var _ETTColor = _require(_dependencyMap[3], "../../res/values/ETTColor");

    var _ETTColor2 = babelHelpers.interopRequireDefault(_ETTColor);

    var _ETTInlineFuction = _require(_dependencyMap[4], "../values/ETTInlineFuction");

    var ETTLogStyles = _reactNative.StyleSheet.create({
        log_Mian: {
            flex: 1,
            backgroundColor: _ETTColor2.default.white,
            width: _ETTDevice2.default.ScreenWidth,
            height: _ETTDevice2.default.ScreenHeight
        },
        log_body: {
            flex: 2,
            justifyContent: 'space-between',
            backgroundColor: _ETTColor2.default.white
        },
        log_body_top: {},
        log_close: {
            marginLeft: (0, _ETTInlineFuction.scaleSize)(33),
            marginTop: (0, _ETTInlineFuction.scaleSize)(80),
            width: (0, _ETTInlineFuction.scaleSize)(24),
            height: (0, _ETTInlineFuction.scaleSize)(24)
        },
        log_title: {
            fontSize: (0, _ETTInlineFuction.scaleSize)(40),
            color: _ETTColor2.default.f1,
            textAlign: 'center',
            marginTop: (0, _ETTInlineFuction.scaleSize)(20),
            marginBottom: (0, _ETTInlineFuction.scaleSize)(46)
        },
        log_pushscene_header: {
            flexDirection: 'row',
            marginTop: (0, _ETTInlineFuction.scaleSize)(80),
            justifyContent: 'flex-start',
            alignItems: 'center',
            marginBottom: (0, _ETTInlineFuction.scaleSize)(46)
        },
        log_bind_header: {
            flexDirection: 'row',
            marginTop: (0, _ETTInlineFuction.scaleSize)(80),
            justifyContent: 'flex-start',
            alignItems: 'center'
        },
        log_bind_amount_prompt: {
            fontSize: (0, _ETTInlineFuction.scaleSize)(20),
            color: _ETTColor2.default.f2,
            textAlign: 'center',
            marginTop: (0, _ETTInlineFuction.scaleSize)(70)
        },
        log_back: {
            marginLeft: (0, _ETTInlineFuction.scaleSize)(33)
        },
        log_code_title: {
            fontSize: (0, _ETTInlineFuction.scaleSize)(40),
            color: _ETTColor2.default.f1,
            textAlign: 'center',
            width: _ETTDevice2.default.ScreenWidth - (0, _ETTInlineFuction.scaleSize)(118)
        },
        log_body_bottom: {
            marginBottom: 0
        },
        log_input_top: {
            justifyContent: 'space-between',
            marginTop: (0, _ETTInlineFuction.scaleSize)(50),
            marginLeft: (0, _ETTInlineFuction.scaleSize)(75),
            marginRight: (0, _ETTInlineFuction.scaleSize)(75),
            flexDirection: 'row',
            alignItems: 'center'
        },
        log_input_Bottom: {
            justifyContent: 'space-between',
            marginTop: (0, _ETTInlineFuction.scaleSize)(76),
            marginLeft: (0, _ETTInlineFuction.scaleSize)(75),
            marginRight: (0, _ETTInlineFuction.scaleSize)(75),
            flexDirection: 'row',
            alignItems: 'center'
        },
        log_textInput: {
            fontSize: (0, _ETTInlineFuction.scaleSize)(26),
            width: _ETTDevice2.default.ScreenWidth - (0, _ETTInlineFuction.scaleSize)(200),
            color: _ETTColor2.default.f1
        },
        log_code_textInput: {
            fontSize: (0, _ETTInlineFuction.scaleSize)(26),
            width: (_ETTDevice2.default.ScreenWidth - (0, _ETTInlineFuction.scaleSize)(150)) / 2,
            color: _ETTColor2.default.f1
        },
        log_input_phone_image: {
            width: (0, _ETTInlineFuction.scaleSize)(20),
            height: (0, _ETTInlineFuction.scaleSize)(20)
        },
        log_input_pwd_image: {
            width: (0, _ETTInlineFuction.scaleSize)(28),
            height: (0, _ETTInlineFuction.scaleSize)(19)
        },
        log_line: {
            marginLeft: (0, _ETTInlineFuction.scaleSize)(75),
            marginRight: (0, _ETTInlineFuction.scaleSize)(75),
            marginTop: (0, _ETTInlineFuction.scaleSize)(33),
            height: (0, _ETTInlineFuction.scaleSize)(1),
            backgroundColor: _ETTColor2.default.l1
        },
        log_btn: {
            marginLeft: (0, _ETTInlineFuction.scaleSize)(73),
            marginRight: (0, _ETTInlineFuction.scaleSize)(73),
            marginTop: (0, _ETTInlineFuction.scaleSize)(74),
            height: (0, _ETTInlineFuction.scaleSize)(85),
            backgroundColor: _ETTColor2.default.black_t60,
            justifyContent: 'center',
            borderRadius: (0, _ETTInlineFuction.scaleSize)(8)
        },
        log_btn_text: {
            textAlign: 'center',
            color: _ETTColor2.default.white,
            fontSize: (0, _ETTInlineFuction.scaleSize)(26)
        },
        log_body_top_bottom: {
            marginLeft: (0, _ETTInlineFuction.scaleSize)(75),
            marginRight: (0, _ETTInlineFuction.scaleSize)(75),
            marginTop: (0, _ETTInlineFuction.scaleSize)(38),
            justifyContent: 'flex-end',
            flexDirection: 'row',
            alignItems: 'center'
        },
        log_code_btn: {
            justifyContent: 'center',
            marginRight: (0, _ETTInlineFuction.scaleSize)(38)
        },
        log_code_btn_text: {
            textAlign: 'center',
            fontSize: (0, _ETTInlineFuction.scaleSize)(24),
            color: _ETTColor2.default.f2
        },
        log_forget_btn: {
            justifyContent: 'center'
        },
        log_forget_btn_text: {
            textAlign: 'center',
            fontSize: (0, _ETTInlineFuction.scaleSize)(24),
            color: _ETTColor2.default.f2
        },
        log_registered_btn: {
            justifyContent: 'center',
            marginLeft: (0, _ETTInlineFuction.scaleSize)(340),
            marginRight: (0, _ETTInlineFuction.scaleSize)(340)
        },
        log_registered_btn_text: {
            textAlign: 'center',
            fontSize: (0, _ETTInlineFuction.scaleSize)(28)
        },
        log_other_text: {
            marginLeft: (0, _ETTInlineFuction.scaleSize)(28),
            marginRight: (0, _ETTInlineFuction.scaleSize)(28),
            marginTop: (0, _ETTInlineFuction.scaleSize)(50),
            fontSize: (0, _ETTInlineFuction.scaleSize)(28),
            textAlign: 'center',
            color: _ETTColor2.default.f1
        },
        log_otherlog: {
            justifyContent: 'center',
            flexDirection: 'row',
            alignItems: 'center',
            marginTop: 30,
            marginBottom: (0, _ETTInlineFuction.scaleSize)(52)
        },
        log_qq_log: {
            marginLeft: (0, _ETTInlineFuction.scaleSize)(40)
        },
        log_wechat_log: {},
        log_vercode_text: {
            color: _ETTColor2.default.f4,
            fontSize: (0, _ETTInlineFuction.scaleSize)(26)
        },
        log_vercode_text_counting: {
            color: 'gray',
            fontSize: (0, _ETTInlineFuction.scaleSize)(26)
        },
        log_btn_bind: {
            marginLeft: (0, _ETTInlineFuction.scaleSize)(73),
            marginRight: (0, _ETTInlineFuction.scaleSize)(73),
            marginTop: (0, _ETTInlineFuction.scaleSize)(185),
            height: (0, _ETTInlineFuction.scaleSize)(85),
            backgroundColor: _ETTColor2.default.black_t60,
            justifyContent: 'center',
            borderRadius: (0, _ETTInlineFuction.scaleSize)(8)
        },
        log_bind_newreg: {
            marginLeft: _ETTDevice2.default.ScreenWidth / 2 - (0, _ETTInlineFuction.scaleSize)(70),
            width: (0, _ETTInlineFuction.scaleSize)(140),
            marginTop: (0, _ETTInlineFuction.scaleSize)(40),
            backgroundColor: 'red'
        },
        log_bind_newreg_btn: {
            marginLeft: _ETTDevice2.default.ScreenWidth / 2 - (0, _ETTInlineFuction.scaleSize)(70),
            width: (0, _ETTInlineFuction.scaleSize)(140),
            marginTop: (0, _ETTInlineFuction.scaleSize)(40)
        },
        log_bind_newreg_text: {
            color: _ETTColor2.default.f1,
            textAlign: 'center',
            fontSize: (0, _ETTInlineFuction.scaleSize)(24)
        },
        log_forgetpwd_header: {
            flexDirection: 'row',
            marginTop: (0, _ETTInlineFuction.scaleSize)(80),
            justifyContent: 'flex-start',
            alignItems: 'center',
            marginBottom: (0, _ETTInlineFuction.scaleSize)(88)
        },
        log_forgetpwd_next_btn: {
            marginLeft: (0, _ETTInlineFuction.scaleSize)(73),
            marginRight: (0, _ETTInlineFuction.scaleSize)(73),
            marginTop: (0, _ETTInlineFuction.scaleSize)(184),
            height: (0, _ETTInlineFuction.scaleSize)(85),
            backgroundColor: _ETTColor2.default.black_t60,
            justifyContent: 'center',
            borderRadius: (0, _ETTInlineFuction.scaleSize)(8)
        },
        log_toast: {
            backgroundColor: _ETTColor2.default.black_t60
        }
    });

    module.exports = ETTLogStyles;
},460,[114,12,342,453,452],"app/res/styles/ETTLogStyles.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = undefined;
    var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/app/common/ETTLoadingAnimation.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    var _ETTLoadingAnimationStyles = _require(_dependencyMap[2], "../res/styles/ETTLoadingAnimationStyles");

    var _ETTLoadingAnimationStyles2 = babelHelpers.interopRequireDefault(_ETTLoadingAnimationStyles);

    var ETTLoadingAnimation = function (_Component) {
        babelHelpers.inherits(ETTLoadingAnimation, _Component);

        function ETTLoadingAnimation(props) {
            babelHelpers.classCallCheck(this, ETTLoadingAnimation);

            var _this = babelHelpers.possibleConstructorReturn(this, (ETTLoadingAnimation.__proto__ || Object.getPrototypeOf(ETTLoadingAnimation)).call(this, props));

            _this._show = _this._show.bind(_this);
            _this._hiden = _this._hiden.bind(_this);
            _this.state = {
                isShow: false
            };
            return _this;
        }

        babelHelpers.createClass(ETTLoadingAnimation, [{
            key: "_show",
            value: function _show(info) {
                this.setState({
                    isShow: true
                });
            }
        }, {
            key: "_hiden",
            value: function _hiden() {
                this.setState({
                    isShow: false
                });
            }
        }, {
            key: "render",
            value: function render() {
                if (!this.state.isShow) return null;
                return _react2.default.createElement(
                    _reactNative.View,
                    {
                        style: _ETTLoadingAnimationStyles2.default.container,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 44
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.View,
                        {
                            style: _ETTLoadingAnimationStyles2.default.base_contentContainer,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 45
                            }
                        },
                        _react2.default.createElement(_reactNative.ActivityIndicator, {
                            size: "large",
                            style: _ETTLoadingAnimationStyles2.default.base_activity,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 46
                            }
                        })
                    )
                );
            }
        }]);
        return ETTLoadingAnimation;
    }(_react.Component);

    exports.default = ETTLoadingAnimation;
},461,[114,12,462],"app/common/ETTLoadingAnimation.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    var _react = _require(_dependencyMap[0], "react");

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    var _ETTDevice = _require(_dependencyMap[2], "../values/ETTDevice");

    var _ETTDevice2 = babelHelpers.interopRequireDefault(_ETTDevice);

    var _ETTColor = _require(_dependencyMap[3], "../values/ETTColor");

    var _ETTColor2 = babelHelpers.interopRequireDefault(_ETTColor);

    var _ETTInlineFuction = _require(_dependencyMap[4], "../values/ETTInlineFuction");

    var ETTLoadingAnimationStyles = _reactNative.StyleSheet.create({
        container: {
            position: 'absolute',
            top: 0,
            left: 0,
            bottom: 0,
            right: 0
        },
        base_contentContainer: {
            justifyContent: 'center',
            alignItems: 'center'
        },
        base_titletext: {
            fontSize: (0, _ETTInlineFuction.scaleSize)(30),
            color: _ETTColor2.default.f1
        },
        base_activity: {
            marginTop: (_ETTDevice2.default.ScreenHeight - 80) / 2,
            width: 100,
            height: 80,
            backgroundColor: _ETTColor2.default.black_t60,
            borderColor: _ETTColor2.default.l1,
            borderRadius: 5,
            opacity: 0.8
        },
        base_buttonContainer: {
            height: (0, _ETTInlineFuction.scaleSize)(90),
            width: (0, _ETTInlineFuction.scaleSize)(516),
            flexDirection: 'row',
            alignItems: 'center',
            justifyContent: 'space-between',
            borderTopWidth: 1,
            borderColor: _ETTColor2.default.l1
        }
    });

    module.exports = ETTLoadingAnimationStyles;
},462,[114,12,342,453,452],"app/res/styles/ETTLoadingAnimationStyles.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = undefined;

    var _class,
        _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/app/scene/ETTProductDeatilScene.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    var _reactNativeEasyToast = _require(_dependencyMap[2], "react-native-easy-toast");

    var _reactNativeEasyToast2 = babelHelpers.interopRequireDefault(_reactNativeEasyToast);

    var _ETTProductDeatilStyle = _require(_dependencyMap[3], "../res/styles/ETTProductDeatilStyle");

    var _ETTProductDeatilStyle2 = babelHelpers.interopRequireDefault(_ETTProductDeatilStyle);

    var _reactNativeSwiper = _require(_dependencyMap[4], "react-native-swiper");

    var _reactNativeSwiper2 = babelHelpers.interopRequireDefault(_reactNativeSwiper);

    var _ETTHomeStyles = _require(_dependencyMap[5], "../res/styles/ETTHomeStyles");

    var _ETTHomeStyles2 = babelHelpers.interopRequireDefault(_ETTHomeStyles);

    var _ETTInlineFuction = _require(_dependencyMap[6], "../res/values/ETTInlineFuction");

    var _ETTCourseChooseView = _require(_dependencyMap[7], "../common/ETTCourseChooseView");

    var _ETTCourseChooseView2 = babelHelpers.interopRequireDefault(_ETTCourseChooseView);

    var _reactNativeWebview = _require(_dependencyMap[8], "react-native-webview2");

    var _reactNativeWebview2 = babelHelpers.interopRequireDefault(_reactNativeWebview);

    var _ETTRequestModel = _require(_dependencyMap[9], "../mobx/ETTRequestModel");

    var _ETTRequestModel2 = babelHelpers.interopRequireDefault(_ETTRequestModel);

    var _ETTNetworkUtil = _require(_dependencyMap[10], "../utils/ETTNetworkUtil");

    var _ETTNetworkUtil2 = babelHelpers.interopRequireDefault(_ETTNetworkUtil);

    var _ETTNetResponseHelper = _require(_dependencyMap[11], "../utils/ETTNetResponseHelper");

    var _ETTNetResponseHelper2 = babelHelpers.interopRequireDefault(_ETTNetResponseHelper);

    var _ETTURLConfig = _require(_dependencyMap[12], "../res/values/ETTURLConfig");

    var _ETTURLConfig2 = babelHelpers.interopRequireDefault(_ETTURLConfig);

    var _ETTDevice = _require(_dependencyMap[13], "../res/values/ETTDevice");

    var _ETTDevice2 = babelHelpers.interopRequireDefault(_ETTDevice);

    var _ETTColor = _require(_dependencyMap[14], "../res/values/ETTColor");

    var _ETTColor2 = babelHelpers.interopRequireDefault(_ETTColor);

    var _ETTCommendMealView = _require(_dependencyMap[15], "../common/ETTCommendMealView");

    var _ETTCommendMealView2 = babelHelpers.interopRequireDefault(_ETTCommendMealView);

    var _ETTBottomPayView = _require(_dependencyMap[16], "../common/ETTBottomPayView");

    var _ETTBottomPayView2 = babelHelpers.interopRequireDefault(_ETTBottomPayView);

    var _productDeatil = _require(_dependencyMap[17], "../common/productDeatil");

    var _productDeatil2 = babelHelpers.interopRequireDefault(_productDeatil);

    var _activity = _require(_dependencyMap[18], "../common/activity");

    var _activity2 = babelHelpers.interopRequireDefault(_activity);

    var _meals = _require(_dependencyMap[19], "../common/meals");

    var _meals2 = babelHelpers.interopRequireDefault(_meals);

    var _ETTLogStyles = _require(_dependencyMap[20], "../res/styles/ETTLogStyles");

    var _ETTLogStyles2 = babelHelpers.interopRequireDefault(_ETTLogStyles);

    var _ETTLoadingAnimation = _require(_dependencyMap[21], "../common/ETTLoadingAnimation");

    var _ETTLoadingAnimation2 = babelHelpers.interopRequireDefault(_ETTLoadingAnimation);

    var _ETTSubjectTimeList = _require(_dependencyMap[22], "../common/ETTSubjectTimeList");

    var _ETTSubjectTimeList2 = babelHelpers.interopRequireDefault(_ETTSubjectTimeList);

    var _mockData = _require(_dependencyMap[23], "../common/mockData");

    var _ETTCourseChooseStyle = _require(_dependencyMap[24], "../res/styles/ETTCourseChooseStyle");

    var _ETTCourseChooseStyle2 = babelHelpers.interopRequireDefault(_ETTCourseChooseStyle);

    var _ETTNavBarCommon = _require(_dependencyMap[25], "../common/ETTNavBarCommon");

    var _ETTNavBarCommon2 = babelHelpers.interopRequireDefault(_ETTNavBarCommon);

    var _back = _require(_dependencyMap[26], "../res/images/back.png");

    var _back2 = babelHelpers.interopRequireDefault(_back);

    var _zhuanfa = _require(_dependencyMap[27], "../res/images/zhuanfa2.png");

    var _zhuanfa2 = babelHelpers.interopRequireDefault(_zhuanfa);

    var _ETTConfig = _require(_dependencyMap[28], "../res/values/ETTConfig");

    var _mobxReact = _require(_dependencyMap[29], "mobx-react");

    var _ETTModalLogView = _require(_dependencyMap[30], "../common/ETTModalLogView");

    var _ETTModalLogView2 = babelHelpers.interopRequireDefault(_ETTModalLogView);

    var ETTProductDeatilScene = (0, _mobxReact.observer)(_class = function (_Component) {
        babelHelpers.inherits(ETTProductDeatilScene, _Component);

        function ETTProductDeatilScene(props) {
            babelHelpers.classCallCheck(this, ETTProductDeatilScene);

            var _this = babelHelpers.possibleConstructorReturn(this, (ETTProductDeatilScene.__proto__ || Object.getPrototypeOf(ETTProductDeatilScene)).call(this, props));

            _this.showSelectPrice = '';
            _this.zuhePrice = '';
            _this.showSelectArr = [];
            _this.describeArr = [];
            _this.descriDic = {};
            _this.currentGoodsId = '';
            _this.currentItem = {};

            _this._scrollViewMethod = function (e) {
                var offsetY = e.nativeEvent.contentOffset.y;
                console.log("offsetY====" + offsetY);
            };

            _this._scrollViewScroll = function (event) {
                var offsetY = event.nativeEvent.contentOffset.y;

                if (offsetY > 5) {
                    _this.setState({
                        navOpacity: (offsetY - 5) / 200
                    });
                } else {
                    _this.setState({
                        navOpacity: 0
                    });
                }

                ;
            };

            _reactNative.StatusBar.setBarStyle('dark-content');

            _this.state = {
                show: false,
                dataSource: '',
                selectValue: '',
                showMealView: false,
                activityData: _activity2.default.data,
                reloadDescribeImage: false,
                mealData: _meals2.default.data[0],
                showSelectMealView: false,
                changePrice: false,
                courseIntroduce: true,
                resourceDirectory: false,
                navOpacity: 0,
                offset: new _reactNative.Animated.Value(0),
                height: 0,
                scrollY: new _reactNative.Animated.Value(0),
                isLogin: false
            };
            console.log('我是ETTProductDeatilScene');
            console.log(_productDeatil2.default.data);
            return _this;
        }

        babelHelpers.createClass(ETTProductDeatilScene, [{
            key: "componentWillMount",
            value: function componentWillMount() {}
        }, {
            key: "componentDidMount",
            value: function componentDidMount() {
                this.data = _mockData.mockData;
                this.productDetailRequest();
            }
        }, {
            key: "productDetailRequest",
            value: function productDetailRequest() {
                var _this2 = this;

                this.refs.loading._show(null);

                var params = this.props.navigation.state.params;
                var goodsId = params.goodsesId ? params.goodsesId : '';

                if (goodsId.length === 0) {
                    this.refs.toast.show('goodsId为空');

                    this.refs.loading._hiden();

                    return;
                }

                var requetModel = new _ETTRequestModel2.default();
                requetModel._method = 'GET';
                requetModel._path = _ETTURLConfig2.default.SERVICE_TRADING + _ETTURLConfig2.default.goodses_detail + goodsId;
                requetModel._bodyData = "";
                requetModel._getInfo = requetModel.getAvoidLoginTokenRequesetData();

                _ETTNetworkUtil2.default.requestWithToken(requetModel, function (json) {
                    var result = _ETTNetResponseHelper2.default.responseJson(json);

                    if (result.code != 1) {
                        _this2.refs.loading._hiden();

                        _this2.refs.toast.show(result.msg);
                    } else {
                        _this2.setState({
                            dataSource: result.data
                        });

                        _this2.getDescribeImageH();
                    }
                });
            }
        }, {
            key: "getProductActivity",
            value: function getProductActivity(item) {
                var _this3 = this;

                var goodsId = item.goodsId ? item.goodsId : '';

                if (goodsId.length == 0) {
                    this.refs.loading._hiden();

                    this.setState({
                        show: false
                    });
                    return;
                }

                var requetModel = new _ETTRequestModel2.default();
                requetModel._method = 'GET';
                requetModel._path = _ETTURLConfig2.default.SERVICE_TRADING + _ETTURLConfig2.default.goodses_detail + goodsId + '/activities';
                requetModel._bodyData = "";
                requetModel._getInfo = requetModel.getAvoidLoginTokenRequesetData();

                _ETTNetworkUtil2.default.requestWithToken(requetModel, function (json) {
                    var result = _ETTNetResponseHelper2.default.responseJson(json);

                    _this3.refs.loading._hiden();

                    if (result.code != 1) {
                        _this3.refs.toast.show(result.msg);
                    } else {
                        _this3.setState({
                            show: false,
                            activityData: result.data
                        });
                    }
                });
            }
        }, {
            key: "requestMealData",
            value: function requestMealData(item) {
                var _this4 = this;

                var goodsId = item.goodsId ? item.goodsId : '';

                if (goodsId.length == 0) {
                    this.setState({
                        show: false
                    });

                    this.refs.loading._hiden();

                    return;
                }

                var requetModel = new _ETTRequestModel2.default();
                requetModel._method = 'GET';
                requetModel._path = _ETTURLConfig2.default.SERVICE_TRADING + _ETTURLConfig2.default.goodses_detail + goodsId + '/packages';
                requetModel._bodyData = "";
                requetModel._getInfo = requetModel.getAvoidLoginTokenRequesetData();

                _ETTNetworkUtil2.default.requestWithToken(requetModel, function (json) {
                    var result = _ETTNetResponseHelper2.default.responseJson(json);

                    _this4.refs.loading._hiden();

                    if (result.code != 1) {
                        if (result.code == 3) {} else {
                            _this4.refs.toast.show(result.msg);
                        }
                    } else {
                        _this4.setState({
                            show: false,
                            showMealView: true,
                            mealData: result.data[0]
                        });
                    }
                });
            }
        }, {
            key: "_showGuiGeView",
            value: function _showGuiGeView() {
                this.setState({
                    show: true
                });
            }
        }, {
            key: "_showName",
            value: function _showName(arr, item, isHidden) {
                this.currentItem = item;
                this.showSelectArr = arr;
                this.getProductActivity(item);
                this.requestMealData(item);
            }
        }, {
            key: "_changePrice",
            value: function _changePrice(info) {
                this.currentItem = info;
                this.currentGoodsId = info.goodsId;
                this.zuhePrice = info.marketPrice;
                this.showSelectPrice = info.marketPrice;
                this.setState({
                    changePrice: true
                });
            }
        }, {
            key: "_reloadSelectName",
            value: function _reloadSelectName() {
                if (this.showSelectArr != 'undefined' && this.showSelectArr.length > 0) {
                    var str = '';
                    this.showSelectArr.map(function (item, i) {
                        str += item + ' ';
                    });
                    return str;
                } else {
                    return '无';
                }
            }
        }, {
            key: "_courseChooseView",
            value: function _courseChooseView() {
                var _this5 = this;

                if (this.state.show) {
                    return _react2.default.createElement(_ETTCourseChooseView2.default, {
                        info: this.state.dataSource,
                        callBack: function callBack(arr, item, isHidden) {
                            return _this5._showName(arr, item, isHidden);
                        },
                        changePrice: function changePrice(info) {
                            return _this5._changePrice(info);
                        },
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 279
                        }
                    });
                }

                return null;
            }
        }, {
            key: "_topShowImageView",
            value: function _topShowImageView() {
                return _react2.default.createElement(
                    _reactNative.View,
                    {
                        style: _ETTProductDeatilStyle2.default.topViewStyle,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 288
                        }
                    },
                    _react2.default.createElement(
                        _reactNativeSwiper2.default,
                        {
                            style: {
                                height: (0, _ETTInlineFuction.scaleSize)(434)
                            },
                            autoplay: true,
                            autoplayTimeout: 4,
                            horizontal: true,
                            paginationStyle: {
                                bottom: 10
                            },
                            showsButtons: false,
                            showsPagination: false,
                            dot: _react2.default.createElement(_reactNative.View, {
                                style: _ETTHomeStyles2.default.bannerDotStyle,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 299
                                }
                            }),
                            activeDot: _react2.default.createElement(_reactNative.View, {
                                style: _ETTHomeStyles2.default.bannerActiveDotStyle,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 302
                                }
                            }),
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 290
                            }
                        },
                        _react2.default.createElement(_reactNative.Image, {
                            source: {
                                uri: this.state.dataSource.mainPicture
                            },
                            style: _ETTHomeStyles2.default.bannerImgStyle,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 308
                            }
                        })
                    )
                );
            }
        }, {
            key: "_showTopViewNoNavigation",
            value: function _showTopViewNoNavigation() {
                var _this6 = this;

                return _react2.default.createElement(
                    _reactNative.View,
                    {
                        style: {
                            flexDirection: 'row',
                            justifyContent: 'space-between',
                            position: 'absolute',
                            width: _ETTDevice2.default.ScreenWidth
                        },
                        ref: function ref(_ref) {
                            return _this6.topView = _ref;
                        },
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 320
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.TouchableOpacity,
                        {
                            onPress: function onPress() {},
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 321
                            }
                        },
                        _react2.default.createElement(_reactNative.Image, {
                            source: _require(_dependencyMap[31], '../res/images/fanhui.png'),
                            style: {
                                marginTop: (0, _ETTInlineFuction.scaleSize)(66),
                                marginLeft: (0, _ETTInlineFuction.scaleSize)(30),
                                width: (0, _ETTInlineFuction.scaleSize)(55),
                                height: (0, _ETTInlineFuction.scaleSize)(55)
                            },
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 322
                            }
                        })
                    ),
                    _react2.default.createElement(
                        _reactNative.TouchableOpacity,
                        {
                            onPress: function onPress() {},
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 324
                            }
                        },
                        _react2.default.createElement(_reactNative.Image, {
                            source: _require(_dependencyMap[32], '../res/images/zhuanfa.png'),
                            style: {
                                marginTop: (0, _ETTInlineFuction.scaleSize)(66),
                                marginRight: (0, _ETTInlineFuction.scaleSize)(30),
                                width: (0, _ETTInlineFuction.scaleSize)(55),
                                height: (0, _ETTInlineFuction.scaleSize)(55)
                            },
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 325
                            }
                        })
                    )
                );
            }
        }, {
            key: "renderContainer",
            value: function renderContainer() {
                var _state = this.state,
                    windowHeight = _state.windowHeight,
                    scrollY = _state.scrollY;
                return _react2.default.createElement(
                    _reactNative.View,
                    {
                        style: [styles.headerContainer, {
                            height: windowHeight
                        }],
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 337
                        }
                    },
                    _react2.default.createElement(_reactNative.Animated.View, {
                        style: [styles.headerShade, {
                            height: 64,
                            backgroundColor: 'red',
                            opacity: scrollY.interpolate({
                                inputRange: [-windowHeight, 0, windowHeight * 4],
                                outputRange: [0, 0, .5]
                            })
                        }],
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 338
                        }
                    })
                );
            }
        }, {
            key: "_leftItemAction",
            value: function _leftItemAction() {
                console.log('左侧按钮点击了');
                alert('左侧按钮点击了');
            }
        }, {
            key: "_rightItemAction",
            value: function _rightItemAction() {
                console.log('右侧按钮点击了');
                alert('右侧按钮点击了');
            }
        }, {
            key: "_startAnimation",
            value: function _startAnimation() {
                _reactNative.Animated.timing(this.state.opacity, {
                    toValue: 0,
                    duration: 500,
                    easing: _reactNative.Easing.linear
                }).start();

                _reactNative.Animated.timing();
            }
        }, {
            key: "_productDetailView",
            value: function _productDetailView() {
                var nameStr = this.state.dataSource.name ? this.state.dataSource.name : "商品名称为空";
                var descStr = this.state.dataSource.introduction ? this.state.dataSource.introduction : "描述为空";
                var plist;

                if (this.state.dataSource.marketPrice.includes('-')) {
                    plist = this.state.dataSource.marketPrice.split('-');
                } else {
                    plist = this.state.dataSource.marketPrice;
                }

                var price = '';

                if (plist.length == 2) {
                    price = '￥' + plist[0] + '~￥' + plist[1];
                } else {
                    price = '￥' + plist;
                }

                return _react2.default.createElement(
                    _reactNative.View,
                    {
                        style: _ETTProductDeatilStyle2.default.productDeatilViewStyle,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 402
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.Text,
                        {
                            style: _ETTProductDeatilStyle2.default.productNameStyle,
                            numberOfLines: 2,
                            ellipsizeMode: "tail",
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 405
                            }
                        },
                        nameStr
                    ),
                    _react2.default.createElement(
                        _reactNative.Text,
                        {
                            style: _ETTProductDeatilStyle2.default.productDescribeTopStyle,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 413
                            }
                        },
                        descStr
                    ),
                    _react2.default.createElement(
                        _reactNative.Text,
                        {
                            style: _ETTProductDeatilStyle2.default.productPriceStyle,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 417
                            }
                        },
                        price
                    )
                );
            }
        }, {
            key: "showHaveBuyView",
            value: function showHaveBuyView() {
                if (this.currentItem != undefined) {
                    if (this.currentItem.isBuy == undefined || this.currentItem.isBuy == 0) {
                        return null;
                    } else {
                        return _react2.default.createElement(
                            _reactNative.View,
                            {
                                style: {
                                    width: _ETTDevice2.default.ScreenWidth,
                                    backgroundColor: 'white'
                                },
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 429
                                }
                            },
                            _react2.default.createElement(
                                _reactNative.Text,
                                {
                                    style: {
                                        marginLeft: (0, _ETTInlineFuction.scaleSize)(100),
                                        marginTop: (0, _ETTInlineFuction.scaleSize)(20),
                                        color: _ETTColor2.default.f2,
                                        fontSize: (0, _ETTInlineFuction.scaleSize)(20),
                                        marginBottom: (0, _ETTInlineFuction.scaleSize)(24)
                                    },
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 430
                                    }
                                },
                                "\u5DF2\u8D2D\u4E70\u8FC7"
                            )
                        );
                    }
                }
            }
        }, {
            key: "_choiceItemView",
            value: function _choiceItemView() {
                var _this7 = this;

                var activityInfo = '';

                if (this.state.activityData.length == 0) {
                    activityInfo = '奔驰会员享受8.5折优惠';
                } else {
                    for (var _iterator = this.state.activityData.entries(), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
                        var _ref4;

                        if (_isArray) {
                            if (_i >= _iterator.length) break;
                            _ref4 = _iterator[_i++];
                        } else {
                            _i = _iterator.next();
                            if (_i.done) break;
                            _ref4 = _i.value;
                        }

                        var _ref2 = _ref4;

                        var _ref3 = babelHelpers.slicedToArray(_ref2, 2);

                        var index = _ref3[0];
                        var item = _ref3[1];
                        activityInfo += item.activityName + ' ';
                    }
                }

                return _react2.default.createElement(
                    _reactNative.View,
                    {
                        style: _ETTProductDeatilStyle2.default.choiceItemViewStyle,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 452
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.View,
                        {
                            style: {
                                flexDirection: 'row'
                            },
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 453
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.View,
                            {
                                style: _ETTProductDeatilStyle2.default.choiceItemSaleViewStyle,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 454
                                }
                            },
                            _react2.default.createElement(
                                _reactNative.Text,
                                {
                                    style: _ETTProductDeatilStyle2.default.choiceItemSaleTextStyle,
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 455
                                    }
                                },
                                "\u4F18\u60E0"
                            )
                        ),
                        _react2.default.createElement(
                            _reactNative.Text,
                            {
                                style: _ETTProductDeatilStyle2.default.choiceItemSaleDescribeStyle,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 459
                                }
                            },
                            activityInfo
                        )
                    ),
                    _react2.default.createElement(
                        _reactNative.View,
                        {
                            style: _ETTProductDeatilStyle2.default.choiceItemBottomViewStyle,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 464
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.TouchableOpacity,
                            {
                                onPress: function onPress() {
                                    _this7._showGuiGeView();
                                },
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 465
                                }
                            },
                            _react2.default.createElement(
                                _reactNative.View,
                                {
                                    style: {
                                        flexDirection: 'row'
                                    },
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 468
                                    }
                                },
                                _react2.default.createElement(
                                    _reactNative.Text,
                                    {
                                        style: _ETTProductDeatilStyle2.default.choiceItemHaveChoiceStyle,
                                        __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 469
                                        }
                                    },
                                    "\u5DF2\u9009"
                                ),
                                _react2.default.createElement(
                                    _reactNative.Text,
                                    {
                                        style: _ETTProductDeatilStyle2.default.choiceItemSubjectStyle,
                                        __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 472
                                        }
                                    },
                                    this._reloadSelectName()
                                )
                            )
                        ),
                        _react2.default.createElement(
                            _reactNative.TouchableOpacity,
                            {
                                onPress: function onPress() {
                                    _this7._showGuiGeView();
                                },
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 479
                                }
                            },
                            _react2.default.createElement(
                                _reactNative.View,
                                {
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 480
                                    }
                                },
                                _react2.default.createElement(_reactNative.Image, {
                                    style: _ETTProductDeatilStyle2.default.choiceItemImageStyle,
                                    source: _require(_dependencyMap[33], '../res/images/tab_c5.png'),
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 481
                                    }
                                })
                            )
                        )
                    ),
                    this.showHaveBuyView()
                );
            }
        }, {
            key: "onMessage",
            value: function onMessage(e) {
                alert(1);
            }
        }, {
            key: "_mealDetailCallback",
            value: function _mealDetailCallback() {
                this.showSelectPrice = this.zuhePrice;
                this.currentGoodsId = this.state.mealData.goodsId;
                this.setState({
                    showSelectMealView: false
                });
            }
        }, {
            key: "_checkSelectMealDetail",
            value: function _checkSelectMealDetail() {
                var _this8 = this;

                if (this.state.showSelectMealView === true) {
                    return _react2.default.createElement(_ETTCommendMealView2.default, {
                        info: this.state.mealData,
                        callback: function callback() {
                            return _this8._mealDetailCallback();
                        },
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 509
                        }
                    });
                } else {
                    return null;
                }
            }
        }, {
            key: "_checkMealDetail",
            value: function _checkMealDetail() {
                this.currentItem = this.state.mealData;
                this.showSelectPrice = this.state.mealData.marketPrice;
                this.currentGoodsId = this.state.mealData.goodsId;
                this.setState({
                    showSelectMealView: true
                });
            }
        }, {
            key: "_isShowHaveBugText",
            value: function _isShowHaveBugText() {
                if (this.state.mealData.isBuy == 0) {
                    return null;
                } else {
                    return _react2.default.createElement(
                        _reactNative.Text,
                        {
                            style: {
                                color: _ETTColor2.default.f3,
                                marginLeft: (0, _ETTInlineFuction.scaleSize)(30),
                                marginTop: (0, _ETTInlineFuction.scaleSize)(30),
                                marginBottom: (0, _ETTInlineFuction.scaleSize)(30)
                            },
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 529
                            }
                        },
                        "\u5DF2\u8D2D\u4E70\u8FC7"
                    );
                }
            }
        }, {
            key: "_clickCourseIntroduce",
            value: function _clickCourseIntroduce() {
                this.changeScrollView.scrollTo({
                    x: 0
                });
                this.setState({
                    courseIntroduce: true,
                    resourceDirectory: false
                });
            }
        }, {
            key: "_clickResourceDir",
            value: function _clickResourceDir() {
                this.changeScrollView.scrollToEnd({
                    animated: true
                });
                this.setState({
                    courseIntroduce: false,
                    resourceDirectory: true
                });
            }
        }, {
            key: "_textStatue",
            value: function _textStatue(statue) {
                if (!statue) {
                    return {
                        color: '#999999'
                    };
                } else {
                    return {
                        color: '#333333'
                    };
                }
            }
        }, {
            key: "_recommendedMeal",
            value: function _recommendedMeal() {
                var _this9 = this;

                if (this.state.showMealView === false) {
                    return _react2.default.createElement(_reactNative.View, {
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 568
                        }
                    });
                }

                var goodsName = this.state.mealData.goodsName ? this.state.mealData.goodsName : '';
                var showMeal = goodsName + ",套餐价" + this.state.mealData.marketPrice + "元,可节省" + this.state.mealData.packageDiscount + "元";
                return _react2.default.createElement(
                    _reactNative.TouchableOpacity,
                    {
                        onPress: function onPress() {
                            _this9._checkMealDetail();
                        },
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 572
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.View,
                        {
                            style: {
                                flexDirection: 'column',
                                flex: 1,
                                width: _ETTDevice2.default.ScreenWidth,
                                backgroundColor: 'white',
                                marginTop: (0, _ETTInlineFuction.scaleSize)(18)
                            },
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 573
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.View,
                            {
                                style: {
                                    flexDirection: 'row',
                                    justifyContent: 'space-between',
                                    alignItems: 'center',
                                    marginTop: (0, _ETTInlineFuction.scaleSize)(5)
                                },
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 574
                                }
                            },
                            _react2.default.createElement(
                                _reactNative.Text,
                                {
                                    style: {
                                        alignSelf: 'center',
                                        justifyContent: 'center',
                                        marginLeft: (0, _ETTInlineFuction.scaleSize)(30)
                                    },
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 575
                                    }
                                },
                                showMeal
                            ),
                            _react2.default.createElement(_reactNative.Image, {
                                style: _ETTProductDeatilStyle2.default.choiceItemImageStyle,
                                source: _require(_dependencyMap[33], '../res/images/tab_c5.png'),
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 576
                                }
                            })
                        ),
                        this._isShowHaveBugText()
                    )
                );
            }
        }, {
            key: "_describeItemView",
            value: function _describeItemView() {
                var _this10 = this;

                if (this.state.reloadDescribeImage == false) {
                    return;
                }

                var imageArr = [];

                for (var _iterator2 = this.state.dataSource.describes.entries(), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
                    var _ref7;

                    if (_isArray2) {
                        if (_i2 >= _iterator2.length) break;
                        _ref7 = _iterator2[_i2++];
                    } else {
                        _i2 = _iterator2.next();
                        if (_i2.done) break;
                        _ref7 = _i2.value;
                    }

                    var _ref5 = _ref7;

                    var _ref6 = babelHelpers.slicedToArray(_ref5, 2);

                    var index = _ref6[0];
                    var item = _ref6[1];
                    var height = this.descriDic[item.picture];
                    imageArr.push(_react2.default.createElement(_reactNative.Image, {
                        source: {
                            uri: item.picture
                        },
                        style: {
                            width: _ETTDevice2.default.ScreenWidth,
                            flex: 1,
                            height: height,
                            resizeMode: 'stretch'
                        },
                        key: index,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 592
                        }
                    }));
                }

                return _react2.default.createElement(
                    _reactNative.View,
                    {
                        style: {
                            width: _ETTDevice2.default.ScreenWidth,
                            flex: 1,
                            marginTop: (0, _ETTInlineFuction.scaleSize)(18),
                            flexDirection: 'column'
                        },
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 599
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.View,
                        {
                            style: {
                                height: (0, _ETTInlineFuction.scaleSize)(90),
                                flexDirection: 'row',
                                backgroundColor: 'white'
                            },
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 600
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.TouchableOpacity,
                            {
                                onPress: function onPress() {
                                    _this10._clickCourseIntroduce();
                                },
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 601
                                }
                            },
                            _react2.default.createElement(
                                _reactNative.Text,
                                {
                                    style: [this._textStatue(this.state.courseIntroduce), {
                                        fontSize: (0, _ETTInlineFuction.scaleSize)(30),
                                        width: (0, _ETTInlineFuction.scaleSize)(150),
                                        height: (0, _ETTInlineFuction.scaleSize)(30),
                                        textAlign: 'center',
                                        marginLeft: (0, _ETTInlineFuction.scaleSize)(30),
                                        marginTop: (0, _ETTInlineFuction.scaleSize)(30)
                                    }],
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 602
                                    }
                                },
                                "\u8BFE\u7A0B\u4ECB\u7ECD"
                            )
                        ),
                        _react2.default.createElement(
                            _reactNative.TouchableOpacity,
                            {
                                onPress: function onPress() {
                                    _this10._clickResourceDir();
                                },
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 604
                                }
                            },
                            _react2.default.createElement(
                                _reactNative.Text,
                                {
                                    style: [this._textStatue(this.state.resourceDirectory), {
                                        fontSize: (0, _ETTInlineFuction.scaleSize)(30),
                                        width: (0, _ETTInlineFuction.scaleSize)(120),
                                        height: (0, _ETTInlineFuction.scaleSize)(31),
                                        textAlign: 'center',
                                        marginLeft: (0, _ETTInlineFuction.scaleSize)(100),
                                        marginTop: (0, _ETTInlineFuction.scaleSize)(29)
                                    }],
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 605
                                    }
                                },
                                "\u8D44\u6E90\u76EE\u5F55"
                            )
                        )
                    ),
                    _react2.default.createElement(
                        _reactNative.ScrollView,
                        {
                            ref: function ref(scrollView) {
                                _this10.changeScrollView = scrollView;
                            },
                            automaticallyAdjustContentInsets: false,
                            horizontal: true,
                            style: {
                                backgroundColor: 'white',
                                flex: 1
                            },
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 608
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.View,
                            {
                                style: {
                                    backgroundColor: 'white',
                                    flex: 1,
                                    width: _ETTDevice2.default.ScreenWidth,
                                    flexDirection: 'column'
                                },
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 613
                                }
                            },
                            imageArr
                        ),
                        _react2.default.createElement(_ETTSubjectTimeList2.default, {
                            style: {
                                width: _ETTDevice2.default.ScreenWidth
                            },
                            data: this.data,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 615
                            }
                        })
                    )
                );
            }
        }, {
            key: "getDescribeImageH",
            value: function getDescribeImageH() {
                var _this11 = this;

                if (this.describeArr.length != 0) {
                    this.describeArr = [];
                }

                this.descriDic = {};

                var _loop = function _loop(index, item) {
                    _reactNative.Image.getSize(item.picture, function (width, height) {
                        _this11.descriDic[item.picture] = (0, _ETTInlineFuction.scaleSize)(height);

                        if (index == _this11.state.dataSource.describes.length - 1) {
                            _this11.setState({
                                reloadDescribeImage: true
                            });
                        }
                    });
                };

                for (var _iterator3 = this.state.dataSource.describes.entries(), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
                    var _ref10;

                    if (_isArray3) {
                        if (_i3 >= _iterator3.length) break;
                        _ref10 = _iterator3[_i3++];
                    } else {
                        _i3 = _iterator3.next();
                        if (_i3.done) break;
                        _ref10 = _i3.value;
                    }

                    var _ref8 = _ref10;

                    var _ref9 = babelHelpers.slicedToArray(_ref8, 2);

                    var index = _ref9[0];
                    var item = _ref9[1];

                    _loop(index, item);
                }

                this.refs.loading._hiden();
            }
        }, {
            key: "_payForItemView",
            value: function _payForItemView() {
                var _this12 = this;

                return _react2.default.createElement(_ETTBottomPayView2.default, {
                    ref: function ref(_ref11) {
                        _this12.payView = _ref11;
                    },
                    price: this.showSelectPrice,
                    title: '确认支付',
                    callback: function callback() {
                        return _this12.jumpToOrderDeatil();
                    },
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 653
                    }
                });
            }
        }, {
            key: "modalLogView",
            value: function modalLogView() {
                var _this13 = this;

                return _react2.default.createElement(_ETTModalLogView2.default, {
                    nav: this.props.navigation,
                    loginSuccess: function loginSuccess() {
                        return _this13.jumpToOrderDeatil();
                    },
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 668
                    }
                });
            }
        }, {
            key: "jumpToOrderDeatil",
            value: function jumpToOrderDeatil() {
                if (this.currentGoodsId.length == 0) {
                    this.refs.toast.show('请选择课程');

                    this.refs.loading._hiden();

                    return;
                }

                if (_ETTConfig.DataManager._userModel._isLog == false) {
                    this.setState({
                        isLogin: true
                    });
                } else {
                    this.setState({
                        isLogin: false
                    });
                    this.props.navigation.navigate('OrderDetailScene', {
                        title: '订单结算',
                        isVisible: false,
                        goodsId: this.currentGoodsId,
                        callback: function callback(data) {
                            console.log("callback" + data);
                        }
                    });
                }
            }
        }, {
            key: "_backToFront",
            value: function _backToFront() {
                var goBack = this.props.navigation.goBack;
                goBack();
            }
        }, {
            key: "_shareClick",
            value: function _shareClick() {
                alert('分享');
            }
        }, {
            key: "render",
            value: function render() {
                var _this14 = this;

                if (this.state.isLogin == true) {
                    return this.modalLogView();
                } else {
                    if (this.state.reloadDescribeImage == false) {
                        return _react2.default.createElement(
                            _reactNative.View,
                            {
                                style: _ETTProductDeatilStyle2.default.contain,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 745
                                }
                            },
                            _react2.default.createElement(_reactNativeEasyToast2.default, {
                                ref: "toast",
                                style: _ETTLogStyles2.default.reg_toast,
                                opacity: 0.8,
                                position: "top",
                                positionValue: 200,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 746
                                }
                            }),
                            _react2.default.createElement(_ETTLoadingAnimation2.default, {
                                ref: "loading",
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 753
                                }
                            })
                        );
                    } else {
                        return _react2.default.createElement(
                            _reactNative.View,
                            {
                                style: _ETTProductDeatilStyle2.default.contain,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 757
                                }
                            },
                            _react2.default.createElement(
                                _reactNative.ScrollView,
                                {
                                    ref: function ref(scrollView) {
                                        _this14.bigScrollView = scrollView;
                                    },
                                    style: _ETTProductDeatilStyle2.default.scrollViewStyle,
                                    automaticallyAdjustContentInsets: false,
                                    scrollEventThrottle: 16,
                                    onScroll: this._scrollViewScroll,
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 759
                                    }
                                },
                                this._topShowImageView(),
                                this._productDetailView(),
                                this._choiceItemView(),
                                this._recommendedMeal(),
                                this._describeItemView()
                            ),
                            _react2.default.createElement(
                                _reactNative.TouchableOpacity,
                                {
                                    onPress: this._backToFront.bind(this),
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 779
                                    }
                                },
                                _react2.default.createElement(_reactNative.Image, {
                                    style: styles.backIcon,
                                    source: _require(_dependencyMap[31], '../res/images/fanhui.png'),
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 780
                                    }
                                })
                            ),
                            _react2.default.createElement(
                                _reactNative.TouchableOpacity,
                                {
                                    onPress: this._shareClick.bind(this),
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 782
                                    }
                                },
                                _react2.default.createElement(_reactNative.Image, {
                                    style: styles.shareIcon,
                                    source: _require(_dependencyMap[32], '../res/images/zhuanfa.png'),
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 783
                                    }
                                })
                            ),
                            _react2.default.createElement(_ETTNavBarCommon2.default, {
                                style: {
                                    opacity: this.state.navOpacity
                                },
                                title: '课程详情',
                                leftImage: _back2.default,
                                leftAction: this._backToFront.bind(this),
                                rightImage: _zhuanfa2.default,
                                rightAction: this._shareClick.bind(this),
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 786
                                }
                            }),
                            this._payForItemView(),
                            this._courseChooseView(),
                            this._checkSelectMealDetail(),
                            _react2.default.createElement(_reactNativeEasyToast2.default, {
                                ref: "toast",
                                style: _ETTLogStyles2.default.reg_toast,
                                opacity: 0.8,
                                position: "top",
                                positionValue: 200,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 798
                                }
                            }),
                            _react2.default.createElement(_ETTLoadingAnimation2.default, {
                                ref: "loading",
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 805
                                }
                            })
                        );
                    }
                }
            }
        }]);
        return ETTProductDeatilScene;
    }(_react.Component)) || _class;

    exports.default = ETTProductDeatilScene;

    var styles = _reactNative.StyleSheet.create({
        container: {
            flex: 1,
            borderColor: '#fff'
        },
        headerContainer: {
            backgroundColor: 'transparent',
            position: 'relative'
        },
        headerShade: {
            width: _ETTDevice2.default.ScreenWidth,
            position: 'absolute',
            top: 0,
            left: 0,
            height: 64
        },
        backIcon: {
            position: 'absolute',
            backgroundColor: 'transparent',
            top: (0, _ETTInlineFuction.scaleSize)(56),
            left: (0, _ETTInlineFuction.scaleSize)(20),
            justifyContent: 'center'
        },
        shareIcon: {
            position: 'absolute',
            backgroundColor: 'transparent',
            top: (0, _ETTInlineFuction.scaleSize)(56),
            right: (0, _ETTInlineFuction.scaleSize)(30),
            justifyContent: 'center'
        }
    });
},463,[114,12,449,464,454,456,452,465,472,361,362,369,360,342,453,474,476,477,478,475,460,461,479,483,466,504,505,506,343,340,507,519,520,521],"app/scene/ETTProductDeatilScene.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    var _react = _require(_dependencyMap[0], "react");

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    var _ETTDevice = _require(_dependencyMap[2], "../values/ETTDevice");

    var _ETTDevice2 = babelHelpers.interopRequireDefault(_ETTDevice);

    var _ETTColor = _require(_dependencyMap[3], "../values/ETTColor");

    var _ETTColor2 = babelHelpers.interopRequireDefault(_ETTColor);

    var _ETTInlineFuction = _require(_dependencyMap[4], "../values/ETTInlineFuction");

    var ETTProductDeatilStyle = _reactNative.StyleSheet.create({
        contain: {
            width: _ETTDevice2.default.ScreenWidth,
            height: _ETTDevice2.default.ScreenHeight,
            backgroundColor: '#F5F5F5',
            flex: 1
        },
        scrollViewStyle: {
            width: _ETTDevice2.default.ScreenWidth,
            height: _ETTDevice2.default.ScreenHeight - (0, _ETTInlineFuction.scaleSize)(90),
            flex: 1,
            position: 'absolute'
        },
        topViewStyle: {
            width: _ETTDevice2.default.ScreenWidth,
            height: (0, _ETTInlineFuction.scaleSize)(434),
            flexDirection: 'column'
        },
        topShowImageStyle: {
            width: _ETTDevice2.default.ScreenWidth,
            height: 344,
            resizeMode: 'stretch'
        },
        productDeatilViewStyle: {
            width: _ETTDevice2.default.ScreenWidth,
            backgroundColor: 'white'
        },
        productPriceStyle: {
            marginLeft: (0, _ETTInlineFuction.scaleSize)(30),
            color: _ETTColor2.default.c3,
            fontSize: (0, _ETTInlineFuction.scaleSize)(32),
            width: _ETTDevice2.default.ScreenWidth - (0, _ETTInlineFuction.scaleSize)(20),
            textAlign: 'left',
            marginTop: (0, _ETTInlineFuction.scaleSize)(30),
            marginBottom: (0, _ETTInlineFuction.scaleSize)(24)
        },
        productNameStyle: {
            marginLeft: (0, _ETTInlineFuction.scaleSize)(30),
            fontSize: (0, _ETTInlineFuction.scaleSize)(32),
            color: _ETTColor2.default.f1,
            marginTop: (0, _ETTInlineFuction.scaleSize)(24),
            width: _ETTDevice2.default.ScreenWidth - (0, _ETTInlineFuction.scaleSize)(40)
        },
        productDescribeTopStyle: {
            marginLeft: (0, _ETTInlineFuction.scaleSize)(30),
            marginTop: (0, _ETTInlineFuction.scaleSize)(32),
            fontSize: (0, _ETTInlineFuction.scaleSize)(24),
            color: _ETTColor2.default.f2,
            width: _ETTDevice2.default.ScreenWidth - (0, _ETTInlineFuction.scaleSize)(40),
            letterSpacing: 1
        },
        choiceItemViewStyle: {
            marginTop: (0, _ETTInlineFuction.scaleSize)(18),
            width: _ETTDevice2.default.ScreenWidth,
            backgroundColor: 'white',
            flex: 1
        },
        choiceItemSaleViewStyle: {
            width: (0, _ETTInlineFuction.scaleSize)(70),
            height: (0, _ETTInlineFuction.scaleSize)(34),
            borderRadius: (0, _ETTInlineFuction.scaleSize)(15),
            backgroundColor: _ETTColor2.default.c4,
            alignItems: 'center',
            justifyContent: 'center',
            marginLeft: (0, _ETTInlineFuction.scaleSize)(30),
            marginTop: (0, _ETTInlineFuction.scaleSize)(24)
        },
        choiceItemSaleTextStyle: {
            color: _ETTColor2.default.c3,
            fontSize: (0, _ETTInlineFuction.scaleSize)(16)
        },
        choiceItemSaleDescribeStyle: {
            marginLeft: (0, _ETTInlineFuction.scaleSize)(50),
            textAlign: 'left',
            marginTop: (0, _ETTInlineFuction.scaleSize)(30),
            fontSize: (0, _ETTInlineFuction.scaleSize)(24),
            color: _ETTColor2.default.c3,
            marginRight: (0, _ETTInlineFuction.scaleSize)(20),
            width: _ETTDevice2.default.ScreenWidth - (0, _ETTInlineFuction.scaleSize)(40) - (0, _ETTInlineFuction.scaleSize)(70) * 2
        },
        choiceItemBottomViewStyle: {
            justifyContent: 'space-between',
            flexDirection: 'row'
        },
        choiceItemHaveChoiceStyle: {
            marginLeft: (0, _ETTInlineFuction.scaleSize)(30),
            fontSize: (0, _ETTInlineFuction.scaleSize)(30),
            color: _ETTColor2.default.f3,
            marginBottom: (0, _ETTInlineFuction.scaleSize)(30),
            marginTop: (0, _ETTInlineFuction.scaleSize)(30)
        },
        choiceItemSubjectStyle: {
            marginLeft: (0, _ETTInlineFuction.scaleSize)(40),
            fontSize: (0, _ETTInlineFuction.scaleSize)(24),
            color: _ETTColor2.default.f1,
            marginBottom: (0, _ETTInlineFuction.scaleSize)(30),
            marginTop: (0, _ETTInlineFuction.scaleSize)(33)
        },
        choiceItemImageStyle: {
            width: (0, _ETTInlineFuction.scaleSize)(12),
            height: (0, _ETTInlineFuction.scaleSize)(19),
            marginBottom: (0, _ETTInlineFuction.scaleSize)(30),
            marginRight: (0, _ETTInlineFuction.scaleSize)(30),
            marginTop: (0, _ETTInlineFuction.scaleSize)(30)
        },
        describeItemTextStyle: {
            margin: (0, _ETTInlineFuction.scaleSize)(30),
            backgroundColor: 'yellow',
            height: _ETTDevice2.default.ScreenHeight
        },
        payLineStyle: {
            width: _ETTDevice2.default.ScreenWidth,
            height: (0, _ETTInlineFuction.scaleSize)(1),
            backgroundColor: _ETTColor2.default.l1
        },
        payForItemViewStyle: {
            height: (0, _ETTInlineFuction.scaleSize)(90),
            width: _ETTDevice2.default.ScreenWidth,
            flexDirection: 'column',
            backgroundColor: 'white',
            position: 'absolute',
            left: 0,
            bottom: 0
        },
        payForItemSubViewStyle: {
            height: (0, _ETTInlineFuction.scaleSize)(90),
            width: _ETTDevice2.default.ScreenWidth,
            flexDirection: 'row',
            backgroundColor: 'white',
            justifyContent: 'space-between',
            alignItems: 'center'
        },
        payForItemPriceStyle: {
            marginLeft: (0, _ETTInlineFuction.scaleSize)(30),
            color: _ETTColor2.default.black_t60,
            fontSize: (0, _ETTInlineFuction.scaleSize)(30),
            textAlign: 'left'
        },
        payForItemImmediateBuyViewStyle: {
            backgroundColor: _ETTColor2.default.black_t60,
            width: (0, _ETTInlineFuction.scaleSize)(222),
            height: (0, _ETTInlineFuction.scaleSize)(90),
            alignItems: 'center',
            justifyContent: 'center'
        },
        payForItemImmediateBuyLineStyle: {
            width: _ETTDevice2.default.ScreenWidth,
            height: 1,
            backgroundColor: _ETTColor2.default.f3,
            marginTop: (0, _ETTInlineFuction.scaleSize)(1)
        },
        payForItemImmediateBuyTextStyle: {
            color: _ETTColor2.default.white,
            fontSize: (0, _ETTInlineFuction.scaleSize)(35),
            textAlign: 'center'
        }
    });

    module.exports = ETTProductDeatilStyle;
},464,[114,12,342,453,452],"app/res/styles/ETTProductDeatilStyle.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = undefined;
    var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/app/common/ETTCourseChooseView.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    var _ETTCourseChooseStyle = _require(_dependencyMap[2], "../res/styles/ETTCourseChooseStyle");

    var _ETTCourseChooseStyle2 = babelHelpers.interopRequireDefault(_ETTCourseChooseStyle);

    var _ETTInlineFuction = _require(_dependencyMap[3], "../res/values/ETTInlineFuction");

    var _ETTChooseItemCell = _require(_dependencyMap[4], "./ETTChooseItemCell");

    var _ETTChooseItemCell2 = babelHelpers.interopRequireDefault(_ETTChooseItemCell);

    var _ETTDevice = _require(_dependencyMap[5], "../res/values/ETTDevice");

    var _ETTDevice2 = babelHelpers.interopRequireDefault(_ETTDevice);

    var _ETTChooseItemStyle = _require(_dependencyMap[6], "../res/styles/ETTChooseItemStyle");

    var _ETTChooseItemStyle2 = babelHelpers.interopRequireDefault(_ETTChooseItemStyle);

    var _ETTCustomButton = _require(_dependencyMap[7], "./ETTCustomButton");

    var _ETTCustomButton2 = babelHelpers.interopRequireDefault(_ETTCustomButton);

    var _ETTColor = _require(_dependencyMap[8], "../res/values/ETTColor");

    var _ETTColor2 = babelHelpers.interopRequireDefault(_ETTColor);

    var _Dimensions$get = _reactNative.Dimensions.get('window'),
        width = _Dimensions$get.width,
        height = _Dimensions$get.height;

    var ETTCourseChooseView = function (_Component) {
        babelHelpers.inherits(ETTCourseChooseView, _Component);

        function ETTCourseChooseView(props) {
            babelHelpers.classCallCheck(this, ETTCourseChooseView);

            var _this = babelHelpers.possibleConstructorReturn(this, (ETTCourseChooseView.__proto__ || Object.getPrototypeOf(ETTCourseChooseView)).call(this, props));

            _this.effectArr = [];
            _this.attrArr = [];
            _this.selectDic = {};
            _this.selectArr = [];
            _this.customButton1 = new _ETTCustomButton2.default();
            _this.customButton2 = new _ETTCustomButton2.default();
            _this.customButton3 = new _ETTCustomButton2.default();

            _this._keyExtractor = function (item, index) {
                return index;
            };

            _this.state = {
                offset: new _reactNative.Animated.Value(0),
                opacity: new _reactNative.Animated.Value(0),
                hide: true,
                dataSource: new _reactNative.ListView.DataSource({
                    rowHasChanged: function rowHasChanged(r1, r2) {
                        return r1 !== r2;
                    }
                })
            };
            return _this;
        }

        babelHelpers.createClass(ETTCourseChooseView, [{
            key: "_callBcak",
            value: function _callBcak(arr, item) {
                var callBack = this.props.callBack;

                if (callBack) {
                    callBack(arr, item, false);
                }
            }
        }, {
            key: "_changePayViewPrice",
            value: function _changePayViewPrice(info) {
                var callback = this.props.changePrice;

                if (callback) {
                    callback(info);
                }
            }
        }, {
            key: "customButtonItemClick",
            value: function customButtonItemClick(info, index, statue) {
                var vName = info.vName;

                if (statue == true) {
                    this.selectArr[index] = vName ? vName : '';
                } else {
                    this.selectArr.splice(this.selectArr.indexOf(vName), 1);
                }

                var count = this.props.info.properties.length;
                var selectKeyCount = this.selectArr.length;
                var arr = [];

                if (statue == true) {
                    for (var _iterator = this.props.info.goodsList.entries(), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
                        var _ref3;

                        if (_isArray) {
                            if (_i >= _iterator.length) break;
                            _ref3 = _iterator[_i++];
                        } else {
                            _i = _iterator.next();
                            if (_i.done) break;
                            _ref3 = _i.value;
                        }

                        var _ref = _ref3;

                        var _ref2 = babelHelpers.slicedToArray(_ref, 2);

                        var i = _ref2[0];
                        var item = _ref2[1];
                        var skuArray = item.propertyName.split(" ");

                        if (skuArray.includes(vName)) {
                            skuArray.splice(skuArray.indexOf(vName), 1);
                            skuArray.map(function (value) {
                                arr.push(value);
                            });
                        }
                    }
                } else {
                    for (var _iterator2 = this.props.info.properties.entries(), _isArray2 = Array.isArray(_iterator2), _i3 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
                        var _ref6;

                        if (_isArray2) {
                            if (_i3 >= _iterator2.length) break;
                            _ref6 = _iterator2[_i3++];
                        } else {
                            _i3 = _iterator2.next();
                            if (_i3.done) break;
                            _ref6 = _i3.value;
                        }

                        var _ref4 = _ref6;

                        var _ref5 = babelHelpers.slicedToArray(_ref4, 2);

                        var _i2 = _ref5[0];
                        var _item = _ref5[1];

                        if (_item.isSale = 1) {
                            if (_i2 != index) {
                                for (var _iterator3 = _item.valueList.entries(), _isArray3 = Array.isArray(_iterator3), _i4 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
                                    var _ref9;

                                    if (_isArray3) {
                                        if (_i4 >= _iterator3.length) break;
                                        _ref9 = _iterator3[_i4++];
                                    } else {
                                        _i4 = _iterator3.next();
                                        if (_i4.done) break;
                                        _ref9 = _i4.value;
                                    }

                                    var _ref7 = _ref9;

                                    var _ref8 = babelHelpers.slicedToArray(_ref7, 2);

                                    var subIndex = _ref8[0];
                                    var subItem = _ref8[1];
                                    arr.push(subItem.vName);
                                }
                            }
                        }
                    }
                }

                if (selectKeyCount == count) {
                    for (var _iterator4 = this.props.info.goodsList.entries(), _isArray4 = Array.isArray(_iterator4), _i6 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
                        var _ref12;

                        if (_isArray4) {
                            if (_i6 >= _iterator4.length) break;
                            _ref12 = _iterator4[_i6++];
                        } else {
                            _i6 = _iterator4.next();
                            if (_i6.done) break;
                            _ref12 = _i6.value;
                        }

                        var _ref10 = _ref12;

                        var _ref11 = babelHelpers.slicedToArray(_ref10, 2);

                        var _i5 = _ref11[0];
                        var _item2 = _ref11[1];

                        var _skuArray = _item2.propertyName.split(" ");

                        var str1 = _skuArray.toString();

                        var str2 = this.selectArr.toString();

                        if (str1 == str2) {
                            this.selectDic = _item2;

                            this._changePayViewPrice(_item2);
                        }
                    }
                }

                var enableArr = [];

                for (var _iterator5 = this.props.info.properties.entries(), _isArray5 = Array.isArray(_iterator5), _i8 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
                    var _ref15;

                    if (_isArray5) {
                        if (_i8 >= _iterator5.length) break;
                        _ref15 = _iterator5[_i8++];
                    } else {
                        _i8 = _iterator5.next();
                        if (_i8.done) break;
                        _ref15 = _i8.value;
                    }

                    var _ref13 = _ref15;

                    var _ref14 = babelHelpers.slicedToArray(_ref13, 2);

                    var _i7 = _ref14[0];
                    var _item3 = _ref14[1];

                    if (_item3.isSale = 1) {
                        if (_i7 != index) {
                            for (var _iterator6 = _item3.valueList.entries(), _isArray6 = Array.isArray(_iterator6), _i9 = 0, _iterator6 = _isArray6 ? _iterator6 : _iterator6[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
                                var _ref18;

                                if (_isArray6) {
                                    if (_i9 >= _iterator6.length) break;
                                    _ref18 = _iterator6[_i9++];
                                } else {
                                    _i9 = _iterator6.next();
                                    if (_i9.done) break;
                                    _ref18 = _i9.value;
                                }

                                var _ref16 = _ref18;

                                var _ref17 = babelHelpers.slicedToArray(_ref16, 2);

                                var _subIndex = _ref17[0];
                                var _subItem = _ref17[1];

                                if (arr.includes(_subItem.vName)) {
                                    var aa = 'prefixEnable' + _i7 + _subIndex;
                                    enableArr.push(aa);
                                }
                            }

                            if (_i7 == 0) {
                                this.refs.myRef_0._reloadDisEnable(enableArr);
                            } else if (_i7 == 1) {
                                this.refs.myRef_1._reloadDisEnable(enableArr);
                            } else if (_i7 == 2) {
                                this.refs.myRef_2._reloadDisEnable(enableArr);
                            }
                        }
                    }
                }
            }
        }, {
            key: "render",
            value: function render() {
                var _this2 = this;

                if (!this.state.hide) {
                    return _react2.default.createElement(_reactNative.View, {
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 182
                        }
                    });
                } else {
                    if (this.effectArr.length != 0) {
                        this.effectArr = [];
                    }

                    if (this.attrArr.length != 0) {
                        this.attrArr = [];
                    }

                    for (var _iterator7 = this.props.info.properties.entries(), _isArray7 = Array.isArray(_iterator7), _i10 = 0, _iterator7 = _isArray7 ? _iterator7 : _iterator7[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
                        var _ref21;

                        if (_isArray7) {
                            if (_i10 >= _iterator7.length) break;
                            _ref21 = _iterator7[_i10++];
                        } else {
                            _i10 = _iterator7.next();
                            if (_i10.done) break;
                            _ref21 = _i10.value;
                        }

                        var _ref19 = _ref21;

                        var _ref20 = babelHelpers.slicedToArray(_ref19, 2);

                        var index = _ref20[0];
                        var item = _ref20[1];

                        if (item.isSale = 1) {
                            var attrValueArr = [];
                            var customButton = new _ETTCustomButton2.default();

                            if (index == 0) {
                                customButton = this.customButton1;
                            } else if (index == 1) {
                                customButton = this.customButton2;
                            } else if (index == 2) {
                                customButton = this.customButton3;
                            }

                            var refStr = 'myRef_' + index;
                            attrValueArr.push(_react2.default.createElement(_ETTCustomButton2.default, {
                                ref: refStr,
                                key: index + 1000,
                                info: item.valueList,
                                index: index,
                                callback: function callback(info, index, statue) {
                                    return _this2.customButtonItemClick(info, index, statue);
                                },
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 213
                                }
                            }));
                            this.attrArr.push(_react2.default.createElement(
                                _reactNative.View,
                                {
                                    style: {
                                        flexDirection: 'column',
                                        marginTop: (0, _ETTInlineFuction.scaleSize)(30)
                                    },
                                    key: index,
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 224
                                    }
                                },
                                _react2.default.createElement(
                                    _reactNative.Text,
                                    {
                                        style: {
                                            marginLeft: (0, _ETTInlineFuction.scaleSize)(24),
                                            marginTop: (0, _ETTInlineFuction.scaleSize)(22),
                                            color: _ETTColor2.default.f3
                                        },
                                        __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 225
                                        }
                                    },
                                    item.pName,
                                    ":"
                                ),
                                attrValueArr
                            ));
                        }
                    }

                    return _react2.default.createElement(
                        _reactNative.View,
                        {
                            style: _ETTCourseChooseStyle2.default.container,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 236
                            }
                        },
                        _react2.default.createElement(_reactNative.Animated.View, {
                            style: _ETTCourseChooseStyle2.default.mask,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 238
                            }
                        }),
                        _react2.default.createElement(
                            _reactNative.Animated.View,
                            {
                                style: [_ETTCourseChooseStyle2.default.tip, {
                                    transform: [{
                                        translateY: this.state.offset.interpolate({
                                            inputRange: [0, 1],
                                            outputRange: [height, (0, _ETTInlineFuction.scaleSize)(543)]
                                        })
                                    }]
                                }],
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 241
                                }
                            },
                            _react2.default.createElement(
                                _reactNative.View,
                                {
                                    style: _ETTCourseChooseStyle2.default.courseContain,
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 250
                                    }
                                },
                                _react2.default.createElement(
                                    _reactNative.View,
                                    {
                                        style: _ETTCourseChooseStyle2.default.courseTopViewStyle,
                                        __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 251
                                        }
                                    },
                                    _react2.default.createElement(
                                        _reactNative.Text,
                                        {
                                            style: _ETTCourseChooseStyle2.default.courseTitleStyle,
                                            __source: {
                                                fileName: _jsxFileName,
                                                lineNumber: 252
                                            }
                                        },
                                        this.props.info.name
                                    ),
                                    _react2.default.createElement(
                                        _reactNative.TouchableOpacity,
                                        {
                                            onPress: function onPress() {
                                                _this2._callBcak(_this2.selectArr, _this2.selectDic);
                                            },
                                            __source: {
                                                fileName: _jsxFileName,
                                                lineNumber: 255
                                            }
                                        },
                                        _react2.default.createElement(_reactNative.Image, {
                                            style: _ETTCourseChooseStyle2.default.courseTopCloseStyle,
                                            source: _require(_dependencyMap[9], '../res/images/close.png'),
                                            __source: {
                                                fileName: _jsxFileName,
                                                lineNumber: 258
                                            }
                                        })
                                    )
                                ),
                                _react2.default.createElement(
                                    _reactNative.ScrollView,
                                    {
                                        style: {
                                            width: _ETTDevice2.default.ScreenWidth
                                        },
                                        __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 262
                                        }
                                    },
                                    this.attrArr
                                )
                            )
                        )
                    );
                }
            }
        }, {
            key: "componentWillMount",
            value: function componentWillMount() {
                this.setState({
                    hidden: false
                }, this.in);
            }
        }, {
            key: "componentDidMount",
            value: function componentDidMount() {
                console.log('ETTCourseChooseView已经被加载');
            }
        }, {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
                console.log('ETTCourseChooseView将要被卸载了');
            }
        }, {
            key: "in",
            value: function _in() {
                _reactNative.Animated.parallel([_reactNative.Animated.timing(this.state.opacity, {
                    easing: _reactNative.Easing.linear,
                    duration: 500,
                    toValue: 0.8
                }), _reactNative.Animated.timing(this.state.offset, {
                    easing: _reactNative.Easing.linear,
                    duration: 500,
                    toValue: 1
                })]).start();
            }
        }, {
            key: "out",
            value: function out() {
                var _this3 = this;

                _reactNative.Animated.parallel([_reactNative.Animated.timing(this.state.opacity, {
                    easing: _reactNative.Easing.linear,
                    duration: 500,
                    toValue: 0
                }), _reactNative.Animated.timing(this.state.offset, {
                    easing: _reactNative.Easing.linear,
                    duration: 500,
                    toValue: 0
                })]).start();

                setTimeout(function () {
                    return _this3.setState({
                        hide: true
                    });
                }, 500);
            }
        }]);
        return ETTCourseChooseView;
    }(_react.Component);

    exports.default = ETTCourseChooseView;
},465,[114,12,466,452,467,342,468,470,453,471],"app/common/ETTCourseChooseView.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    var _react = _require(_dependencyMap[0], "react");

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    var _ETTDevice = _require(_dependencyMap[2], "../values/ETTDevice");

    var _ETTDevice2 = babelHelpers.interopRequireDefault(_ETTDevice);

    var _ETTColor = _require(_dependencyMap[3], "../values/ETTColor");

    var _ETTColor2 = babelHelpers.interopRequireDefault(_ETTColor);

    var _ETTInlineFuction = _require(_dependencyMap[4], "../values/ETTInlineFuction");

    var ETTCourseChooseStyle = _reactNative.StyleSheet.create({
        container: {
            position: "absolute",
            width: _ETTDevice2.default.ScreenWidth,
            height: _ETTDevice2.default.ScreenHeight - (0, _ETTInlineFuction.scaleSize)(90) - (0, _ETTInlineFuction.scaleSize)(125),
            left: 0,
            top: 0
        },
        mask: {
            justifyContent: "center",
            backgroundColor: _ETTColor2.default.black_t60,
            opacity: 0.8,
            position: "absolute",
            width: _ETTDevice2.default.ScreenWidth,
            height: _ETTDevice2.default.ScreenHeight - (0, _ETTInlineFuction.scaleSize)(90) - (0, _ETTInlineFuction.scaleSize)(125),
            left: 0,
            top: 0
        },
        tip: {
            width: _ETTDevice2.default.ScreenWidth,
            alignItems: "center",
            justifyContent: "center",
            backgroundColor: 'white'
        },
        courseView: {
            width: _ETTDevice2.default.ScreenWidth,
            height: _ETTDevice2.default.ScreenHeight - (0, _ETTInlineFuction.scaleSize)(90),
            backgroundColor: _ETTColor2.default.c5,
            opacity: 0.5
        },
        courseContain: {
            height: (0, _ETTInlineFuction.scaleSize)(700),
            backgroundColor: _ETTColor2.default.white,
            borderTopLeftRadius: (0, _ETTInlineFuction.scaleSize)(20),
            borderTopRightRadius: (0, _ETTInlineFuction.scaleSize)(20)
        },
        mealCourseContain: {
            height: (0, _ETTInlineFuction.scaleSize)(700),
            backgroundColor: _ETTColor2.default.white,
            borderTopLeftRadius: (0, _ETTInlineFuction.scaleSize)(20),
            borderTopRightRadius: (0, _ETTInlineFuction.scaleSize)(20)
        },
        courseTopViewStyle: {
            flexDirection: 'row',
            alignItems: 'center',
            justifyContent: 'space-between',
            marginTop: (0, _ETTInlineFuction.scaleSize)(35),
            width: _ETTDevice2.default.ScreenWidth
        },
        courseTitleStyle: {
            marginLeft: (0, _ETTInlineFuction.scaleSize)(48),
            fontSize: (0, _ETTInlineFuction.scaleSize)(28),
            color: _ETTColor2.default.f1,
            textAlign: 'left',
            width: _ETTDevice2.default.ScreenWidth - (0, _ETTInlineFuction.scaleSize)(48) * 3
        },
        courseTopCloseStyle: {
            marginRight: (0, _ETTInlineFuction.scaleSize)(30),
            width: (0, _ETTInlineFuction.scaleSize)(48),
            height: (0, _ETTInlineFuction.scaleSize)(48),
            resizeMode: 'center'
        }
    });

    module.exports = ETTCourseChooseStyle;
},466,[114,12,342,453,452],"app/res/styles/ETTCourseChooseStyle.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = undefined;
    var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/app/common/ETTChooseItemCell.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    var _ETTChooseItemStyle = _require(_dependencyMap[2], "../res/styles/ETTChooseItemStyle");

    var _ETTChooseItemStyle2 = babelHelpers.interopRequireDefault(_ETTChooseItemStyle);

    var _ETTChooseItemView = _require(_dependencyMap[3], "./ETTChooseItemView");

    var _ETTChooseItemView2 = babelHelpers.interopRequireDefault(_ETTChooseItemView);

    var ETTChooseItemCell = function (_Component) {
        babelHelpers.inherits(ETTChooseItemCell, _Component);

        function ETTChooseItemCell(props) {
            babelHelpers.classCallCheck(this, ETTChooseItemCell);

            var _this = babelHelpers.possibleConstructorReturn(this, (ETTChooseItemCell.__proto__ || Object.getPrototypeOf(ETTChooseItemCell)).call(this, props));

            console.log('我是ETTChooseItemCell');
            myData = [_ETTChooseItemView2.default];
            return _this;
        }

        babelHelpers.createClass(ETTChooseItemCell, [{
            key: "_itemClick",
            value: function _itemClick(isClick, cellId, i, itemView) {
                var showText = isClick + cellId;
                alert(showText);
            }
        }, {
            key: "render",
            value: function render() {
                var _this2 = this;

                var dataArr = [];

                for (var i = 0; i < this.props.subject.length; i++) {
                    dataArr.push(_react2.default.createElement(_ETTChooseItemView2.default, {
                        info: {
                            'keyValues': i,
                            'titleName': this.props.subject[i],
                            'cellId': this.props.cellId
                        },
                        callBack: function callBack(isClick, cellId, i, itemView) {
                            return _this2._itemClick(isClick, cellId, i, itemView);
                        },
                        key: i,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 60
                        }
                    }));
                }

                this.myData = dataArr;
                return _react2.default.createElement(
                    _reactNative.View,
                    {
                        style: _ETTChooseItemStyle2.default.container,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 70
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.Text,
                        {
                            style: _ETTChooseItemStyle2.default.titleTextStyle,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 71
                            }
                        },
                        this.props.title
                    ),
                    _react2.default.createElement(
                        _reactNative.View,
                        {
                            style: _ETTChooseItemStyle2.default.itemViewStyle,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 72
                            }
                        },
                        dataArr
                    )
                );
            }
        }]);
        return ETTChooseItemCell;
    }(_react.Component);

    exports.default = ETTChooseItemCell;
},467,[114,12,468,469],"app/common/ETTChooseItemCell.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    var _react = _require(_dependencyMap[0], "react");

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    var _ETTDevice = _require(_dependencyMap[2], "../values/ETTDevice");

    var _ETTDevice2 = babelHelpers.interopRequireDefault(_ETTDevice);

    var _ETTColor = _require(_dependencyMap[3], "../values/ETTColor");

    var _ETTColor2 = babelHelpers.interopRequireDefault(_ETTColor);

    var _ETTInlineFuction = _require(_dependencyMap[4], "../values/ETTInlineFuction");

    var ETTChooseItemStyle = _reactNative.StyleSheet.create({
        container: {
            marginTop: (0, _ETTInlineFuction.scaleSize)(52),
            alignItems: 'center',
            justifyContent: 'center',
            flex: 1,
            left: (0, _ETTInlineFuction.scaleSize)(38),
            width: _ETTDevice2.default.ScreenWidth - (0, _ETTInlineFuction.scaleSize)(40) * 2
        },
        titleTextStyle: {
            fontSize: (0, _ETTInlineFuction.scaleSize)(24),
            color: _ETTColor2.default.f2,
            textAlign: 'left',
            alignSelf: 'flex-start'
        },
        itemViewStyle: {
            flexDirection: 'row',
            alignSelf: 'flex-start',
            marginRight: (0, _ETTInlineFuction.scaleSize)(48),
            marginTop: (0, _ETTInlineFuction.scaleSize)(20),
            alignItems: 'center',
            flexWrap: 'wrap',
            width: _ETTDevice2.default.ScreenWidth - (0, _ETTInlineFuction.scaleSize)(40) * 2
        },
        itemUnSelectStyle: {
            marginLeft: (0, _ETTInlineFuction.scaleSize)(10),
            alignItems: 'center',
            justifyContent: 'center',
            borderWidth: (0, _ETTInlineFuction.scaleSize)(1),
            borderColor: _ETTColor2.default.c7,
            height: (0, _ETTInlineFuction.scaleSize)(60),
            backgroundColor: _ETTColor2.default.white,
            marginTop: (0, _ETTInlineFuction.scaleSize)(10)
        },
        itemSelectStyle: {
            marginLeft: (0, _ETTInlineFuction.scaleSize)(10),
            alignItems: 'center',
            justifyContent: 'center',
            borderWidth: (0, _ETTInlineFuction.scaleSize)(1),
            height: (0, _ETTInlineFuction.scaleSize)(60),
            borderColor: _ETTColor2.default.white,
            backgroundColor: _ETTColor2.default.c6,
            marginTop: (0, _ETTInlineFuction.scaleSize)(10)
        },
        itemTextUnSelectStyle: {
            alignSelf: 'center',
            fontSize: (0, _ETTInlineFuction.scaleSize)(24),
            color: _ETTColor2.default.f2,
            paddingLeft: (0, _ETTInlineFuction.scaleSize)(50),
            paddingRight: (0, _ETTInlineFuction.scaleSize)(50)
        },
        itemTextSelectStyle: {
            alignSelf: 'center',
            fontSize: (0, _ETTInlineFuction.scaleSize)(24),
            color: _ETTColor2.default.white,
            paddingLeft: (0, _ETTInlineFuction.scaleSize)(50),
            paddingRight: (0, _ETTInlineFuction.scaleSize)(50)
        }
    });

    module.exports = ETTChooseItemStyle;
},468,[114,12,342,453,452],"app/res/styles/ETTChooseItemStyle.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = undefined;
    var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/app/common/ETTChooseItemView.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    var _ETTChooseItemStyle = _require(_dependencyMap[2], "../res/styles/ETTChooseItemStyle");

    var _ETTChooseItemStyle2 = babelHelpers.interopRequireDefault(_ETTChooseItemStyle);

    var ETTChooseItemView = function (_Component) {
        babelHelpers.inherits(ETTChooseItemView, _Component);

        function ETTChooseItemView(props) {
            babelHelpers.classCallCheck(this, ETTChooseItemView);

            var _this = babelHelpers.possibleConstructorReturn(this, (ETTChooseItemView.__proto__ || Object.getPrototypeOf(ETTChooseItemView)).call(this, props));

            _this.setUnSelectStatue = _this.setUnSelectStatue.bind(self);
            console.log('我是ETTChooseItemView');
            _this.state = {
                isClick: false
            };
            return _this;
        }

        babelHelpers.createClass(ETTChooseItemView, [{
            key: "_itemClick",
            value: function _itemClick() {
                this.setState({
                    isClick: !this.state.isClick
                });
                this.setOtherCallBack();
            }
        }, {
            key: "setUnSelectStatue",
            value: function setUnSelectStatue() {
                this.setState({
                    isClick: false
                });
            }
        }, {
            key: "_setSubViews",
            value: function _setSubViews() {
                var myKeyValues = this.props.info.keyValues;
                var myCellId = this.props.info.cellId;
                var key = myCellId + '_' + myKeyValues;
                console.log(key);

                if (this.state.isClick) {
                    return _react2.default.createElement(
                        _reactNative.View,
                        {
                            key: key,
                            style: _ETTChooseItemStyle2.default.itemSelectStyle,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 63
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.Text,
                            {
                                style: _ETTChooseItemStyle2.default.itemTextSelectStyle,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 64
                                }
                            },
                            this.props.info.titleName
                        )
                    );
                }

                return _react2.default.createElement(
                    _reactNative.View,
                    {
                        key: key,
                        style: _ETTChooseItemStyle2.default.itemUnSelectStyle,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 70
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.Text,
                        {
                            style: _ETTChooseItemStyle2.default.itemTextUnSelectStyle,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 71
                            }
                        },
                        this.props.info.titleName
                    )
                );
            }
        }, {
            key: "setOtherCallBack",
            value: function setOtherCallBack() {
                var callback = this.props.callBack;

                if (callback) {
                    callback(!this.state.isClick, this.props.info.cellId, this.props.info.keyValues, this.__proto__);
                }
            }
        }, {
            key: "render",
            value: function render() {
                var _this2 = this;

                return _react2.default.createElement(
                    _reactNative.TouchableHighlight,
                    {
                        underlayColor: 'transparent',
                        onPress: function onPress() {
                            return _this2._itemClick();
                        },
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 88
                        }
                    },
                    this._setSubViews()
                );
            }
        }]);
        return ETTChooseItemView;
    }(_react.Component);

    exports.default = ETTChooseItemView;
},469,[114,12,468],"app/common/ETTChooseItemView.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = undefined;
    var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/app/common/ETTCustomButton.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    var _ETTInlineFuction = _require(_dependencyMap[2], "../res/values/ETTInlineFuction");

    var _ETTColor = _require(_dependencyMap[3], "../res/values/ETTColor");

    var _ETTColor2 = babelHelpers.interopRequireDefault(_ETTColor);

    var _ETTDevice = _require(_dependencyMap[4], "../res/values/ETTDevice");

    var _ETTDevice2 = babelHelpers.interopRequireDefault(_ETTDevice);

    var defaultPrefix = 'prefixSelect';
    var enablePrefix = 'prefixEnable';

    var ETTCustomButton = function (_Component) {
        babelHelpers.inherits(ETTCustomButton, _Component);

        function ETTCustomButton(props) {
            babelHelpers.classCallCheck(this, ETTCustomButton);

            var _this = babelHelpers.possibleConstructorReturn(this, (ETTCustomButton.__proto__ || Object.getPrototypeOf(ETTCustomButton)).call(this, props));

            _this.propsArr = [];
            _this.state = {};
            console.log('ETTCustomButton');
            return _this;
        }

        babelHelpers.createClass(ETTCustomButton, [{
            key: "_reloadDisEnable",
            value: function _reloadDisEnable(info) {
                var newState = babelHelpers.extends({}, this.state);

                for (var _iterator = this.propsArr.entries(), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
                    var _ref3;

                    if (_isArray) {
                        if (_i >= _iterator.length) break;
                        _ref3 = _iterator[_i++];
                    } else {
                        _i = _iterator.next();
                        if (_i.done) break;
                        _ref3 = _i.value;
                    }

                    var _ref = _ref3;

                    var _ref2 = babelHelpers.slicedToArray(_ref, 2);

                    var index = _ref2[0];
                    var item = _ref2[1];

                    if (!info.includes(item)) {
                        var type = info[0];
                        var subType = item.substr(0, enablePrefix.length);

                        if (subType == enablePrefix) {
                            newState[item] ? newState[item] = !newState[item] : {};
                            this.setState(newState);
                        }
                    } else {
                        newState[item] ? {} : newState[item] = !newState[item];
                        this.setState(newState);
                    }
                }
            }
        }, {
            key: "_setButtonNumber",
            value: function _setButtonNumber() {
                var newState = babelHelpers.extends({}, this.state);

                for (var _iterator2 = this.props.info.entries(), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
                    var _ref6;

                    if (_isArray2) {
                        if (_i2 >= _iterator2.length) break;
                        _ref6 = _iterator2[_i2++];
                    } else {
                        _i2 = _iterator2.next();
                        if (_i2.done) break;
                        _ref6 = _i2.value;
                    }

                    var _ref4 = _ref6;

                    var _ref5 = babelHelpers.slicedToArray(_ref4, 2);

                    var index = _ref5[0];
                    var item = _ref5[1];
                    var key = defaultPrefix + this.props.index + index;
                    var keyE = enablePrefix + this.props.index + index;
                    newState[key] = false;
                    newState[keyE] = true;
                    this.propsArr.push(key);
                    this.propsArr.push(keyE);
                }

                this.setState(newState);
            }
        }, {
            key: "componentWillMount",
            value: function componentWillMount() {
                this._setButtonNumber();
            }
        }, {
            key: "componentDidMount",
            value: function componentDidMount() {}
        }, {
            key: "_updateBtnSelectedState",
            value: function _updateBtnSelectedState(item, currentSelect, currentEnable, array) {
                if (currentEnable == false) {
                    return;
                }

                if (currentSelect === null || currentSelect === 'undefined' || array === null || array === 'undefined') {
                    return;
                }

                var newState = babelHelpers.extends({}, this.state);

                for (var _iterator3 = array, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
                    var _ref7;

                    if (_isArray3) {
                        if (_i3 >= _iterator3.length) break;
                        _ref7 = _iterator3[_i3++];
                    } else {
                        _i3 = _iterator3.next();
                        if (_i3.done) break;
                        _ref7 = _i3.value;
                    }

                    var type = _ref7;

                    if (currentSelect == type) {
                        newState[type] = !newState[type];
                        this.setState(newState);
                    } else {
                        var subType = type.substr(0, defaultPrefix.length);

                        if (subType == defaultPrefix) {
                            newState[type] ? newState[type] = !newState[type] : {};
                            this.setState(newState);
                        }
                    }
                }

                var callback = this.props.callback;

                if (callback) {
                    callback(item, this.props.index, newState[currentSelect]);
                }
            }
        }, {
            key: "_getButton",
            value: function _getButton(style, selectedSate, stateType, enableState, enableType, item) {
                var _this2 = this;

                var BTN_SELECTED_STATE_ARRAY = this.propsArr;
                var selectedViewStyle = selectedSate ? {
                    backgroundColor: _ETTColor2.default.c6
                } : {};
                var enableViewStyle = enableState ? selectedViewStyle : {
                    backgroundColor: _ETTColor2.default.c2
                };
                var selectedTextStyle = selectedSate ? {
                    color: _ETTColor2.default.white
                } : {};
                var enableTextStyle = enableState ? selectedTextStyle : {
                    color: _ETTColor2.default.c7
                };
                return _react2.default.createElement(
                    _reactNative.View,
                    {
                        style: [style, enableViewStyle],
                        key: item.vid,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 125
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.Text,
                        {
                            style: [styles.itemTextUnSelectStyle, enableTextStyle],
                            onPress: function onPress() {
                                _this2._updateBtnSelectedState(item, stateType, enableState, BTN_SELECTED_STATE_ARRAY);
                            },
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 126
                            }
                        },
                        item.vName
                    )
                );
            }
        }, {
            key: "render",
            value: function render() {
                var buttonArr = [];

                for (var _iterator4 = this.props.info.entries(), _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
                    var _ref10;

                    if (_isArray4) {
                        if (_i4 >= _iterator4.length) break;
                        _ref10 = _iterator4[_i4++];
                    } else {
                        _i4 = _iterator4.next();
                        if (_i4.done) break;
                        _ref10 = _i4.value;
                    }

                    var _ref8 = _ref10;

                    var _ref9 = babelHelpers.slicedToArray(_ref8, 2);

                    var index = _ref9[0];
                    var item = _ref9[1];
                    var key = defaultPrefix + this.props.index + index;
                    var keyE = enablePrefix + this.props.index + index;
                    buttonArr.push(this._getButton(styles.itemUnSelectStyle, this.state[key], key, this.state[keyE], keyE, item));
                }

                return _react2.default.createElement(
                    _reactNative.View,
                    {
                        style: styles.itemViewStyle,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 153
                        }
                    },
                    buttonArr
                );
            }
        }]);
        return ETTCustomButton;
    }(_react.Component);

    exports.default = ETTCustomButton;

    var styles = _reactNative.StyleSheet.create({
        container: {
            flex: 1,
            alignItems: 'center',
            backgroundColor: '#F5FCFF'
        },
        button: {
            height: 30,
            textAlign: 'center',
            textAlignVertical: 'center',
            paddingLeft: 10,
            paddingRight: 10
        },
        buttondivideline: {
            width: 1,
            height: 30,
            backgroundColor: '#32a7f5',
            flexDirection: 'column'
        },
        itemUnSelectStyle: {
            marginLeft: (0, _ETTInlineFuction.scaleSize)(12),
            alignItems: 'center',
            justifyContent: 'center',
            borderWidth: (0, _ETTInlineFuction.scaleSize)(1),
            borderColor: _ETTColor2.default.c7,
            height: (0, _ETTInlineFuction.scaleSize)(60),
            backgroundColor: _ETTColor2.default.white,
            marginTop: (0, _ETTInlineFuction.scaleSize)(24),
            marginBottom: (0, _ETTInlineFuction.scaleSize)(24)
        },
        itemTextUnSelectStyle: {
            alignSelf: 'center',
            fontSize: (0, _ETTInlineFuction.scaleSize)(24),
            color: _ETTColor2.default.f2,
            paddingLeft: (0, _ETTInlineFuction.scaleSize)(70),
            paddingRight: (0, _ETTInlineFuction.scaleSize)(70)
        },
        itemViewStyle: {
            flexDirection: 'row',
            alignSelf: 'flex-start',
            marginLeft: (0, _ETTInlineFuction.scaleSize)(18),
            marginRight: (0, _ETTInlineFuction.scaleSize)(30),
            marginTop: (0, _ETTInlineFuction.scaleSize)(0),
            alignItems: 'center',
            flexWrap: 'wrap',
            width: _ETTDevice2.default.ScreenWidth - (0, _ETTInlineFuction.scaleSize)(40) * 2
        }
    });
},470,[114,12,452,453,342],"app/common/ETTCustomButton.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = _require(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/app/res/images",
    "width": 15,
    "height": 15,
    "scales": [2, 3],
    "hash": "a429fe791f3bb29d2c96a36c5941d4fb",
    "name": "close",
    "type": "png"
  });
},471,[175],"app/res/images/close@2x.png");
__d(function (global, _require, module, exports, _dependencyMap) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = undefined;
    var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/node_modules/react-native-webview2/index.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    var _index = _require(_dependencyMap[2], "./style/index.js");

    var _index2 = babelHelpers.interopRequireDefault(_index);

    var _default = function (_Component) {
        babelHelpers.inherits(_default, _Component);

        function _default(props) {
            babelHelpers.classCallCheck(this, _default);

            var _this = babelHelpers.possibleConstructorReturn(this, (_default.__proto__ || Object.getPrototypeOf(_default)).call(this, props));

            _this.isEnable = _this.props.source && _this.props.source.uri ? true : false;
            _this.state = babelHelpers.extends({}, props, {
                source: _this.props.source,
                pageId: Math.random(),
                nativeJsId: Math.random(),
                style: _this.props.styles ? _this.props.styles : _index2.default.webview
            });
            _this.initJavaScript = _this.initJavaScript.bind(_this);
            _this.onMessage = _this.onMessage.bind(_this);
            _this.setHeight = _this.setHeight.bind(_this);
            _this.evalJs = _this.evalJs.bind(_this);
            _this.evalReturn = _this.evalReturn.bind(_this);
            _this.go = _this.go.bind(_this);
            _this.reload = _this.reload.bind(_this);
            _this.newPageId = _this.newPageId.bind(_this);

            _this.initJavaScript();

            return _this;
        }

        babelHelpers.createClass(_default, [{
            key: "initJavaScript",
            value: function initJavaScript() {
                var autoHeightJsFun = "window.autoHeight = function() {window.returnEval('" + this.state.nativeJsId + ";this.setHeight(' + document.documentElement.offsetHeight + ')');};";
                this.initJsCode = "\n        window.returnEval = function (v) {\n            setTimeout(function() {\n                window.postMessage(String(v));\n            }, 0);\n        };\n        " + autoHeightJsFun + "\n        window.ready = function(){\n            window.autoHeight();\n        };\n        function isComplete() {\n\t\t\tif (document.readyState == \"complete\" && document.documentElement.offsetWidth > 0) {\n\t\t\t\twindow.ready();\n\t\t\t} else {\n\t\t\t\tsetTimeout(isComplete, 100);\n\t\t\t}\n\t\t};\n        isComplete();\n        ";
                this.state.injectedJavaScript = this.initJsCode + this.props.injectedJavaScript;
            }
        }, {
            key: "onMessage",
            value: function onMessage(e) {
                this.props.onMessage && this.props.onMessage(e);
                this.evalReturn(e.nativeEvent.data);
            }
        }, {
            key: "setHeight",
            value: function setHeight(h) {
                this.setState({
                    height: h
                });
            }
        }, {
            key: "evalJs",
            value: function evalJs(js) {
                this.go("javascript: " + js + ";" + Math.random());
            }
        }, {
            key: "evalReturn",
            value: function evalReturn(r) {
                if (this.props.evalReturn && r.indexOf(this.state.nativeJsId) == -1) {
                    this.props.evalReturn(r);
                } else {
                    eval(r);
                }
            }
        }, {
            key: "go",
            value: function go(uri) {
                this.setState({
                    source: {
                        uri: uri
                    }
                });
            }
        }, {
            key: "goForward",
            value: function goForward() {
                this.newPageId();
                this.webview.goForward();
            }
        }, {
            key: "goBack",
            value: function goBack() {
                this.newPageId();
                this.webview.goBack();
            }
        }, {
            key: "stopLoading",
            value: function stopLoading() {
                this.webview.stopLoading();
            }
        }, {
            key: "reload",
            value: function reload() {
                this.newPageId();
                this.webview.reload();
            }
        }, {
            key: "newPageId",
            value: function newPageId() {
                this.setState({
                    pageId: Math.random()
                });
            }
        }, {
            key: "render",
            value: function render() {
                var _this2 = this;

                var height = this.getHeight(this.props.style);
                return _react2.default.createElement(
                    _reactNative.View,
                    {
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 134
                        }
                    },
                    _react2.default.createElement(_reactNative.WebView, babelHelpers.extends({
                        ref: function ref(c) {
                            _this2.webview = c;
                        }
                    }, this.props, {
                        style: [this.state.style, {
                            'height': height
                        }],
                        source: this.state.source,
                        pageId: this.state.pageId,
                        evalReturn: this.evalReturn,
                        injectedJavaScript: this.state.injectedJavaScript,
                        onMessage: this.onMessage,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 135
                        }
                    }))
                );
            }
        }, {
            key: "getHeight",
            value: function getHeight(s) {
                if (s) {
                    if (s.length > 1) {
                        var lastH = -1;

                        for (var _iterator = s, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
                            var _ref;

                            if (_isArray) {
                                if (_i >= _iterator.length) break;
                                _ref = _iterator[_i++];
                            } else {
                                _i = _iterator.next();
                                if (_i.done) break;
                                _ref = _i.value;
                            }

                            var item = _ref;

                            if (item.height) {
                                lastH = item.height;
                            }
                        }

                        if (lastH > 0) {
                            return lastH;
                        }
                    } else if (s.height) {
                        return s.height;
                    }
                }

                return this.state.height;
            }
        }]);
        return _default;
    }(_react.Component);

    exports.default = _default;
},472,[114,12,473],"node_modules/react-native-webview2/index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _reactNative = _require(_dependencyMap[0], "react-native");

    exports.default = _reactNative.StyleSheet.create({
        webview: {
            flexGrow: 1,
            paddingLeft: 5,
            paddingRight: 5
        }
    });
},473,[12],"node_modules/react-native-webview2/style/index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = undefined;
    var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/app/common/ETTCommendMealView.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    var _ETTCourseChooseStyle = _require(_dependencyMap[2], "../res/styles/ETTCourseChooseStyle");

    var _ETTCourseChooseStyle2 = babelHelpers.interopRequireDefault(_ETTCourseChooseStyle);

    var _ETTInlineFuction = _require(_dependencyMap[3], "../res/values/ETTInlineFuction");

    var _ETTRequestModel = _require(_dependencyMap[4], "../mobx/ETTRequestModel");

    var _ETTRequestModel2 = babelHelpers.interopRequireDefault(_ETTRequestModel);

    var _ETTNetworkUtil = _require(_dependencyMap[5], "../utils/ETTNetworkUtil");

    var _ETTNetworkUtil2 = babelHelpers.interopRequireDefault(_ETTNetworkUtil);

    var _ETTNetResponseHelper = _require(_dependencyMap[6], "../utils/ETTNetResponseHelper");

    var _ETTNetResponseHelper2 = babelHelpers.interopRequireDefault(_ETTNetResponseHelper);

    var _ETTURLConfig = _require(_dependencyMap[7], "../res/values/ETTURLConfig");

    var _ETTURLConfig2 = babelHelpers.interopRequireDefault(_ETTURLConfig);

    var _meals = _require(_dependencyMap[8], "../common/meals");

    var _meals2 = babelHelpers.interopRequireDefault(_meals);

    var _ETTDevice = _require(_dependencyMap[9], "../res/values/ETTDevice");

    var _ETTDevice2 = babelHelpers.interopRequireDefault(_ETTDevice);

    var _ETTColor = _require(_dependencyMap[10], "../res/values/ETTColor");

    var _ETTColor2 = babelHelpers.interopRequireDefault(_ETTColor);

    var _Dimensions$get = _reactNative.Dimensions.get('window'),
        width = _Dimensions$get.width,
        height = _Dimensions$get.height;

    var ETTCommendMealView = function (_Component) {
        babelHelpers.inherits(ETTCommendMealView, _Component);

        function ETTCommendMealView(props) {
            babelHelpers.classCallCheck(this, ETTCommendMealView);

            var _this = babelHelpers.possibleConstructorReturn(this, (ETTCommendMealView.__proto__ || Object.getPrototypeOf(ETTCommendMealView)).call(this, props));

            console.log('ETTCommendMealView');
            _this.state = {
                offset: new _reactNative.Animated.Value(0),
                opacity: new _reactNative.Animated.Value(0),
                hide: true,
                dataSource: _meals2.default.data
            };
            return _this;
        }

        babelHelpers.createClass(ETTCommendMealView, [{
            key: "_callBack",
            value: function _callBack() {
                this.out();
                var callBack = this.props.callback;

                if (callBack) {
                    callBack();
                }
            }
        }, {
            key: "componentWillMount",
            value: function componentWillMount() {
                console.log('ETTCommendMealView');
                this.setState({
                    hide: false
                }, this.in);
            }
        }, {
            key: "componentDidMount",
            value: function componentDidMount() {}
        }, {
            key: "requestData",
            value: function requestData() {
                var _this2 = this;

                var goodsId = this.props.goodsesId ? this.props.goodsesId : '';

                if (goodsId.length == 0) {
                    alert('参数为空');
                } else {
                    var requetModel = new _ETTRequestModel2.default();
                    requetModel.Path = _ETTURLConfig2.default.SERVICE_TRADING + _ETTURLConfig2.default.goodses_detail + goodsId + '/packages';
                    requetModel.BodyData = "";
                    requetModel.getInfo = requetModel.getAuthorizationRequesetDataGetWay();

                    _ETTNetworkUtil2.default.getForm(requetModel).then(function (json) {
                        var result = _ETTNetResponseHelper2.default.responseJson(json);

                        alert(json);

                        if (result.code != 1) {} else {
                            _this2.setState({
                                dataSource: result.data.packages
                            });
                        }
                    }, function (json) {
                        var result = _ETTNetResponseHelper2.default.requestFailJson(json);

                        alert(result.msg);
                    });
                }
            }
        }, {
            key: "render",
            value: function render() {
                var _this3 = this;

                if (this.state.hide) {
                    return _react2.default.createElement(_reactNative.View, {
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 101
                        }
                    });
                } else {
                    var imgArr = [];
                    var skuNameArr = [];

                    for (var _iterator = this.props.info.units.entries(), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
                        var _ref3;

                        if (_isArray) {
                            if (_i >= _iterator.length) break;
                            _ref3 = _iterator[_i++];
                        } else {
                            _i = _iterator.next();
                            if (_i.done) break;
                            _ref3 = _i.value;
                        }

                        var _ref = _ref3;

                        var _ref2 = babelHelpers.slicedToArray(_ref, 2);

                        var index = _ref2[0];
                        var item = _ref2[1];
                        var price = '￥' + item.marketPrice ? item.marketPrice : 0;
                        imgArr.push(_react2.default.createElement(_reactNative.Image, {
                            key: index + 10086,
                            source: {
                                uri: item.pictures
                            },
                            style: {
                                width: (0, _ETTInlineFuction.scaleSize)(186),
                                height: (0, _ETTInlineFuction.scaleSize)(168),
                                marginTop: (0, _ETTInlineFuction.scaleSize)(48),
                                marginLeft: (0, _ETTInlineFuction.scaleSize)(33),
                                borderRadius: 4
                            },
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 108
                            }
                        }));
                        skuNameArr.push(_react2.default.createElement(
                            _reactNative.View,
                            {
                                style: {
                                    justifyContent: 'space-between',
                                    width: _ETTDevice2.default.ScreenWidth,
                                    flexDirection: 'row'
                                },
                                key: index,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 109
                                }
                            },
                            _react2.default.createElement(
                                _reactNative.Text,
                                {
                                    style: {
                                        marginTop: (0, _ETTInlineFuction.scaleSize)(36),
                                        marginLeft: (0, _ETTInlineFuction.scaleSize)(30),
                                        fontSize: (0, _ETTInlineFuction.scaleSize)(24),
                                        width: _ETTDevice2.default.ScreenWidth - (0, _ETTInlineFuction.scaleSize)(200)
                                    },
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 110
                                    }
                                },
                                item.skuName
                            ),
                            _react2.default.createElement(
                                _reactNative.Text,
                                {
                                    style: {
                                        marginTop: (0, _ETTInlineFuction.scaleSize)(36),
                                        marginRight: (0, _ETTInlineFuction.scaleSize)(30),
                                        color: _ETTColor2.default.c3,
                                        fontSize: (0, _ETTInlineFuction.scaleSize)(24)
                                    },
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 111
                                    }
                                },
                                " \uFFE5",
                                price
                            )
                        ));
                    }

                    return _react2.default.createElement(
                        _reactNative.View,
                        {
                            style: _ETTCourseChooseStyle2.default.container,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 117
                            }
                        },
                        _react2.default.createElement(_reactNative.Animated.View, {
                            style: _ETTCourseChooseStyle2.default.mask,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 118
                            }
                        }),
                        _react2.default.createElement(
                            _reactNative.Animated.View,
                            {
                                style: [_ETTCourseChooseStyle2.default.tip, {
                                    transform: [{
                                        translateY: this.state.offset.interpolate({
                                            inputRange: [0, 1],
                                            outputRange: [height, (0, _ETTInlineFuction.scaleSize)(545)]
                                        })
                                    }]
                                }],
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 119
                                }
                            },
                            _react2.default.createElement(
                                _reactNative.View,
                                {
                                    style: _ETTCourseChooseStyle2.default.mealCourseContain,
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 126
                                    }
                                },
                                _react2.default.createElement(
                                    _reactNative.View,
                                    {
                                        style: _ETTCourseChooseStyle2.default.courseTopViewStyle,
                                        __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 127
                                        }
                                    },
                                    _react2.default.createElement(
                                        _reactNative.Text,
                                        {
                                            style: _ETTCourseChooseStyle2.default.courseTitleStyle,
                                            __source: {
                                                fileName: _jsxFileName,
                                                lineNumber: 128
                                            }
                                        },
                                        this.props.info.goodsName
                                    ),
                                    _react2.default.createElement(
                                        _reactNative.TouchableOpacity,
                                        {
                                            onPress: function onPress() {
                                                _this3._callBack();
                                            },
                                            __source: {
                                                fileName: _jsxFileName,
                                                lineNumber: 131
                                            }
                                        },
                                        _react2.default.createElement(_reactNative.Image, {
                                            style: _ETTCourseChooseStyle2.default.courseTopCloseStyle,
                                            source: _require(_dependencyMap[11], '../res/images/close.png'),
                                            __source: {
                                                fileName: _jsxFileName,
                                                lineNumber: 134
                                            }
                                        })
                                    )
                                ),
                                _react2.default.createElement(
                                    _reactNative.ScrollView,
                                    {
                                        style: {
                                            flexDirection: 'column'
                                        },
                                        __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 139
                                        }
                                    },
                                    _react2.default.createElement(
                                        _reactNative.View,
                                        {
                                            style: {
                                                width: _ETTDevice2.default.ScreenWidth,
                                                flexDirection: 'row',
                                                marginLeft: (0, _ETTInlineFuction.scaleSize)(30),
                                                width: _ETTDevice2.default.ScreenWidth - (0, _ETTInlineFuction.scaleSize)(30) * 2
                                            },
                                            __source: {
                                                fileName: _jsxFileName,
                                                lineNumber: 141
                                            }
                                        },
                                        imgArr
                                    ),
                                    _react2.default.createElement(_reactNative.Text, {
                                        style: {
                                            marginLeft: (0, _ETTInlineFuction.scaleSize)(30),
                                            marginRight: (0, _ETTInlineFuction.scaleSize)(30),
                                            height: (0, _ETTInlineFuction.scaleSize)(0.3),
                                            backgroundColor: _ETTColor2.default.l1,
                                            marginTop: (0, _ETTInlineFuction.scaleSize)(30),
                                            width: _ETTDevice2.default.ScreenWidth - (0, _ETTInlineFuction.scaleSize)(30) * 2
                                        },
                                        __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 145
                                        }
                                    }),
                                    _react2.default.createElement(
                                        _reactNative.View,
                                        {
                                            style: {
                                                flexDirection: 'column'
                                            },
                                            __source: {
                                                fileName: _jsxFileName,
                                                lineNumber: 147
                                            }
                                        },
                                        skuNameArr
                                    ),
                                    _react2.default.createElement(
                                        _reactNative.View,
                                        {
                                            style: {
                                                flexDirection: 'row',
                                                marginTop: (0, _ETTInlineFuction.scaleSize)(42)
                                            },
                                            __source: {
                                                fileName: _jsxFileName,
                                                lineNumber: 153
                                            }
                                        },
                                        _react2.default.createElement(
                                            _reactNative.Text,
                                            {
                                                style: {
                                                    marginLeft: (0, _ETTInlineFuction.scaleSize)(250),
                                                    color: _ETTColor2.default.f2,
                                                    fontSize: (0, _ETTInlineFuction.scaleSize)(24)
                                                },
                                                __source: {
                                                    fileName: _jsxFileName,
                                                    lineNumber: 154
                                                }
                                            },
                                            "\u5957\u9910\u4EF7"
                                        ),
                                        _react2.default.createElement(
                                            _reactNative.Text,
                                            {
                                                style: {
                                                    color: _ETTColor2.default.c3,
                                                    fontSize: (0, _ETTInlineFuction.scaleSize)(24)
                                                },
                                                __source: {
                                                    fileName: _jsxFileName,
                                                    lineNumber: 157
                                                }
                                            },
                                            "\uFFE5",
                                            this.props.info.marketPrice
                                        ),
                                        _react2.default.createElement(
                                            _reactNative.Text,
                                            {
                                                style: {
                                                    color: _ETTColor2.default.f2,
                                                    fontSize: (0, _ETTInlineFuction.scaleSize)(24)
                                                },
                                                __source: {
                                                    fileName: _jsxFileName,
                                                    lineNumber: 160
                                                }
                                            },
                                            "  \u53EF\u8282\u7701"
                                        ),
                                        _react2.default.createElement(
                                            _reactNative.Text,
                                            {
                                                style: {
                                                    color: _ETTColor2.default.c3,
                                                    fontSize: (0, _ETTInlineFuction.scaleSize)(24)
                                                },
                                                __source: {
                                                    fileName: _jsxFileName,
                                                    lineNumber: 161
                                                }
                                            },
                                            "\uFFE5",
                                            this.props.info.packageDiscount
                                        ),
                                        _react2.default.createElement(
                                            _reactNative.Text,
                                            {
                                                style: {
                                                    textDecorationLine: 'line-through',
                                                    color: _ETTColor2.default.f2,
                                                    fontSize: (0, _ETTInlineFuction.scaleSize)(24),
                                                    marginLeft: (0, _ETTInlineFuction.scaleSize)(20)
                                                },
                                                __source: {
                                                    fileName: _jsxFileName,
                                                    lineNumber: 164
                                                }
                                            },
                                            "\u539F\u4EF7\uFFE5",
                                            this.props.info.amount
                                        )
                                    )
                                )
                            )
                        )
                    );
                }
            }
        }, {
            key: "in",
            value: function _in() {
                _reactNative.Animated.parallel([_reactNative.Animated.timing(this.state.opacity, {
                    easing: _reactNative.Easing.linear,
                    duration: 500,
                    toValue: 0.8
                }), _reactNative.Animated.timing(this.state.offset, {
                    easing: _reactNative.Easing.linear,
                    duration: 500,
                    toValue: 1
                })]).start();
            }
        }, {
            key: "out",
            value: function out() {
                _reactNative.Animated.parallel([_reactNative.Animated.timing(this.state.opacity, {
                    easing: _reactNative.Easing.linear,
                    duration: 500,
                    toValue: 0
                }), _reactNative.Animated.timing(this.state.offset, {
                    easing: _reactNative.Easing.linear,
                    duration: 500,
                    toValue: 0
                })]).start();
            }
        }, {
            key: "close",
            value: function close() {
                if (!this.state.hide) {
                    this.out();
                }
            }
        }]);
        return ETTCommendMealView;
    }(_react.Component);

    exports.default = ETTCommendMealView;
},474,[114,12,466,452,361,362,369,360,475,342,453,471],"app/common/ETTCommendMealView.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = {
    "code": 1,
    "msg": "操作成功",
    "data": [{
      "goodsId": 13,
      "goodsName": "初二数学物理套餐",
      "type": null,
      "isBuy": 0,
      "marketPrice": 2.0,
      "packageDiscount": 3358.0,
      "amount": 3360.0,
      "units": [{
        "goodsId": 10,
        "skuId": "PBH2018042800010004",
        "skuName": "智慧课堂(初中)",
        "isBuy": 0,
        "marketPrice": 1680.0,
        "shopPrice": 1.0,
        "properties": "1001:5;1002:8",
        "propertiesName": "年级:初二;学科:物理",
        "propertyName": "初二 物理",
        "pictures": "http://ke.etiantian.com/attach/goods/sku/PBH2018042800010004.png"
      }, {
        "goodsId": 10,
        "skuId": "PBH2018042800010002",
        "skuName": "智慧课堂(初中)",
        "isBuy": 0,
        "marketPrice": 1680.0,
        "shopPrice": 1.0,
        "properties": "1001:5;1002:7",
        "propertiesName": "年级:初二;学科:数学",
        "propertyName": "初二 数学",
        "pictures": "http://ke.etiantian.com/attach/goods/sku/PBH2018042800010002.png"
      }]
    }]
  };
},475,[],"app/common/meals.json");
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = undefined;
    var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/app/common/ETTBottomPayView.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    var _ETTProductDeatilStyle = _require(_dependencyMap[2], "../res/styles/ETTProductDeatilStyle");

    var _ETTProductDeatilStyle2 = babelHelpers.interopRequireDefault(_ETTProductDeatilStyle);

    var ETTBottomPayView = function (_Component) {
        babelHelpers.inherits(ETTBottomPayView, _Component);

        function ETTBottomPayView(props) {
            babelHelpers.classCallCheck(this, ETTBottomPayView);

            var _this = babelHelpers.possibleConstructorReturn(this, (ETTBottomPayView.__proto__ || Object.getPrototypeOf(ETTBottomPayView)).call(this, props));

            _this.state = {};
            return _this;
        }

        babelHelpers.createClass(ETTBottomPayView, [{
            key: "changePrice",
            value: function changePrice() {}
        }, {
            key: "jumpToPayView",
            value: function jumpToPayView() {
                var callback = this.props.callback;

                if (callback) {
                    callback();
                }
            }
        }, {
            key: "render",
            value: function render() {
                var _this2 = this;

                return _react2.default.createElement(
                    _reactNative.View,
                    {
                        style: _ETTProductDeatilStyle2.default.payForItemViewStyle,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 36
                        }
                    },
                    _react2.default.createElement(_reactNative.View, {
                        style: _ETTProductDeatilStyle2.default.payLineStyle,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 37
                        }
                    }),
                    _react2.default.createElement(
                        _reactNative.View,
                        {
                            style: _ETTProductDeatilStyle2.default.payForItemSubViewStyle,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 38
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.Text,
                            {
                                style: _ETTProductDeatilStyle2.default.payForItemPriceStyle,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 39
                                }
                            },
                            "\u4EF7\u683C:\uFFE5",
                            this.props.price
                        ),
                        _react2.default.createElement(
                            _reactNative.TouchableOpacity,
                            {
                                onPress: function onPress() {
                                    {
                                        _this2.jumpToPayView();
                                    }
                                },
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 42
                                }
                            },
                            _react2.default.createElement(
                                _reactNative.View,
                                {
                                    style: _ETTProductDeatilStyle2.default.payForItemImmediateBuyViewStyle,
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 45
                                    }
                                },
                                _react2.default.createElement(
                                    _reactNative.Text,
                                    {
                                        style: _ETTProductDeatilStyle2.default.payForItemImmediateBuyTextStyle,
                                        __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 46
                                        }
                                    },
                                    this.props.title
                                )
                            )
                        )
                    )
                );
            }
        }]);
        return ETTBottomPayView;
    }(_react.Component);

    exports.default = ETTBottomPayView;
},476,[114,12,464],"app/common/ETTBottomPayView.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = {
    "code": 1,
    "msg": "操作成功",
    "data": {
      "goodsesId": "PBH201804280001",
      "name": "智慧课堂（初中）",
      "introduction": "北京四中名师主讲精彩课程，AI自适应智慧学习",
      "marketPrice": "1580-1780",
      "discountedPrice": "",
      "mainPicture": "http://ke.etiantian.com/attach/goods/PBH201804280001.png",
      "describes": [{
        "lableName": "课堂介绍",
        "picture": "http://ke.etiantian.com/attach/goods/detail/PBH201804280001-1.png",
        "lableId": 1
      }, {
        "lableName": "课堂介绍",
        "picture": "http://ke.etiantian.com/attach/goods/detail/PBH201804280001-2.png",
        "lableId": 1
      }, {
        "lableName": "酷蒙名师",
        "picture": "http://ke.etiantian.com/attach/goods/detail/PBH201804280001-3.png",
        "lableId": 2
      }, {
        "lableName": "课程规格",
        "picture": "http://ke.etiantian.com/attach/goods/detail/PBH201804280001-4.png",
        "lableId": 3
      }, {
        "lableName": "课堂介绍",
        "picture": "http://ke.etiantian.com/attach/goods/detail/PBH201804280001-5.png",
        "lableId": 1
      }, {
        "lableName": "购买须知",
        "picture": "http://ke.etiantian.com/attach/goods/detail/PBH201804280001-6.png",
        "lableId": 4
      }],
      "properties": [{
        "pid": 1001,
        "pName": "年级",
        "isSale": 1,
        "valueList": [{
          "vid": 6,
          "vName": "初一"
        }, {
          "vid": 5,
          "vName": "初二"
        }, {
          "vid": 4,
          "vName": "初三"
        }]
      }, {
        "pid": 1002,
        "pName": "学科",
        "isSale": 1,
        "valueList": [{
          "vid": 7,
          "vName": "数学"
        }, {
          "vid": 8,
          "vName": "物理"
        }, {
          "vid": 9,
          "vName": "化学"
        }]
      }],
      "goodsList": [{
        "goodsId": 12,
        "skuId": "PBH2018042800010001",
        "skuName": "初一数学智慧课堂",
        "isBuy": 0,
        "marketPrice": 1580.0,
        "shopPrice": 1.0,
        "properties": "1001:6;1002:7",
        "propertiesName": "年级:初一;学科:数学",
        "propertyName": "初一 数学",
        "pictures": "http://ke.etiantian.com/attach/goods/sku/PBH2018042800010001.png"
      }, {
        "goodsId": 10,
        "skuId": "PBH2018042800010002",
        "skuName": "初二数学智慧课堂",
        "isBuy": 0,
        "marketPrice": 1680.0,
        "shopPrice": 1.0,
        "properties": "1001:5;1002:7",
        "propertiesName": "年级:初二;学科:数学",
        "propertyName": "初二 数学",
        "pictures": "http://ke.etiantian.com/attach/goods/sku/PBH2018042800010002.png"
      }, {
        "goodsId": 2,
        "skuId": "PBH2018042800010003",
        "skuName": "初三数学智慧课堂",
        "isBuy": 0,
        "marketPrice": 1780.0,
        "shopPrice": 1.0,
        "properties": "1001:4;1002:7",
        "propertiesName": "年级:初三;学科:数学",
        "propertyName": "初三 数学",
        "pictures": "http://ke.etiantian.com/attach/goods/sku/PBH2018042800010003.png"
      }, {
        "goodsId": 4,
        "skuId": "PBH2018042800010004",
        "skuName": "初二物理智慧课堂",
        "isBuy": 0,
        "marketPrice": 1680.0,
        "shopPrice": 1.0,
        "properties": "1001:5;1002:8",
        "propertiesName": "年级:初二;学科:物理",
        "propertyName": "初二 物理",
        "pictures": "http://ke.etiantian.com/attach/goods/sku/PBH2018042800010004.png"
      }, {
        "goodsId": 11,
        "skuId": "PBH2018042800010005",
        "skuName": "初三物理智慧课堂",
        "isBuy": 0,
        "marketPrice": 1780.0,
        "shopPrice": 1.0,
        "properties": "1001:4;1002:8",
        "propertiesName": "年级:初三;学科:物理",
        "propertyName": "初三 物理",
        "pictures": "http://ke.etiantian.com/attach/goods/sku/PBH2018042800010005.png"
      }, {
        "goodsId": 3,
        "skuId": "PBH2018042800010006",
        "skuName": "初三化学智慧课堂",
        "isBuy": 0,
        "marketPrice": 1780.0,
        "shopPrice": 1.0,
        "properties": "1001:4;1002:9",
        "propertiesName": "年级:初三;学科:化学",
        "propertyName": "初三 化学",
        "pictures": "http://ke.etiantian.com/attach/goods/sku/PBH2018042800010006.png"
      }]
    }
  };
},477,[],"app/common/productDeatil.json");
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = {
    "code": 1,
    "msg": "操作成功",
    "data": [{
      "activityId": 1,
      "activityName": "奔驰会员享受8.5折优惠"
    }]
  };
},478,[],"app/common/activity.json");
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = undefined;
    var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/app/common/ETTSubjectTimeList.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    var _ETTExpandableList = _require(_dependencyMap[2], "./ETTExpandableList");

    var _ETTExpandableList2 = babelHelpers.interopRequireDefault(_ETTExpandableList);

    var _ETTDevice = _require(_dependencyMap[3], "../res/values/ETTDevice");

    var _ETTDevice2 = babelHelpers.interopRequireDefault(_ETTDevice);

    var _ETTInlineFuction = _require(_dependencyMap[4], "../res/values/ETTInlineFuction");

    function formatNum(s) {
        var ss = parseInt(s);
        return ss >> 0 < 10 ? "0" + ss : ss;
    }

    var ETTSubjectTimeList = function (_PureComponent) {
        babelHelpers.inherits(ETTSubjectTimeList, _PureComponent);

        function ETTSubjectTimeList(props) {
            babelHelpers.classCallCheck(this, ETTSubjectTimeList);

            var _this = babelHelpers.possibleConstructorReturn(this, (ETTSubjectTimeList.__proto__ || Object.getPrototypeOf(ETTSubjectTimeList)).call(this, props));

            _this._renderGroupListItem = _this._renderGroupListItem.bind(_this);
            _this._renderGroupHeader = _this._renderGroupHeader.bind(_this);
            return _this;
        }

        babelHelpers.createClass(ETTSubjectTimeList, [{
            key: "_listItemClick",
            value: function _listItemClick() {
                alert('试听');
            }
        }, {
            key: "_renderGroupListItem",
            value: function _renderGroupListItem(_ref) {
                var _this2 = this;

                var item = _ref.item,
                    groupId = _ref.groupId,
                    rowId = _ref.rowId;
                var headImg = item.headImg,
                    nickName = item.nickName,
                    onlineType = item.onlineType,
                    signature = item.signature;
                return _react2.default.createElement(
                    _reactNative.View,
                    {
                        style: styles.listItemContainer,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 40
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.View,
                        {
                            style: {
                                flexDirection: 'row'
                            },
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 41
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.Text,
                            {
                                style: styles.numStyle,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 42
                                }
                            },
                            formatNum(rowId + 1),
                            "."
                        ),
                        _react2.default.createElement(
                            _reactNative.Text,
                            {
                                style: styles.headerTitle,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 43
                                }
                            },
                            "nickName"
                        ),
                        _react2.default.createElement(
                            _reactNative.TouchableOpacity,
                            {
                                onPress: function onPress() {
                                    return _this2._listItemClick();
                                },
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 44
                                }
                            },
                            _react2.default.createElement(
                                _reactNative.View,
                                {
                                    style: styles.listenView,
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 45
                                    }
                                },
                                _react2.default.createElement(
                                    _reactNative.Text,
                                    {
                                        style: styles.tryListenText,
                                        __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 46
                                        }
                                    },
                                    "\u8BD5\u542C"
                                )
                            )
                        )
                    ),
                    _react2.default.createElement(
                        _reactNative.View,
                        {
                            style: {
                                flexDirection: 'row'
                            },
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 50
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.Text,
                            {
                                style: styles.videoType,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 51
                                }
                            },
                            "\u76F4\u64AD"
                        ),
                        _react2.default.createElement(_reactNative.View, {
                            style: styles.intervalLine,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 52
                            }
                        }),
                        _react2.default.createElement(
                            _reactNative.Text,
                            {
                                style: styles.videoTime,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 53
                                }
                            },
                            "06.17 10:00-12:00"
                        )
                    )
                );
            }
        }, {
            key: "_renderGroupHeader",
            value: function _renderGroupHeader(_ref2) {
                var item = _ref2.item,
                    groupId = _ref2.groupId,
                    status = _ref2.status,
                    toggleStatus = _ref2.toggleStatus;
                var title = item.title,
                    online = item.online,
                    total = item.total;
                var arrowImage = status ? _require(_dependencyMap[5], '../res/images/xingzhuang2.png') : _require(_dependencyMap[6], '../res/images/xingzhuang1.png');
                return _react2.default.createElement(
                    _reactNative.TouchableOpacity,
                    {
                        onPress: function onPress() {
                            return toggleStatus();
                        },
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 68
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.View,
                        {
                            style: styles.groupHeader,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 69
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.Text,
                            {
                                style: styles.groupTitleText,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 70
                                }
                            },
                            "\u76F4\u7EBF\u4E0E\u76F8\u4EA4\u7EBF"
                        ),
                        _react2.default.createElement(_reactNative.Image, {
                            style: styles.groupTitleArrow,
                            source: arrowImage,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 71
                            }
                        })
                    )
                );
            }
        }, {
            key: "render",
            value: function render() {
                var _props$data = this.props.data,
                    data = _props$data === undefined ? [] : _props$data;
                return _react2.default.createElement(
                    _reactNative.View,
                    {
                        style: {
                            flex: 1
                        },
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 83
                        }
                    },
                    _react2.default.createElement(_ETTExpandableList2.default, {
                        style: {
                            width: _ETTDevice2.default.ScreenWidth
                        },
                        data: data,
                        initialOpenGroups: [0],
                        implementedBy: 'ListView',
                        renderGroupHeader: this._renderGroupHeader,
                        renderGroupListItem: this._renderGroupListItem,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 84
                        }
                    })
                );
            }
        }]);
        return ETTSubjectTimeList;
    }(_react.PureComponent);

    exports.default = ETTSubjectTimeList;

    var styles = _reactNative.StyleSheet.create({
        groupHeader: {
            backgroundColor: 'white',
            flex: 1,
            marginLeft: (0, _ETTInlineFuction.scaleSize)(30),
            marginRight: (0, _ETTInlineFuction.scaleSize)(30),
            flexDirection: 'row',
            justifyContent: 'space-between',
            alignItems: 'center',
            borderBottomWidth: 1,
            borderBottomColor: '#ECECEC'
        },
        groupTitle: {
            flexDirection: 'row',
            alignItems: 'center'
        },
        groupTitleArrow: {
            width: (0, _ETTInlineFuction.scaleSize)(19),
            height: (0, _ETTInlineFuction.scaleSize)(12),
            marginTop: (0, _ETTInlineFuction.scaleSize)(25),
            marginRight: (0, _ETTInlineFuction.scaleSize)(67),
            marginBottom: (0, _ETTInlineFuction.scaleSize)(40)
        },
        groupTitleText: {
            color: '#333333',
            fontSize: (0, _ETTInlineFuction.scaleSize)(32),
            fontWeight: 'normal',
            marginLeft: 0,
            marginTop: (0, _ETTInlineFuction.scaleSize)(30),
            marginBottom: (0, _ETTInlineFuction.scaleSize)(30),
            width: _ETTDevice2.default.ScreenWidth - (0, _ETTInlineFuction.scaleSize)(30) * 3
        },
        listItemContainer: {
            marginLeft: (0, _ETTInlineFuction.scaleSize)(30),
            marginRight: (0, _ETTInlineFuction.scaleSize)(30),
            backgroundColor: 'white',
            flexDirection: 'column',
            borderBottomWidth: 1,
            borderBottomColor: '#ECECEC'
        },
        numStyle: {
            marginLeft: 0,
            marginTop: (0, _ETTInlineFuction.scaleSize)(51),
            width: (0, _ETTInlineFuction.scaleSize)(40),
            height: (0, _ETTInlineFuction.scaleSize)(50),
            color: '#999999',
            fontSize: (0, _ETTInlineFuction.scaleSize)(26)
        },
        headerTitle: {
            marginLeft: (0, _ETTInlineFuction.scaleSize)(40),
            marginTop: (0, _ETTInlineFuction.scaleSize)(45),
            marginRight: (0, _ETTInlineFuction.scaleSize)(329),
            color: '#333333',
            fontSize: (0, _ETTInlineFuction.scaleSize)(32)
        },
        listenView: {
            marginTop: (0, _ETTInlineFuction.scaleSize)(45),
            borderRadius: 4,
            borderColor: '#00ADEF',
            borderWidth: 1,
            marginRight: 0,
            width: (0, _ETTInlineFuction.scaleSize)(88),
            height: (0, _ETTInlineFuction.scaleSize)(50)
        },
        tryListenText: {
            paddingHorizontal: (0, _ETTInlineFuction.scaleSize)(20),
            paddingVertical: (0, _ETTInlineFuction.scaleSize)(9),
            color: '#00ADEF',
            fontSize: (0, _ETTInlineFuction.scaleSize)(24)
        },
        videoType: {
            marginTop: (0, _ETTInlineFuction.scaleSize)(21),
            marginLeft: (0, _ETTInlineFuction.scaleSize)(76),
            color: '#999999',
            fontSize: (0, _ETTInlineFuction.scaleSize)(26),
            marginBottom: (0, _ETTInlineFuction.scaleSize)(46)
        },
        intervalLine: {
            marginTop: (0, _ETTInlineFuction.scaleSize)(23),
            marginLeft: (0, _ETTInlineFuction.scaleSize)(23),
            backgroundColor: '#ECECEC',
            height: (0, _ETTInlineFuction.scaleSize)(22),
            width: 1
        },
        videoTime: {
            marginTop: (0, _ETTInlineFuction.scaleSize)(21),
            marginLeft: (0, _ETTInlineFuction.scaleSize)(24),
            color: '#999999',
            fontSize: (0, _ETTInlineFuction.scaleSize)(26)
        },
        lineStyle: {
            marginLeft: (0, _ETTInlineFuction.scaleSize)(30),
            width: _ETTDevice2.default.ScreenWidth - (0, _ETTInlineFuction.scaleSize)(30) * 2,
            backgroundColor: '#ECECEC',
            marginTop: (0, _ETTInlineFuction.scaleSize)(51)
        }
    });
},479,[114,12,480,342,452,481,482],"app/common/ETTSubjectTimeList.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = undefined;
    var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/app/common/ETTExpandableList.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    var ETTExpandableList = function (_Component) {
        babelHelpers.inherits(ETTExpandableList, _Component);

        function ETTExpandableList(props) {
            babelHelpers.classCallCheck(this, ETTExpandableList);

            var _this = babelHelpers.possibleConstructorReturn(this, (ETTExpandableList.__proto__ || Object.getPrototypeOf(ETTExpandableList)).call(this, props));

            _this.state = {
                groupStatus: _this._getInitialGroupStatus()
            };
            _this.closeAll = _this.closeAll.bind(_this);
            _this.toggleGroupStatus = _this.toggleGroupStatus.bind(_this);
            _this._supportFlatList = _this._supportFlatList.bind(_this);
            _this._renderGroupItem = _this._renderGroupItem.bind(_this);
            _this._renderFlatListItem = _this._renderFlatListItem.bind(_this);
            _this._renderListViewItem = _this._renderListViewItem.bind(_this);
            _this._renderUsingView = _this._renderUsingView.bind(_this);
            _this._renderUsingFlatList = _this._renderUsingFlatList.bind(_this);
            _this._renderUsingListView = _this._renderUsingListView.bind(_this);
            return _this;
        }

        babelHelpers.createClass(ETTExpandableList, [{
            key: "componentWillUpdate",
            value: function componentWillUpdate() {
                _reactNative.LayoutAnimation.easeInEaseOut();
            }
        }, {
            key: "_supportFlatList",
            value: function _supportFlatList() {
                return !!_reactNative.FlatList;
            }
        }, {
            key: "_getInitialGroupStatus",
            value: function _getInitialGroupStatus() {
                var _props = this.props,
                    _props$initialOpenGro = _props.initialOpenGroup,
                    initialOpenGroup = _props$initialOpenGro === undefined ? [] : _props$initialOpenGro,
                    _props$data = _props.data,
                    data = _props$data === undefined ? [] : _props$data;
                return new Array(data.length).fill(false).map(function (item, index) {
                    return initialOpenGroup.indexOf(index) !== -1;
                });
            }
        }, {
            key: "closeAll",
            value: function closeAll() {
                this.setState({
                    groupStatus: this.state.groupStatus.map(function () {
                        return false;
                    })
                });
            }
        }, {
            key: "toggleGroupStatus",
            value: function toggleGroupStatus(index, closeOthers) {
                var newGroupStatus = this.state.groupStatus.map(function (status, idx) {
                    return idx !== index ? closeOthers ? false : status : !status;
                });
                this.setState({
                    groupStatus: newGroupStatus
                });
            }
        }, {
            key: "_renderGroupItem",
            value: function _renderGroupItem(groupItem, groupId) {
                var status = this.state.groupStatus[groupId];
                var _groupItem$groupHeade = groupItem.groupHeaderData,
                    groupHeaderData = _groupItem$groupHeade === undefined ? [] : _groupItem$groupHeade,
                    _groupItem$groupListD = groupItem.groupListData,
                    groupListData = _groupItem$groupListD === undefined ? [] : _groupItem$groupListD;
                var _props2 = this.props,
                    renderGroupHeader = _props2.renderGroupHeader,
                    renderGroupListItem = _props2.renderGroupListItem,
                    groupStyle = _props2.groupStyle,
                    groupSpacing = _props2.groupSpacing;
                var groupHeader = renderGroupHeader && renderGroupHeader({
                    status: status,
                    groupId: groupId,
                    item: groupHeaderData,
                    toggleStatus: this.toggleGroupStatus.bind(this, groupId)
                });

                var gruopBody = groupListData.length > 0 && _react2.default.createElement(
                    _reactNative.ScrollView,
                    {
                        bounces: false,
                        style: !status && {
                            height: 0
                        },
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 83
                        }
                    },
                    groupListData.map(function (listItem, index) {
                        return _react2.default.createElement(
                            _reactNative.View,
                            {
                                key: "gid:" + groupId + "-rid:" + index,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 85
                                }
                            },
                            renderGroupListItem && renderGroupListItem({
                                item: listItem,
                                rowId: index,
                                groupId: groupId
                            })
                        );
                    })
                );

                return _react2.default.createElement(
                    _reactNative.View,
                    {
                        key: "group-" + groupId,
                        style: [groupStyle, groupId && groupSpacing && {
                            marginTop: groupSpacing
                        }],
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 101
                        }
                    },
                    groupHeader,
                    gruopBody
                );
            }
        }, {
            key: "_renderFlatListItem",
            value: function _renderFlatListItem(_ref) {
                var item = _ref.item,
                    index = _ref.index;
                return this._renderGroupItem(item, index);
            }
        }, {
            key: "_renderListViewItem",
            value: function _renderListViewItem(rowData, groupId, rowId) {
                return this._renderGroupItem(rowData, parseInt(rowId));
            }
        }, {
            key: "_renderUsingFlatList",
            value: function _renderUsingFlatList() {
                var _props3 = this.props,
                    _props3$data = _props3.data,
                    data = _props3$data === undefined ? [] : _props3$data,
                    style = _props3.style;
                return _react2.default.createElement(_reactNative.FlatList, {
                    data: data,
                    style: style,
                    extraData: this.state,
                    showsVerticalScrollIndicator: false,
                    keyExtractor: function keyExtractor(item, index) {
                        return index;
                    },
                    renderItem: this._renderFlatListItem,
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 122
                    }
                });
            }
        }, {
            key: "_renderUsingView",
            value: function _renderUsingView() {
                var _this2 = this;

                var _props4 = this.props,
                    _props4$data = _props4.data,
                    data = _props4$data === undefined ? [] : _props4$data,
                    style = _props4.style;
                return _react2.default.createElement(
                    _reactNative.View,
                    {
                        style: style,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 136
                        }
                    },
                    data.map(function (item, groupId) {
                        return _this2._renderGroupItem(item, groupId);
                    })
                );
            }
        }, {
            key: "_renderUsingListView",
            value: function _renderUsingListView() {
                var _props5 = this.props,
                    _props5$data = _props5.data,
                    data = _props5$data === undefined ? [] : _props5$data,
                    style = _props5.style;
                return _react2.default.createElement(_reactNative.ListView, {
                    style: style,
                    showsVerticalScrollIndicator: false,
                    renderRow: this._renderListViewItem,
                    dataSource: new _reactNative.ListView.DataSource({
                        rowHasChanged: function rowHasChanged(r1, r2) {
                            return r1 != r2;
                        }
                    }).cloneWithRows(data),
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 147
                    }
                });
            }
        }, {
            key: "render",
            value: function render() {
                var strategy = {
                    'View': this._renderUsingView,
                    'ListView': this._renderUsingListView,
                    'FlatList': this._supportFlatList() ? this._renderUsingFlatList : this._renderUsingListView
                };
                var implementedBy = this.props.implementedBy;

                if (!strategy[implementedBy]) {
                    implementedBy = 'FlatList';
                }

                return strategy[implementedBy]();
            }
        }]);
        return ETTExpandableList;
    }(_react.Component);

    exports.default = ETTExpandableList;
},480,[114,12],"app/common/ETTExpandableList.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = _require(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/app/res/images",
    "width": 10,
    "height": 6,
    "scales": [1, 2, 3],
    "hash": "b7df428ac3f5e257b410eccfb03762c2",
    "name": "xingzhuang2",
    "type": "png"
  });
},481,[175],"app/res/images/xingzhuang2.png");
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = _require(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/app/res/images",
    "width": 10,
    "height": 6,
    "scales": [1, 2, 3],
    "hash": "30b18e43e9932178d7dfc68d4ef5ca78",
    "name": "xingzhuang1",
    "type": "png"
  });
},482,[175],"app/res/images/xingzhuang1.png");
__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var GROUPS = ['特别关心', '我的好友', '小号', '小时候', '长大后', '老年人', '陌生人', '黑名单'];
  var NICK_NAMES = ['哲恒', '哲涵', '绍帆', '绍炎', '飞', '建军', '鑫媛', '红芳', '辰媛', '谷满', '谷雪', '谷蕊', '采萱', '曼妮', '梦琪', '珂辛', '鑫淼', '谷穗', '梦绮', '琨执', '嘉鲜', '然', '良福', '永杰', '力元', '圣杰', '家驹', '楠楠', '宝晨', '莉佳', '民泽', '子墨', '子钰', '智强', '叶少', '天骁', '恺恒', '湖光', '斯年', '贞常', '贞嫦', '场昴', '泰邦', '泰华', '泰阳', '泰中', '建鹏', '泰安', '泰一', '泰国', '泰然', '泰瑞', '泰民', '泰', '读鸾', '龄涓', '棋因', '腾跃', '俊凯', '博超', '博涛', '逸飞', '孟轩', '翔毅', '文博', '展鹏', '宇鑫', '鹏涛', '文耀', '越馨', '潇潇', '潇文', '芳菲', '芳华', '雅倩', '筱筱', '霭芸', '文馨', '有位', '静琪', '雅琳', '馨予', '馨雅', '蓓蕾', '碧岑', '筱萱', '源南', '元南', '子峻', '雨泽', '语泽', '勃熙', '颀远', '海涛', '安序', '嘉译', '泽超', '熙泽', '宾珠'];
  var ONLINE_TYPE = ['2G在线', '3G在线', '4G在线', 'TIM在线', 'WiFi在线', '电脑在线'];
  var SIGNATURES = ['努力不一定成功，但不努力会很轻松哦', '千山万水总是情，放过爸爸行不行', '毛爷爷，“我爱你”一生只为你奋斗。', '不管英道火不火 爱他一把妥不妥△', '钢牙妹怎么了 待我牙套摘下之日 就是妹成姐之时', '穷人家的孩子早当家，早熟的孩子早成家。', '早自习的时候总会有一个十分和谐的场面——抄作业', '要多笑啊，这么多年的牙可不能白刷。', '男人，不属于女人.又何必为男人买醉｀', '上厕所不看小说不拿手机我真心不自在', '看到同学在照镜子总会插一句话：照妖镜。', '老师问：“滴水之恩相于涌泉相报是什么意思” 同学：“就是别人弹你一滴水，你拿一桶水泼死他”', '每个女生都想拥有一个八阿哥，可惜不是人人都可以当晴川。', '睡姿决定发型，从今天开始，我要在家研究睡姿与发型的关系。', '小蚊子，你再咬，再咬，小心我把你吃掉', '有情人终成眷属，没钱人回家种薯 。', '女生的友谊一般起于上厕所买东西', '你是喜欢金叹还是放下刘海的英道。', '在喝康师傅揭盖有奖时，先舔舔瓶盖里面，是为了看清里面的字，有木有有木有', '我是个比较成熟的人，像赌气不吃东西这种事都是吃饱后才做的。', '爱一个人 就应该时刻准备和他私奔', '不用太羡慕运动排行榜步数比你多的好友，他们可能没走多远，他们只是腿短。', '妈妈说我不是个不三不四的人，又说你是个很二的人', '我们不熟，所以我是高冷；我们认识，所以我是暖神；我想和你熟，所以我是逗比；我们太熟，所以我是蛇精病！', '每天早上都要忍受着和棉被分手的痛苦。', '我的手表老贵了，原价35万，打完折420....', '四个圈的不一定是宝马，也有可能是雪糕', '一分钱一分货，稀饭吃了不经饿。', '你早晚都是我的，只有中午不是。', '不行，我要努力学习，不想被别人说靠帅气生存。', '上班的心情比上坟还要沉重。', '其实青果学院也没啥了不起，不就是老师长得帅，讲课幽默吗，提分快吗，我要去我也行。', '没错比起以前我是胖了 可我心也宽了 以前想不开的现在我全想开了', '生当作人杰，死亦写作业。人生自古谁无死，来生继续写作业。', '上课偷玩手机，眼神是这样的←_←、→_→、↑ _ ↑、↓ _ ↓', '班主任是容嬷嬷失散的孩子。', '到了这个年纪，会在你耳边轻轻唱歌，喜欢你的肉体，还会送你包包的…就只剩下蚊子了。', '三天后喊你的对象把花抱稳，要是戳到老子，老子当场让你知道，什么叫玫瑰花的葬礼。', '北冥有鱼，其名为鲲，鲲之大，王大陆能一口吞下。', '只有单身狗才会觉得第二杯半价是孤独，单身猪不会，她两杯都可以喝掉，甚至还想要第三杯。', '讲真的，这种天气就算男朋友跟人跑了，我也不想去追。', '你要吃饱，要早睡，不要仗着自己长得丑就可以任意熬夜。', '孤独久了，感觉自己都有了仙气。', '我还是很讨厌你，像吃了花椒的邻居，麻了隔壁。', '长痘有什么的，那是我可爱的冒泡。', '真不明白你们这些人，你自己家没有水晶吗，干嘛非要打我家的水晶，简直不讲道理。', '别人关心你飞得高不高飞得累不累，而我只关心你翅膀好吃吗？', '各位大叔们，明后天开车请勿鸣笛，别觉得高考与你无关，只要你混得足够的好，你媳妇此时正在高考。', '我能想到最浪漫的事就是和你一起吃吃吃吃吃吃吃吃然后你付钱你付钱你付钱。', '现在的年轻人有三样东西不能碰：追星，熬夜，王者荣耀，越碰你会越觉得，单身一个人可真有意思。', '天上的星星真好看，可以帮我摘几颗放在我段位上吗？ゅ', '我觉得我现在上课已经不是开小差了，而是直接出差。', '每当我准备存钱的时候，总有个声音对我说：对自己好点，这就是存不住钱的原因。', '明明可以靠脸吃饭，你却要靠才华，这就是你和明明的差距。', '有很多事情你当时想不通，别着急，过一段时间你再想，就想不起来了。', '我严重怀疑，月老是不是把我的红线拿去织秋裤了。', '曾经有一段真挚的爱情放在我的面前，我没有珍惜，要是能重来……我要选李白。', '年轻人有三种东西不能碰，追星，麻将，王者荣耀，越碰你越会觉得，单身一个人可真有意思。', '五月我一定要好好存钱，早睡早起没事跑跑步。对了，还得改改我这臭脾气，如果做不到我就六月再发。', '从今以后保持低调和神秘，对自己的可爱与仙气只字不提。~', '地铁上说禁止携带易燃易爆物品，我默默的下车了。因为我……可爱到爆。', '出生的时候，上帝问我是要长得可爱，还是要记性好，我已经忘了我当时是怎么回答的了。', '世界让我遍体鳞伤，但伤口长出的却是翅膀，有人拿来飞翔，可我却拿去煲了汤。', '一定要记住那些陪你聊到深夜的人，就是因为他们，才让你熬夜导致黑眼圈那么重皮肤这么差的。', '在你妈眼里，你只有“你都多大了”和“你才几岁”这两个年龄，并且这两个年龄可能会交叉出现。', '小孩子难过了口头上哄哄就开心了，我们大人不行，得吃顿好的或买些东西才行。', '我这个人经不起批评，谁要是在游戏里骂我，我就举报他。', '我就是我是颜色不一样的烟火，他就是他，是两块钱一捆儿的呲花。', '手机摔了这么多次都没事，后来想想还是我的身高救了它。', '羡慕那种一伤心就能吃不下饭，然后暴瘦的人。我无论如何都没有这样的时刻，我再伤心都坚持吃饭！'];
  var HEAD_IMAGES = [_require(_dependencyMap[0], '../res/myImages/head_1.jpeg'), _require(_dependencyMap[1], '../res/myImages/head_2.jpeg'), _require(_dependencyMap[2], '../res/myImages/head_3.jpeg'), _require(_dependencyMap[3], '../res/myImages/head_4.jpeg'), _require(_dependencyMap[4], '../res/myImages/head_5.jpeg'), _require(_dependencyMap[5], '../res/myImages/head_6.jpeg'), _require(_dependencyMap[6], '../res/myImages/head_7.jpeg'), _require(_dependencyMap[7], '../res/myImages/head_8.jpeg'), _require(_dependencyMap[8], '../res/myImages/head_9.jpeg'), _require(_dependencyMap[9], '../res/myImages/head_10.png'), _require(_dependencyMap[10], '../res/myImages/head_11.jpeg'), _require(_dependencyMap[11], '../res/myImages/head_12.jpeg'), _require(_dependencyMap[12], '../res/myImages/head_13.jpeg'), _require(_dependencyMap[13], '../res/myImages/head_14.jpeg'), _require(_dependencyMap[14], '../res/myImages/head_15.jpeg'), _require(_dependencyMap[15], '../res/myImages/head_16.jpeg'), _require(_dependencyMap[16], '../res/myImages/head_17.png'), _require(_dependencyMap[17], '../res/myImages/head_18.jpeg'), _require(_dependencyMap[18], '../res/myImages/head_19.jpeg'), _require(_dependencyMap[19], '../res/myImages/head_20.jpeg')];

  var randomRange = function randomRange(min, max) {
    var diff = max - min;
    return min + parseInt(Math.random() * diff);
  };

  var mockData = GROUPS.map(function (groupName) {
    var obj = {};
    var total = randomRange(0, 5);
    obj.groupHeaderData = {
      title: groupName,
      total: total,
      online: randomRange(0, total)
    };
    obj.groupListData = new Array(total).fill(0).map(function () {
      return {
        nickName: NICK_NAMES[randomRange(0, NICK_NAMES.length - 1)],
        headImg: HEAD_IMAGES[randomRange(0, HEAD_IMAGES.length - 1)],
        onlineType: ONLINE_TYPE[randomRange(0, ONLINE_TYPE.length - 1)],
        signature: SIGNATURES[randomRange(0, SIGNATURES.length - 1)]
      };
    });
    return obj;
  });
  exports.mockData = mockData;
},483,[484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503],"app/common/mockData.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = _require(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/app/res/myImages",
    "width": 100,
    "height": 100,
    "scales": [1],
    "hash": "fccbfe5d10411291e974a5db86278ed8",
    "name": "head_1",
    "type": "jpeg"
  });
},484,[175],"app/res/myImages/head_1.jpeg");
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = _require(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/app/res/myImages",
    "width": 100,
    "height": 100,
    "scales": [1],
    "hash": "e24f53232cf5a423158cc98c0e4d63d5",
    "name": "head_2",
    "type": "jpeg"
  });
},485,[175],"app/res/myImages/head_2.jpeg");
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = _require(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/app/res/myImages",
    "width": 100,
    "height": 100,
    "scales": [1],
    "hash": "58cdfab9a0a76a5fb83a57efede6f2f0",
    "name": "head_3",
    "type": "jpeg"
  });
},486,[175],"app/res/myImages/head_3.jpeg");
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = _require(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/app/res/myImages",
    "width": 100,
    "height": 100,
    "scales": [1],
    "hash": "e002bbb44acf92f0ece45c520156a0ba",
    "name": "head_4",
    "type": "jpeg"
  });
},487,[175],"app/res/myImages/head_4.jpeg");
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = _require(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/app/res/myImages",
    "width": 100,
    "height": 100,
    "scales": [1],
    "hash": "6a8a0f22e716f92d70d579094f975a9a",
    "name": "head_5",
    "type": "jpeg"
  });
},488,[175],"app/res/myImages/head_5.jpeg");
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = _require(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/app/res/myImages",
    "width": 100,
    "height": 100,
    "scales": [1],
    "hash": "1ed34b5af703b619d298f402f88eed7c",
    "name": "head_6",
    "type": "jpeg"
  });
},489,[175],"app/res/myImages/head_6.jpeg");
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = _require(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/app/res/myImages",
    "width": 100,
    "height": 100,
    "scales": [1],
    "hash": "3e388df697e747b2f56503f7dc475086",
    "name": "head_7",
    "type": "jpeg"
  });
},490,[175],"app/res/myImages/head_7.jpeg");
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = _require(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/app/res/myImages",
    "width": 100,
    "height": 100,
    "scales": [1],
    "hash": "e315aeec3407b460e98b84d062fc1a47",
    "name": "head_8",
    "type": "jpeg"
  });
},491,[175],"app/res/myImages/head_8.jpeg");
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = _require(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/app/res/myImages",
    "width": 100,
    "height": 100,
    "scales": [1],
    "hash": "ccb67b4dfcf9eef1ddaf0cba1c1b3418",
    "name": "head_9",
    "type": "jpeg"
  });
},492,[175],"app/res/myImages/head_9.jpeg");
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = _require(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/app/res/myImages",
    "width": 100,
    "height": 100,
    "scales": [1],
    "hash": "32fa1a33f553146bc7c82878cf77dc68",
    "name": "head_10",
    "type": "png"
  });
},493,[175],"app/res/myImages/head_10.png");
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = _require(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/app/res/myImages",
    "width": 100,
    "height": 100,
    "scales": [1],
    "hash": "a3cef4f133615c45be4108c569cd2fb2",
    "name": "head_11",
    "type": "jpeg"
  });
},494,[175],"app/res/myImages/head_11.jpeg");
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = _require(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/app/res/myImages",
    "width": 100,
    "height": 100,
    "scales": [1],
    "hash": "fa3315691162dec17e5444aa3ec7c22a",
    "name": "head_12",
    "type": "jpeg"
  });
},495,[175],"app/res/myImages/head_12.jpeg");
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = _require(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/app/res/myImages",
    "width": 100,
    "height": 100,
    "scales": [1],
    "hash": "807e426deb59b5497b17d1387f26b149",
    "name": "head_13",
    "type": "jpeg"
  });
},496,[175],"app/res/myImages/head_13.jpeg");
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = _require(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/app/res/myImages",
    "width": 100,
    "height": 100,
    "scales": [1],
    "hash": "db75bba63f52b11eb5d0923652dbf72d",
    "name": "head_14",
    "type": "jpeg"
  });
},497,[175],"app/res/myImages/head_14.jpeg");
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = _require(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/app/res/myImages",
    "width": 100,
    "height": 100,
    "scales": [1],
    "hash": "10d4ca74ab52048db017fc4af4241701",
    "name": "head_15",
    "type": "jpeg"
  });
},498,[175],"app/res/myImages/head_15.jpeg");
__d(function (global, _require, module, exports, _dependencyMap) {
	module.exports = _require(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
		"__packager_asset": true,
		"httpServerLocation": "/assets/app/res/myImages",
		"width": 100,
		"height": 100,
		"scales": [1],
		"hash": "fbbbab5e2b5791f4918db8ba334f86c5",
		"name": "head_16",
		"type": "jpeg"
	});
},499,[175],"app/res/myImages/head_16.jpeg");
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = _require(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/app/res/myImages",
    "width": 100,
    "height": 100,
    "scales": [1],
    "hash": "5d0ab392fe4294541459d74fa6c68e0f",
    "name": "head_17",
    "type": "png"
  });
},500,[175],"app/res/myImages/head_17.png");
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = _require(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/app/res/myImages",
    "width": 100,
    "height": 100,
    "scales": [1],
    "hash": "6d34248e759c45bf76d3ababf110f8c5",
    "name": "head_18",
    "type": "jpeg"
  });
},501,[175],"app/res/myImages/head_18.jpeg");
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = _require(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/app/res/myImages",
    "width": 100,
    "height": 100,
    "scales": [1],
    "hash": "a9cd6e17a155a873cd2204066b4b7dba",
    "name": "head_19",
    "type": "jpeg"
  });
},502,[175],"app/res/myImages/head_19.jpeg");
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = _require(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/app/res/myImages",
    "width": 100,
    "height": 100,
    "scales": [1],
    "hash": "0bb9e00bd5423d227e0c50b42986aa65",
    "name": "head_20",
    "type": "jpeg"
  });
},503,[175],"app/res/myImages/head_20.jpeg");
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = undefined;
    var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/app/common/ETTNavBarCommon.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    var _ETTInlineFuction = _require(_dependencyMap[2], "../res/values/ETTInlineFuction");

    var ETTNavigationBar = function (_Component) {
        babelHelpers.inherits(ETTNavigationBar, _Component);

        function ETTNavigationBar(props) {
            babelHelpers.classCallCheck(this, ETTNavigationBar);
            return babelHelpers.possibleConstructorReturn(this, (ETTNavigationBar.__proto__ || Object.getPrototypeOf(ETTNavigationBar)).call(this, props));
        }

        babelHelpers.createClass(ETTNavigationBar, [{
            key: "render",
            value: function render() {
                var _props = this.props,
                    title = _props.title,
                    leftTitle = _props.leftTitle,
                    leftImage = _props.leftImage,
                    leftAction = _props.leftAction,
                    rightTitle = _props.rightTitle,
                    rightImage = _props.rightImage,
                    rightAction = _props.rightAction;
                return _react2.default.createElement(
                    _reactNative.View,
                    {
                        style: [styles.barView, this.props.style],
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 21
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.View,
                        {
                            style: styles.showView,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 22
                            }
                        },
                        leftTitle ? _react2.default.createElement(
                            _reactNative.TouchableOpacity,
                            {
                                style: styles.leftNav,
                                onPress: function onPress() {
                                    leftAction();
                                },
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 26
                                }
                            },
                            _react2.default.createElement(
                                _reactNative.View,
                                {
                                    style: {
                                        alignItems: 'center'
                                    },
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 27
                                    }
                                },
                                _react2.default.createElement(
                                    _reactNative.Text,
                                    {
                                        style: styles.barButton,
                                        __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 28
                                        }
                                    },
                                    leftTitle
                                )
                            )
                        ) : leftImage ? _react2.default.createElement(
                            _reactNative.TouchableOpacity,
                            {
                                style: styles.leftNav,
                                onPress: function onPress() {
                                    leftAction();
                                },
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 35
                                }
                            },
                            _react2.default.createElement(
                                _reactNative.View,
                                {
                                    style: {
                                        alignItems: 'center'
                                    },
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 36
                                    }
                                },
                                _react2.default.createElement(_reactNative.Image, {
                                    source: leftImage,
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 37
                                    }
                                })
                            )
                        ) : null,
                        title ? _react2.default.createElement(
                            _reactNative.Text,
                            {
                                style: styles.title,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 45
                                }
                            },
                            title || ''
                        ) : null,
                        rightTitle ? _react2.default.createElement(
                            _reactNative.TouchableOpacity,
                            {
                                style: styles.rightNav,
                                onPress: function onPress() {
                                    rightAction();
                                },
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 50
                                }
                            },
                            _react2.default.createElement(
                                _reactNative.View,
                                {
                                    style: {
                                        alignItems: 'center'
                                    },
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 51
                                    }
                                },
                                _react2.default.createElement(
                                    _reactNative.Text,
                                    {
                                        style: styles.barButton,
                                        __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 52
                                        }
                                    },
                                    rightTitle
                                )
                            )
                        ) : rightImage ? _react2.default.createElement(
                            _reactNative.TouchableOpacity,
                            {
                                style: styles.rightNav,
                                onPress: function onPress() {
                                    rightAction();
                                },
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 56
                                }
                            },
                            _react2.default.createElement(
                                _reactNative.View,
                                {
                                    style: {
                                        alignItems: 'center'
                                    },
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 57
                                    }
                                },
                                _react2.default.createElement(_reactNative.Image, {
                                    source: rightImage,
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 58
                                    }
                                })
                            )
                        ) : null
                    )
                );
            }
        }]);
        return ETTNavigationBar;
    }(_react.Component);

    exports.default = ETTNavigationBar;

    var styles = _reactNative.StyleSheet.create({
        barView: {
            height: _reactNative.Platform.OS === 'android' ? 44 : (0, _ETTInlineFuction.scaleSize)(128),
            backgroundColor: 'white'
        },
        showView: {
            flex: 1,
            alignItems: 'center',
            justifyContent: 'center',
            flexDirection: 'row',
            marginTop: _reactNative.Platform.OS === 'android' ? 0 : (0, _ETTInlineFuction.scaleSize)(40),
            height: (0, _ETTInlineFuction.scaleSize)(88)
        },
        title: {
            color: 'black',
            fontSize: (0, _ETTInlineFuction.scaleSize)(36)
        },
        leftNav: {
            position: 'absolute',
            top: (0, _ETTInlineFuction.scaleSize)(27),
            bottom: (0, _ETTInlineFuction.scaleSize)(27),
            left: (0, _ETTInlineFuction.scaleSize)(30),
            justifyContent: 'center'
        },
        rightNav: {
            position: 'absolute',
            right: (0, _ETTInlineFuction.scaleSize)(36),
            top: (0, _ETTInlineFuction.scaleSize)(26),
            bottom: (0, _ETTInlineFuction.scaleSize)(28),
            justifyContent: 'center'
        },
        barButton: {
            color: 'white',
            fontSize: (0, _ETTInlineFuction.scaleSize)(30)
        }
    });
},504,[114,12,452],"app/common/ETTNavBarCommon.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = _require(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/app/res/images",
    "width": 12,
    "height": 18,
    "scales": [1, 2, 3],
    "hash": "f993e4034fbdcc8f1d9e9fe6b83b70c2",
    "name": "back",
    "type": "png"
  });
},505,[175],"app/res/images/back.png");
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = _require(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/app/res/images",
    "width": 17,
    "height": 17,
    "scales": [1, 2, 3],
    "hash": "f2bb122c89266c82be1f46cca7401557",
    "name": "zhuanfa2",
    "type": "png"
  });
},506,[175],"app/res/images/zhuanfa2.png");
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = undefined;
    var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/app/common/ETTModalLogView.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    var _reactNavigation = _require(_dependencyMap[2], "react-navigation");

    var _reactNativeEasyToast = _require(_dependencyMap[3], "react-native-easy-toast");

    var _reactNativeEasyToast2 = babelHelpers.interopRequireDefault(_reactNativeEasyToast);

    var _ETTDevice = _require(_dependencyMap[4], "../res/values/ETTDevice");

    var _ETTDevice2 = babelHelpers.interopRequireDefault(_ETTDevice);

    var _ETTConfig = _require(_dependencyMap[5], "../res/values/ETTConfig");

    var _ETTStatusBar = _require(_dependencyMap[6], "../common/ETTStatusBar");

    var _ETTString = _require(_dependencyMap[7], "../res/values/ETTString");

    var _ETTString2 = babelHelpers.interopRequireDefault(_ETTString);

    var _ETTModalLogStyles = _require(_dependencyMap[8], "../res/styles/ETTModalLogStyles");

    var _ETTModalLogStyles2 = babelHelpers.interopRequireDefault(_ETTModalLogStyles);

    var _ETTLogScene = _require(_dependencyMap[9], "../scene/ETTLogScene");

    var ETTModalLogView = function (_Component) {
        babelHelpers.inherits(ETTModalLogView, _Component);

        function ETTModalLogView(props) {
            babelHelpers.classCallCheck(this, ETTModalLogView);

            var _this = babelHelpers.possibleConstructorReturn(this, (ETTModalLogView.__proto__ || Object.getPrototypeOf(ETTModalLogView)).call(this, props));

            _this.state = {
                visible: true,
                animationType: 'slide'
            };

            _this._setModalVisible = function (visible) {
                _this.setState({
                    modalVisible: visible
                });
            };

            _this.startShow = function () {};

            var callback = _this.props.loginSuccess;
            _this.loginCallBack = callback;
            return _this;
        }

        babelHelpers.createClass(ETTModalLogView, [{
            key: "render",
            value: function render() {
                var _this2 = this;

                return _react2.default.createElement(
                    _reactNative.View,
                    {
                        style: _ETTModalLogStyles2.default.container,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 53
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.Modal,
                        {
                            animationType: this.state.animationType,
                            visible: this.state.visible,
                            transparent: true,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 55
                            }
                        },
                        _react2.default.createElement(_ETTLogScene.ETTModalLogScene, {
                            closeHandle: function closeHandle() {
                                return _this2.closeHandle();
                            },
                            forgetpwdHandle: function forgetpwdHandle() {
                                return _this2.forgetPwdhandle();
                            },
                            verCodeonHandle: function verCodeonHandle() {
                                return _this2.verCodeHandle();
                            },
                            weChatHandle: function weChatHandle() {
                                return _this2.weChatHandle();
                            },
                            stackCloseHandle: function stackCloseHandle() {
                                return _this2.stackCloseHandle();
                            },
                            regHandle: function regHandle() {
                                return _this2.regHandle();
                            },
                            bindMobilHandle: function bindMobilHandle() {
                                return _this2.bindMobiliPhoneNoHandle();
                            },
                            loginHandle: function loginHandle() {
                                return _this2.loginCallBack();
                            },
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 60
                            }
                        })
                    )
                );
            }
        }, {
            key: "closeHandle",
            value: function closeHandle() {
                nav = this.props.nav;

                if (nav) {
                    nav.pop();
                }
            }
        }, {
            key: "bindMobiliPhoneNoHandle",
            value: function bindMobiliPhoneNoHandle() {
                var _this3 = this;

                nav = this.props.nav;

                if (nav) {
                    this.setState({
                        visible: false,
                        animationType: 'none'
                    });
                    nav.navigate('ThirdLoginBindScene', {
                        stackCloseHandle: function stackCloseHandle() {
                            return _this3.stackCloseHandle();
                        }
                    });
                }
            }
        }, {
            key: "forgetPwdhandle",
            value: function forgetPwdhandle() {
                var _this4 = this;

                nav = this.props.nav;

                if (nav) {
                    this.setState({
                        visible: false,
                        animationType: 'none'
                    });
                    nav.navigate('ForgetPwdScene', {
                        stackCloseHandle: function stackCloseHandle() {
                            return _this4.stackCloseHandle();
                        }
                    });
                }
            }
        }, {
            key: "verCodeHandle",
            value: function verCodeHandle() {
                var _this5 = this;

                nav = this.props.nav;

                if (nav) {
                    this.setState({
                        visible: false,
                        animationType: 'none'
                    });
                    nav.navigate('VerCodeScene', {
                        stackCloseHandle: function stackCloseHandle() {
                            return _this5.stackCloseHandle();
                        },
                        loginSuccessBack: function loginSuccessBack() {
                            return _this5.loginSuccessHandle();
                        }
                    });
                }
            }
        }, {
            key: "regHandle",
            value: function regHandle() {
                var _this6 = this;

                nav = this.props.nav;

                if (nav) {
                    this.setState({
                        visible: false,
                        animationType: 'none'
                    });
                    nav.navigate('RegisteredScene', {
                        stackCloseHandle: function stackCloseHandle() {
                            return _this6.stackCloseHandle();
                        },
                        loginSuccessBack: function loginSuccessBack() {
                            return _this6.loginSuccessHandle();
                        }
                    });
                }
            }
        }, {
            key: "weChatHandle",
            value: function weChatHandle() {}
        }, {
            key: "stackCloseHandle",
            value: function stackCloseHandle() {
                this.setState({
                    visible: true,
                    animationType: 'none'
                });
            }
        }, {
            key: "loginSuccessHandle",
            value: function loginSuccessHandle() {
                var callback = this.props.loginSuccess;

                if (callback) {
                    callback();
                }
            }
        }]);
        return ETTModalLogView;
    }(_react.Component);

    exports.default = ETTModalLogView;
},507,[114,12,371,449,342,343,450,347,508,509],"app/common/ETTModalLogView.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    var _react = _require(_dependencyMap[0], "react");

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    var _ETTDevice = _require(_dependencyMap[2], "../values/ETTDevice");

    var _ETTDevice2 = babelHelpers.interopRequireDefault(_ETTDevice);

    var _ETTColor = _require(_dependencyMap[3], "../values/ETTColor");

    var _ETTColor2 = babelHelpers.interopRequireDefault(_ETTColor);

    var _ETTInlineFuction = _require(_dependencyMap[4], "../values/ETTInlineFuction");

    var ETTModalLogStyles = _reactNative.StyleSheet.create({
        container: {
            flex: 1,
            backgroundColor: _ETTColor2.default.c2,
            width: _ETTDevice2.default.ScreenWidth
        }
    });

    module.exports = ETTModalLogStyles;
},508,[114,12,342,453,452],"app/res/styles/ETTModalLogStyles.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.ETTModalLogScene = exports.ETTLogScene = undefined;

    var _class,
        _temp,
        _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/app/scene/ETTLogScene.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    var _reactNativeWechat = _require(_dependencyMap[2], "react-native-wechat");

    var wechat = babelHelpers.interopRequireWildcard(_reactNativeWechat);

    var _reactNavigation = _require(_dependencyMap[3], "react-navigation");

    var _reactNativeEasyToast = _require(_dependencyMap[4], "react-native-easy-toast");

    var _reactNativeEasyToast2 = babelHelpers.interopRequireDefault(_reactNativeEasyToast);

    var _ETTLogStyles = _require(_dependencyMap[5], "../res/styles/ETTLogStyles");

    var _ETTLogStyles2 = babelHelpers.interopRequireDefault(_ETTLogStyles);

    var _ETTDevice = _require(_dependencyMap[6], "../res/values/ETTDevice");

    var _ETTDevice2 = babelHelpers.interopRequireDefault(_ETTDevice);

    var _ETTConfig = _require(_dependencyMap[7], "../res/values/ETTConfig");

    var _ETTStatusBar = _require(_dependencyMap[8], "../common/ETTStatusBar");

    var _ETTEditView = _require(_dependencyMap[9], "../common/ETTEditView");

    var _ETTLoadingAnimation = _require(_dependencyMap[10], "../common/ETTLoadingAnimation");

    var _ETTLoadingAnimation2 = babelHelpers.interopRequireDefault(_ETTLoadingAnimation);

    var _ETTString = _require(_dependencyMap[11], "../res/values/ETTString");

    var _ETTString2 = babelHelpers.interopRequireDefault(_ETTString);

    var _ETTNetworkUtil = _require(_dependencyMap[12], "../utils/ETTNetworkUtil");

    var _ETTNetworkUtil2 = babelHelpers.interopRequireDefault(_ETTNetworkUtil);

    var _ETTURLConfig = _require(_dependencyMap[13], "../res/values/ETTURLConfig");

    var _ETTURLConfig2 = babelHelpers.interopRequireDefault(_ETTURLConfig);

    var _ETTNetResponseHelper = _require(_dependencyMap[14], "../utils/ETTNetResponseHelper");

    var _ETTNetResponseHelper2 = babelHelpers.interopRequireDefault(_ETTNetResponseHelper);

    var _ETTRequestModel = _require(_dependencyMap[15], "../mobx/ETTRequestModel");

    var _ETTRequestModel2 = babelHelpers.interopRequireDefault(_ETTRequestModel);

    var _ETTEnum = _require(_dependencyMap[16], "../res/values/ETTEnum");

    var _ETTThirdLoginBindScene = _require(_dependencyMap[17], "./ETTThirdLoginBindScene");

    var _ETTThirdLoginBindScene2 = babelHelpers.interopRequireDefault(_ETTThirdLoginBindScene);

    var ETTLogScene = exports.ETTLogScene = (_temp = _class = function (_Component) {
        babelHelpers.inherits(ETTLogScene, _Component);

        function ETTLogScene(props) {
            babelHelpers.classCallCheck(this, ETTLogScene);

            var _this = babelHelpers.possibleConstructorReturn(this, (ETTLogScene.__proto__ || Object.getPrototypeOf(ETTLogScene)).call(this, props));

            _this.startShow = function () {
                alert('开始显示了');
            };

            _this.state = {
                mobile: '',
                password: ''
            };
            return _this;
        }

        babelHelpers.createClass(ETTLogScene, [{
            key: "render",
            value: function render() {
                var _this2 = this;

                return _react2.default.createElement(
                    _reactNative.View,
                    {
                        style: _ETTLogStyles2.default.log_Mian,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 52
                        }
                    },
                    _react2.default.createElement(_ETTStatusBar.ETTDarkStatus, {
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 54
                        }
                    }),
                    _react2.default.createElement(
                        _reactNative.View,
                        {
                            style: _ETTLogStyles2.default.log_body,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 55
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.View,
                            {
                                style: _ETTLogStyles2.default.log_body_top,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 57
                                }
                            },
                            _react2.default.createElement(
                                _reactNative.TouchableOpacity,
                                {
                                    onPress: function onPress() {
                                        return _this2.closeHandle();
                                    },
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 58
                                    }
                                },
                                _react2.default.createElement(_reactNative.Image, {
                                    style: _ETTLogStyles2.default.log_close,
                                    source: _require(_dependencyMap[18], '../res/images/tab_c9_close.png'),
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 59
                                    }
                                })
                            ),
                            _react2.default.createElement(
                                _reactNative.Text,
                                {
                                    style: _ETTLogStyles2.default.log_title,
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 62
                                    }
                                },
                                "\u767B\u5F55"
                            ),
                            _react2.default.createElement(_ETTEditView.ETTEditPhoneView, {
                                placeholder: _ETTString2.default.log_amount_placeholder,
                                maxLength: _ETTConfig.AMOUNT_MAXLEGTH,
                                changeHandle: function changeHandle(text) {
                                    return _this2.amountChangeHandle(text);
                                },
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 66
                                }
                            }),
                            _react2.default.createElement(_reactNative.Text, {
                                style: _ETTLogStyles2.default.log_line,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 69
                                }
                            }),
                            _react2.default.createElement(_ETTEditView.ETTEditPwdView, {
                                placeholder: _ETTString2.default.log_pwd_placeholder,
                                maxLength: _ETTConfig.REG_PWDMAXLENGTH,
                                changeHandle: function changeHandle(text) {
                                    return _this2.pwdChangeHandle(text);
                                },
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 70
                                }
                            }),
                            _react2.default.createElement(_reactNative.Text, {
                                style: _ETTLogStyles2.default.log_line,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 73
                                }
                            }),
                            _react2.default.createElement(
                                _reactNative.TouchableOpacity,
                                {
                                    style: _ETTLogStyles2.default.log_btn,
                                    onPress: function onPress() {
                                        return _this2.login();
                                    },
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 74
                                    }
                                },
                                _react2.default.createElement(
                                    _reactNative.Text,
                                    {
                                        style: _ETTLogStyles2.default.log_btn_text,
                                        __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 75
                                        }
                                    },
                                    "\u767B\u5F55"
                                )
                            ),
                            _react2.default.createElement(
                                _reactNative.View,
                                {
                                    style: _ETTLogStyles2.default.log_body_top_bottom,
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 79
                                    }
                                },
                                _react2.default.createElement(
                                    _reactNative.TouchableOpacity,
                                    {
                                        style: _ETTLogStyles2.default.log_code_btn,
                                        onPress: function onPress() {
                                            return _this2.verCodeonPress();
                                        },
                                        __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 80
                                        }
                                    },
                                    _react2.default.createElement(
                                        _reactNative.Text,
                                        {
                                            style: _ETTLogStyles2.default.log_code_btn_text,
                                            __source: {
                                                fileName: _jsxFileName,
                                                lineNumber: 81
                                            }
                                        },
                                        "\u9A8C\u8BC1\u7801\u767B\u5F55"
                                    )
                                ),
                                _react2.default.createElement(
                                    _reactNative.TouchableOpacity,
                                    {
                                        style: _ETTLogStyles2.default.log_forget_btn,
                                        onPress: function onPress() {
                                            return _this2.forgetpwd();
                                        },
                                        __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 85
                                        }
                                    },
                                    _react2.default.createElement(
                                        _reactNative.Text,
                                        {
                                            style: _ETTLogStyles2.default.log_forget_btn_text,
                                            __source: {
                                                fileName: _jsxFileName,
                                                lineNumber: 86
                                            }
                                        },
                                        "\u5FD8\u8BB0\u5BC6\u7801"
                                    )
                                )
                            )
                        ),
                        _react2.default.createElement(
                            _reactNative.View,
                            {
                                style: _ETTLogStyles2.default.log_body_bottom,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 93
                                }
                            },
                            _react2.default.createElement(
                                _reactNative.TouchableOpacity,
                                {
                                    style: _ETTLogStyles2.default.log_registered_btn,
                                    onPress: function onPress() {
                                        return _this2.registered();
                                    },
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 94
                                    }
                                },
                                _react2.default.createElement(
                                    _reactNative.Text,
                                    {
                                        style: _ETTLogStyles2.default.log_registered_btn_text,
                                        __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 95
                                        }
                                    },
                                    "\u6CE8\u518C"
                                )
                            ),
                            _react2.default.createElement(
                                _reactNative.Text,
                                {
                                    style: _ETTLogStyles2.default.log_other_text,
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 99
                                    }
                                },
                                "\u5176\u4ED6\u65B9\u5F0F\u767B\u5F55"
                            ),
                            _react2.default.createElement(
                                _reactNative.View,
                                {
                                    style: _ETTLogStyles2.default.log_otherlog,
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 102
                                    }
                                },
                                _react2.default.createElement(
                                    _reactNative.TouchableOpacity,
                                    {
                                        onPress: function onPress() {
                                            return _this2.weChatLogin();
                                        },
                                        __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 103
                                        }
                                    },
                                    _react2.default.createElement(_reactNative.Image, {
                                        style: _ETTLogStyles2.default.log_wechat_log,
                                        source: _require(_dependencyMap[19], '../res/images/wechat_c11.png'),
                                        __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 104
                                        }
                                    })
                                )
                            )
                        )
                    ),
                    _react2.default.createElement(_reactNativeEasyToast2.default, {
                        ref: "toast",
                        style: _ETTLogStyles2.default.reg_toast,
                        opacity: 0.8,
                        position: "top",
                        positionValue: 200,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 112
                        }
                    }),
                    _react2.default.createElement(_ETTLoadingAnimation2.default, {
                        ref: "loading",
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 119
                        }
                    })
                );
            }
        }, {
            key: "closeHandle",
            value: function closeHandle() {
                this.props.navigation.pop();
            }
        }, {
            key: "amountChangeHandle",
            value: function amountChangeHandle(text) {
                this.setState({
                    mobile: text
                });
            }
        }, {
            key: "pwdChangeHandle",
            value: function pwdChangeHandle(text) {
                this.setState({
                    password: text
                });
            }
        }, {
            key: "verCodeonPress",
            value: function verCodeonPress() {
                this.props.navigation.navigate('VerCodeScene', {});
            }
        }, {
            key: "login",
            value: function login() {
                if (this.state.mobile.length < 1) {
                    this.refs.toast.show(_ETTString2.default.iphone_null_toast);
                } else if (this.state.mobile.length < _ETTConfig.AMOUNT_MAXLEGTH) {
                    this.refs.toast.show(_ETTString2.default.iphone_len_toast);
                } else if (this.state.password.length < 1) {
                    this.refs.toast.show(_ETTString2.default.pwd_null_toast);
                } else {
                    this.refs.loading._show(null);

                    this.login_request();
                }
            }
        }, {
            key: "login_request",
            value: function login_request() {
                var _this3 = this;

                console.log('登录');
                var requetModel = new _ETTRequestModel2.default();
                requetModel._path = _ETTURLConfig2.default.SERVICE_NAME_AUTH + _ETTURLConfig2.default.password_Log;
                requetModel._bodyData = 'mobile=' + this.state.mobile + '&password=' + this.state.password;
                requetModel._getInfo = requetModel.getAuthorizationRequesetData();

                _ETTNetworkUtil2.default.post(requetModel).then(function (json) {
                    console.log(json);

                    _this3.refs.loading._hiden();

                    if (json.access_token) {
                        var amountInfo = {
                            'amount': _this3.state.mobile,
                            'pwd': _this3.state.password
                        };

                        _ETTConfig.DataManager.logSuccessful(json, _ETTEnum.ETTUserLogType.logPwd, amountInfo);

                        _this3.loginhandle();
                    } else {
                        var reslut = _ETTNetResponseHelper2.default.responseJson(json);

                        _this3.refs.toast.show(reslut.msg);
                    }
                }, function (json) {
                    console.log('fail' + json);

                    _this3.refs.loading._hiden();

                    var result = _ETTNetResponseHelper2.default.requestFailJson(json);

                    _this3.refs.toast.show(result.msg);
                });
            }
        }, {
            key: "loginhandle",
            value: function loginhandle() {}
        }, {
            key: "registered",
            value: function registered() {
                this.props.navigation.navigate('RegisteredScene', {});
            }
        }, {
            key: "forgetpwd",
            value: function forgetpwd() {
                this.props.navigation.navigate('ForgetPwdScene', {});
            }
        }, {
            key: "weChatLogin",
            value: function weChatLogin() {
                var _this4 = this;

                var scope = 'snsapi_userinfo';
                var state = 'wechat_km_app';
                wechat.isWXAppInstalled().then(function (isInstalled) {
                    if (isInstalled) {
                        console.log('微信已经安装');
                        wechat.sendAuthRequest(scope, state).then(function (responseCode) {
                            console.log('授权成功');

                            _this4.getWechatAccessToken(responseCode);
                        }).catch(function (err) {
                            _this4.refs.loading._hiden();

                            _this4.refs.toast.show('登录授权发生错误' + err.message);
                        });
                    } else {
                        _this4.refs.loading._hiden();

                        _this4.refs.toast.show('没有安装微信软件，请您安装微信之后再试');
                    }
                });
            }
        }, {
            key: "getWechatAccessToken",
            value: function getWechatAccessToken(response) {
                var _this5 = this;

                this.refs.loading._show(null);

                var requetModel = new _ETTRequestModel2.default();
                requetModel._path = 'https://api.weixin.qq.com/sns/oauth2/access_token?appid=' + _ETTURLConfig2.default.wxAppid + '&secret=' + _ETTURLConfig2.default.wxSecret + '&code=' + response.code + '&grant_type=authorization_code';
                requetModel._getInfo = '';

                _ETTNetworkUtil2.default.weChatRequest(requetModel).then(function (json) {
                    console.log(json);

                    if (json.access_token) {
                        _this5.getWechatUserInfo(json);
                    } else {
                        _this5.refs.loading._hiden();

                        var reslut = _ETTNetResponseHelper2.default.responseJson(json);

                        _this5.refs.toast.show(reslut.msg);
                    }
                }, function (json) {
                    console.log('fail' + json);

                    _this5.refs.loading._hiden();

                    var result = _ETTNetResponseHelper2.default.requestFailJson(json);

                    _this5.refs.toast.show(result.msg);
                });
            }
        }, {
            key: "getWechatUserInfo",
            value: function getWechatUserInfo(response) {
                var _this6 = this;

                var requetModel = new _ETTRequestModel2.default();
                requetModel._path = 'https://api.weixin.qq.com/sns/userinfo?access_token=' + response.access_token + '&openid=' + response.openid;
                requetModel._getInfo = '';

                _ETTNetworkUtil2.default.weChatRequest(requetModel).then(function (json) {
                    console.log(json);
                    var openid = json.openid;

                    if (openid && openid.length > 0) {
                        console.log('获取用户信息成功');

                        _this6.thirdRegister(json);
                    } else {
                        _this6.refs.loading._hiden();

                        var reslut = _ETTNetResponseHelper2.default.responseJson(json);

                        _this6.refs.toast.show(reslut.msg);
                    }
                }, function (json) {
                    console.log('fail' + json);

                    _this6.refs.loading._hiden();

                    var result = _ETTNetResponseHelper2.default.requestFailJson(json);

                    _this6.refs.toast.show(result.msg);
                });
            }
        }, {
            key: "thirdRegister",
            value: function thirdRegister(response) {
                var _this7 = this;

                var requetModel = new _ETTRequestModel2.default();
                requetModel._path = _ETTURLConfig2.default.SERVICE_NAME_ACCOUNT + _ETTURLConfig2.default.third_singin;
                requetModel._bodyData = 'bindingId=' + response.unionid + '&bindingAppId=wexin' + '&openId=' + response.openid + '&nickname=' + response.nickname + '&photoPath=' + response.headimgurl;
                requetModel._getInfo = requetModel.getAuthorizationRequesetData();

                _ETTNetworkUtil2.default.post(requetModel).then(function (json) {
                    console.log(json);

                    _this7.refs.loading._hiden();

                    var reslut = _ETTNetResponseHelper2.default.responseJsonForResult(json);

                    if (reslut.code == 1) {
                        var phone = reslut.data.phone;
                        var amountInfo = {
                            'userId': reslut.data.userId,
                            'phone': reslut.data.phone
                        };

                        if (phone == null || phone.length < 11) {
                            _ETTConfig.DataManager.thirdAmountLogSuccessful(JSON.parse(reslut.data.loginDetail), _ETTEnum.ETTUserLogType.logWeChat, amountInfo);

                            _this7.bindMobiliPhone();
                        } else {
                            _ETTConfig.DataManager.logSuccessful(JSON.parse(reslut.data.loginDetail), _ETTEnum.ETTUserLogType.logWeChat, amountInfo);
                        }
                    } else {
                        _this7.refs.toast.show(reslut.msg);
                    }
                }, function (json) {
                    console.log('fail' + json);

                    _this7.refs.loading._hiden();

                    var result = _ETTNetResponseHelper2.default.requestFailJson(json);

                    _this7.refs.toast.show(result.msg);
                });
            }
        }, {
            key: "bindMobiliPhone",
            value: function bindMobiliPhone() {
                this.props.navigation.navigate('ThirdLoginBindScene', {});
            }
        }]);
        return ETTLogScene;
    }(_react.Component), _class.navigationOptions = {
        title: 'Home'
    }, _temp);

    var ETTModalLogScene = exports.ETTModalLogScene = function (_ETTLogScene) {
        babelHelpers.inherits(ETTModalLogScene, _ETTLogScene);

        function ETTModalLogScene() {
            babelHelpers.classCallCheck(this, ETTModalLogScene);
            return babelHelpers.possibleConstructorReturn(this, (ETTModalLogScene.__proto__ || Object.getPrototypeOf(ETTModalLogScene)).apply(this, arguments));
        }

        babelHelpers.createClass(ETTModalLogScene, [{
            key: "closeHandle",
            value: function closeHandle() {
                console.log('登录关闭按钮回调');
                var callback = this.props.closeHandle;

                if (callback) {
                    callback();
                }
            }
        }, {
            key: "loginhandle",
            value: function loginhandle() {
                console.log('登录关闭按钮回调');
                var callback = this.props.loginHandle;

                if (callback) {
                    callback();
                }
            }
        }, {
            key: "registered",
            value: function registered() {
                var callback = this.props.regHandle;

                if (callback) {
                    callback();
                }
            }
        }, {
            key: "verCodeonPress",
            value: function verCodeonPress() {
                var callback = this.props.verCodeonHandle;

                if (callback) {
                    callback();
                }
            }
        }, {
            key: "forgetpwd",
            value: function forgetpwd() {
                var callback = this.props.forgetpwdHandle;

                if (callback) {
                    callback();
                }
            }
        }, {
            key: "weChatLogin",
            value: function weChatLogin() {
                babelHelpers.get(ETTModalLogScene.prototype.__proto__ || Object.getPrototypeOf(ETTModalLogScene.prototype), "weChatLogin", this).call(this);
            }
        }, {
            key: "bindMobiliPhone",
            value: function bindMobiliPhone() {
                var callback = this.props.bindMobilHandle;

                if (callback) {
                    callback();
                }
            }
        }]);
        return ETTModalLogScene;
    }(ETTLogScene);
},509,[114,12,510,371,449,460,342,343,450,512,461,347,362,360,369,361,348,516,513,518],"app/scene/ETTLogScene.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.WechatError = exports.openWXApp = exports.getApiVersion = exports.getWXAppInstallUrl = exports.isWXAppSupportApi = exports.isWXAppInstalled = exports.registerAppWithDescription = exports.registerApp = exports.removeAllListeners = exports.once = exports.addListener = undefined;
  exports.sendAuthRequest = sendAuthRequest;
  exports.shareToTimeline = shareToTimeline;
  exports.shareToSession = shareToSession;
  exports.pay = pay;

  var _reactNative = _require(_dependencyMap[0], "react-native");

  var _events = _require(_dependencyMap[1], "events");

  var isAppRegistered = false;
  var WeChat = _reactNative.NativeModules.WeChat;
  var emitter = new _events.EventEmitter();

  _reactNative.DeviceEventEmitter.addListener('WeChat_Resp', function (resp) {
    emitter.emit(resp.type, resp);
  });

  function wrapRegisterApp(nativeFunc) {
    if (!nativeFunc) {
      return undefined;
    }

    return function () {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      if (isAppRegistered) {
        return Promise.resolve(true);
      }

      isAppRegistered = true;
      return new Promise(function (resolve, reject) {
        nativeFunc.apply(null, [].concat(args, [function (error, result) {
          if (!error) {
            return resolve(result);
          }

          if (typeof error === 'string') {
            return reject(new Error(error));
          }

          reject(error);
        }]));
      });
    };
  }

  function wrapApi(nativeFunc) {
    if (!nativeFunc) {
      return undefined;
    }

    return function () {
      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      if (!isAppRegistered) {
        return Promise.reject(new Error('registerApp required.'));
      }

      return new Promise(function (resolve, reject) {
        nativeFunc.apply(null, [].concat(args, [function (error, result) {
          if (!error) {
            return resolve(result);
          }

          if (typeof error === 'string') {
            return reject(new Error(error));
          }

          reject(error);
        }]));
      });
    };
  }

  var addListener = exports.addListener = emitter.addListener.bind(emitter);
  var once = exports.once = emitter.once.bind(emitter);
  var removeAllListeners = exports.removeAllListeners = emitter.removeAllListeners.bind(emitter);
  var registerApp = exports.registerApp = wrapRegisterApp(WeChat.registerApp);
  var registerAppWithDescription = exports.registerAppWithDescription = wrapRegisterApp(WeChat.registerAppWithDescription);
  var isWXAppInstalled = exports.isWXAppInstalled = wrapApi(WeChat.isWXAppInstalled);
  var isWXAppSupportApi = exports.isWXAppSupportApi = wrapApi(WeChat.isWXAppSupportApi);
  var getWXAppInstallUrl = exports.getWXAppInstallUrl = wrapApi(WeChat.getWXAppInstallUrl);
  var getApiVersion = exports.getApiVersion = wrapApi(WeChat.getApiVersion);
  var openWXApp = exports.openWXApp = wrapApi(WeChat.openWXApp);
  var nativeShareToTimeline = wrapApi(WeChat.shareToTimeline);
  var nativeShareToSession = wrapApi(WeChat.shareToSession);
  var nativeSendAuthRequest = wrapApi(WeChat.sendAuthRequest);

  function sendAuthRequest(scopes, state) {
    return new Promise(function (resolve, reject) {
      WeChat.sendAuthRequest(scopes, state, function () {});
      emitter.once('SendAuth.Resp', function (resp) {
        if (resp.errCode === 0) {
          resolve(resp);
        } else {
          reject(new WechatError(resp));
        }
      });
    });
  }

  function shareToTimeline(data) {
    return new Promise(function (resolve, reject) {
      nativeShareToTimeline(data);
      emitter.once('SendMessageToWX.Resp', function (resp) {
        if (resp.errCode === 0) {
          resolve(resp);
        } else {
          reject(new WechatError(resp));
        }
      });
    });
  }

  function shareToSession(data) {
    return new Promise(function (resolve, reject) {
      nativeShareToSession(data);
      emitter.once('SendMessageToWX.Resp', function (resp) {
        if (resp.errCode === 0) {
          resolve(resp);
        } else {
          reject(new WechatError(resp));
        }
      });
    });
  }

  function pay(data) {
    function correct(actual, fixed) {
      if (!data[fixed] && data[actual]) {
        data[fixed] = data[actual];
        delete data[actual];
      }
    }

    correct('prepayid', 'prepayId');
    correct('noncestr', 'nonceStr');
    correct('partnerid', 'partnerId');
    correct('timestamp', 'timeStamp');
    return new Promise(function (resolve, reject) {
      WeChat.pay(data, function (result) {
        if (result) reject(result);
      });
      emitter.once('PayReq.Resp', function (resp) {
        if (resp.errCode === 0) {
          resolve(resp);
        } else {
          reject(new WechatError(resp));
        }
      });
    });
  }

  var WechatError = exports.WechatError = function (_Error) {
    babelHelpers.inherits(WechatError, _Error);

    function WechatError(resp) {
      babelHelpers.classCallCheck(this, WechatError);
      var message = resp.errStr || resp.errCode.toString();

      var _this = babelHelpers.possibleConstructorReturn(this, (WechatError.__proto__ || Object.getPrototypeOf(WechatError)).call(this, message));

      _this.name = 'WechatError';
      _this.code = resp.errCode;

      if (typeof Object.setPrototypeOf === 'function') {
        Object.setPrototypeOf(_this, WechatError.prototype);
      } else {
        _this.__proto__ = WechatError.prototype;
      }

      return _this;
    }

    return WechatError;
  }(Error);
},510,[12,511],"node_modules/react-native-wechat/index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  function EventEmitter() {
    this._events = this._events || {};
    this._maxListeners = this._maxListeners || undefined;
  }

  module.exports = EventEmitter;
  EventEmitter.EventEmitter = EventEmitter;
  EventEmitter.prototype._events = undefined;
  EventEmitter.prototype._maxListeners = undefined;
  EventEmitter.defaultMaxListeners = 10;

  EventEmitter.prototype.setMaxListeners = function (n) {
    if (!isNumber(n) || n < 0 || isNaN(n)) throw TypeError('n must be a positive number');
    this._maxListeners = n;
    return this;
  };

  EventEmitter.prototype.emit = function (type) {
    var er, handler, len, args, i, listeners;
    if (!this._events) this._events = {};

    if (type === 'error') {
      if (!this._events.error || isObject(this._events.error) && !this._events.error.length) {
        er = arguments[1];

        if (er instanceof Error) {
          throw er;
        }

        throw TypeError('Uncaught, unspecified "error" event.');
      }
    }

    handler = this._events[type];
    if (isUndefined(handler)) return false;

    if (isFunction(handler)) {
      switch (arguments.length) {
        case 1:
          handler.call(this);
          break;

        case 2:
          handler.call(this, arguments[1]);
          break;

        case 3:
          handler.call(this, arguments[1], arguments[2]);
          break;

        default:
          len = arguments.length;
          args = new Array(len - 1);

          for (i = 1; i < len; i++) {
            args[i - 1] = arguments[i];
          }

          handler.apply(this, args);
      }
    } else if (isObject(handler)) {
      len = arguments.length;
      args = new Array(len - 1);

      for (i = 1; i < len; i++) {
        args[i - 1] = arguments[i];
      }

      listeners = handler.slice();
      len = listeners.length;

      for (i = 0; i < len; i++) {
        listeners[i].apply(this, args);
      }
    }

    return true;
  };

  EventEmitter.prototype.addListener = function (type, listener) {
    var m;
    if (!isFunction(listener)) throw TypeError('listener must be a function');
    if (!this._events) this._events = {};
    if (this._events.newListener) this.emit('newListener', type, isFunction(listener.listener) ? listener.listener : listener);
    if (!this._events[type]) this._events[type] = listener;else if (isObject(this._events[type])) this._events[type].push(listener);else this._events[type] = [this._events[type], listener];

    if (isObject(this._events[type]) && !this._events[type].warned) {
      var m;

      if (!isUndefined(this._maxListeners)) {
        m = this._maxListeners;
      } else {
        m = EventEmitter.defaultMaxListeners;
      }

      if (m && m > 0 && this._events[type].length > m) {
        this._events[type].warned = true;
        console.error('(node) warning: possible EventEmitter memory ' + 'leak detected. %d listeners added. ' + 'Use emitter.setMaxListeners() to increase limit.', this._events[type].length);

        if (typeof console.trace === 'function') {
          console.trace();
        }
      }
    }

    return this;
  };

  EventEmitter.prototype.on = EventEmitter.prototype.addListener;

  EventEmitter.prototype.once = function (type, listener) {
    if (!isFunction(listener)) throw TypeError('listener must be a function');
    var fired = false;

    function g() {
      this.removeListener(type, g);

      if (!fired) {
        fired = true;
        listener.apply(this, arguments);
      }
    }

    g.listener = listener;
    this.on(type, g);
    return this;
  };

  EventEmitter.prototype.removeListener = function (type, listener) {
    var list, position, length, i;
    if (!isFunction(listener)) throw TypeError('listener must be a function');
    if (!this._events || !this._events[type]) return this;
    list = this._events[type];
    length = list.length;
    position = -1;

    if (list === listener || isFunction(list.listener) && list.listener === listener) {
      delete this._events[type];
      if (this._events.removeListener) this.emit('removeListener', type, listener);
    } else if (isObject(list)) {
      for (i = length; i-- > 0;) {
        if (list[i] === listener || list[i].listener && list[i].listener === listener) {
          position = i;
          break;
        }
      }

      if (position < 0) return this;

      if (list.length === 1) {
        list.length = 0;
        delete this._events[type];
      } else {
        list.splice(position, 1);
      }

      if (this._events.removeListener) this.emit('removeListener', type, listener);
    }

    return this;
  };

  EventEmitter.prototype.removeAllListeners = function (type) {
    var key, listeners;
    if (!this._events) return this;

    if (!this._events.removeListener) {
      if (arguments.length === 0) this._events = {};else if (this._events[type]) delete this._events[type];
      return this;
    }

    if (arguments.length === 0) {
      for (key in this._events) {
        if (key === 'removeListener') continue;
        this.removeAllListeners(key);
      }

      this.removeAllListeners('removeListener');
      this._events = {};
      return this;
    }

    listeners = this._events[type];

    if (isFunction(listeners)) {
      this.removeListener(type, listeners);
    } else {
      while (listeners.length) {
        this.removeListener(type, listeners[listeners.length - 1]);
      }
    }

    delete this._events[type];
    return this;
  };

  EventEmitter.prototype.listeners = function (type) {
    var ret;
    if (!this._events || !this._events[type]) ret = [];else if (isFunction(this._events[type])) ret = [this._events[type]];else ret = this._events[type].slice();
    return ret;
  };

  EventEmitter.listenerCount = function (emitter, type) {
    var ret;
    if (!emitter._events || !emitter._events[type]) ret = 0;else if (isFunction(emitter._events[type])) ret = 1;else ret = emitter._events[type].length;
    return ret;
  };

  function isFunction(arg) {
    return typeof arg === 'function';
  }

  function isNumber(arg) {
    return typeof arg === 'number';
  }

  function isObject(arg) {
    return typeof arg === 'object' && arg !== null;
  }

  function isUndefined(arg) {
    return arg === void 0;
  }
},511,[],"node_modules/events/events.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.ETTEditCodeView = exports.ETTEditOldPwdView = exports.ETTEditPwdView = exports.ETTEditPhoneCodeView = exports.ETTEditPhoneView = exports.ETTEditView = undefined;
    var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/app/common/ETTEditView.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    var _ETTHeaderStyles = _require(_dependencyMap[2], "../res/styles/ETTHeaderStyles");

    var _ETTHeaderStyles2 = babelHelpers.interopRequireDefault(_ETTHeaderStyles);

    var _ETTLogStyles = _require(_dependencyMap[3], "../res/styles/ETTLogStyles");

    var _ETTLogStyles2 = babelHelpers.interopRequireDefault(_ETTLogStyles);

    var ETTEditView = exports.ETTEditView = function (_Component) {
        babelHelpers.inherits(ETTEditView, _Component);

        function ETTEditView(props) {
            babelHelpers.classCallCheck(this, ETTEditView);

            var _this = babelHelpers.possibleConstructorReturn(this, (ETTEditView.__proto__ || Object.getPrototypeOf(ETTEditView)).call(this, props));

            _this.state = {
                text: '',
                textvisible: true,
                keyboardType: 'default'
            };
            return _this;
        }

        babelHelpers.createClass(ETTEditView, [{
            key: "imageView",
            value: function imageView() {}
        }, {
            key: "rightView",
            value: function rightView() {
                return this.imageView();
            }
        }, {
            key: "placeholder",
            value: function placeholder() {
                return this.props.placeholder;
            }
        }, {
            key: "inputStyle",
            value: function inputStyle() {
                return _ETTLogStyles2.default.log_textInput;
            }
        }, {
            key: "imageCallBack",
            value: function imageCallBack() {}
        }, {
            key: "valueChange",
            value: function valueChange(text) {
                this.setState({
                    text: text
                });
                var callback = this.props.changeHandle;

                if (callback) {
                    callback(text);
                }
            }
        }, {
            key: "render",
            value: function render() {
                var _this2 = this;

                return _react2.default.createElement(
                    _reactNative.View,
                    {
                        style: _ETTLogStyles2.default.log_input_top,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 60
                        }
                    },
                    _react2.default.createElement(_reactNative.TextInput, {
                        ref: function ref(inputView) {
                            return _this2._textInput = inputView;
                        },
                        style: this.inputStyle(),
                        placeholder: this.placeholder(),
                        underlineColorAndroid: "transparent",
                        secureTextEntry: this.state.textvisible,
                        value: this.state.text,
                        keyboardType: this.state.keyboardType,
                        maxLength: this.props.maxLength,
                        onChangeText: function onChangeText(text) {
                            return _this2.valueChange(text);
                        },
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 61
                        }
                    }),
                    this.rightView()
                );
            }
        }]);
        return ETTEditView;
    }(_react.Component);

    var ETTEditPhoneView = exports.ETTEditPhoneView = function (_ETTEditView) {
        babelHelpers.inherits(ETTEditPhoneView, _ETTEditView);

        function ETTEditPhoneView() {
            babelHelpers.classCallCheck(this, ETTEditPhoneView);
            return babelHelpers.possibleConstructorReturn(this, (ETTEditPhoneView.__proto__ || Object.getPrototypeOf(ETTEditPhoneView)).apply(this, arguments));
        }

        babelHelpers.createClass(ETTEditPhoneView, [{
            key: "componentWillMount",
            value: function componentWillMount() {
                this.setState({
                    textvisible: false,
                    keyboardType: 'phone-pad'
                });
            }
        }, {
            key: "imageView",
            value: function imageView() {
                var _this4 = this;

                return _react2.default.createElement(
                    _reactNative.TouchableOpacity,
                    {
                        onPress: function onPress() {
                            return _this4.imageCallBack();
                        },
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 96
                        }
                    },
                    _react2.default.createElement(_reactNative.Image, {
                        style: _ETTLogStyles2.default.log_input_phone_image,
                        source: _require(_dependencyMap[4], '../res/images/tab_c9_close.png'),
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 97
                        }
                    })
                );
            }
        }, {
            key: "imageCallBack",
            value: function imageCallBack() {
                if (this._textInput) {
                    this.setState({
                        text: ''
                    });
                }
            }
        }]);
        return ETTEditPhoneView;
    }(ETTEditView);

    var ETTEditPhoneCodeView = exports.ETTEditPhoneCodeView = function (_ETTEditPhoneView) {
        babelHelpers.inherits(ETTEditPhoneCodeView, _ETTEditPhoneView);

        function ETTEditPhoneCodeView() {
            babelHelpers.classCallCheck(this, ETTEditPhoneCodeView);
            return babelHelpers.possibleConstructorReturn(this, (ETTEditPhoneCodeView.__proto__ || Object.getPrototypeOf(ETTEditPhoneCodeView)).apply(this, arguments));
        }

        babelHelpers.createClass(ETTEditPhoneCodeView, [{
            key: "imageView",
            value: function imageView() {
                return null;
            }
        }]);
        return ETTEditPhoneCodeView;
    }(ETTEditPhoneView);

    var ETTEditPwdView = exports.ETTEditPwdView = function (_ETTEditView2) {
        babelHelpers.inherits(ETTEditPwdView, _ETTEditView2);

        function ETTEditPwdView() {
            babelHelpers.classCallCheck(this, ETTEditPwdView);
            return babelHelpers.possibleConstructorReturn(this, (ETTEditPwdView.__proto__ || Object.getPrototypeOf(ETTEditPwdView)).apply(this, arguments));
        }

        babelHelpers.createClass(ETTEditPwdView, [{
            key: "componentWillMount",
            value: function componentWillMount() {
                this.setState({
                    keyboardType: 'default'
                });
            }
        }, {
            key: "imageView",
            value: function imageView() {
                var _this7 = this;

                return _react2.default.createElement(
                    _reactNative.TouchableOpacity,
                    {
                        onPress: function onPress() {
                            return _this7.imageCallBack();
                        },
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 143
                        }
                    },
                    _react2.default.createElement(_reactNative.Image, {
                        style: _ETTLogStyles2.default.log_input_pwd_image,
                        source: this.state.textvisible == true ? _require(_dependencyMap[5], '../res/images/tab_c9_visible.png') : _require(_dependencyMap[6], '../res/images/tab_c9_hide.png'),
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 144
                        }
                    })
                );
            }
        }, {
            key: "imageCallBack",
            value: function imageCallBack() {
                var visible = !this.state.textvisible;
                this.setState({
                    textvisible: visible
                });
            }
        }]);
        return ETTEditPwdView;
    }(ETTEditView);

    var ETTEditOldPwdView = exports.ETTEditOldPwdView = function (_ETTEditView3) {
        babelHelpers.inherits(ETTEditOldPwdView, _ETTEditView3);

        function ETTEditOldPwdView() {
            babelHelpers.classCallCheck(this, ETTEditOldPwdView);
            return babelHelpers.possibleConstructorReturn(this, (ETTEditOldPwdView.__proto__ || Object.getPrototypeOf(ETTEditOldPwdView)).apply(this, arguments));
        }

        babelHelpers.createClass(ETTEditOldPwdView, [{
            key: "imageView",
            value: function imageView() {
                return null;
            }
        }]);
        return ETTEditOldPwdView;
    }(ETTEditView);

    var ETTEditCodeView = exports.ETTEditCodeView = function (_ETTEditView4) {
        babelHelpers.inherits(ETTEditCodeView, _ETTEditView4);

        function ETTEditCodeView(props) {
            babelHelpers.classCallCheck(this, ETTEditCodeView);

            var _this9 = babelHelpers.possibleConstructorReturn(this, (ETTEditCodeView.__proto__ || Object.getPrototypeOf(ETTEditCodeView)).call(this, props));

            _this9.state = {
                timerCount: _this9.props.timerCount || 60,
                timerTitle: _this9.props.timerTitle || '获取短信验证码',
                counting: false,
                selfEnable: true
            };
            return _this9;
        }

        babelHelpers.createClass(ETTEditCodeView, [{
            key: "imageView",
            value: function imageView() {
                var _this10 = this;

                return _react2.default.createElement(
                    _reactNative.TouchableOpacity,
                    {
                        ref: "button",
                        onPress: function onPress() {
                            return _this10.imageCallBack();
                        },
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 184
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.Text,
                        {
                            ref: "buttontext",
                            style: this.state.counting ? _ETTLogStyles2.default.log_vercode_text_counting : _ETTLogStyles2.default.log_vercode_text,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 185
                            }
                        },
                        " ",
                        this.state.timerTitle
                    )
                );
            }
        }, {
            key: "_shouldStartCountting",
            value: function _shouldStartCountting(shouldStart) {
                if (this.state.counting) {
                    return;
                }

                if (shouldStart) {
                    this._countDownAction();

                    this.setState({
                        counting: true,
                        selfEnable: false
                    });
                } else {
                    this.setState({
                        selfEnable: true
                    });
                }
            }
        }, {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
                clearInterval(this.interval);
            }
        }, {
            key: "_countdownAction",
            value: function _countdownAction() {
                var _this11 = this;

                var codeTime = this.state.timerCount;
                var now = Date.now();
                var overTimeStamp = now + codeTime * 1000 + 100;
                this.interval = setInterval(function () {
                    var nowStamp = Date.now();

                    if (nowStamp >= overTimeStamp) {
                        _this11.interval && clearInterval(_this11.interval);

                        _this11.setState({
                            timerCount: codeTime,
                            timerTitle: _this11.props.timerTitle || '获取短信验证码',
                            counting: false,
                            selfEnable: true
                        });

                        if (_this11.props.timerEnd) {
                            _this11.props.timerEnd();
                        }

                        ;
                    } else {
                        var leftTime = parseInt((overTimeStamp - nowStamp) / 1000, 10);

                        _this11.setState({
                            timerCount: leftTime,
                            timerTitle: "\u91CD\u65B0\u83B7\u53D6(" + leftTime + "s)",
                            counting: true,
                            selfEnable: false
                        });
                    }
                }, 1000);
            }
        }, {
            key: "imageCallBack",
            value: function imageCallBack() {
                if (this.state.counting) {
                    return;
                } else {
                    var callback = this.props.getCodeHandle;

                    if (callback) {
                        callback();
                    }
                }
            }
        }, {
            key: "inputStyle",
            value: function inputStyle() {
                return _ETTLogStyles2.default.log_code_textInput;
            }
        }]);
        return ETTEditCodeView;
    }(ETTEditView);
},512,[114,12,451,460,513,514,515],"app/common/ETTEditView.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = _require(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/app/res/images",
    "width": 20,
    "height": 20,
    "scales": [1, 3],
    "hash": "414a235be9e60539383c24b9f1f7f2dd",
    "name": "tab_c9_close",
    "type": "png"
  });
},513,[175],"app/res/images/tab_c9_close.png");
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = _require(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/app/res/images",
    "width": 14,
    "height": 9.5,
    "scales": [2, 3],
    "hash": "45a4d19b34a6c486ce37b1ae45628cca",
    "name": "tab_c9_visible",
    "type": "png"
  });
},514,[175],"app/res/images/tab_c9_visible@2x.png");
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = _require(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/app/res/images",
    "width": 15,
    "height": 7,
    "scales": [2, 3],
    "hash": "4a5f6ea128f37dfa5935efd199b45127",
    "name": "tab_c9_hide",
    "type": "png"
  });
},515,[175],"app/res/images/tab_c9_hide@2x.png");
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = undefined;
    var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/app/scene/ETTThirdLoginBindScene.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    var _reactNativeEasyToast = _require(_dependencyMap[2], "react-native-easy-toast");

    var _reactNativeEasyToast2 = babelHelpers.interopRequireDefault(_reactNativeEasyToast);

    var _reactNavigation = _require(_dependencyMap[3], "react-navigation");

    var _ETTLogStyles = _require(_dependencyMap[4], "../res/styles/ETTLogStyles");

    var _ETTLogStyles2 = babelHelpers.interopRequireDefault(_ETTLogStyles);

    var _ETTDevice = _require(_dependencyMap[5], "../res/values/ETTDevice");

    var _ETTDevice2 = babelHelpers.interopRequireDefault(_ETTDevice);

    var _ETTConfig = _require(_dependencyMap[6], "../res/values/ETTConfig");

    var _ETTStatusBar = _require(_dependencyMap[7], "../common/ETTStatusBar");

    var _ETTString = _require(_dependencyMap[8], "../res/values/ETTString");

    var _ETTString2 = babelHelpers.interopRequireDefault(_ETTString);

    var _ETTEditView = _require(_dependencyMap[9], "../common/ETTEditView");

    var _ETTLoadingAnimation = _require(_dependencyMap[10], "../common/ETTLoadingAnimation");

    var _ETTLoadingAnimation2 = babelHelpers.interopRequireDefault(_ETTLoadingAnimation);

    var _ETTNetworkUtil = _require(_dependencyMap[11], "../utils/ETTNetworkUtil");

    var _ETTNetworkUtil2 = babelHelpers.interopRequireDefault(_ETTNetworkUtil);

    var _ETTURLConfig = _require(_dependencyMap[12], "../res/values/ETTURLConfig");

    var _ETTURLConfig2 = babelHelpers.interopRequireDefault(_ETTURLConfig);

    var _ETTNetResponseHelper = _require(_dependencyMap[13], "../utils/ETTNetResponseHelper");

    var _ETTNetResponseHelper2 = babelHelpers.interopRequireDefault(_ETTNetResponseHelper);

    var _ETTRequestModel = _require(_dependencyMap[14], "../mobx/ETTRequestModel");

    var _ETTRequestModel2 = babelHelpers.interopRequireDefault(_ETTRequestModel);

    var _ETTEnum = _require(_dependencyMap[15], "../res/values/ETTEnum");

    var ETTThirdLoginBindScene = function (_Component) {
        babelHelpers.inherits(ETTThirdLoginBindScene, _Component);

        function ETTThirdLoginBindScene(props) {
            babelHelpers.classCallCheck(this, ETTThirdLoginBindScene);

            var _this = babelHelpers.possibleConstructorReturn(this, (ETTThirdLoginBindScene.__proto__ || Object.getPrototypeOf(ETTThirdLoginBindScene)).call(this, props));

            _this.state = {
                mobile: '',
                code: ''
            };
            return _this;
        }

        babelHelpers.createClass(ETTThirdLoginBindScene, [{
            key: "render",
            value: function render() {
                var _this2 = this;

                return _react2.default.createElement(
                    _reactNative.View,
                    {
                        style: _ETTLogStyles2.default.log_Mian,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 44
                        }
                    },
                    _react2.default.createElement(_ETTStatusBar.ETTDarkStatus, {
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 45
                        }
                    }),
                    _react2.default.createElement(
                        _reactNative.View,
                        {
                            style: _ETTLogStyles2.default.log_bind_header,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 46
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.TouchableOpacity,
                            {
                                onPress: function onPress() {
                                    return _this2.goback();
                                },
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 47
                                }
                            },
                            _react2.default.createElement(_reactNative.Image, {
                                style: _ETTLogStyles2.default.log_back,
                                source: _require(_dependencyMap[16], '../res/images/km_back.png'),
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 48
                                }
                            })
                        ),
                        _react2.default.createElement(
                            _reactNative.Text,
                            {
                                style: _ETTLogStyles2.default.log_code_title,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 52
                                }
                            },
                            "\u7ED1\u5B9A\u8D26\u53F7"
                        )
                    ),
                    _react2.default.createElement(
                        _reactNative.Text,
                        {
                            style: _ETTLogStyles2.default.log_bind_amount_prompt,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 56
                            }
                        },
                        _ETTString2.default.bindamount_prompt_title
                    ),
                    _react2.default.createElement(_ETTEditView.ETTEditPhoneCodeView, {
                        placeholder: _ETTString2.default.log_code_placeholder,
                        maxLength: _ETTConfig.AMOUNT_MAXLEGTH,
                        changeHandle: function changeHandle(text) {
                            return _this2.amountChangeHandle(text);
                        },
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 59
                        }
                    }),
                    _react2.default.createElement(_reactNative.Text, {
                        style: _ETTLogStyles2.default.log_line,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 62
                        }
                    }),
                    _react2.default.createElement(_ETTEditView.ETTEditCodeView, {
                        ref: "editCode",
                        placeholder: _ETTString2.default.forgetamount_pwd_placeholder,
                        maxLength: _ETTConfig.REG_CODEMAXLENGTH,
                        changeHandle: function changeHandle(text) {
                            return _this2.codeChangehandle(text);
                        },
                        getCodeHandle: function getCodeHandle() {
                            return _this2.getCodelHandel();
                        },
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 63
                        }
                    }),
                    _react2.default.createElement(_reactNative.Text, {
                        style: _ETTLogStyles2.default.log_line,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 68
                        }
                    }),
                    _react2.default.createElement(
                        _reactNative.TouchableOpacity,
                        {
                            style: _ETTLogStyles2.default.log_btn,
                            onPress: function onPress() {
                                return _this2.logCallback();
                            },
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 69
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.Text,
                            {
                                style: _ETTLogStyles2.default.log_btn_text,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 70
                                }
                            },
                            "\u7ED1\u5B9A"
                        )
                    ),
                    _react2.default.createElement(_reactNativeEasyToast2.default, {
                        ref: "toast",
                        style: _ETTLogStyles2.default.reg_toast,
                        opacity: 0.8,
                        position: "top",
                        positionValue: 200,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 75
                        }
                    }),
                    _react2.default.createElement(_ETTLoadingAnimation2.default, {
                        ref: "loading",
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 82
                        }
                    })
                );
            }
        }, {
            key: "goback",
            value: function goback() {
                this.props.navigation.pop();
                var params = this.props.navigation.state.params;
                var callback = params.stackCloseHandle;

                if (callback && _ETTConfig.DataManager._userModel._isLog == false) {
                    callback();
                }
            }
        }, {
            key: "amountChangeHandle",
            value: function amountChangeHandle(text) {
                this.setState({
                    mobile: text
                });
            }
        }, {
            key: "codeChangehandle",
            value: function codeChangehandle(text) {
                this.setState({
                    code: text
                });
            }
        }, {
            key: "logCallback",
            value: function logCallback() {
                if (this.state.mobile.length < 1) {
                    this.refs.toast.show(_ETTString2.default.iphone_null_toast);
                } else if (this.state.mobile.length < _ETTConfig.AMOUNT_MAXLEGTH) {
                    this.refs.toast.show(_ETTString2.default.iphone_len_toast);
                } else if (this.state.code.length < 1) {
                    this.refs.toast.show(_ETTString2.default.code_null_toast);
                } else {
                    this.refs.loading._show(null);

                    this.enterLog();
                }
            }
        }, {
            key: "enterLog",
            value: function enterLog() {
                var _this3 = this;

                console.log("enterlog");
                var formData = new FormData();
                formData.append("mobile", this.state.mobile);
                formData.append("mobileCode", this.state.code);
                var requetModel = new _ETTRequestModel2.default();
                requetModel._path = _ETTURLConfig2.default.SERVICE_NAME_ACCOUNT + _ETTURLConfig2.default.third_log_bind;
                requetModel._method = 'POST';
                requetModel._bodyData = 'phone=' + this.state.mobile + '&phoneCode=' + this.state.code;
                requetModel._getInfo = requetModel.getTokenRequesetData();

                _ETTNetworkUtil2.default.post(requetModel).then(function (json) {
                    console.log("enterlog" + json);

                    var reslut = _ETTNetResponseHelper2.default.responseJson(json);

                    if (reslut.code != 1) {
                        _this3.refs.loading._hiden();

                        _this3.refs.toast.show(reslut.msg);
                    } else {
                        _ETTConfig.DataManager.bindMobiePhoneSuccessful(JSON.parse(reslut.data.loginInfo), _ETTEnum.ETTUserLogType.logWeChat, {
                            'phone': _this3.state.mobile
                        });

                        setTimeout(function () {
                            return _this3.requestUserThirdInfo(_ETTString2.default.bind_phone_successful);
                        }, 2000);
                    }
                }, function (json) {
                    _this3.refs.loading._hiden();

                    console.log('请求错误' + json);

                    var result = _ETTNetResponseHelper2.default.requestFailJson(json);

                    _this3.refs.toast.show(result.msg);
                });
            }
        }, {
            key: "requestUserThirdInfo",
            value: function requestUserThirdInfo(msg) {
                var _this4 = this;

                var requetModel = new _ETTRequestModel2.default();
                requetModel._path = _ETTURLConfig2.default.SERVICE_NAME_ACCOUNT + _ETTURLConfig2.default.edit_nickname;
                requetModel._bodyData = '';
                requetModel._method = 'GET', requetModel._getInfo = requetModel.getTokenRequesetData();

                _ETTNetworkUtil2.default.requestWithToken(requetModel, function (json) {
                    console.log(json);

                    var reslut = _ETTNetResponseHelper2.default.responseJsonForResult(json);

                    if (reslut.code == 1) {
                        _ETTConfig.DataManager.obtainUserInfoSuccessful(json.data);

                        _this4.refs.loading._hiden();

                        if (_ETTConfig.DataManager._userModel._weChatisBinding == false) {
                            _this4.refs.toast.show('绑定失败');
                        } else {
                            _this4.refs.toast.show(msg);

                            var params = _this4.props.navigation.state.params;
                            var bindfinish = params.bindfinish;

                            if (bindfinish) {
                                bindfinish(true);
                            }

                            setTimeout(function () {
                                return _this4.goback();
                            }, 1000);
                        }
                    }
                });
            }
        }, {
            key: "getCodelHandel",
            value: function getCodelHandel() {
                var _this5 = this;

                console.log("绑定手机号获取验证码");

                if (this.state.mobile.length < 1) {
                    this.refs.toast.show(_ETTString2.default.iphone_null_toast);
                } else if (this.state.mobile.length < _ETTConfig.AMOUNT_MAXLEGTH) {
                    this.refs.toast.show(_ETTString2.default.iphone_len_toast);
                } else {
                    this.refs.editCode._countdownAction();

                    this.refs.loading._show(null);

                    var requetModel = new _ETTRequestModel2.default();
                    requetModel._path = _ETTURLConfig2.default.SERVICE_NAME_SMS + _ETTURLConfig2.default.third_log_bind_getCode;
                    requetModel._method = 'POST';
                    requetModel._bodyData = 'phone=' + this.state.mobile;
                    requetModel._getInfo = requetModel.getTokenRequesetData();

                    _ETTNetworkUtil2.default.post(requetModel).then(function (json) {
                        console.log(json);

                        var reslut = _ETTNetResponseHelper2.default.responseJson(json);

                        _this5.refs.loading._hiden();

                        if (reslut.code != 1) {
                            _this5.refs.toast.show(reslut.msg);
                        } else {
                            _this5.refs.toast.show(_ETTString2.default.code_send_successful);
                        }
                    }, function (json) {
                        _this5.refs.loading._hiden();

                        var result = _ETTNetResponseHelper2.default.requestFailJson(json);

                        _this5.refs.toast.show(result.msg);
                    });
                }
            }
        }]);
        return ETTThirdLoginBindScene;
    }(_react.Component);

    exports.default = ETTThirdLoginBindScene;
},516,[114,12,449,371,460,342,343,450,347,512,461,362,360,369,361,348,517],"app/scene/ETTThirdLoginBindScene.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = _require(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/app/res/images",
    "width": 10.5,
    "height": 17,
    "scales": [2, 3],
    "hash": "c618797a495270e3d79d6cd9a3c913f9",
    "name": "km_back",
    "type": "png"
  });
},517,[175],"app/res/images/km_back@2x.png");
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = _require(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/app/res/images",
    "width": 26.5,
    "height": 21.5,
    "scales": [2, 3],
    "hash": "ee9908eccd2629800ca332eca176ecba",
    "name": "wechat_c11",
    "type": "png"
  });
},518,[175],"app/res/images/wechat_c11@2x.png");
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = _require(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/app/res/images",
    "width": 26,
    "height": 26,
    "scales": [1, 2, 3],
    "hash": "5f230ae4adcc7071d0fe2da633b199ba",
    "name": "fanhui",
    "type": "png"
  });
},519,[175],"app/res/images/fanhui.png");
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = _require(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/app/res/images",
    "width": 26,
    "height": 26,
    "scales": [1, 2, 3],
    "hash": "b131f271f71c5bf92618eb19150edc32",
    "name": "zhuanfa",
    "type": "png"
  });
},520,[175],"app/res/images/zhuanfa.png");
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = _require(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/app/res/images",
    "width": 6,
    "height": 9.5,
    "scales": [2, 3],
    "hash": "efb75f00a5de83c3059e2aaa813f123a",
    "name": "tab_c5",
    "type": "png"
  });
},521,[175],"app/res/images/tab_c5@2x.png");
__d(function (global, _require, module, exports, _dependencyMap) {
   module.exports = _require(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
      "__packager_asset": true,
      "httpServerLocation": "/assets/app/res/images",
      "width": 750,
      "height": 246,
      "scales": [1],
      "hash": "792e45ef66fa020aeba8d27ae93765da",
      "name": "1",
      "type": "png"
   });
},522,[175],"app/res/images/1.png");
__d(function (global, _require, module, exports, _dependencyMap) {
   module.exports = _require(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
      "__packager_asset": true,
      "httpServerLocation": "/assets/app/res/images",
      "width": 680,
      "height": 140,
      "scales": [1],
      "hash": "8d881b823187c4ead07ff0600eb34c74",
      "name": "3",
      "type": "png"
   });
},523,[175],"app/res/images/3.png");
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = undefined;

    var _class,
        _class2,
        _temp,
        _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/app/scene/ETTMyScene.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    var _mobxReact = _require(_dependencyMap[2], "mobx-react");

    var _reactNativeCommunications = _require(_dependencyMap[3], "react-native-communications");

    var _reactNativeCommunications2 = babelHelpers.interopRequireDefault(_reactNativeCommunications);

    var _reactNativeEasyToast = _require(_dependencyMap[4], "react-native-easy-toast");

    var _reactNativeEasyToast2 = babelHelpers.interopRequireDefault(_reactNativeEasyToast);

    var _reactNavigation = _require(_dependencyMap[5], "react-navigation");

    var _ETTMainStyles = _require(_dependencyMap[6], "../res/styles/ETTMainStyles");

    var _ETTMainStyles2 = babelHelpers.interopRequireDefault(_ETTMainStyles);

    var _ETTDevice = _require(_dependencyMap[7], "../res/values/ETTDevice");

    var _ETTDevice2 = babelHelpers.interopRequireDefault(_ETTDevice);

    var _ETTConfig = _require(_dependencyMap[8], "../res/values/ETTConfig");

    var _ETTStatusBar = _require(_dependencyMap[9], "../common/ETTStatusBar");

    var _ETTPerlCenterStyles = _require(_dependencyMap[10], "../res/styles/ETTPerlCenterStyles");

    var _ETTPerlCenterStyles2 = babelHelpers.interopRequireDefault(_ETTPerlCenterStyles);

    var _ETTModalLogView = _require(_dependencyMap[11], "../common/ETTModalLogView");

    var _ETTModalLogView2 = babelHelpers.interopRequireDefault(_ETTModalLogView);

    var _ETTLogStyles = _require(_dependencyMap[12], "../res/styles/ETTLogStyles");

    var _ETTLogStyles2 = babelHelpers.interopRequireDefault(_ETTLogStyles);

    var _ETTLoadingAnimation = _require(_dependencyMap[13], "../common/ETTLoadingAnimation");

    var _ETTLoadingAnimation2 = babelHelpers.interopRequireDefault(_ETTLoadingAnimation);

    var _ETTNetworkUtil = _require(_dependencyMap[14], "../utils/ETTNetworkUtil");

    var _ETTNetworkUtil2 = babelHelpers.interopRequireDefault(_ETTNetworkUtil);

    var _ETTURLConfig = _require(_dependencyMap[15], "../res/values/ETTURLConfig");

    var _ETTURLConfig2 = babelHelpers.interopRequireDefault(_ETTURLConfig);

    var _ETTNetResponseHelper = _require(_dependencyMap[16], "../utils/ETTNetResponseHelper");

    var _ETTNetResponseHelper2 = babelHelpers.interopRequireDefault(_ETTNetResponseHelper);

    var _ETTRequestModel = _require(_dependencyMap[17], "../mobx/ETTRequestModel");

    var _ETTRequestModel2 = babelHelpers.interopRequireDefault(_ETTRequestModel);

    var ETTMyScene = (0, _mobxReact.observer)(_class = (_temp = _class2 = function (_Component) {
        babelHelpers.inherits(ETTMyScene, _Component);

        function ETTMyScene(props) {
            babelHelpers.classCallCheck(this, ETTMyScene);

            var _this = babelHelpers.possibleConstructorReturn(this, (ETTMyScene.__proto__ || Object.getPrototypeOf(ETTMyScene)).call(this, props));

            _this.state = {
                visible: true,
                animationType: 'slide'
            };
            return _this;
        }

        babelHelpers.createClass(ETTMyScene, [{
            key: "componentDidMount",
            value: function componentDidMount() {
                if (_ETTConfig.DataManager._userModel._isLog == true) {
                    this.requestUserInfo();
                }
            }
        }, {
            key: "requestUserInfo",
            value: function requestUserInfo() {
                var _this2 = this;

                this.refs.loading._show(null);

                var requetModel = new _ETTRequestModel2.default();
                requetModel._path = _ETTURLConfig2.default.SERVICE_NAME_ACCOUNT + _ETTURLConfig2.default.edit_nickname;
                requetModel._bodyData = '';
                requetModel._method = 'GET', requetModel._getInfo = requetModel.getTokenRequesetData();

                _ETTNetworkUtil2.default.requestWithToken(requetModel, function (json) {
                    console.log(json);

                    var reslut = _ETTNetResponseHelper2.default.responseJsonForResult(json);

                    if (reslut.code == 1) {
                        _ETTConfig.DataManager.obtainUserInfoSuccessful(json.data);
                    }

                    _this2.refs.loading._hiden();
                });
            }
        }, {
            key: "render",
            value: function render() {
                if (_ETTConfig.DataManager._userModel._isLog == false) {
                    return this.modalLogView();
                } else {
                    return this.perCenterView();
                }
            }
        }, {
            key: "modalLogView",
            value: function modalLogView() {
                return _react2.default.createElement(_ETTModalLogView2.default, {
                    nav: this.props.navigation,
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 108
                    }
                });
            }
        }, {
            key: "perCenterView",
            value: function perCenterView() {
                var _this3 = this;

                return _react2.default.createElement(
                    _reactNative.View,
                    {
                        style: _ETTPerlCenterStyles2.default.container,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 115
                        }
                    },
                    _react2.default.createElement(_ETTStatusBar.ETTDarkStatus, {
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 116
                        }
                    }),
                    _react2.default.createElement(
                        _reactNative.View,
                        {
                            style: _ETTPerlCenterStyles2.default.top,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 117
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.View,
                            {
                                style: _ETTPerlCenterStyles2.default.top_header,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 118
                                }
                            },
                            _react2.default.createElement(
                                _reactNative.TouchableOpacity,
                                {
                                    onPress: function onPress() {
                                        return _this3.goback();
                                    },
                                    style: _ETTPerlCenterStyles2.default.top_header_back,
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 119
                                    }
                                },
                                _react2.default.createElement(_reactNative.Image, {
                                    style: _ETTPerlCenterStyles2.default.top_header_back_image,
                                    source: _require(_dependencyMap[18], '../res/images/km_back.png'),
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 120
                                    }
                                })
                            )
                        ),
                        _react2.default.createElement(_reactNative.Image, {
                            source: _require(_dependencyMap[19], '../res/images/myinfo_icon_bg.png'),
                            style: _ETTPerlCenterStyles2.default.user_icon_btn,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 125
                            }
                        }),
                        _react2.default.createElement(
                            _reactNative.Text,
                            {
                                style: _ETTPerlCenterStyles2.default.user_nickname,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 130
                                }
                            },
                            this.getNickname()
                        ),
                        _react2.default.createElement(
                            _reactNative.View,
                            {
                                style: _ETTPerlCenterStyles2.default.user_amount,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 135
                                }
                            },
                            _react2.default.createElement(
                                _reactNative.Text,
                                {
                                    style: _ETTPerlCenterStyles2.default.user_amount_text,
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 136
                                    }
                                },
                                _ETTConfig.DataManager._userModel._phone
                            ),
                            _react2.default.createElement(
                                _reactNative.TouchableOpacity,
                                {
                                    style: _ETTPerlCenterStyles2.default.user_amount_ecit,
                                    onPress: function onPress() {
                                        return _this3.gersonalDataEditorHandle();
                                    },
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 137
                                    }
                                },
                                _react2.default.createElement(_reactNative.Image, {
                                    style: _ETTPerlCenterStyles2.default.user_amount_ecit_image,
                                    source: _require(_dependencyMap[20], '../res/images/amount_edit.png'),
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 138
                                    }
                                })
                            )
                        )
                    ),
                    _react2.default.createElement(
                        _reactNative.TouchableOpacity,
                        {
                            onPress: function onPress() {
                                return _this3.bindThirdAmountCallBack();
                            },
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 145
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.View,
                            {
                                style: _ETTPerlCenterStyles2.default.baseRow,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 146
                                }
                            },
                            _react2.default.createElement(
                                _reactNative.Text,
                                {
                                    style: _ETTPerlCenterStyles2.default.baseRowTitle,
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 148
                                    }
                                },
                                "\u5173\u8054\u8D26\u53F7"
                            ),
                            _react2.default.createElement(
                                _reactNative.View,
                                {
                                    style: _ETTPerlCenterStyles2.default.baseRowRight,
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 149
                                    }
                                },
                                this.getWechatBindImage()
                            )
                        )
                    ),
                    _react2.default.createElement(
                        _reactNative.View,
                        {
                            style: _ETTPerlCenterStyles2.default.row_line_bg,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 159
                            }
                        },
                        _react2.default.createElement(_reactNative.View, {
                            style: _ETTPerlCenterStyles2.default.row_line,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 160
                            }
                        })
                    ),
                    _react2.default.createElement(
                        _reactNative.View,
                        {
                            style: _ETTPerlCenterStyles2.default.baseRow,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 162
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.Text,
                            {
                                style: _ETTPerlCenterStyles2.default.baseRowTitle,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 163
                                }
                            },
                            "\u8054\u7CFB\u5BA2\u670D"
                        ),
                        _react2.default.createElement(
                            _reactNative.TouchableOpacity,
                            {
                                onPress: function onPress() {
                                    return _this3.serviceCallBack();
                                },
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 164
                                }
                            },
                            _react2.default.createElement(
                                _reactNative.Text,
                                {
                                    style: _ETTPerlCenterStyles2.default.baseRowContent,
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 165
                                    }
                                },
                                "400-661-6666"
                            )
                        )
                    ),
                    _react2.default.createElement(
                        _reactNative.View,
                        {
                            style: _ETTPerlCenterStyles2.default.row_line_bg,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 170
                            }
                        },
                        _react2.default.createElement(_reactNative.View, {
                            style: _ETTPerlCenterStyles2.default.row_line,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 171
                            }
                        })
                    ),
                    _react2.default.createElement(
                        _reactNative.TouchableOpacity,
                        {
                            style: _ETTPerlCenterStyles2.default.row_only_title,
                            onPress: function onPress() {
                                return _this3.myOrderListCallback();
                            },
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 173
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.Text,
                            {
                                style: _ETTPerlCenterStyles2.default.baseRowTitle,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 174
                                }
                            },
                            "\u6211\u7684\u8BA2\u5355"
                        )
                    ),
                    _react2.default.createElement(
                        _reactNative.View,
                        {
                            style: _ETTPerlCenterStyles2.default.footer,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 176
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.View,
                            {
                                style: _ETTPerlCenterStyles2.default.footer_Logout,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 177
                                }
                            },
                            _react2.default.createElement(
                                _reactNative.TouchableOpacity,
                                {
                                    onPress: function onPress() {
                                        return _this3.logoutCallBack();
                                    },
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 178
                                    }
                                },
                                _react2.default.createElement(
                                    _reactNative.Text,
                                    {
                                        style: _ETTPerlCenterStyles2.default.footer_Logout_text,
                                        __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 179
                                        }
                                    },
                                    "\u9000\u51FA\u767B\u5F55"
                                )
                            )
                        )
                    ),
                    _react2.default.createElement(_reactNativeEasyToast2.default, {
                        ref: "toast",
                        style: _ETTLogStyles2.default.reg_toast,
                        opacity: 0.8,
                        position: "top",
                        positionValue: 200,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 186
                        }
                    }),
                    _react2.default.createElement(_ETTLoadingAnimation2.default, {
                        ref: "loading",
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 193
                        }
                    })
                );
            }
        }, {
            key: "getNickname",
            value: function getNickname() {
                if (_ETTConfig.DataManager._userModel._userName.length > 0) {
                    return _ETTConfig.DataManager._userModel._userName;
                }

                return _ETTConfig.DataManager._userModel._phone;
            }
        }, {
            key: "getWechatBindImage",
            value: function getWechatBindImage() {
                if (_ETTConfig.DataManager._userModel._weChatisBinding == true) {
                    return _react2.default.createElement(_reactNative.Image, {
                        style: _ETTPerlCenterStyles2.default.baseRowImage,
                        source: _require(_dependencyMap[21], '../res/images/myinfo_wechat.png'),
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 213
                        }
                    });
                } else {
                    return _react2.default.createElement(_reactNative.Image, {
                        style: _ETTPerlCenterStyles2.default.baseRowImage,
                        source: _require(_dependencyMap[22], '../res/images/myinfo_wechat_unbind.png'),
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 219
                        }
                    });
                }
            }
        }, {
            key: "cellCallBack",
            value: function cellCallBack(item) {
                if (item) {
                    alert(item.name + '订单类型：' + item.orderType);
                }
            }
        }, {
            key: "goback",
            value: function goback() {
                this.props.navigation.popToTop();
            }
        }, {
            key: "cellMoreCallBack",
            value: function cellMoreCallBack() {
                alert('加载更多订单回调');
            }
        }, {
            key: "logoutCallBack",
            value: function logoutCallBack() {
                _ETTConfig.DataManager.logOut();
            }
        }, {
            key: "gersonalDataEditorHandle",
            value: function gersonalDataEditorHandle() {
                this.props.navigation.navigate('PersonalDataScene');
            }
        }, {
            key: "iconCallBack",
            value: function iconCallBack() {
                alert('更换头像回调');
            }
        }, {
            key: "editInfoCallBack",
            value: function editInfoCallBack() {
                this.props.navigation.navigate('ChangePwdScene');
            }
        }, {
            key: "bindWechatCallBack",
            value: function bindWechatCallBack() {}
        }, {
            key: "bindQQCallBack",
            value: function bindQQCallBack() {}
        }, {
            key: "bindThirdAmountCallBack",
            value: function bindThirdAmountCallBack() {
                this.props.navigation.navigate('BindThirdAmountScene');
            }
        }, {
            key: "serviceCallBack",
            value: function serviceCallBack() {
                _reactNativeCommunications2.default.phonecall('400-661-6666', true);
            }
        }, {
            key: "userConfirmed",
            value: function userConfirmed() {
                _ETTConfig.DataManager.logOut();
            }
        }, {
            key: "myOrderListCallback",
            value: function myOrderListCallback() {
                this.props.navigation.navigate('OrderListScene', {
                    isVisible: false,
                    title: '我的订单'
                });
            }
        }]);
        return ETTMyScene;
    }(_react.Component), _class2.navigationOptions = function (_ref) {
        var navigation = _ref.navigation;
        return {
            title: "" + navigation.state.params.title
        };
    }, _temp)) || _class;

    exports.default = ETTMyScene;
},524,[114,12,340,525,449,371,526,342,343,450,527,507,460,461,362,360,369,361,517,528,529,530,531],"app/scene/ETTMyScene.js");
__d(function (global, _require, module, exports, _dependencyMap) {
	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.web = exports.textWithoutEncoding = exports.text = exports.email = exports.phonecall = undefined;

	var _reactNative = _require(_dependencyMap[0], "react-native");

	var phonecall = exports.phonecall = function phonecall(phoneNumber, prompt) {
		if (arguments.length !== 2) {
			console.log('you must supply exactly 2 arguments');
			return;
		}

		if (!isCorrectType('String', phoneNumber)) {
			console.log('the phone number must be provided as a String value');
			return;
		}

		if (!isCorrectType('Boolean', prompt)) {
			console.log('the prompt parameter must be a Boolean');
			return;
		}

		var url = void 0;

		if (_reactNative.Platform.OS !== 'android') {
			url = prompt ? 'telprompt:' : 'tel:';
		} else {
			url = 'tel:';
		}

		url += phoneNumber;
		LaunchURL(url);
	};

	var email = exports.email = function email(to, cc, bcc, subject, body) {
		var url = 'mailto:';
		var argLength = arguments.length;

		switch (argLength) {
			case 0:
				LaunchURL(url);
				return;

			case 5:
				break;

			default:
				console.log('you must supply either 0 or 5 arguments. You supplied ' + argLength);
				return;
		}

		var valueAdded = false;

		if (isCorrectType('Array', arguments[0])) {
			var validAddresses = getValidArgumentsFromArray(arguments[0], 'String');

			if (validAddresses.length > 0) {
				url += encodeURIComponent(validAddresses.join(','));
			}
		}

		url += '?';

		if (isCorrectType('Array', arguments[1])) {
			var _validAddresses = getValidArgumentsFromArray(arguments[1], 'String');

			if (_validAddresses.length > 0) {
				valueAdded = true;
				url += 'cc=' + encodeURIComponent(_validAddresses.join(','));
			}
		}

		if (isCorrectType('Array', arguments[2])) {
			if (valueAdded) {
				url += '&';
			}

			var _validAddresses2 = getValidArgumentsFromArray(arguments[2], 'String');

			if (_validAddresses2.length > 0) {
				valueAdded = true;
				url += 'bcc=' + encodeURIComponent(_validAddresses2.join(','));
			}
		}

		if (isCorrectType('String', arguments[3])) {
			if (valueAdded) {
				url += '&';
			}

			valueAdded = true;
			url += 'subject=' + encodeURIComponent(arguments[3]);
		}

		if (isCorrectType('String', arguments[4])) {
			if (valueAdded) {
				url += '&';
			}

			url += 'body=' + encodeURIComponent(arguments[4]);
		}

		LaunchURL(url);
	};

	var text = exports.text = function text() {
		var phoneNumber = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
		var body = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

		if (arguments.length > 2) {
			console.log('you supplied too many arguments. You can either supply 0 or 1 or 2');
			return;
		}

		var url = 'sms:';

		if (phoneNumber) {
			if (isCorrectType('String', phoneNumber)) {
				url += phoneNumber;
			} else {
				console.log('the phone number should be provided as a string. It was provided as ' + Object.prototype.toString.call(phoneNumber).slice(8, -1) + ',ignoring the value provided');
			}
		}

		if (body) {
			if (isCorrectType('String', body)) {
				if (_reactNative.Platform.OS === 'android') body = encodeURIComponent(body);
				url += _reactNative.Platform.OS === 'ios' ? "&body=" + encodeURIComponent(body) : "?body=" + encodeURIComponent(body);
			} else {
				console.log('the body should be provided as a string. It was provided as ' + Object.prototype.toString.call(body).slice(8, -1) + ',ignoring the value provided');
			}
		}

		LaunchURL(url);
	};

	var textWithoutEncoding = exports.textWithoutEncoding = function textWithoutEncoding() {
		var phoneNumber = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
		var body = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

		if (arguments.length > 2) {
			console.log('you supplied too many arguments. You can either supply 0 or 1 or 2');
			return;
		}

		var url = 'sms:';

		if (phoneNumber) {
			if (isCorrectType('String', phoneNumber)) {
				url += phoneNumber;
			} else {
				console.log('the phone number should be provided as a string. It was provided as ' + Object.prototype.toString.call(phoneNumber).slice(8, -1) + ',ignoring the value provided');
			}
		}

		if (body) {
			if (isCorrectType('String', body)) {
				url += _reactNative.Platform.OS === 'ios' ? "&body=" + body : "?body=" + body;
			} else {
				console.log('the body should be provided as a string. It was provided as ' + Object.prototype.toString.call(body).slice(8, -1) + ',ignoring the value provided');
			}
		}

		LaunchURL(url);
	};

	var web = exports.web = function web() {
		var address = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

		if (!address) {
			console.log('Missing address argument');
			return;
		}

		if (!isCorrectType('String', address)) {
			console.log('address was not provided as a string, it was provided as ' + Object.prototype.toString.call(address).slice(8, -1));
			return;
		}

		LaunchURL(address);
	};

	var LaunchURL = function LaunchURL(url) {
		_reactNative.Linking.canOpenURL(url).then(function (supported) {
			if (!supported) {
				console.log('Can\'t handle url: ' + url);
			} else {
				_reactNative.Linking.openURL(url).catch(function (err) {
					if (url.includes('telprompt')) {} else {
						console.warn('openURL error', err);
					}
				});
			}
		}).catch(function (err) {
			return console.warn('An unexpected error happened', err);
		});
	};

	var getValidArgumentsFromArray = function getValidArgumentsFromArray(array, type) {
		var validValues = [];
		array.forEach(function (value) {
			if (isCorrectType(type, value)) {
				validValues.push(value);
			}
		});
		return validValues;
	};

	var isCorrectType = function isCorrectType(expected, actual) {
		return Object.prototype.toString.call(actual).slice(8, -1) === expected;
	};

	exports.default = {
		phonecall: phonecall,
		text: text,
		textWithoutEncoding: textWithoutEncoding,
		email: email,
		web: web
	};
},525,[12],"node_modules/react-native-communications/AKCommunications.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    var _react = _require(_dependencyMap[0], "react");

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    var _ETTDevice = _require(_dependencyMap[2], "../values/ETTDevice");

    var _ETTColor = _require(_dependencyMap[3], "../../res/values/ETTColor");

    var _ETTColor2 = babelHelpers.interopRequireDefault(_ETTColor);

    var ETTMainStyles = _reactNative.StyleSheet.create({
        container: {
            flex: 1,
            justifyContent: 'center',
            alignItems: 'center',
            backgroundColor: _ETTColor2.default.c2
        },
        textPromptStyle: {
            fontSize: 20,
            backgroundColor: 'yellow',
            textAlign: 'justify',
            color: 'red'
        },
        bigTextPrompt: {
            width: 300,
            backgroundColor: 'gray',
            color: 'white',
            textAlign: 'center',
            fontSize: 20
        }
    });

    module.exports = ETTMainStyles;
},526,[114,12,342,453],"app/res/styles/ETTMainStyles.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    var _react = _require(_dependencyMap[0], "react");

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    var _ETTDevice = _require(_dependencyMap[2], "../values/ETTDevice");

    var _ETTDevice2 = babelHelpers.interopRequireDefault(_ETTDevice);

    var _ETTColor = _require(_dependencyMap[3], "../values/ETTColor");

    var _ETTColor2 = babelHelpers.interopRequireDefault(_ETTColor);

    var _ETTInlineFuction = _require(_dependencyMap[4], "../values/ETTInlineFuction");

    var ETTPerlCenterStyles = _reactNative.StyleSheet.create({
        container: {
            flex: 1,
            backgroundColor: _ETTColor2.default.c2,
            width: _ETTDevice2.default.ScreenWidth
        },
        welcome: {
            fontSize: 20,
            textAlign: 'center',
            margin: 10
        },
        header: {
            flex: 1,
            backgroundColor: _ETTColor2.default.c2,
            width: _ETTDevice2.default.ScreenWidth
        },
        headerTop: {
            backgroundColor: _ETTColor2.default.white,
            width: _ETTDevice2.default.ScreenWidth
        },
        headerTop_top: {
            marginTop: 0,
            alignItems: 'center',
            height: (0, _ETTInlineFuction.scaleSize)(60),
            width: (0, _ETTInlineFuction.scaleSize)(11),
            backgroundColor: _ETTColor2.default.f5
        },
        headerTop_top_back: {
            marginTop: (0, _ETTInlineFuction.scaleSize)(34),
            marginLeft: (0, _ETTInlineFuction.scaleSize)(33),
            marginBottom: (0, _ETTInlineFuction.scaleSize)(9)
        },
        top: {
            backgroundColor: _ETTColor2.default.white,
            width: _ETTDevice2.default.ScreenWidth
        },
        top_header: {
            marginTop: 0,
            width: _ETTDevice2.default.ScreenWidth,
            height: (0, _ETTInlineFuction.scaleSize)(119)
        },
        top_header_back: {
            marginTop: (0, _ETTInlineFuction.scaleSize)(48),
            height: (0, _ETTInlineFuction.scaleSize)(71),
            width: (0, _ETTInlineFuction.scaleSize)(76),
            marginLeft: 0
        },
        top_header_back_image: {
            marginTop: (0, _ETTInlineFuction.scaleSize)(20),
            marginLeft: (0, _ETTInlineFuction.scaleSize)(25),
            height: (0, _ETTInlineFuction.scaleSize)(34),
            width: (0, _ETTInlineFuction.scaleSize)(21),
            marginBottom: (0, _ETTInlineFuction.scaleSize)(17)
        },
        user_icon_btn: {
            marginTop: 0,
            marginLeft: (_ETTDevice2.default.ScreenWidth - (0, _ETTInlineFuction.scaleSize)(164)) * 0.5,
            width: (0, _ETTInlineFuction.scaleSize)(164),
            height: (0, _ETTInlineFuction.scaleSize)(164)
        },
        user_nickname: {
            fontSize: (0, _ETTInlineFuction.scaleSize)(30),
            textAlign: 'center',
            marginTop: (0, _ETTInlineFuction.scaleSize)(36),
            marginLeft: (0, _ETTInlineFuction.scaleSize)(10),
            marginRight: (0, _ETTInlineFuction.scaleSize)(10),
            color: _ETTColor2.default.f1
        },
        user_amount: {
            justifyContent: 'flex-start',
            flexDirection: 'row',
            alignItems: 'center',
            marginTop: 0,
            marginBottom: (0, _ETTInlineFuction.scaleSize)(55)
        },
        user_amount_text: {
            fontSize: (0, _ETTInlineFuction.scaleSize)(30),
            textAlign: 'right',
            marginTop: (0, _ETTInlineFuction.scaleSize)(24),
            width: _ETTDevice2.default.ScreenWidth / 2 + (0, _ETTInlineFuction.scaleSize)(164) / 2 - (0, _ETTInlineFuction.scaleSize)(32),
            marginRight: (0, _ETTInlineFuction.scaleSize)(32),
            color: _ETTColor2.default.f1
        },
        user_amount_ecit: {
            marginTop: (0, _ETTInlineFuction.scaleSize)(0),
            height: (0, _ETTInlineFuction.scaleSize)(50),
            width: (0, _ETTInlineFuction.scaleSize)(54)
        },
        user_amount_ecit_image: {
            marginTop: (0, _ETTInlineFuction.scaleSize)(24),
            height: (0, _ETTInlineFuction.scaleSize)(20),
            width: (0, _ETTInlineFuction.scaleSize)(24),
            marginBottom: (0, _ETTInlineFuction.scaleSize)(17)
        },
        footer: {
            flex: 2,
            backgroundColor: _ETTColor2.default.c2,
            width: _ETTDevice2.default.ScreenWidth,
            justifyContent: 'flex-end'
        },
        footer_more: {
            height: (0, _ETTInlineFuction.scaleSize)(76),
            backgroundColor: _ETTColor2.default.white,
            justifyContent: 'center',
            alignItems: 'center',
            marginBottom: (0, _ETTInlineFuction.scaleSize)(24)
        },
        footer_Logout: {
            height: (0, _ETTInlineFuction.scaleSize)(76),
            backgroundColor: _ETTColor2.default.white,
            marginLeft: (0, _ETTInlineFuction.scaleSize)(36),
            marginRight: (0, _ETTInlineFuction.scaleSize)(36),
            justifyContent: 'center',
            alignItems: 'center',
            marginBottom: (0, _ETTInlineFuction.scaleSize)(241),
            borderRadius: (0, _ETTInlineFuction.scaleSize)(4)
        },
        footer_Logout_text: {
            fontSize: (0, _ETTInlineFuction.scaleSize)(26),
            color: _ETTColor2.default.f5
        },
        icon_btn: {
            marginTop: (0, _ETTInlineFuction.scaleSize)(60),
            marginLeft: (_ETTDevice2.default.ScreenWidth - (0, _ETTInlineFuction.scaleSize)(147)) * 0.5,
            width: (0, _ETTInlineFuction.scaleSize)(147),
            height: (0, _ETTInlineFuction.scaleSize)(147)
        },
        info_edit_btn: {
            marginTop: (0, _ETTInlineFuction.scaleSize)(41),
            marginBottom: (0, _ETTInlineFuction.scaleSize)(50),
            marginLeft: (_ETTDevice2.default.ScreenWidth - (0, _ETTInlineFuction.scaleSize)(177)) * 0.5,
            width: (0, _ETTInlineFuction.scaleSize)(177),
            height: (0, _ETTInlineFuction.scaleSize)(56)
        },
        nickname: {
            fontSize: (0, _ETTInlineFuction.scaleSize)(22),
            textAlign: 'center',
            marginTop: (0, _ETTInlineFuction.scaleSize)(20),
            marginLeft: (0, _ETTInlineFuction.scaleSize)(10),
            marginRight: (0, _ETTInlineFuction.scaleSize)(10),
            color: _ETTColor2.default.f2
        },
        userNum: {
            fontSize: (0, _ETTInlineFuction.scaleSize)(22),
            textAlign: 'center',
            marginTop: (0, _ETTInlineFuction.scaleSize)(20),
            marginLeft: (0, _ETTInlineFuction.scaleSize)(10),
            marginRight: (0, _ETTInlineFuction.scaleSize)(10),
            color: _ETTColor2.default.f3
        },
        baseRow: {
            width: _ETTDevice2.default.ScreenWidth,
            backgroundColor: _ETTColor2.default.white,
            marginTop: 0,
            height: (0, _ETTInlineFuction.scaleSize)(96),
            justifyContent: 'flex-end',
            flexDirection: 'row',
            alignItems: 'center'
        },
        row_line_bg: {
            width: _ETTDevice2.default.ScreenWidth,
            height: 1,
            backgroundColor: _ETTColor2.default.white
        },
        row_line: {
            height: 1,
            marginLeft: (0, _ETTInlineFuction.scaleSize)(30),
            marginRight: (0, _ETTInlineFuction.scaleSize)(30),
            backgroundColor: _ETTColor2.default.l1
        },
        logout: {},
        sessionView: {
            width: _ETTDevice2.default.ScreenWidth,
            backgroundColor: _ETTColor2.default.white,
            height: (0, _ETTInlineFuction.scaleSize)(76),
            flexDirection: 'column',
            justifyContent: 'flex-start'
        },
        sessionTop: {
            width: _ETTDevice2.default.ScreenWidth,
            height: (0, _ETTInlineFuction.scaleSize)(76),
            justifyContent: 'center',
            alignItems: 'center'
        },
        sessionText: {
            fontSize: (0, _ETTInlineFuction.scaleSize)(24),
            paddingLeft: (0, _ETTInlineFuction.scaleSize)(30),
            textAlign: 'left',
            color: _ETTColor2.default.f1,
            width: _ETTDevice2.default.ScreenWidth
        },
        baseRowRight: {
            width: _ETTDevice2.default.ScreenWidth / 2,
            backgroundColor: _ETTColor2.default.white,
            justifyContent: 'flex-end',
            flexDirection: 'row',
            alignItems: 'center',
            alignSelf: 'auto'
        },
        baseRowImage: {
            width: (0, _ETTInlineFuction.scaleSize)(38),
            height: (0, _ETTInlineFuction.scaleSize)(38),
            marginRight: (0, _ETTInlineFuction.scaleSize)(28)
        },
        baseRowTitle: {
            fontSize: (0, _ETTInlineFuction.scaleSize)(26),
            paddingLeft: (0, _ETTInlineFuction.scaleSize)(30),
            textAlign: 'left',
            color: _ETTColor2.default.f1,
            width: _ETTDevice2.default.ScreenWidth / 2
        },
        row_only_title: {
            height: (0, _ETTInlineFuction.scaleSize)(96),
            width: _ETTDevice2.default.ScreenWidth,
            backgroundColor: _ETTColor2.default.white,
            flexDirection: 'row',
            alignItems: 'center'
        },
        baseRowContent: {
            alignSelf: 'auto',
            fontSize: (0, _ETTInlineFuction.scaleSize)(24),
            paddingRight: 15,
            textAlign: 'right',
            color: _ETTColor2.default.f3,
            width: _ETTDevice2.default.ScreenWidth / 2
        },
        list: {
            width: _ETTDevice2.default.ScreenWidth,
            backgroundColor: _ETTColor2.default.w
        },
        listItem: {
            width: _ETTDevice2.default.ScreenWidth
        },
        itemLine: {
            marginBottom: 1,
            marginLeft: (0, _ETTInlineFuction.scaleSize)(30),
            marginRight: (0, _ETTInlineFuction.scaleSize)(30),
            height: 1,
            backgroundColor: _ETTColor2.default.l1,
            width: _ETTDevice2.default.ScreenWidth - (0, _ETTInlineFuction.scaleSize)(60)
        },
        myInfo: {
            backgroundColor: '#FFFFFF',
            width: _ETTDevice2.default.ScreenWidth
        },
        cellContainer: {
            backgroundColor: _ETTColor2.default.white,
            paddingRight: (0, _ETTInlineFuction.scaleSize)(30),
            paddingLeft: (0, _ETTInlineFuction.scaleSize)(30),
            paddingTop: (0, _ETTInlineFuction.scaleSize)(30),
            paddingBottom: (0, _ETTInlineFuction.scaleSize)(30),
            marginTop: (0, _ETTInlineFuction.scaleSize)(14),
            width: _ETTDevice2.default.ScreenWidth
        },
        cell_name: {},
        cell_amount: {},
        cellBody: {
            flex: 1,
            justifyContent: 'space-between'
        },
        cellBodyTop: {
            flex: 1,
            justifyContent: 'space-between',
            flexDirection: 'row',
            alignItems: 'center'
        },
        cellLine: {
            height: 1,
            backgroundColor: _ETTColor2.default.l1
        },
        cellBodyLeft: {
            marginTop: (0, _ETTInlineFuction.scaleSize)(20)
        },
        cellBodyRight: {
            flexDirection: 'row'
        },
        cellContent: {
            fontSize: (0, _ETTInlineFuction.scaleSize)(18),
            color: _ETTColor2.default.f3
        },
        cellTime: {
            fontSize: (0, _ETTInlineFuction.scaleSize)(16),
            marginTop: 5,
            marginBottom: (0, _ETTInlineFuction.scaleSize)(15),
            color: _ETTColor2.default.f3
        },
        cellAmount: {
            fontSize: (0, _ETTInlineFuction.scaleSize)(20),
            marginRight: (0, _ETTInlineFuction.scaleSize)(30),
            color: _ETTColor2.default.f3
        },
        cellOrderType: {
            fontSize: (0, _ETTInlineFuction.scaleSize)(22),
            color: _ETTColor2.default.f3
        },
        order_Complete: {
            fontSize: (0, _ETTInlineFuction.scaleSize)(22),
            color: _ETTColor2.default.f3
        },
        order_WillPay: {
            fontSize: (0, _ETTInlineFuction.scaleSize)(22),
            color: _ETTColor2.default.f5
        },
        order_Cancel: {
            fontSize: (0, _ETTInlineFuction.scaleSize)(22),
            color: _ETTColor2.default.f3
        },
        instructions: {
            textAlign: 'center',
            color: '#333333',
            marginBottom: 5
        }
    });

    module.exports = ETTPerlCenterStyles;
},527,[114,12,342,453,452],"app/res/styles/ETTPerlCenterStyles.js");
__d(function (global, _require, module, exports, _dependencyMap) {
	module.exports = _require(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
		"__packager_asset": true,
		"httpServerLocation": "/assets/app/res/images",
		"width": 73.5,
		"height": 73.5,
		"scales": [2, 3],
		"hash": "b1918665de086c81be16638f4d83fe21",
		"name": "myinfo_icon_bg",
		"type": "png"
	});
},528,[175],"app/res/images/myinfo_icon_bg@2x.png");
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = _require(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/app/res/images",
    "width": 12,
    "height": 10,
    "scales": [1, 2, 3],
    "hash": "87d6924c7cb719b78d8f47a16f7e67eb",
    "name": "amount_edit",
    "type": "png"
  });
},529,[175],"app/res/images/amount_edit.png");
__d(function (global, _require, module, exports, _dependencyMap) {
	module.exports = _require(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
		"__packager_asset": true,
		"httpServerLocation": "/assets/app/res/images",
		"width": 19,
		"height": 19,
		"scales": [1, 2, 3],
		"hash": "8f21243f5aab57f6c375588b47ec9a96",
		"name": "myinfo_wechat",
		"type": "png"
	});
},530,[175],"app/res/images/myinfo_wechat.png");
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = _require(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/app/res/images",
    "width": 19,
    "height": 19,
    "scales": [1, 2, 3],
    "hash": "5f61da94cd972c250b7224f9e7bc761e",
    "name": "myinfo_wechat_unbind",
    "type": "png"
  });
},531,[175],"app/res/images/myinfo_wechat_unbind.png");
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = undefined;
    var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/app/scene/ETTDetailScene.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    var _reactNavigation = _require(_dependencyMap[2], "react-navigation");

    var _ETTMainStyles = _require(_dependencyMap[3], "../res/styles/ETTMainStyles");

    var _ETTMainStyles2 = babelHelpers.interopRequireDefault(_ETTMainStyles);

    var _ETTDevice = _require(_dependencyMap[4], "../res/values/ETTDevice");

    var _ETTDevice2 = babelHelpers.interopRequireDefault(_ETTDevice);

    var _ETTConfig = _require(_dependencyMap[5], "../res/values/ETTConfig");

    var App = function (_Component) {
        babelHelpers.inherits(App, _Component);

        function App() {
            babelHelpers.classCallCheck(this, App);
            return babelHelpers.possibleConstructorReturn(this, (App.__proto__ || Object.getPrototypeOf(App)).apply(this, arguments));
        }

        babelHelpers.createClass(App, [{
            key: "componentDidMount",
            value: function componentDidMount() {
                var _props$navigation = this.props.navigation,
                    navigate = _props$navigation.navigate,
                    goBack = _props$navigation.goBack,
                    state = _props$navigation.state;
                console.log("componentDidMount");

                if (goBack) {
                    goBack("callback");
                }
            }
        }, {
            key: "render",
            value: function render() {
                var _this2 = this;

                return _react2.default.createElement(
                    _reactNative.View,
                    {
                        style: _ETTMainStyles2.default.container,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 30
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.Text,
                        {
                            style: _ETTMainStyles2.default.textPromptStyle,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 31
                            }
                        },
                        "detail\u6587\u4EF6:"
                    ),
                    _react2.default.createElement(
                        _reactNative.Text,
                        {
                            style: _ETTMainStyles2.default.bigTextPrompt,
                            onPress: function onPress() {
                                return _this2.userConfirmed();
                            },
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 35
                            }
                        },
                        "\u9000\u51FA\u767B\u5F55"
                    )
                );
            }
        }, {
            key: "userConfirmed",
            value: function userConfirmed() {
                _ETTConfig.DataManager._userModel._isLog = false;
            }
        }, {
            key: "goBack",
            value: function goBack() {}
        }]);
        return App;
    }(_react.Component);

    exports.default = App;
},532,[114,12,371,526,342,343],"app/scene/ETTDetailScene.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = undefined;
    var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/app/scene/ETTOrderDetailScene.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    var _reactNativeEasyToast = _require(_dependencyMap[2], "react-native-easy-toast");

    var _reactNativeEasyToast2 = babelHelpers.interopRequireDefault(_reactNativeEasyToast);

    var _ETTLoadingAnimation = _require(_dependencyMap[3], "../common/ETTLoadingAnimation");

    var _ETTLoadingAnimation2 = babelHelpers.interopRequireDefault(_ETTLoadingAnimation);

    var _ETTDevice = _require(_dependencyMap[4], "../res/values/ETTDevice");

    var _ETTDevice2 = babelHelpers.interopRequireDefault(_ETTDevice);

    var _ETTOrderDetailStyle = _require(_dependencyMap[5], "../res/styles/ETTOrderDetailStyle");

    var _ETTOrderDetailStyle2 = babelHelpers.interopRequireDefault(_ETTOrderDetailStyle);

    var _ETTColor = _require(_dependencyMap[6], "../res/values/ETTColor");

    var _ETTColor2 = babelHelpers.interopRequireDefault(_ETTColor);

    var _ETTInlineFuction = _require(_dependencyMap[7], "../res/values/ETTInlineFuction");

    var _ETTProductDeatilStyle = _require(_dependencyMap[8], "../res/styles/ETTProductDeatilStyle");

    var _ETTProductDeatilStyle2 = babelHelpers.interopRequireDefault(_ETTProductDeatilStyle);

    var _ETTBottomAnimation = _require(_dependencyMap[9], "../common/ETTBottomAnimation");

    var _ETTBottomAnimation2 = babelHelpers.interopRequireDefault(_ETTBottomAnimation);

    var _pingppReactNative = _require(_dependencyMap[10], "pingpp-react-native");

    var _pingppReactNative2 = babelHelpers.interopRequireDefault(_pingppReactNative);

    var _ETTNetworkUtil = _require(_dependencyMap[11], "../utils/ETTNetworkUtil");

    var _ETTNetworkUtil2 = babelHelpers.interopRequireDefault(_ETTNetworkUtil);

    var _ETTURLConfig = _require(_dependencyMap[12], "../res/values/ETTURLConfig");

    var _ETTURLConfig2 = babelHelpers.interopRequireDefault(_ETTURLConfig);

    var _ETTNetResponseHelper = _require(_dependencyMap[13], "../utils/ETTNetResponseHelper");

    var _ETTNetResponseHelper2 = babelHelpers.interopRequireDefault(_ETTNetResponseHelper);

    var _ETTBottomPayView = _require(_dependencyMap[14], "../common/ETTBottomPayView");

    var _ETTBottomPayView2 = babelHelpers.interopRequireDefault(_ETTBottomPayView);

    var _ETTRequestModel = _require(_dependencyMap[15], "../mobx/ETTRequestModel");

    var _ETTRequestModel2 = babelHelpers.interopRequireDefault(_ETTRequestModel);

    var _ETTLogStyles = _require(_dependencyMap[16], "../res/styles/ETTLogStyles");

    var _ETTLogStyles2 = babelHelpers.interopRequireDefault(_ETTLogStyles);

    var _ETTPayFinishView = _require(_dependencyMap[17], "../common/ETTPayFinishView");

    var _ETTPayFinishView2 = babelHelpers.interopRequireDefault(_ETTPayFinishView);

    var _ETTModalLogView = _require(_dependencyMap[18], "../common/ETTModalLogView");

    var _ETTModalLogView2 = babelHelpers.interopRequireDefault(_ETTModalLogView);

    var _ETTConfig = _require(_dependencyMap[19], "../res/values/ETTConfig");

    var _ETTOrderListScene = _require(_dependencyMap[20], "./ETTOrderListScene");

    var _ETTOrderListScene2 = babelHelpers.interopRequireDefault(_ETTOrderListScene);

    var _ETTMyScene = _require(_dependencyMap[21], "./ETTMyScene");

    var _ETTMyScene2 = babelHelpers.interopRequireDefault(_ETTMyScene);

    var ETTOrderDetailScene = function (_Component) {
        babelHelpers.inherits(ETTOrderDetailScene, _Component);

        function ETTOrderDetailScene(props) {
            babelHelpers.classCallCheck(this, ETTOrderDetailScene);

            var _this = babelHelpers.possibleConstructorReturn(this, (ETTOrderDetailScene.__proto__ || Object.getPrototypeOf(ETTOrderDetailScene)).call(this, props));

            _this.goodesName = '';
            _this.payResultType = 1;

            _reactNative.StatusBar.setBarStyle('dark-content');

            _this.state = {
                show: false,
                orderData: '',
                paymentMethods: '',
                modalVisible: false
            };
            console.log('我是ETTOrderDetailScene');
            return _this;
        }

        babelHelpers.createClass(ETTOrderDetailScene, [{
            key: "componentWillMount",
            value: function componentWillMount() {}
        }, {
            key: "componentDidMount",
            value: function componentDidMount() {
                this.orderDetailRequest();
            }
        }, {
            key: "orderDetailRequest",
            value: function orderDetailRequest() {
                var _this2 = this;

                var params = this.props.navigation.state.params;
                var goodsId = params.goodsId;
                var requetModel = new _ETTRequestModel2.default();
                requetModel._method = 'POST';
                requetModel._path = _ETTURLConfig2.default.SERVICE_TRADING + _ETTURLConfig2.default.post_orders;
                requetModel._bodyData = 'goodsIds=' + goodsId;
                requetModel._getInfo = requetModel.getTokenRequesetData();

                _ETTNetworkUtil2.default.requestWithToken(requetModel, function (json) {
                    var result = _ETTNetResponseHelper2.default.responseJson(json);

                    _this2.refs.loading._hiden();

                    if (result.code != 1) {
                        if (result.code == 3) {} else {
                            _this2.refs.toast.show(result.msg);
                        }
                    } else {
                        _this2.setState({
                            orderData: result.data
                        });
                    }
                });
            }
        }, {
            key: "getPayChnnel",
            value: function getPayChnnel() {
                var _this3 = this;

                var requetModel = new _ETTRequestModel2.default();
                requetModel._method = 'GET';
                requetModel._path = _ETTURLConfig2.default.SERVICE_PAY + _ETTURLConfig2.default.pay_getChannel + '?typeId=3';
                requetModel._bodyData = '';
                requetModel._getInfo = requetModel.getTokenRequesetData();

                _ETTNetworkUtil2.default.requestWithToken(requetModel, function (json) {
                    var result = _ETTNetResponseHelper2.default.responseJson(json);

                    _this3.refs.loading._hiden();

                    if (result.code != 1) {
                        if (result.code == 3) {} else {
                            _this3.refs.toast.show(result.msg);
                        }
                    } else {
                        var pay1 = '';
                        var pay2 = '';
                        var arr = result.data.paymentMethods;

                        if (arr != undefined) {
                            arr.map(function (item, i) {
                                if (i == 0) {
                                    pay1 = item.methodName;
                                } else if (i == 1) {
                                    pay2 = item.methodName;
                                }
                            });
                        }

                        _this3.refs.bottomAnimation.showView('请选择支付方式', pay1, pay2, null);
                    }
                });
            }
        }, {
            key: "postPay",
            value: function postPay(channelName) {
                var _this4 = this;

                this.refs.loading._show(null);

                var requetModel = new _ETTRequestModel2.default();
                requetModel._method = 'POST';
                requetModel._path = _ETTURLConfig2.default.SERVICE_PAY + _ETTURLConfig2.default.pay;
                requetModel._bodyData = 'channel=' + channelName + '&orderNum=' + this.state.orderData.orderId + '&amount=' + this.state.orderData.amount + '&subject=' + this.goodesName + '&body=' + this.goodesName;
                requetModel._getInfo = requetModel.getTokenRequesetData();

                _ETTNetworkUtil2.default.requestWithToken(requetModel, function (json) {
                    var result = _ETTNetResponseHelper2.default.responseJson(json);

                    if (result.code != 1) {
                        _this4.refs.loading._hiden();

                        if (result.code == 3) {} else {
                            _this4.refs.toast.show(result.msg);
                        }
                    } else {
                        var obj = _this4;

                        if (_reactNative.Platform.OS === 'android') {
                            var charge = JSON.stringify(result.data);

                            _pingppReactNative2.default.createPayment(charge, function (result) {
                                obj.refs.bottomAnimation.hiddenView();
                                var res = JSON.parse(result);
                                var pay_result = res.pay_result;
                                var error_msg = res.error_msg;
                                var extra_msg = res.extra_msg;

                                if (pay_result === 'cancel') {
                                    obj.refs.loading._hiden();

                                    console.log("用户取消支付");
                                } else {
                                    obj.paySuccessCallBack(pay_result);
                                }
                            });
                        } else {
                            _pingppReactNative2.default.createPayment({
                                "object": result.data,
                                "scheme": "wx24d51f92c3998b20"
                            }, function (res, error) {
                                obj.refs.bottomAnimation.hiddenView();
                                var result = JSON.stringify(error);
                                console.log(res);

                                if (res == 'cancel') {
                                    obj.refs.loading._hiden();

                                    console.log("用户取消支付");
                                } else {
                                    obj.paySuccessCallBack(res);
                                }
                            });
                        }
                    }
                });
            }
        }, {
            key: "paySuccessCallBack",
            value: function paySuccessCallBack(res) {
                var _this5 = this;

                var requetModel = new _ETTRequestModel2.default();
                requetModel._method = 'GET';
                requetModel._path = _ETTURLConfig2.default.SERVICE_PAY + _ETTURLConfig2.default.pay_callBack + '?orderNum=' + this.state.orderData.orderId;
                requetModel._bodyData = '';
                requetModel._getInfo = requetModel.getTokenRequesetData();

                _ETTNetworkUtil2.default.requestWithToken(requetModel, function (json) {
                    var result = _ETTNetResponseHelper2.default.responseJson(json);

                    _this5.refs.loading._hiden();

                    if (result.code != 1) {
                        if (result.code == 3) {} else {
                            _this5.refs.toast.show(result.msg);
                        }
                    } else {
                        _this5.payResultType = res === 'success' ? 1 : 2;

                        _this5.setState({
                            modalVisible: true
                        });
                    }
                });
            }
        }, {
            key: "_userNameView",
            value: function _userNameView() {
                return _react2.default.createElement(
                    _reactNative.View,
                    {
                        style: _ETTOrderDetailStyle2.default.userTopViewStyle,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 263
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.Text,
                        {
                            style: _ETTOrderDetailStyle2.default.userNameTitleStyle,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 264
                            }
                        },
                        this.state.orderData.userName
                    ),
                    _react2.default.createElement(
                        _reactNative.Text,
                        {
                            style: _ETTOrderDetailStyle2.default.userNameStyle,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 267
                            }
                        },
                        "\u624B\u673A\u53F7:",
                        this.state.orderData.phone
                    )
                );
            }
        }, {
            key: "_productTypeView",
            value: function _productTypeView() {
                for (var _iterator = this.state.orderData.goodses.entries(), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
                    var _ref3;

                    if (_isArray) {
                        if (_i >= _iterator.length) break;
                        _ref3 = _iterator[_i++];
                    } else {
                        _i = _iterator.next();
                        if (_i.done) break;
                        _ref3 = _i.value;
                    }

                    var _ref = _ref3;

                    var _ref2 = babelHelpers.slicedToArray(_ref, 2);

                    var index = _ref2[0];
                    var item = _ref2[1];
                    this.goodesName = item.goodsName;

                    if (item.type == 1) {
                        return null;
                    } else {
                        return _react2.default.createElement(
                            _reactNative.Text,
                            {
                                style: _ETTOrderDetailStyle2.default.orderName,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 285
                                }
                            },
                            item.goodsName
                        );
                    }
                }
            }
        }, {
            key: "_productAllSubView",
            value: function _productAllSubView() {
                var productArr = [];
                var item = void 0;

                for (var _iterator2 = this.state.orderData.goodses.entries(), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
                    var _ref6;

                    if (_isArray2) {
                        if (_i2 >= _iterator2.length) break;
                        _ref6 = _iterator2[_i2++];
                    } else {
                        _i2 = _iterator2.next();
                        if (_i2.done) break;
                        _ref6 = _i2.value;
                    }

                    var _ref4 = _ref6;

                    var _ref5 = babelHelpers.slicedToArray(_ref4, 2);

                    var index = _ref5[0];
                    var a = _ref5[1];
                    item = a;
                }

                var unit = item.units;

                for (var _iterator3 = unit.entries(), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
                    var _ref9;

                    if (_isArray3) {
                        if (_i3 >= _iterator3.length) break;
                        _ref9 = _iterator3[_i3++];
                    } else {
                        _i3 = _iterator3.next();
                        if (_i3.done) break;
                        _ref9 = _i3.value;
                    }

                    var _ref7 = _ref9;

                    var _ref8 = babelHelpers.slicedToArray(_ref7, 2);

                    var _index = _ref8[0];
                    var subItem = _ref8[1];
                    productArr.push(_react2.default.createElement(
                        _reactNative.View,
                        {
                            style: {
                                flexDirection: 'row'
                            },
                            key: function key(item, index) {
                                return index;
                            },
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 303
                            }
                        },
                        _react2.default.createElement(_reactNative.Image, {
                            style: _ETTOrderDetailStyle2.default.middleLeftImageStyle,
                            source: {
                                uri: subItem.pictures
                            },
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 304
                            }
                        }),
                        _react2.default.createElement(
                            _reactNative.View,
                            {
                                style: _ETTOrderDetailStyle2.default.middleRightViewStyle,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 305
                                }
                            },
                            _react2.default.createElement(
                                _reactNative.Text,
                                {
                                    style: _ETTOrderDetailStyle2.default.middleProductNameStyle,
                                    numberOfLines: 2,
                                    ellipsizeMode: "tail",
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 306
                                    }
                                },
                                subItem.skuName
                            ),
                            _react2.default.createElement(
                                _reactNative.Text,
                                {
                                    style: _ETTOrderDetailStyle2.default.middleProductDesStyle,
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 312
                                    }
                                },
                                subItem.propertyName
                            ),
                            _react2.default.createElement(
                                _reactNative.Text,
                                {
                                    style: _ETTOrderDetailStyle2.default.middleProductPriceStyle,
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 315
                                    }
                                },
                                "\uFFE5",
                                subItem.marketPrice
                            )
                        )
                    ));
                }
            }
        }, {
            key: "_productView",
            value: function _productView() {
                var productArr = [];
                var item = void 0;

                for (var _iterator4 = this.state.orderData.goodses.entries(), _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
                    var _ref12;

                    if (_isArray4) {
                        if (_i4 >= _iterator4.length) break;
                        _ref12 = _iterator4[_i4++];
                    } else {
                        _i4 = _iterator4.next();
                        if (_i4.done) break;
                        _ref12 = _i4.value;
                    }

                    var _ref10 = _ref12;

                    var _ref11 = babelHelpers.slicedToArray(_ref10, 2);

                    var index = _ref11[0];
                    var a = _ref11[1];
                    item = a;
                }

                for (var _iterator5 = item.units.entries(), _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
                    var _ref15;

                    if (_isArray5) {
                        if (_i5 >= _iterator5.length) break;
                        _ref15 = _iterator5[_i5++];
                    } else {
                        _i5 = _iterator5.next();
                        if (_i5.done) break;
                        _ref15 = _i5.value;
                    }

                    var _ref13 = _ref15;

                    var _ref14 = babelHelpers.slicedToArray(_ref13, 2);

                    var _index2 = _ref14[0];
                    var subItem = _ref14[1];
                    productArr.push(_react2.default.createElement(
                        _reactNative.View,
                        {
                            style: {
                                backgroundColor: 'white',
                                flexDirection: 'row'
                            },
                            key: _index2 + 10010,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 336
                            }
                        },
                        _react2.default.createElement(_reactNative.Image, {
                            style: _ETTOrderDetailStyle2.default.middleLeftImageStyle,
                            source: {
                                uri: subItem.pictures
                            },
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 337
                            }
                        }),
                        _react2.default.createElement(
                            _reactNative.View,
                            {
                                style: _ETTOrderDetailStyle2.default.middleRightViewStyle,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 338
                                }
                            },
                            _react2.default.createElement(
                                _reactNative.Text,
                                {
                                    style: _ETTOrderDetailStyle2.default.middleProductNameStyle,
                                    numberOfLines: 2,
                                    ellipsizeMode: "tail",
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 339
                                    }
                                },
                                subItem.skuName
                            ),
                            _react2.default.createElement(
                                _reactNative.Text,
                                {
                                    style: _ETTOrderDetailStyle2.default.middleProductDesStyle,
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 345
                                    }
                                },
                                subItem.propertyName
                            ),
                            _react2.default.createElement(
                                _reactNative.Text,
                                {
                                    style: _ETTOrderDetailStyle2.default.middleProductPriceStyle,
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 348
                                    }
                                },
                                "\uFFE5",
                                subItem.marketPrice
                            )
                        )
                    ));
                }

                return _react2.default.createElement(
                    _reactNative.View,
                    {
                        style: _ETTOrderDetailStyle2.default.middleProductViewStyle,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 358
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.View,
                        {
                            style: _ETTOrderDetailStyle2.default.orderInfoView,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 360
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.Text,
                            {
                                style: _ETTOrderDetailStyle2.default.orderSerialNumber,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 361
                                }
                            },
                            "\u8BA2\u5355\u7F16\u53F7:",
                            this.state.orderData.orderId
                        ),
                        _react2.default.createElement(
                            _reactNative.Text,
                            {
                                style: _ETTOrderDetailStyle2.default.orderTime,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 364
                                }
                            },
                            this.state.orderData.orderTime
                        ),
                        _react2.default.createElement(_reactNative.View, {
                            style: _ETTOrderDetailStyle2.default.orderLine,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 367
                            }
                        })
                    ),
                    this._productTypeView(),
                    _react2.default.createElement(
                        _reactNative.View,
                        {
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 371
                            }
                        },
                        productArr
                    )
                );
            }
        }, {
            key: "_orderView",
            value: function _orderView() {
                var activityArr = [];
                var arr = this.state.orderData.activitDiscounts;

                if (arr == undefined) {
                    activityArr.push(_react2.default.createElement(
                        _reactNative.Text,
                        {
                            style: _ETTOrderDetailStyle2.default.youhuiLeftTitleStyle,
                            key: function key(item, index) {
                                return index;
                            },
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 386
                            }
                        },
                        "\u65E0"
                    ));
                } else {
                    this.state.orderData.activitDiscounts.map(function (item, i) {
                        activityArr.push(_react2.default.createElement(
                            _reactNative.Text,
                            {
                                style: _ETTOrderDetailStyle2.default.youhuiLeftTitleStyle,
                                key: i + 666,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 392
                                }
                            },
                            item.activityName
                        ));
                    });
                }

                return _react2.default.createElement(
                    _reactNative.View,
                    {
                        style: _ETTOrderDetailStyle2.default.bottomViewStyle,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 399
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.View,
                        {
                            style: _ETTOrderDetailStyle2.default.bottomFirstItemViewStyle,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 401
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.View,
                            {
                                style: _ETTOrderDetailStyle2.default.bottomItemViewStyle,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 403
                                }
                            },
                            _react2.default.createElement(
                                _reactNative.Text,
                                {
                                    style: _ETTOrderDetailStyle2.default.bottomLeftTitleStyle,
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 404
                                    }
                                },
                                "\u603B\u4EF7:"
                            ),
                            _react2.default.createElement(
                                _reactNative.Text,
                                {
                                    style: [_ETTOrderDetailStyle2.default.bottomRightTitleStyle, {
                                        color: _ETTColor2.default.c3
                                    }],
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 407
                                    }
                                },
                                "\uFFE5",
                                this.state.orderData.amount
                            )
                        ),
                        _react2.default.createElement(
                            _reactNative.Text,
                            {
                                style: _ETTOrderDetailStyle2.default.marketMoneyStyle,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 412
                                }
                            },
                            "\uFFE5",
                            this.state.orderData.marketMoney
                        )
                    ),
                    _react2.default.createElement(_reactNative.View, {
                        style: _ETTOrderDetailStyle2.default.lineStyle,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 416
                        }
                    }),
                    _react2.default.createElement(
                        _reactNative.View,
                        {
                            style: {
                                backgroundColor: 'white'
                            },
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 420
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.View,
                            {
                                style: _ETTOrderDetailStyle2.default.bottomItemViewStyle,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 421
                                }
                            },
                            _react2.default.createElement(
                                _reactNative.View,
                                {
                                    style: {
                                        flexDirection: 'row'
                                    },
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 422
                                    }
                                },
                                _react2.default.createElement(
                                    _reactNative.Text,
                                    {
                                        style: _ETTOrderDetailStyle2.default.youhuiLeftStyle,
                                        __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 423
                                        }
                                    },
                                    "\u4F18\u60E0:"
                                ),
                                activityArr
                            ),
                            _react2.default.createElement(
                                _reactNative.Text,
                                {
                                    style: _ETTOrderDetailStyle2.default.bottomRightTitleStyle,
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 429
                                    }
                                },
                                "\u53EF\u4F18\u60E0",
                                this.state.orderData.reduceMoney
                            )
                        ),
                        _react2.default.createElement(_reactNative.View, {
                            style: _ETTOrderDetailStyle2.default.lineStyle,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 434
                            }
                        })
                    ),
                    _react2.default.createElement(
                        _reactNative.View,
                        {
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 440
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.View,
                            {
                                style: _ETTOrderDetailStyle2.default.bottomItemViewStyle,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 441
                                }
                            },
                            _react2.default.createElement(
                                _reactNative.Text,
                                {
                                    style: _ETTOrderDetailStyle2.default.bottomLeftTitleStyle,
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 442
                                    }
                                },
                                "\u5B9E\u4ED8\u603B\u989D:"
                            ),
                            _react2.default.createElement(
                                _reactNative.Text,
                                {
                                    style: [_ETTOrderDetailStyle2.default.bottomRightTitleStyle, {
                                        color: _ETTColor2.default.c3
                                    }],
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 445
                                    }
                                },
                                "\uFFE5",
                                this.state.orderData.amount
                            )
                        ),
                        _react2.default.createElement(_reactNative.View, {
                            style: _ETTOrderDetailStyle2.default.lineStyle,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 450
                            }
                        })
                    )
                );
            }
        }, {
            key: "_payForItemView",
            value: function _payForItemView() {
                var _this6 = this;

                return _react2.default.createElement(_ETTBottomPayView2.default, {
                    price: this.state.orderData.amount,
                    title: '确认支付',
                    callback: function callback() {
                        return _this6._showPayResultView();
                    },
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 461
                    }
                });
            }
        }, {
            key: "_callBack",
            value: function _callBack() {
                this.setState({
                    show: false
                });
            }
        }, {
            key: "_choosePayWay",
            value: function _choosePayWay(msg) {
                var channel = '';

                if (msg == '支付宝') {
                    channel = 'alipay';
                } else if (msg == '微信') {
                    channel = 'wx';
                }

                this.setState({
                    show: false
                });
                this.postPay(channel);
            }
        }, {
            key: "pay",
            value: function pay(channel) {
                _ETTNetworkUtil2.default.post();
            }
        }, {
            key: "_showPayResultView",
            value: function _showPayResultView() {
                console.log('_showPayResultView');
                this.setState({
                    show: true
                });
            }
        }, {
            key: "_showPayFinishView",
            value: function _showPayFinishView() {
                var _this7 = this;

                if (this.state.modalVisible === true) {
                    return _react2.default.createElement(_ETTPayFinishView2.default, {
                        type: this.payResultType,
                        courseName: this.goodesName,
                        callback: function callback() {
                            _this7._clickModal();
                        },
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 508
                        }
                    });
                } else {
                    return null;
                }
            }
        }, {
            key: "_showPayView",
            value: function _showPayView() {
                if (this.state.show) {
                    this.getPayChnnel();
                }
            }
        }, {
            key: "_clickModal",
            value: function _clickModal() {
                var _this8 = this;

                this.setState({
                    modalVisible: false
                });
                this.props.navigation.navigate('OrderListScene', {
                    title: '我的订单',
                    callback: function callback(data) {
                        console.log("我是OrderListScene的返回事件" + data);

                        _this8.props.navigation.navigate('MyScene', {
                            callback: function callback(data) {
                                console.log("callback" + data);
                            }
                        });
                    }
                });
            }
        }, {
            key: "render",
            value: function render() {
                var _this9 = this;

                if (this.state.orderData.length == 0) {
                    return _react2.default.createElement(
                        _reactNative.View,
                        {
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 550
                            }
                        },
                        _react2.default.createElement(_reactNativeEasyToast2.default, {
                            ref: "toast",
                            style: _ETTLogStyles2.default.reg_toast,
                            opacity: 0.8,
                            position: "center",
                            positionValue: 300,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 551
                            }
                        }),
                        _react2.default.createElement(_ETTLoadingAnimation2.default, {
                            ref: "loading",
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 558
                            }
                        })
                    );
                } else {
                    return _react2.default.createElement(
                        _reactNative.View,
                        {
                            style: _ETTOrderDetailStyle2.default.contain,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 562
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.ScrollView,
                            {
                                style: _ETTOrderDetailStyle2.default.scrollContain,
                                keyboardDismissMode: "on-drag",
                                showsHorizontalScrollIndicator: false,
                                showsVerticalScrollIndicator: false,
                                ref: "scrollView",
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 563
                                }
                            },
                            _react2.default.createElement(
                                _reactNative.View,
                                {
                                    style: {
                                        height: _ETTDevice2.default.ScreenHeight - (0, _ETTInlineFuction.scaleSize)(90) * 2 - (0, _ETTInlineFuction.scaleSize)(30) + (0, _ETTInlineFuction.scaleSize)(5),
                                        backgroundColor: _ETTColor2.default.l1
                                    },
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 571
                                    }
                                },
                                this._userNameView(),
                                this._productView(),
                                this._orderView()
                            )
                        ),
                        this._payForItemView(),
                        _react2.default.createElement(
                            _reactNative.Modal,
                            {
                                visible: this.state.modalVisible,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 585
                                }
                            },
                            this._showPayFinishView()
                        ),
                        this._showPayView(),
                        _react2.default.createElement(_ETTBottomAnimation2.default, {
                            ref: "bottomAnimation",
                            callback: function callback(msg) {
                                return _this9._choosePayWay(msg);
                            },
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 595
                            }
                        }),
                        _react2.default.createElement(_reactNativeEasyToast2.default, {
                            ref: "toast",
                            style: _ETTLogStyles2.default.reg_toast,
                            opacity: 0.8,
                            position: "top",
                            positionValue: 200,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 601
                            }
                        }),
                        _react2.default.createElement(_ETTLoadingAnimation2.default, {
                            ref: "loading",
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 608
                            }
                        })
                    );
                }
            }
        }]);
        return ETTOrderDetailScene;
    }(_react.Component);

    exports.default = ETTOrderDetailScene;
},533,[114,12,449,461,342,534,453,452,464,535,536,362,360,369,476,361,460,537,507,343,540,524],"app/scene/ETTOrderDetailScene.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    var _react = _require(_dependencyMap[0], "react");

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    var _ETTDevice = _require(_dependencyMap[2], "../values/ETTDevice");

    var _ETTDevice2 = babelHelpers.interopRequireDefault(_ETTDevice);

    var _ETTColor = _require(_dependencyMap[3], "../values/ETTColor");

    var _ETTColor2 = babelHelpers.interopRequireDefault(_ETTColor);

    var _ETTInlineFuction = _require(_dependencyMap[4], "../values/ETTInlineFuction");

    var ETTOrderDeatilStyle = _reactNative.StyleSheet.create({
        contain: {
            backgroundColor: _ETTColor2.default.l1,
            width: _ETTDevice2.default.ScreenWidth,
            flex: 1
        },
        scrollContain: {
            flex: 1,
            width: _ETTDevice2.default.ScreenWidth,
            height: _ETTDevice2.default.ScreenHeight - (0, _ETTInlineFuction.scaleSize)(90) * 2 - (0, _ETTInlineFuction.scaleSize)(30)
        },
        userTopViewStyle: {
            backgroundColor: _ETTColor2.default.white
        },
        userNameTitleStyle: {
            color: _ETTColor2.default.f1,
            marginLeft: (0, _ETTInlineFuction.scaleSize)(30),
            fontSize: (0, _ETTInlineFuction.scaleSize)(24),
            marginTop: (0, _ETTInlineFuction.scaleSize)(30),
            textAlign: 'left'
        },
        userNameStyle: {
            color: _ETTColor2.default.f3,
            fontSize: (0, _ETTInlineFuction.scaleSize)(24),
            marginTop: (0, _ETTInlineFuction.scaleSize)(24),
            textAlign: 'left',
            marginBottom: (0, _ETTInlineFuction.scaleSize)(30),
            marginLeft: (0, _ETTInlineFuction.scaleSize)(30)
        },
        orderInfoView: {
            width: _ETTDevice2.default.ScreenWidth,
            flexDirection: 'row',
            height: (0, _ETTInlineFuction.scaleSize)(80)
        },
        orderSerialNumber: {
            width: (0, _ETTInlineFuction.scaleSize)(360),
            marginLeft: (0, _ETTInlineFuction.scaleSize)(30),
            marginTop: (0, _ETTInlineFuction.scaleSize)(24),
            marginBottom: (0, _ETTInlineFuction.scaleSize)(24),
            color: _ETTColor2.default.f3,
            fontSize: (0, _ETTInlineFuction.scaleSize)(24),
            textAlign: 'left',
            height: (0, _ETTInlineFuction.scaleSize)(30)
        },
        orderTime: {
            marginLeft: (0, _ETTInlineFuction.scaleSize)(34),
            color: _ETTColor2.default.f3,
            fontSize: (0, _ETTInlineFuction.scaleSize)(24),
            textAlign: 'left',
            marginTop: (0, _ETTInlineFuction.scaleSize)(24),
            marginBottom: (0, _ETTInlineFuction.scaleSize)(24),
            width: (0, _ETTInlineFuction.scaleSize)(300),
            height: (0, _ETTInlineFuction.scaleSize)(30)
        },
        orderLine: {
            height: (0, _ETTInlineFuction.scaleSize)(1),
            marginLeft: (0, _ETTInlineFuction.scaleSize)(30),
            width: _ETTDevice2.default.ScreenWidth - (0, _ETTInlineFuction.scaleSize)(30),
            backgroundColor: _ETTColor2.default.f3
        },
        orderName: {
            marginLeft: (0, _ETTInlineFuction.scaleSize)(30),
            marginTop: (0, _ETTInlineFuction.scaleSize)(24),
            color: _ETTColor2.default.f1,
            fontSize: (0, _ETTInlineFuction.scaleSize)(24),
            textAlign: 'left',
            width: _ETTDevice2.default.ScreenWidth - (0, _ETTInlineFuction.scaleSize)(30)
        },
        middleProductViewStyle: {
            marginTop: (0, _ETTInlineFuction.scaleSize)(15),
            backgroundColor: _ETTColor2.default.white,
            flexDirection: 'column'
        },
        middleLeftImageStyle: {
            marginLeft: (0, _ETTInlineFuction.scaleSize)(30),
            marginTop: (0, _ETTInlineFuction.scaleSize)(25),
            marginBottom: (0, _ETTInlineFuction.scaleSize)(36),
            width: (0, _ETTInlineFuction.scaleSize)(186),
            height: (0, _ETTInlineFuction.scaleSize)(168),
            resizeMode: 'stretch',
            borderRadius: 4
        },
        middleRightViewStyle: {
            flexDirection: 'column',
            marginLeft: (0, _ETTInlineFuction.scaleSize)(30),
            marginTop: (0, _ETTInlineFuction.scaleSize)(25),
            width: _ETTDevice2.default.ScreenWidth - (0, _ETTInlineFuction.scaleSize)(290) - (0, _ETTInlineFuction.scaleSize)(30) * 3,
            marginBottom: (0, _ETTInlineFuction.scaleSize)(30)
        },
        middleProductNameStyle: {
            color: _ETTColor2.default.f1,
            fontSize: (0, _ETTInlineFuction.scaleSize)(28),
            textAlign: 'left'
        },
        middleProductDesStyle: {
            color: _ETTColor2.default.f3,
            fontSize: (0, _ETTInlineFuction.scaleSize)(22),
            marginTop: (0, _ETTInlineFuction.scaleSize)(22),
            textAlign: 'left'
        },
        middleProductPriceStyle: {
            color: _ETTColor2.default.f2,
            fontSize: (0, _ETTInlineFuction.scaleSize)(24),
            marginTop: (0, _ETTInlineFuction.scaleSize)(30),
            textAlign: 'left'
        },
        bottomViewStyle: {
            marginTop: (0, _ETTInlineFuction.scaleSize)(15),
            backgroundColor: _ETTColor2.default.white
        },
        bottomFirstItemViewStyle: {
            flexDirection: 'column'
        },
        bottomItemViewStyle: {
            justifyContent: 'space-between',
            flexDirection: 'row'
        },
        bottomLeftTitleStyle: {
            marginTop: (0, _ETTInlineFuction.scaleSize)(24),
            marginLeft: (0, _ETTInlineFuction.scaleSize)(30),
            textAlign: 'left',
            fontSize: (0, _ETTInlineFuction.scaleSize)(24),
            color: _ETTColor2.default.f2,
            marginBottom: (0, _ETTInlineFuction.scaleSize)(30)
        },
        youhuiLeftTitleStyle: {
            marginTop: (0, _ETTInlineFuction.scaleSize)(24),
            marginLeft: (0, _ETTInlineFuction.scaleSize)(30),
            textAlign: 'left',
            fontSize: (0, _ETTInlineFuction.scaleSize)(24),
            color: _ETTColor2.default.c3,
            marginBottom: (0, _ETTInlineFuction.scaleSize)(30)
        },
        youhuiLeftStyle: {
            marginTop: (0, _ETTInlineFuction.scaleSize)(24),
            marginLeft: (0, _ETTInlineFuction.scaleSize)(30),
            textAlign: 'left',
            fontSize: (0, _ETTInlineFuction.scaleSize)(24),
            color: _ETTColor2.default.f2,
            width: (0, _ETTInlineFuction.scaleSize)(60)
        },
        bottomRightTitleStyle: {
            marginTop: (0, _ETTInlineFuction.scaleSize)(24),
            marginRight: (0, _ETTInlineFuction.scaleSize)(30),
            textAlign: 'center',
            fontSize: (0, _ETTInlineFuction.scaleSize)(24),
            color: _ETTColor2.default.f2,
            marginBottom: (0, _ETTInlineFuction.scaleSize)(30)
        },
        marketMoneyStyle: {
            marginRight: (0, _ETTInlineFuction.scaleSize)(30),
            marginTop: (0, _ETTInlineFuction.scaleSize)(0),
            marginBottom: (0, _ETTInlineFuction.scaleSize)(30),
            textDecorationLine: 'line-through',
            color: _ETTColor2.default.f3,
            textAlign: 'right',
            fontSize: (0, _ETTInlineFuction.scaleSize)(24)
        },
        lineStyle: {
            height: (0, _ETTInlineFuction.scaleSize)(1),
            backgroundColor: _ETTColor2.default.l1,
            marginLeft: (0, _ETTInlineFuction.scaleSize)(30)
        },
        payForItemViewStyle: {
            height: (0, _ETTInlineFuction.scaleSize)(90),
            width: _ETTDevice2.default.ScreenWidth,
            flexDirection: 'row',
            backgroundColor: 'white',
            justifyContent: 'space-between',
            alignItems: 'center',
            marginBottom: 0
        }
    });

    module.exports = ETTOrderDeatilStyle;
},534,[114,12,342,453,452],"app/res/styles/ETTOrderDetailStyle.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = undefined;
    var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/app/common/ETTBottomAnimation.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    var _ETTDevice = _require(_dependencyMap[2], "../res/values/ETTDevice");

    var _ETTDevice2 = babelHelpers.interopRequireDefault(_ETTDevice);

    var _ETTInlineFuction = _require(_dependencyMap[3], "../res/values/ETTInlineFuction");

    var _ref = [_ETTDevice2.default.ScreenWidth, (0, _ETTInlineFuction.scaleSize)(428)],
        aWidth = _ref[0],
        aHeight = _ref[1];
    var middleLeft = (_ETTDevice2.default.ScreenWidth - aWidth) / 2,
        middleTop = (_ETTDevice2.default.ScreenHeight - aHeight) / 2;

    var animationStyles = _reactNative.StyleSheet.create({
        container: {
            position: "absolute",
            width: _ETTDevice2.default.ScreenWidth,
            height: _ETTDevice2.default.ScreenHeight,
            left: 0,
            top: 0
        },
        mask: {
            justifyContent: "center",
            backgroundColor: "#383838",
            opacity: 0.8,
            position: "absolute",
            width: _ETTDevice2.default.ScreenWidth,
            height: _ETTDevice2.default.ScreenHeight,
            left: 0,
            top: 0
        },
        tip: {
            width: aWidth,
            height: aHeight,
            left: middleLeft,
            backgroundColor: "#fff",
            alignItems: "center",
            justifyContent: "space-between"
        },
        tipTitleView: {
            height: (0, _ETTInlineFuction.scaleSize)(110),
            flexDirection: 'row',
            alignItems: 'center',
            justifyContent: 'center'
        },
        tipTitleText: {
            color: "#999999",
            fontSize: 14
        },
        tipContentView: {
            width: aWidth,
            borderTopWidth: 0.5,
            borderColor: "#f0f0f0",
            height: (0, _ETTInlineFuction.scaleSize)(90),
            flexDirection: 'row',
            alignItems: 'center',
            justifyContent: 'center'
        },
        tipText: {
            color: "#e6454a",
            fontSize: 17,
            textAlign: "center"
        },
        button: {
            height: (0, _ETTInlineFuction.scaleSize)(90),
            backgroundColor: '#fff',
            borderTopWidth: 0.5,
            borderColor: '#f0f0f0',
            alignSelf: 'stretch',
            justifyContent: 'center'
        },
        buttonText: {
            fontSize: 17,
            color: "#e6454a",
            textAlign: "center"
        }
    });

    var AnimationBase = function (_Component) {
        babelHelpers.inherits(AnimationBase, _Component);

        function AnimationBase(props) {
            babelHelpers.classCallCheck(this, AnimationBase);

            var _this = babelHelpers.possibleConstructorReturn(this, (AnimationBase.__proto__ || Object.getPrototypeOf(AnimationBase)).call(this, props));

            _this.showView = _this.showView.bind(_this);
            _this.hiddenView = _this.hiddenView.bind(_this);
            console.log('我是AnimationBase');
            _this.state = {
                offset: new _reactNative.Animated.Value(0),
                opacity: new _reactNative.Animated.Value(0),
                title: "",
                choose1: "",
                choose2: "",
                hide: true
            };
            return _this;
        }

        babelHelpers.createClass(AnimationBase, [{
            key: "commentWillMount",
            value: function commentWillMount() {}
        }, {
            key: "render",
            value: function render() {
                if (this.state.hide) {
                    return _react2.default.createElement(_reactNative.View, {
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 119
                        }
                    });
                } else {
                    return _react2.default.createElement(
                        _reactNative.View,
                        {
                            style: animationStyles.container,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 122
                            }
                        },
                        _react2.default.createElement(_reactNative.Animated.View, {
                            style: animationStyles.mask,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 123
                            }
                        }),
                        _react2.default.createElement(
                            _reactNative.Animated.View,
                            {
                                style: [animationStyles.tip, {
                                    transform: [{
                                        translateY: this.state.offset.interpolate({
                                            inputRange: [0, 1],
                                            outputRange: [_ETTDevice2.default.ScreenHeight, (0, _ETTInlineFuction.scaleSize)(780)]
                                        })
                                    }]
                                }],
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 127
                                }
                            },
                            _react2.default.createElement(
                                _reactNative.View,
                                {
                                    style: animationStyles.tipTitleView,
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 135
                                    }
                                },
                                _react2.default.createElement(
                                    _reactNative.Text,
                                    {
                                        style: animationStyles.tipTitleText,
                                        __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 136
                                        }
                                    },
                                    this.state.title
                                )
                            ),
                            _react2.default.createElement(
                                _reactNative.TouchableHighlight,
                                {
                                    style: animationStyles.tipContentView,
                                    underlayColor: "#f0f0f0",
                                    onPress: this.choose.bind(this, this.state.choose1),
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 139
                                    }
                                },
                                _react2.default.createElement(
                                    _reactNative.Text,
                                    {
                                        style: animationStyles.tipText,
                                        __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 140
                                        }
                                    },
                                    this.state.choose1
                                )
                            ),
                            _react2.default.createElement(
                                _reactNative.TouchableHighlight,
                                {
                                    style: animationStyles.tipContentView,
                                    underlayColor: "#f0f0f0",
                                    onPress: this.choose.bind(this, this.state.choose2),
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 143
                                    }
                                },
                                _react2.default.createElement(
                                    _reactNative.Text,
                                    {
                                        style: animationStyles.buttonText,
                                        __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 144
                                        }
                                    },
                                    this.state.choose2
                                )
                            ),
                            _react2.default.createElement(
                                _reactNative.TouchableHighlight,
                                {
                                    style: animationStyles.button,
                                    underlayColor: "#f0f0f0",
                                    onPress: this.iknow.bind(this),
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 148
                                    }
                                },
                                _react2.default.createElement(
                                    _reactNative.Text,
                                    {
                                        style: animationStyles.buttonText,
                                        __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 149
                                        }
                                    },
                                    "\u53D6\u6D88"
                                )
                            )
                        )
                    );
                }
            }
        }, {
            key: "in",
            value: function _in() {
                _reactNative.Animated.parallel([_reactNative.Animated.timing(this.state.opacity, {
                    easing: _reactNative.Easing.linear,
                    duration: 500,
                    toValue: 0.8
                }), _reactNative.Animated.timing(this.state.offset, {
                    easing: _reactNative.Easing.linear,
                    duration: 500,
                    toValue: 1
                })]).start();
            }
        }, {
            key: "out",
            value: function out() {
                var _this2 = this;

                _reactNative.Animated.parallel([_reactNative.Animated.timing(this.state.opacity, {
                    easing: _reactNative.Easing.linear,
                    duration: 500,
                    toValue: 0
                }), _reactNative.Animated.timing(this.state.offset, {
                    easing: _reactNative.Easing.linear,
                    duration: 500,
                    toValue: 0
                })]).start();

                setTimeout(function () {
                    return _this2.setState({
                        hide: true
                    });
                }, 500);
            }
        }, {
            key: "iknow",
            value: function iknow(event) {
                if (!this.state.hide) {
                    this.out();
                }
            }
        }, {
            key: "choose",
            value: function choose(msg) {
                if (!this.state.hide) {
                    this.out();
                }

                var callback = this.props.callback;

                if (callback != null) {
                    callback(msg);
                }
            }
        }, {
            key: "hiddenView",
            value: function hiddenView() {
                if (!this.state.hide) {
                    this.out();
                }
            }
        }, {
            key: "showView",
            value: function showView(title, choose1, choose2, obj) {
                if (this.state.hide) {
                    this.setState({
                        title: title,
                        choose1: choose1,
                        choose2: choose2,
                        hide: false
                    }, this.in);
                }
            }
        }]);
        return AnimationBase;
    }(_react.Component);

    exports.default = AnimationBase;
},535,[114,12,342,452],"app/common/ETTBottomAnimation.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var React = _require(_dependencyMap[0], 'react-native');

  var NativeModules = React.NativeModules;
  var PingppModule = NativeModules.PingppModule;
  module.exports = PingppModule;
},536,[12],"node_modules/pingpp-react-native/index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = undefined;
    var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/app/common/ETTPayFinishView.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    var _ETTInlineFuction = _require(_dependencyMap[2], "../res/values/ETTInlineFuction");

    var _ETTDevice = _require(_dependencyMap[3], "../res/values/ETTDevice");

    var _ETTDevice2 = babelHelpers.interopRequireDefault(_ETTDevice);

    var ETTPayFinishView = function (_Component) {
        babelHelpers.inherits(ETTPayFinishView, _Component);

        function ETTPayFinishView(props) {
            babelHelpers.classCallCheck(this, ETTPayFinishView);

            var _this = babelHelpers.possibleConstructorReturn(this, (ETTPayFinishView.__proto__ || Object.getPrototypeOf(ETTPayFinishView)).call(this, props));

            _reactNative.StatusBar.setBarStyle('dark-content');

            var type = _this.props.type ? _this.props.type : 1;
            _this.state = {
                visible: true,
                type: type
            };
            return _this;
        }

        babelHelpers.createClass(ETTPayFinishView, [{
            key: "_showSuccessView",
            value: function _showSuccessView() {}
        }, {
            key: "_showFailView",
            value: function _showFailView() {}
        }, {
            key: "_backOrderPage",
            value: function _backOrderPage() {
                var callback = this.props.callback;

                if (callback) {
                    callback();
                }
            }
        }, {
            key: "render",
            value: function render() {
                var _this2 = this;

                var arrowImage = this.state.type === 1 ? _require(_dependencyMap[4], '../res/images/right.png') : _require(_dependencyMap[5], '../res/images/Group 5.png');
                var titleNotic = this.state.type === 1 ? "您已成功购买" + this.props.courseName + "课程!" : "支付失败!";
                var titleDesc = this.state.type === 1 ? "请在电脑上登录酷蒙在线学习\n" + "网址：www.ke.etiantian.com\n" + "北京四中网校祝您学有所成！" : "请在个人中心重新支付!";
                return _react2.default.createElement(
                    _reactNative.View,
                    {
                        style: styles.container,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 50
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.TouchableOpacity,
                        {
                            onPress: function onPress() {
                                _this2._backOrderPage();
                            },
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 51
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.View,
                            {
                                style: {
                                    marginTop: (0, _ETTInlineFuction.scaleSize)(66),
                                    marginLeft: (0, _ETTInlineFuction.scaleSize)(25)
                                },
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 52
                                }
                            },
                            _react2.default.createElement(_reactNative.Image, {
                                source: _require(_dependencyMap[6], '../res/images/back.png'),
                                style: styles.leftArraw,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 53
                                }
                            })
                        )
                    ),
                    _react2.default.createElement(
                        _reactNative.View,
                        {
                            style: styles.bottomView,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 57
                            }
                        },
                        _react2.default.createElement(_reactNative.Image, {
                            source: arrowImage,
                            style: styles.imgStyle,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 58
                            }
                        }),
                        _react2.default.createElement(
                            _reactNative.Text,
                            {
                                style: styles.titleNotic,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 59
                                }
                            },
                            titleNotic
                        ),
                        _react2.default.createElement(
                            _reactNative.Text,
                            {
                                style: styles.titleDescri,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 60
                                }
                            },
                            titleDesc
                        ),
                        _react2.default.createElement(
                            _reactNative.TouchableOpacity,
                            {
                                onPress: function onPress() {
                                    _this2._backOrderPage();
                                },
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 61
                                }
                            },
                            _react2.default.createElement(
                                _reactNative.View,
                                {
                                    style: styles.backView,
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 62
                                    }
                                },
                                _react2.default.createElement(
                                    _reactNative.Text,
                                    {
                                        style: styles.backText,
                                        __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 63
                                        }
                                    },
                                    "\u8FD4\u56DE\u8BA2\u5355\u9875"
                                )
                            )
                        )
                    )
                );
            }
        }]);
        return ETTPayFinishView;
    }(_react.Component);

    exports.default = ETTPayFinishView;

    var styles = _reactNative.StyleSheet.create({
        contents: {
            backgroundColor: 'white',
            flex: 1,
            flexDirection: 'column',
            position: 'absolute',
            left: 0,
            top: 0,
            width: _ETTDevice2.default.ScreenWidth,
            height: _ETTDevice2.default.ScreenHeight
        },
        bottomView: {
            alignItems: 'center',
            flexDirection: 'column'
        },
        leftArraw: {
            width: (0, _ETTInlineFuction.scaleSize)(21),
            height: (0, _ETTInlineFuction.scaleSize)(34)
        },
        imgStyle: {
            width: (0, _ETTInlineFuction.scaleSize)(150),
            height: (0, _ETTInlineFuction.scaleSize)(155),
            alignSelf: 'center',
            marginTop: (0, _ETTInlineFuction.scaleSize)(293)
        },
        titleNotic: {
            marginTop: (0, _ETTInlineFuction.scaleSize)(86),
            flexWrap: 'wrap',
            textAlign: 'center',
            color: '#333333',
            fontSize: (0, _ETTInlineFuction.scaleSize)(32),
            marginLeft: (0, _ETTInlineFuction.scaleSize)(150),
            marginRight: (0, _ETTInlineFuction.scaleSize)(150)
        },
        titleDescri: {
            marginTop: (0, _ETTInlineFuction.scaleSize)(40),
            marginLeft: (0, _ETTInlineFuction.scaleSize)(150),
            marginRight: (0, _ETTInlineFuction.scaleSize)(150),
            flexWrap: 'wrap',
            textAlign: 'center',
            color: '#999999',
            fontSize: (0, _ETTInlineFuction.scaleSize)(28)
        },
        backView: {
            width: (0, _ETTInlineFuction.scaleSize)(472),
            height: (0, _ETTInlineFuction.scaleSize)(88),
            marginTop: (0, _ETTInlineFuction.scaleSize)(194),
            borderColor: '#00ADEF',
            borderWidth: (0, _ETTInlineFuction.scaleSize)(2),
            alignItems: 'center',
            justifyContent: 'center'
        },
        backText: {
            color: '#00ADEF',
            fontSize: (0, _ETTInlineFuction.scaleSize)(32)
        }
    });
},537,[114,12,452,342,538,539,505],"app/common/ETTPayFinishView.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = _require(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/app/res/images",
    "width": 75,
    "height": 77,
    "scales": [1, 2, 3],
    "hash": "31f336c863e39d18a9df68b9df2e310e",
    "name": "right",
    "type": "png"
  });
},538,[175],"app/res/images/right.png");
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = _require(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/app/res/images",
    "width": 75,
    "height": 77,
    "scales": [1, 2, 3],
    "hash": "e13b122ebe022d9f5121245c6c71d5d6",
    "name": "Group 5",
    "type": "png"
  });
},539,[175],"app/res/images/Group 5.png");
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = undefined;
    var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/app/scene/ETTOrderListScene.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    var _ETTPerCenterSessionView = _require(_dependencyMap[2], "../common/ETTPerCenterSessionView");

    var _ETTPerCenterSessionView2 = babelHelpers.interopRequireDefault(_ETTPerCenterSessionView);

    var _ETTStatusBar = _require(_dependencyMap[3], "../common/ETTStatusBar");

    var _ETTPerlCenterStyles = _require(_dependencyMap[4], "../res/styles/ETTPerlCenterStyles");

    var _ETTPerlCenterStyles2 = babelHelpers.interopRequireDefault(_ETTPerlCenterStyles);

    var _ETTRequestModel = _require(_dependencyMap[5], "../mobx/ETTRequestModel");

    var _ETTRequestModel2 = babelHelpers.interopRequireDefault(_ETTRequestModel);

    var _ETTURLConfig = _require(_dependencyMap[6], "../res/values/ETTURLConfig");

    var _ETTURLConfig2 = babelHelpers.interopRequireDefault(_ETTURLConfig);

    var _ETTNetworkUtil = _require(_dependencyMap[7], "../utils/ETTNetworkUtil");

    var _ETTNetworkUtil2 = babelHelpers.interopRequireDefault(_ETTNetworkUtil);

    var _BackHandler = _require(_dependencyMap[8], "react-native/Libraries/Utilities/BackHandler.android");

    var BackHandler = babelHelpers.interopRequireWildcard(_BackHandler);

    var _ETTLogStyles = _require(_dependencyMap[9], "../res/styles/ETTLogStyles");

    var _ETTLogStyles2 = babelHelpers.interopRequireDefault(_ETTLogStyles);

    var _reactNativeEasyToast = _require(_dependencyMap[10], "react-native-easy-toast");

    var _reactNativeEasyToast2 = babelHelpers.interopRequireDefault(_reactNativeEasyToast);

    var _ETTLoadingAnimation = _require(_dependencyMap[11], "../common/ETTLoadingAnimation");

    var _ETTLoadingAnimation2 = babelHelpers.interopRequireDefault(_ETTLoadingAnimation);

    var ETTOrderListScene = function (_Component) {
        babelHelpers.inherits(ETTOrderListScene, _Component);

        function ETTOrderListScene(props) {
            babelHelpers.classCallCheck(this, ETTOrderListScene);

            var _this = babelHelpers.possibleConstructorReturn(this, (ETTOrderListScene.__proto__ || Object.getPrototypeOf(ETTOrderListScene)).call(this, props));

            _this.onBackAndroid = function () {
                _this.props.navigation.popToTop();

                return true;
            };

            _this.state = {
                dataSet: []
            };
            return _this;
        }

        babelHelpers.createClass(ETTOrderListScene, [{
            key: "componentDidMount",
            value: function componentDidMount() {
                this.fetchList();
            }
        }, {
            key: "render",
            value: function render() {
                return _react2.default.createElement(
                    _reactNative.View,
                    {
                        style: _ETTPerlCenterStyles2.default.container,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 39
                        }
                    },
                    _react2.default.createElement(_ETTStatusBar.ETTDarkStatus, {
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 40
                        }
                    }),
                    _react2.default.createElement(_ETTPerCenterSessionView2.default, {
                        data: this.state.dataSet,
                        didSelected: this.cellCallBack,
                        moreCallBack: this.cellMoreCallBack,
                        logoutCallBack: this.logoutCallBack,
                        iconCallBack: this.iconCallBack,
                        editInfoCallBack: this.editInfoCallBack,
                        bindWechatCallBack: this.bindWechatCallBack,
                        bindQQCallBack: this.bindQQCallBack,
                        serviceCallBack: this.serviceCallBack,
                        nav: this.props.navigation,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 41
                        }
                    }),
                    _react2.default.createElement(_reactNativeEasyToast2.default, {
                        ref: "toast",
                        style: _ETTLogStyles2.default.reg_toast,
                        opacity: 0.8,
                        position: "top",
                        positionValue: 200,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 53
                        }
                    }),
                    _react2.default.createElement(_ETTLoadingAnimation2.default, {
                        ref: "loading",
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 60
                        }
                    })
                );
            }
        }, {
            key: "cellCallBack",
            value: function cellCallBack(info, navigation) {
                if (info) {
                    if (info.item.status === 10) {
                        var currentGoodsId = info.item.goodses[0].goodsId;
                        navigation.navigate('OrderDetailScene', {
                            title: '订单结算',
                            goodsId: currentGoodsId,
                            callback: function callback(data) {
                                console.log("callback" + data);
                            }
                        });
                    }
                }
            }
        }, {
            key: "fetchList",
            value: function fetchList() {
                var _this2 = this;

                this.refs.loading._show(null);

                var rm = new _ETTRequestModel2.default();
                rm._method = 'GET';
                rm._path = _ETTURLConfig2.default.SERVICE_TRADING + _ETTURLConfig2.default.post_orders;
                rm._getInfo = rm.getTokenRequesetData();

                _ETTNetworkUtil2.default.post(rm).then(function (json) {
                    _this2.refs.loading._hiden();

                    if (json.code === 1) {
                        _this2.setState({
                            dataSet: json
                        });
                    } else {}
                }, function (json) {});
            }
        }, {
            key: "componentWillMount",
            value: function componentWillMount() {
                if ('android' === _reactNative.Platform.OS) {
                    BackHandler.addEventListener('handwareBackPress', this.onBackAndroid);
                }
            }
        }, {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
                if ('android' === _reactNative.Platform.OS) {
                    BackHandler.addEventListener('handwareBackPress', this.onBackAndroid);
                }
            }
        }]);
        return ETTOrderListScene;
    }(_react.Component);

    exports.default = ETTOrderListScene;
},540,[114,12,541,450,527,361,360,362,546,460,449,461],"app/scene/ETTOrderListScene.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = undefined;
    var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/app/common/ETTPerCenterSessionView.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    var _ETTPerCenterFooterView = _require(_dependencyMap[2], "./ETTPerCenterFooterView");

    var _ETTPerCenterFooterView2 = babelHelpers.interopRequireDefault(_ETTPerCenterFooterView);

    var _ETTPerlCenterStyles = _require(_dependencyMap[3], "../res/styles/ETTPerlCenterStyles");

    var _ETTPerlCenterStyles2 = babelHelpers.interopRequireDefault(_ETTPerlCenterStyles);

    var _ETTPuRecordsCell = _require(_dependencyMap[4], "./ETTPuRecordsCell");

    var _ETTPuRecordsCell2 = babelHelpers.interopRequireDefault(_ETTPuRecordsCell);

    var _ETTOrderListRow = _require(_dependencyMap[5], "./ETTOrderListRow");

    var _ETTOrderListRow2 = babelHelpers.interopRequireDefault(_ETTOrderListRow);

    var _ETTDevice = _require(_dependencyMap[6], "../res/values/ETTDevice");

    var _ETTDevice2 = babelHelpers.interopRequireDefault(_ETTDevice);

    var RightSectionList = function (_Component) {
        babelHelpers.inherits(RightSectionList, _Component);

        function RightSectionList(props) {
            babelHelpers.classCallCheck(this, RightSectionList);

            var _this = babelHelpers.possibleConstructorReturn(this, (RightSectionList.__proto__ || Object.getPrototypeOf(RightSectionList)).call(this, props));

            _this.renderItem = function (item) {
                return _react2.default.createElement(_ETTOrderListRow2.default, {
                    key: item.index,
                    data: item,
                    didSelected: _this.props.didSelected,
                    nav: _this.props.nav,
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 30
                    }
                });
            };

            _this.sectionComp = function (section) {
                return null;
            };

            _this._header = function () {
                return null;
            };

            _this._footer = function () {
                return _react2.default.createElement(_ETTPerCenterFooterView2.default, {
                    moreCallBack: _this.props.moreCallBack,
                    logoutCallBack: _this.props.logoutCallBack,
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 60
                    }
                });
            };

            _this.viewabilityConfig = {
                viewAreaCoveragePercentThreshold: 50
            };

            _this.emptyComponent = function () {
                return _react2.default.createElement(
                    _reactNative.View,
                    {
                        style: {
                            height: _ETTDevice2.default.height,
                            alignItems: 'center',
                            justifyContent: 'center'
                        },
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 92
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.Text,
                        {
                            style: {
                                fontSize: 16
                            },
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 97
                            }
                        },
                        "\u6682\u65E0\u6570\u636E"
                    )
                );
            };

            _this.itemChange = function (info) {};

            _this.listData = _this.props.data.data;
            _this.state = {
                sectionData: _this.listData
            };

            _this.itemChange.bind(_this);

            return _this;
        }

        babelHelpers.createClass(RightSectionList, [{
            key: "_extraUniqueKey",
            value: function _extraUniqueKey(item, index) {
                return "index" + index + item;
            }
        }, {
            key: "render",
            value: function render() {
                var _this2 = this;

                var json = this.props.data.data;
                return _react2.default.createElement(_reactNative.FlatList, {
                    ref: "sectionList",
                    data: json,
                    keyExtractor: this._extraUniqueKey,
                    ListHeaderComponent: this._header,
                    ListFooterComponent: this._footer,
                    style: _ETTPerlCenterStyles2.default.list,
                    renderSectionHeader: function renderSectionHeader(section) {
                        return _this2.sectionComp(section);
                    },
                    renderItem: function renderItem(item) {
                        return _this2.renderItem(item);
                    },
                    sections: this.state.sectionData,
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 76
                    }
                });
            }
        }, {
            key: "componentDidMount",
            value: function componentDidMount() {}
        }, {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {}
        }]);
        return RightSectionList;
    }(_react.Component);

    exports.default = RightSectionList;
},541,[114,12,542,527,544,545,342],"app/common/ETTPerCenterSessionView.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = undefined;
    var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/app/common/ETTPerCenterFooterView.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    var _ETTDevice = _require(_dependencyMap[2], "../res/values/ETTDevice");

    var _ETTDevice2 = babelHelpers.interopRequireDefault(_ETTDevice);

    var _ETTPerlCenterStyles = _require(_dependencyMap[3], "../res/styles/ETTPerlCenterStyles");

    var _ETTPerlCenterStyles2 = babelHelpers.interopRequireDefault(_ETTPerlCenterStyles);

    var ETTPerCenterFooterView = function (_Component) {
        babelHelpers.inherits(ETTPerCenterFooterView, _Component);

        function ETTPerCenterFooterView() {
            babelHelpers.classCallCheck(this, ETTPerCenterFooterView);
            return babelHelpers.possibleConstructorReturn(this, (ETTPerCenterFooterView.__proto__ || Object.getPrototypeOf(ETTPerCenterFooterView)).apply(this, arguments));
        }

        babelHelpers.createClass(ETTPerCenterFooterView, [{
            key: "moreCallBack",
            value: function moreCallBack() {
                var callback = this.props.moreCallBack;

                if (callback) {
                    callback();
                }
            }
        }, {
            key: "logoutCallBack",
            value: function logoutCallBack() {
                var callback = this.props.logoutCallBack;

                if (callback) {
                    callback();
                }
            }
        }, {
            key: "render",
            value: function render() {
                var _this2 = this;

                return _react2.default.createElement(
                    _reactNative.View,
                    {
                        style: _ETTPerlCenterStyles2.default.footer,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 33
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.View,
                        {
                            style: _ETTPerlCenterStyles2.default.footer_more,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 35
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.TouchableOpacity,
                            {
                                onPress: function onPress() {
                                    return _this2.moreCallBack();
                                },
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 36
                                }
                            },
                            _react2.default.createElement(_reactNative.Image, {
                                source: _require(_dependencyMap[4], '../res/images/order_more.png'),
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 37
                                }
                            })
                        )
                    )
                );
            }
        }]);
        return ETTPerCenterFooterView;
    }(_react.Component);

    exports.default = ETTPerCenterFooterView;
},542,[114,12,342,527,543],"app/common/ETTPerCenterFooterView.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = _require(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/app/res/images",
    "width": 17,
    "height": 10,
    "scales": [2, 3],
    "hash": "9bc13f1d42ca528f71a1dcc47b7c3cd4",
    "name": "order_more",
    "type": "png"
  });
},543,[175],"app/res/images/order_more@2x.png");
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = undefined;
    var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/app/common/ETTPuRecordsCell.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    var _ETTDevice = _require(_dependencyMap[2], "../res/values/ETTDevice");

    var _ETTDevice2 = babelHelpers.interopRequireDefault(_ETTDevice);

    var _ETTPerlCenterStyles = _require(_dependencyMap[3], "../res/styles/ETTPerlCenterStyles");

    var _ETTPerlCenterStyles2 = babelHelpers.interopRequireDefault(_ETTPerlCenterStyles);

    var ETTPuRecordsCell = function (_Component) {
        babelHelpers.inherits(ETTPuRecordsCell, _Component);

        function ETTPuRecordsCell(props) {
            babelHelpers.classCallCheck(this, ETTPuRecordsCell);

            var _this = babelHelpers.possibleConstructorReturn(this, (ETTPuRecordsCell.__proto__ || Object.getPrototypeOf(ETTPuRecordsCell)).call(this, props));

            _this.state = {
                cellItem: _this.props.data
            };
            return _this;
        }

        babelHelpers.createClass(ETTPuRecordsCell, [{
            key: "orderType",
            value: function orderType(type) {
                switch (type) {
                    case 1:
                        return _react2.default.createElement(
                            _reactNative.Text,
                            {
                                style: _ETTPerlCenterStyles2.default.cellOrderType,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 42
                                }
                            },
                            "\u5DF2\u53D6\u6D88"
                        );
                        break;

                    case 2:
                        return _react2.default.createElement(
                            _reactNative.Text,
                            {
                                style: _ETTPerlCenterStyles2.default.cellOrderType,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 45
                                }
                            },
                            "\u5DF2\u5B8C\u6210"
                        );
                        break;

                    case 3:
                        return _react2.default.createElement(
                            _reactNative.Text,
                            {
                                style: _ETTPerlCenterStyles2.default.order_WillPay,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 48
                                }
                            },
                            "\u7EE7\u7EED\u652F\u4ED8"
                        );
                        break;

                    default:
                        return _react2.default.createElement(
                            _reactNative.Text,
                            {
                                style: _ETTPerlCenterStyles2.default.cellOrderType,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 51
                                }
                            },
                            this.state.cellItem.orderType
                        );
                }
            }
        }, {
            key: "onPressCell",
            value: function onPressCell() {
                var callback = this.props.didSelected;

                if (callback) {
                    callback(this.state.cellItem);
                }
            }
        }, {
            key: "render",
            value: function render() {
                var _this2 = this;

                return _react2.default.createElement(
                    _reactNative.TouchableOpacity,
                    {
                        onPress: function onPress() {
                            return _this2.onPressCell();
                        },
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 67
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.View,
                        {
                            style: _ETTPerlCenterStyles2.default.cellContainer,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 68
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.Text,
                            {
                                style: _ETTPerlCenterStyles2.default.cellheader,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 70
                                }
                            },
                            this.state.cellItem.name
                        ),
                        _react2.default.createElement(
                            _reactNative.View,
                            {
                                style: _ETTPerlCenterStyles2.default.cellBody,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 73
                                }
                            },
                            _react2.default.createElement(
                                _reactNative.View,
                                {
                                    style: _ETTPerlCenterStyles2.default.cellBodyTop,
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 74
                                    }
                                },
                                _react2.default.createElement(
                                    _reactNative.View,
                                    {
                                        style: _ETTPerlCenterStyles2.default.cellBodyLeft,
                                        __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 75
                                        }
                                    },
                                    _react2.default.createElement(
                                        _reactNative.Text,
                                        {
                                            style: _ETTPerlCenterStyles2.default.cellContent,
                                            __source: {
                                                fileName: _jsxFileName,
                                                lineNumber: 76
                                            }
                                        },
                                        this.state.cellItem.content
                                    ),
                                    _react2.default.createElement(
                                        _reactNative.Text,
                                        {
                                            style: _ETTPerlCenterStyles2.default.cellTime,
                                            __source: {
                                                fileName: _jsxFileName,
                                                lineNumber: 77
                                            }
                                        },
                                        this.state.cellItem.time
                                    )
                                ),
                                _react2.default.createElement(
                                    _reactNative.View,
                                    {
                                        style: _ETTPerlCenterStyles2.default.cellBodyRight,
                                        __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 79
                                        }
                                    },
                                    _react2.default.createElement(
                                        _reactNative.Text,
                                        {
                                            style: _ETTPerlCenterStyles2.default.cellAmount,
                                            __source: {
                                                fileName: _jsxFileName,
                                                lineNumber: 80
                                            }
                                        },
                                        "\u603B\u91D1\u989D:",
                                        this.state.cellItem.amount
                                    ),
                                    this.orderType(this.state.cellItem.orderType)
                                )
                            ),
                            _react2.default.createElement(_reactNative.View, {
                                style: _ETTPerlCenterStyles2.default.cellLine,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 84
                                }
                            })
                        )
                    )
                );
            }
        }]);
        return ETTPuRecordsCell;
    }(_react.Component);

    exports.default = ETTPuRecordsCell;
},544,[114,12,342,527],"app/common/ETTPuRecordsCell.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = undefined;
    var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/app/common/ETTOrderListRow.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    var _ETTDevice = _require(_dependencyMap[2], "../res/values/ETTDevice");

    var _ETTDevice2 = babelHelpers.interopRequireDefault(_ETTDevice);

    var _ETTPerlCenterStyles = _require(_dependencyMap[3], "../res/styles/ETTPerlCenterStyles");

    var _ETTPerlCenterStyles2 = babelHelpers.interopRequireDefault(_ETTPerlCenterStyles);

    var _ETTColor = _require(_dependencyMap[4], "../res/values/ETTColor");

    var _ETTColor2 = babelHelpers.interopRequireDefault(_ETTColor);

    var _ETTInlineFuction = _require(_dependencyMap[5], "../res/values/ETTInlineFuction");

    var ETTOrderListRow = function (_Component) {
        babelHelpers.inherits(ETTOrderListRow, _Component);

        function ETTOrderListRow(props) {
            babelHelpers.classCallCheck(this, ETTOrderListRow);

            var _this = babelHelpers.possibleConstructorReturn(this, (ETTOrderListRow.__proto__ || Object.getPrototypeOf(ETTOrderListRow)).call(this, props));

            _this.state = {
                cellItem: _this.props.data
            };
            return _this;
        }

        babelHelpers.createClass(ETTOrderListRow, [{
            key: "orderType",
            value: function orderType(type) {
                switch (type) {
                    case 1:
                        return _react2.default.createElement(
                            _reactNative.Text,
                            {
                                style: _ETTPerlCenterStyles2.default.cellOrderType,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 43
                                }
                            },
                            "\u5DF2\u53D6\u6D88"
                        );
                        break;

                    case 2:
                        return _react2.default.createElement(
                            _reactNative.Text,
                            {
                                style: _ETTPerlCenterStyles2.default.cellOrderType,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 46
                                }
                            },
                            "\u5DF2\u5B8C\u6210"
                        );
                        break;

                    case 3:
                        return _react2.default.createElement(
                            _reactNative.Text,
                            {
                                style: _ETTPerlCenterStyles2.default.order_WillPay,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 49
                                }
                            },
                            "\u7EE7\u7EED\u652F\u4ED8"
                        );
                        break;

                    default:
                        return _react2.default.createElement(
                            _reactNative.Text,
                            {
                                style: _ETTPerlCenterStyles2.default.cellOrderType,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 52
                                }
                            },
                            this.state.cellItem.orderType
                        );
                }
            }
        }, {
            key: "onPressCell",
            value: function onPressCell() {
                var callback = this.props.didSelected;

                if (callback) {
                    callback(this.state.cellItem, this.props.nav);
                }
            }
        }, {
            key: "render",
            value: function render() {
                var _this2 = this;

                var item = this.state.cellItem.item;
                return _react2.default.createElement(
                    _reactNative.TouchableOpacity,
                    {
                        activeOpacity: 1.0,
                        onPress: function onPress() {
                            return _this2.onPressCell();
                        },
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 66
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.View,
                        {
                            style: _ETTPerlCenterStyles2.default.cellContainer,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 67
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.View,
                            {
                                style: styles.linearCenter,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 69
                                }
                            },
                            _react2.default.createElement(
                                _reactNative.Text,
                                {
                                    style: styles.textBlack,
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 70
                                    }
                                },
                                "\u8BA2\u5355\u53F7\uFF1A"
                            ),
                            _react2.default.createElement(
                                _reactNative.Text,
                                {
                                    style: styles.textGray,
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 71
                                    }
                                },
                                item.orderId
                            ),
                            _react2.default.createElement(
                                _reactNative.Text,
                                {
                                    style: [styles.textGray, styles.marginLeft20],
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 72
                                    }
                                },
                                item.orderTime
                            ),
                            _react2.default.createElement(
                                _reactNative.View,
                                {
                                    style: styles.viewRight,
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 73
                                    }
                                },
                                _react2.default.createElement(
                                    _reactNative.Text,
                                    {
                                        style: styles.textPending,
                                        __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 74
                                        }
                                    },
                                    item.statusName
                                )
                            )
                        ),
                        this.spuList(item.goodses),
                        _react2.default.createElement(
                            _reactNative.View,
                            {
                                style: styles.linearCenterMarginTop,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 79
                                }
                            },
                            _react2.default.createElement(
                                _reactNative.Text,
                                {
                                    style: styles.textGrayBig,
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 80
                                    }
                                },
                                "\u603B\u4EF7"
                            ),
                            _react2.default.createElement(
                                _reactNative.View,
                                {
                                    style: styles.viewRightRow,
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 81
                                    }
                                },
                                _react2.default.createElement(
                                    _reactNative.Text,
                                    {
                                        style: [styles.textGray, styles.midline],
                                        __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 82
                                        }
                                    },
                                    "\uFF08\u539F\u4EF7\uFF1A",
                                    item.amount,
                                    "\uFF09"
                                ),
                                _react2.default.createElement(
                                    _reactNative.Text,
                                    {
                                        style: [styles.textGray, styles.marginLeft20],
                                        __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 83
                                        }
                                    },
                                    item.marketMoney
                                )
                            )
                        ),
                        this.discountList(item.activitites),
                        _react2.default.createElement(
                            _reactNative.View,
                            {
                                style: styles.linearCenterMarginTop,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 87
                                }
                            },
                            _react2.default.createElement(
                                _reactNative.Text,
                                {
                                    style: styles.textBlack,
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 88
                                    }
                                },
                                "\u5E94\u4ED8\u91D1\u989D"
                            ),
                            _react2.default.createElement(
                                _reactNative.View,
                                {
                                    style: styles.viewRight,
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 89
                                    }
                                },
                                _react2.default.createElement(
                                    _reactNative.Text,
                                    {
                                        style: styles.textPrice,
                                        __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 90
                                        }
                                    },
                                    item.paymentMoney
                                )
                            )
                        )
                    )
                );
            }
        }, {
            key: "spuList",
            value: function spuList(goodses) {
                function skuLists(units) {
                    if (units && units.length) {
                        return _react2.default.createElement(
                            _reactNative.View,
                            {
                                style: styles.linearCol,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 101
                                }
                            },
                            units.map(function (u, i) {
                                return _react2.default.createElement(
                                    _reactNative.View,
                                    {
                                        style: styles.linearCenterMarginTop,
                                        key: i,
                                        __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 102
                                        }
                                    },
                                    _react2.default.createElement(
                                        _reactNative.Text,
                                        {
                                            style: styles.textBlack,
                                            __source: {
                                                fileName: _jsxFileName,
                                                lineNumber: 102
                                            }
                                        },
                                        u.skuName
                                    ),
                                    _react2.default.createElement(
                                        _reactNative.Text,
                                        {
                                            style: [styles.textGray, styles.marginLeft40],
                                            __source: {
                                                fileName: _jsxFileName,
                                                lineNumber: 103
                                            }
                                        },
                                        u.propertyName
                                    )
                                );
                            })
                        );
                    } else {
                        return null;
                    }
                }

                function showTag(type) {
                    if (type === 2) {
                        return _react2.default.createElement(
                            _reactNative.View,
                            {
                                style: styles.tag,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 113
                                }
                            },
                            _react2.default.createElement(
                                _reactNative.Text,
                                {
                                    style: styles.textWhite,
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 114
                                    }
                                },
                                "\u5957\u9910 "
                            )
                        );
                    } else {
                        return null;
                    }
                }

                if (goodses && goodses.length) {
                    return _react2.default.createElement(
                        _reactNative.View,
                        {
                            style: styles.linearCol,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 123
                            }
                        },
                        goodses.map(function (g, i) {
                            return _react2.default.createElement(
                                _reactNative.View,
                                {
                                    key: i,
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 126
                                    }
                                },
                                _react2.default.createElement(
                                    _reactNative.View,
                                    {
                                        style: styles.linearCenterMarginTop,
                                        __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 127
                                        }
                                    },
                                    showTag(g.type),
                                    _react2.default.createElement(
                                        _reactNative.Text,
                                        {
                                            style: styles.textBlackBig,
                                            __source: {
                                                fileName: _jsxFileName,
                                                lineNumber: 129
                                            }
                                        },
                                        g.goodsName
                                    )
                                ),
                                skuLists(g.units)
                            );
                        })
                    );
                } else {
                    return null;
                }
            }
        }, {
            key: "discountList",
            value: function discountList(activities) {
                if (activities && activities.length) {
                    return _react2.default.createElement(
                        _reactNative.View,
                        {
                            style: styles.linearCol,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 144
                            }
                        },
                        activities.map(function (ac) {
                            return _react2.default.createElement(
                                _reactNative.View,
                                {
                                    style: styles.linearCenterMarginTop,
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 145
                                    }
                                },
                                _react2.default.createElement(
                                    _reactNative.Text,
                                    {
                                        style: styles.textGrayBig,
                                        __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 146
                                        }
                                    },
                                    "\u4F18\u60E0"
                                ),
                                _react2.default.createElement(
                                    _reactNative.View,
                                    {
                                        style: styles.viewRightRow,
                                        __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 147
                                        }
                                    },
                                    _react2.default.createElement(
                                        _reactNative.Text,
                                        {
                                            style: styles.textGray,
                                            __source: {
                                                fileName: _jsxFileName,
                                                lineNumber: 148
                                            }
                                        },
                                        ac.activityName
                                    ),
                                    _react2.default.createElement(
                                        _reactNative.Text,
                                        {
                                            style: [styles.textGray, styles.marginLeft20],
                                            __source: {
                                                fileName: _jsxFileName,
                                                lineNumber: 149
                                            }
                                        },
                                        ac.discount
                                    )
                                )
                            );
                        })
                    );
                } else {
                    return null;
                }
            }
        }]);
        return ETTOrderListRow;
    }(_react.Component);

    exports.default = ETTOrderListRow;

    var styles = _reactNative.StyleSheet.create({
        textBlack: {
            fontSize: (0, _ETTInlineFuction.scaleSize)(24),
            color: _ETTColor2.default.f1
        },
        textBlackBig: {
            fontSize: (0, _ETTInlineFuction.scaleSize)(28),
            color: _ETTColor2.default.f1
        },
        textGray: {
            fontSize: (0, _ETTInlineFuction.scaleSize)(20),
            color: _ETTColor2.default.f3
        },
        textGrayBig: {
            fontSize: (0, _ETTInlineFuction.scaleSize)(24),
            color: _ETTColor2.default.f3
        },
        textPrice: {
            color: _ETTColor2.default.f5,
            fontSize: (0, _ETTInlineFuction.scaleSize)(24)
        },
        textPending: {
            color: '#f2291d',
            fontSize: (0, _ETTInlineFuction.scaleSize)(24)
        },
        textWhite: {
            color: _ETTColor2.default.white,
            fontSize: (0, _ETTInlineFuction.scaleSize)(20)
        },
        marginLeft20: {
            marginLeft: (0, _ETTInlineFuction.scaleSize)(20)
        },
        marginLeft40: {
            marginLeft: (0, _ETTInlineFuction.scaleSize)(40)
        },
        midline: {
            textDecorationLine: 'line-through'
        },
        linearCol: {
            flexDirection: 'column'
        },
        linearCenter: {
            flexDirection: 'row',
            alignItems: "center"
        },
        linearCenterMarginTop: {
            flexDirection: 'row',
            alignItems: "center",
            marginTop: (0, _ETTInlineFuction.scaleSize)(20)
        },
        viewRight: {
            flex: 2,
            alignItems: 'flex-end'
        },
        viewRightRow: {
            flex: 10,
            flexDirection: 'row',
            justifyContent: 'flex-end'
        },
        tag: {
            width: (0, _ETTInlineFuction.scaleSize)(70),
            height: (0, _ETTInlineFuction.scaleSize)(31),
            backgroundColor: _ETTColor2.default.c6,
            borderRadius: (0, _ETTInlineFuction.scaleSize)(5),
            alignItems: 'center',
            marginRight: (0, _ETTInlineFuction.scaleSize)(20)
        }
    });
},545,[114,12,342,527,453,452],"app/common/ETTOrderListRow.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var DeviceEventManager = _require(_dependencyMap[0], 'NativeModules').DeviceEventManager;

  var RCTDeviceEventEmitter = _require(_dependencyMap[1], 'RCTDeviceEventEmitter');

  var DEVICE_BACK_EVENT = 'hardwareBackPress';

  var _backPressSubscriptions = new Set();

  RCTDeviceEventEmitter.addListener(DEVICE_BACK_EVENT, function () {
    var invokeDefault = true;
    var subscriptions = Array.from(_backPressSubscriptions.values()).reverse();

    for (var i = 0; i < subscriptions.length; ++i) {
      if (subscriptions[i]()) {
        invokeDefault = false;
        break;
      }
    }

    if (invokeDefault) {
      BackHandler.exitApp();
    }
  });
  var BackHandler = {
    exitApp: function exitApp() {
      DeviceEventManager.invokeDefaultBackPressHandler();
    },
    addEventListener: function addEventListener(eventName, handler) {
      _backPressSubscriptions.add(handler);

      return {
        remove: function remove() {
          return BackHandler.removeEventListener(eventName, handler);
        }
      };
    },
    removeEventListener: function removeEventListener(eventName, handler) {
      _backPressSubscriptions.delete(handler);
    }
  };
  module.exports = BackHandler;
},546,[15,70],"BackHandler");
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = undefined;

    var _class,
        _temp,
        _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/app/scene/ETTVerCodeScene.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    var _reactNavigation = _require(_dependencyMap[2], "react-navigation");

    var _reactNativeEasyToast = _require(_dependencyMap[3], "react-native-easy-toast");

    var _reactNativeEasyToast2 = babelHelpers.interopRequireDefault(_reactNativeEasyToast);

    var _ETTLogStyles = _require(_dependencyMap[4], "../res/styles/ETTLogStyles");

    var _ETTLogStyles2 = babelHelpers.interopRequireDefault(_ETTLogStyles);

    var _ETTDevice = _require(_dependencyMap[5], "../res/values/ETTDevice");

    var _ETTDevice2 = babelHelpers.interopRequireDefault(_ETTDevice);

    var _ETTConfig = _require(_dependencyMap[6], "../res/values/ETTConfig");

    var _ETTStatusBar = _require(_dependencyMap[7], "../common/ETTStatusBar");

    var _ETTString = _require(_dependencyMap[8], "../res/values/ETTString");

    var _ETTString2 = babelHelpers.interopRequireDefault(_ETTString);

    var _ETTEditView = _require(_dependencyMap[9], "../common/ETTEditView");

    var _ETTLoadingAnimation = _require(_dependencyMap[10], "../common/ETTLoadingAnimation");

    var _ETTLoadingAnimation2 = babelHelpers.interopRequireDefault(_ETTLoadingAnimation);

    var _ETTNetworkUtil = _require(_dependencyMap[11], "../utils/ETTNetworkUtil");

    var _ETTNetworkUtil2 = babelHelpers.interopRequireDefault(_ETTNetworkUtil);

    var _ETTURLConfig = _require(_dependencyMap[12], "../res/values/ETTURLConfig");

    var _ETTURLConfig2 = babelHelpers.interopRequireDefault(_ETTURLConfig);

    var _ETTNetResponseHelper = _require(_dependencyMap[13], "../utils/ETTNetResponseHelper");

    var _ETTNetResponseHelper2 = babelHelpers.interopRequireDefault(_ETTNetResponseHelper);

    var _ETTRequestModel = _require(_dependencyMap[14], "../mobx/ETTRequestModel");

    var _ETTRequestModel2 = babelHelpers.interopRequireDefault(_ETTRequestModel);

    var _ETTEnum = _require(_dependencyMap[15], "../res/values/ETTEnum");

    var ETTLogScene = (_temp = _class = function (_Component) {
        babelHelpers.inherits(ETTLogScene, _Component);

        function ETTLogScene(props) {
            babelHelpers.classCallCheck(this, ETTLogScene);

            var _this = babelHelpers.possibleConstructorReturn(this, (ETTLogScene.__proto__ || Object.getPrototypeOf(ETTLogScene)).call(this, props));

            _this.state = {
                mobile: '',
                code: ''
            };
            return _this;
        }

        babelHelpers.createClass(ETTLogScene, [{
            key: "render",
            value: function render() {
                var _this2 = this;

                return _react2.default.createElement(
                    _reactNative.View,
                    {
                        style: _ETTLogStyles2.default.log_Mian,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 50
                        }
                    },
                    _react2.default.createElement(_ETTStatusBar.ETTDarkStatus, {
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 51
                        }
                    }),
                    _react2.default.createElement(
                        _reactNative.View,
                        {
                            style: _ETTLogStyles2.default.log_pushscene_header,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 52
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.TouchableOpacity,
                            {
                                onPress: function onPress() {
                                    return _this2.goback();
                                },
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 53
                                }
                            },
                            _react2.default.createElement(_reactNative.Image, {
                                style: _ETTLogStyles2.default.log_back,
                                source: _require(_dependencyMap[16], '../res/images/km_back.png'),
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 54
                                }
                            })
                        ),
                        _react2.default.createElement(
                            _reactNative.Text,
                            {
                                style: _ETTLogStyles2.default.log_code_title,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 58
                                }
                            },
                            "\u9A8C\u8BC1\u7801\u5FEB\u6377\u767B\u5F55"
                        )
                    ),
                    _react2.default.createElement(_ETTEditView.ETTEditPhoneCodeView, {
                        placeholder: _ETTString2.default.log_code_placeholder,
                        maxLength: _ETTConfig.AMOUNT_MAXLEGTH,
                        changeHandle: function changeHandle(text) {
                            return _this2.amountChangeHandle(text);
                        },
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 63
                        }
                    }),
                    _react2.default.createElement(_reactNative.Text, {
                        style: _ETTLogStyles2.default.log_line,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 66
                        }
                    }),
                    _react2.default.createElement(_ETTEditView.ETTEditCodeView, {
                        ref: "editCode",
                        placeholder: _ETTString2.default.log_codepwd_placeholder,
                        maxLength: _ETTConfig.REG_CODEMAXLENGTH,
                        changeHandle: function changeHandle(text) {
                            return _this2.codeChangehandle(text);
                        },
                        getCodeHandle: function getCodeHandle() {
                            return _this2.getCodelHandel();
                        },
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 67
                        }
                    }),
                    _react2.default.createElement(_reactNative.Text, {
                        style: _ETTLogStyles2.default.log_line,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 72
                        }
                    }),
                    _react2.default.createElement(
                        _reactNative.TouchableOpacity,
                        {
                            style: _ETTLogStyles2.default.log_btn,
                            onPress: function onPress() {
                                return _this2.logCallback();
                            },
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 73
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.Text,
                            {
                                style: _ETTLogStyles2.default.log_btn_text,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 74
                                }
                            },
                            "\u767B\u5F55"
                        )
                    ),
                    _react2.default.createElement(_reactNativeEasyToast2.default, {
                        ref: "toast",
                        style: _ETTLogStyles2.default.reg_toast,
                        opacity: 0.8,
                        position: "top",
                        positionValue: 200,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 78
                        }
                    }),
                    _react2.default.createElement(_ETTLoadingAnimation2.default, {
                        ref: "loading",
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 85
                        }
                    })
                );
            }
        }, {
            key: "goback",
            value: function goback() {
                this.props.navigation.pop();
                var params = this.props.navigation.state.params;
                var callback = params.stackCloseHandle;

                if (callback) {
                    callback();
                }
            }
        }, {
            key: "amountChangeHandle",
            value: function amountChangeHandle(text) {
                this.setState({
                    mobile: text
                });
            }
        }, {
            key: "codeChangehandle",
            value: function codeChangehandle(text) {
                this.setState({
                    code: text
                });
            }
        }, {
            key: "logCallback",
            value: function logCallback() {
                if (this.state.mobile.length < 1) {
                    this.refs.toast.show(_ETTString2.default.iphone_null_toast);
                } else if (this.state.mobile.length < _ETTConfig.AMOUNT_MAXLEGTH) {
                    this.refs.toast.show(_ETTString2.default.iphone_len_toast);
                } else if (this.state.code.length < 1) {
                    this.refs.toast.show(_ETTString2.default.code_null_toast);
                } else {
                    this.refs.loading._show(null);

                    this.enterLog();
                }
            }
        }, {
            key: "enterLog",
            value: function enterLog() {
                var _this3 = this;

                console.log("enterlog");
                var formData = new FormData();
                formData.append("mobile", this.state.mobile);
                formData.append("mobileCode", this.state.code);
                var requetModel = new _ETTRequestModel2.default();
                requetModel._path = _ETTURLConfig2.default.SERVICE_NAME_AUTH + _ETTURLConfig2.default.code_Log;
                requetModel._method = 'POST';
                requetModel._bodyData = formData;
                requetModel._getInfo = requetModel.getAuthorizationRequesetData();

                _ETTNetworkUtil2.default.post(requetModel).then(function (json) {
                    console.log("enterlog" + json);

                    _this3.refs.loading._hiden();

                    if (json.access_token) {
                        var amountInfo = {
                            'amount': _this3.state.mobile,
                            'pwd': _this3.state.password
                        };

                        _ETTConfig.DataManager.logSuccessful(json, _ETTEnum.ETTUserLogType.logCode, amountInfo);

                        _this3.props.navigation.pop();

                        var params = _this3.props.navigation.state.params;
                        var callback = params.loginSuccessBack;

                        if (callback) {
                            callback();
                        }
                    } else {
                        var reslut = _ETTNetResponseHelper2.default.responseJson(json);

                        _this3.refs.toast.show(reslut.msg);
                    }
                }, function (json) {
                    _this3.refs.loading._hiden();

                    console.log('请求错误' + json);
                    alert("请求错误" + json);

                    var result = _ETTNetResponseHelper2.default.requestFailJson(json);

                    _this3.refs.toast.show(result.msg);
                });
            }
        }, {
            key: "getCodelHandel",
            value: function getCodelHandel() {
                var _this4 = this;

                if (this.state.mobile.length < 1) {
                    this.refs.toast.show(_ETTString2.default.iphone_null_toast);
                } else if (this.state.mobile.length < _ETTConfig.AMOUNT_MAXLEGTH) {
                    this.refs.toast.show(_ETTString2.default.iphone_len_toast);
                } else {
                    this.refs.editCode._countdownAction();

                    this.refs.loading._show(null);

                    var requetModel = new _ETTRequestModel2.default();
                    requetModel._path = _ETTURLConfig2.default.SERVICE_NAME_SMS + _ETTURLConfig2.default.logCode;
                    requetModel._method = 'POST';
                    requetModel._bodyData = 'phone=' + this.state.mobile;
                    requetModel._getInfo = requetModel.getAuthorizationRequesetData();

                    _ETTNetworkUtil2.default.post(requetModel).then(function (json) {
                        console.log(json);

                        var reslut = _ETTNetResponseHelper2.default.responseJson(json);

                        if (reslut.code != 1) {
                            _this4.refs.toast.show(reslut.msg);
                        } else {
                            _this4.refs.toast.show(_ETTString2.default.code_send_successful);
                        }

                        _this4.refs.loading._hiden();
                    }, function (json) {
                        _this4.refs.loading._hiden();

                        var result = _ETTNetResponseHelper2.default.requestFailJson(json);

                        _this4.refs.toast.show(result.msg);
                    });
                }
            }
        }]);
        return ETTLogScene;
    }(_react.Component), _class.navigationOptions = {
        title: 'Home'
    }, _temp);
    exports.default = ETTLogScene;
},547,[114,12,371,449,460,342,343,450,347,512,461,362,360,369,361,348,517],"app/scene/ETTVerCodeScene.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = undefined;
    var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/app/scene/ETTForgetPwdScene.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    var _reactNavigation = _require(_dependencyMap[2], "react-navigation");

    var _reactNativeEasyToast = _require(_dependencyMap[3], "react-native-easy-toast");

    var _reactNativeEasyToast2 = babelHelpers.interopRequireDefault(_reactNativeEasyToast);

    var _ETTLogStyles = _require(_dependencyMap[4], "../res/styles/ETTLogStyles");

    var _ETTLogStyles2 = babelHelpers.interopRequireDefault(_ETTLogStyles);

    var _ETTDevice = _require(_dependencyMap[5], "../res/values/ETTDevice");

    var _ETTDevice2 = babelHelpers.interopRequireDefault(_ETTDevice);

    var _ETTConfig = _require(_dependencyMap[6], "../res/values/ETTConfig");

    var _ETTStatusBar = _require(_dependencyMap[7], "../common/ETTStatusBar");

    var _ETTString = _require(_dependencyMap[8], "../res/values/ETTString");

    var _ETTString2 = babelHelpers.interopRequireDefault(_ETTString);

    var _ETTEditView = _require(_dependencyMap[9], "../common/ETTEditView");

    var _ETTLoadingAnimation = _require(_dependencyMap[10], "../common/ETTLoadingAnimation");

    var _ETTLoadingAnimation2 = babelHelpers.interopRequireDefault(_ETTLoadingAnimation);

    var _ETTNetworkUtil = _require(_dependencyMap[11], "../utils/ETTNetworkUtil");

    var _ETTNetworkUtil2 = babelHelpers.interopRequireDefault(_ETTNetworkUtil);

    var _ETTURLConfig = _require(_dependencyMap[12], "../res/values/ETTURLConfig");

    var _ETTURLConfig2 = babelHelpers.interopRequireDefault(_ETTURLConfig);

    var _ETTNetResponseHelper = _require(_dependencyMap[13], "../utils/ETTNetResponseHelper");

    var _ETTNetResponseHelper2 = babelHelpers.interopRequireDefault(_ETTNetResponseHelper);

    var _ETTRequestModel = _require(_dependencyMap[14], "../mobx/ETTRequestModel");

    var _ETTRequestModel2 = babelHelpers.interopRequireDefault(_ETTRequestModel);

    var ETTForgetPwdScene = function (_Component) {
        babelHelpers.inherits(ETTForgetPwdScene, _Component);

        function ETTForgetPwdScene(props) {
            babelHelpers.classCallCheck(this, ETTForgetPwdScene);

            var _this = babelHelpers.possibleConstructorReturn(this, (ETTForgetPwdScene.__proto__ || Object.getPrototypeOf(ETTForgetPwdScene)).call(this, props));

            _this.state = {
                amountverification: false,
                mobile: '',
                code: '',
                newpwd: '',
                oldpwd: ''
            };
            return _this;
        }

        babelHelpers.createClass(ETTForgetPwdScene, [{
            key: "findPassword",
            value: function findPassword() {
                var _this2 = this;

                return _react2.default.createElement(
                    _reactNative.View,
                    {
                        style: _ETTLogStyles2.default.log_Mian,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 52
                        }
                    },
                    _react2.default.createElement(_ETTStatusBar.ETTDarkStatus, {
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 53
                        }
                    }),
                    _react2.default.createElement(
                        _reactNative.View,
                        {
                            style: _ETTLogStyles2.default.log_forgetpwd_header,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 54
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.TouchableOpacity,
                            {
                                onPress: function onPress() {
                                    return _this2.goback();
                                },
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 55
                                }
                            },
                            _react2.default.createElement(_reactNative.Image, {
                                style: _ETTLogStyles2.default.log_back,
                                source: _require(_dependencyMap[15], '../res/images/km_back.png'),
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 56
                                }
                            })
                        ),
                        _react2.default.createElement(
                            _reactNative.Text,
                            {
                                style: _ETTLogStyles2.default.log_code_title,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 60
                                }
                            },
                            "\u627E\u56DE\u5BC6\u7801"
                        )
                    ),
                    _react2.default.createElement(_ETTEditView.ETTEditPhoneCodeView, {
                        placeholder: _ETTString2.default.log_amount_placeholder,
                        maxLength: _ETTConfig.AMOUNT_MAXLEGTH,
                        changeHandle: function changeHandle(text) {
                            return _this2.amountChangeHandle(text);
                        },
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 64
                        }
                    }),
                    _react2.default.createElement(_reactNative.Text, {
                        style: _ETTLogStyles2.default.log_line,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 67
                        }
                    }),
                    _react2.default.createElement(_ETTEditView.ETTEditCodeView, {
                        placeholder: _ETTString2.default.forgetamount_pwd_placeholder,
                        ref: "editCode",
                        maxLength: _ETTConfig.REG_CODEMAXLENGTH,
                        changeHandle: function changeHandle(text) {
                            return _this2.codeChangehandle(text);
                        },
                        getCodeHandle: function getCodeHandle() {
                            return _this2.getCodelHandel();
                        },
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 68
                        }
                    }),
                    _react2.default.createElement(_reactNative.Text, {
                        style: _ETTLogStyles2.default.log_line,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 73
                        }
                    }),
                    _react2.default.createElement(
                        _reactNative.TouchableOpacity,
                        {
                            style: _ETTLogStyles2.default.log_forgetpwd_next_btn,
                            onPress: function onPress() {
                                return _this2.nextCallback();
                            },
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 74
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.Text,
                            {
                                style: _ETTLogStyles2.default.log_btn_text,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 75
                                }
                            },
                            "\u4E0B\u4E00\u6B65"
                        )
                    ),
                    _react2.default.createElement(_reactNativeEasyToast2.default, {
                        ref: "toast",
                        style: _ETTLogStyles2.default.reg_toast,
                        opacity: 0.8,
                        position: "top",
                        positionValue: 200,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 79
                        }
                    }),
                    _react2.default.createElement(_ETTLoadingAnimation2.default, {
                        ref: "loading",
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 86
                        }
                    })
                );
            }
        }, {
            key: "setPassword",
            value: function setPassword() {
                var _this3 = this;

                return _react2.default.createElement(
                    _reactNative.View,
                    {
                        style: _ETTLogStyles2.default.log_Mian,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 94
                        }
                    },
                    _react2.default.createElement(_ETTStatusBar.ETTDarkStatus, {
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 95
                        }
                    }),
                    _react2.default.createElement(
                        _reactNative.View,
                        {
                            style: _ETTLogStyles2.default.log_forgetpwd_header,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 96
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.TouchableOpacity,
                            {
                                onPress: function onPress() {
                                    return _this3.goback();
                                },
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 97
                                }
                            },
                            _react2.default.createElement(_reactNative.Image, {
                                style: _ETTLogStyles2.default.log_back,
                                source: _require(_dependencyMap[15], '../res/images/km_back.png'),
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 98
                                }
                            })
                        ),
                        _react2.default.createElement(
                            _reactNative.Text,
                            {
                                style: _ETTLogStyles2.default.log_code_title,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 102
                                }
                            },
                            "\u8BBE\u7F6E\u5BC6\u7801"
                        )
                    ),
                    _react2.default.createElement(_ETTEditView.ETTEditPwdView, {
                        placeholder: _ETTString2.default.forget_resetpwd_placeholder,
                        maxLength: _ETTConfig.REG_PWDMAXLENGTH,
                        changeHandle: function changeHandle(text) {
                            return _this3.newpwdChangehandle(text);
                        },
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 106
                        }
                    }),
                    _react2.default.createElement(_reactNative.Text, {
                        style: _ETTLogStyles2.default.log_line,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 109
                        }
                    }),
                    _react2.default.createElement(_ETTEditView.ETTEditPwdView, {
                        placeholder: _ETTString2.default.forget_enterresetpwd_placeholder,
                        maxLength: _ETTConfig.REG_PWDMAXLENGTH,
                        changeHandle: function changeHandle(text) {
                            return _this3.oldpwdChangehandle(text);
                        },
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 110
                        }
                    }),
                    _react2.default.createElement(_reactNative.Text, {
                        style: _ETTLogStyles2.default.log_line,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 113
                        }
                    }),
                    _react2.default.createElement(
                        _reactNative.TouchableOpacity,
                        {
                            style: _ETTLogStyles2.default.log_forgetpwd_next_btn,
                            onPress: function onPress() {
                                return _this3.enterSetPwdCallback();
                            },
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 114
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.Text,
                            {
                                style: _ETTLogStyles2.default.log_btn_text,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 115
                                }
                            },
                            "\u5B8C\u6210"
                        )
                    ),
                    _react2.default.createElement(_reactNativeEasyToast2.default, {
                        ref: "toast",
                        style: _ETTLogStyles2.default.reg_toast,
                        opacity: 0.8,
                        position: "top",
                        positionValue: 200,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 119
                        }
                    }),
                    _react2.default.createElement(_ETTLoadingAnimation2.default, {
                        ref: "loading",
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 126
                        }
                    })
                );
            }
        }, {
            key: "render",
            value: function render() {
                if (this.state.amountverification) {
                    return this.setPassword();
                }

                return this.findPassword();
            }
        }, {
            key: "goback",
            value: function goback() {
                this.props.navigation.pop();
                var params = this.props.navigation.state.params;
                var callback = params.stackCloseHandle;

                if (callback) {
                    callback();
                }
            }
        }, {
            key: "nextCallback",
            value: function nextCallback() {
                if (this.state.code.length < 1) {
                    this.refs.toast.show(_ETTString2.default.code_null_toast);
                } else {
                    this.setState({
                        amountverification: true
                    });
                }
            }
        }, {
            key: "amountChangeHandle",
            value: function amountChangeHandle(text) {
                this.setState({
                    mobile: text
                });
            }
        }, {
            key: "codeChangehandle",
            value: function codeChangehandle(text) {
                this.setState({
                    code: text
                });
            }
        }, {
            key: "newpwdChangehandle",
            value: function newpwdChangehandle(text) {
                this.setState({
                    newpwd: text
                });
            }
        }, {
            key: "oldpwdChangehandle",
            value: function oldpwdChangehandle(text) {
                this.setState({
                    oldpwd: text
                });
            }
        }, {
            key: "getCodelHandel",
            value: function getCodelHandel() {
                var _this4 = this;

                if (this.state.mobile.length < 1) {
                    this.refs.toast.show(_ETTString2.default.iphone_null_toast);
                } else if (this.state.mobile.length < _ETTConfig.AMOUNT_MAXLEGTH) {
                    this.refs.toast.show(_ETTString2.default.iphone_len_toast);
                } else {
                    this.refs.editCode._countdownAction();

                    this.refs.loading._show(null);

                    var requetModel = new _ETTRequestModel2.default();
                    requetModel._path = _ETTURLConfig2.default.SERVICE_NAME_SMS + _ETTURLConfig2.default.find_pwd_code;
                    requetModel._bodyData = 'phone=' + this.state.mobile;
                    requetModel._getInfo = requetModel.getAuthorizationRequesetData();

                    _ETTNetworkUtil2.default.post(requetModel).then(function (json) {
                        console.log(json);

                        var reslut = _ETTNetResponseHelper2.default.responseJson(json);

                        _this4.refs.loading._hiden();

                        if (reslut.code != 1) {
                            _this4.refs.toast.show(reslut.msg);
                        } else {
                            _this4.refs.toast.show(_ETTString2.default.code_send_successful);
                        }
                    }, function (json) {
                        _this4.refs.loading._hiden();

                        var result = _ETTNetResponseHelper2.default.requestFailJson(json);

                        _this4.refs.toast.show(result.msg);
                    });
                }
            }
        }, {
            key: "enterSetPwdCallback",
            value: function enterSetPwdCallback() {
                if (this.state.newpwd.length < 1) {
                    this.refs.toast.show(_ETTString2.default.pwd_null_toast);
                } else if (this.state.newpwd != this.state.oldpwd) {
                    this.refs.toast.show(_ETTString2.default.find_pwd_notsame);
                } else {
                    this.setpwdRequest();
                }
            }
        }, {
            key: "setpwdRequest",
            value: function setpwdRequest() {
                var _this5 = this;

                this.refs.loading._show(null);

                console.log("setpwdRequest");
                var formData = new FormData();
                formData.append("phone", this.state.mobile);
                formData.append("phoneCode", this.state.code);
                formData.append("password", this.state.newpwd);
                var requetModel = new _ETTRequestModel2.default();
                requetModel._path = _ETTURLConfig2.default.SERVICE_NAME_ACCOUNT + _ETTURLConfig2.default.find_pwd_enterset;
                requetModel._bodyData = formData;
                requetModel._getInfo = requetModel.getAuthorizationRequesetData();

                _ETTNetworkUtil2.default.post(requetModel).then(function (json) {
                    console.log("setpwdRequest" + json);

                    var reslut = _ETTNetResponseHelper2.default.responseJsonForResult(json);

                    _this5.refs.loading._hiden();

                    if (reslut.code != 1) {
                        _this5.refs.toast.show(reslut.msg);
                    } else {
                        _this5.refs.toast.show(_ETTString2.default.modify_successful);
                    }
                }, function (json) {
                    _this5.refs.loading._hiden();

                    console.log('请求错误' + json);
                    alert("请求错误" + json);

                    var result = _ETTNetResponseHelper2.default.requestFailJson(json);

                    _this5.refs.toast.show(result.msg);
                });
            }
        }, {
            key: "resetState",
            value: function resetState() {}
        }]);
        return ETTForgetPwdScene;
    }(_react.Component);

    exports.default = ETTForgetPwdScene;
},548,[114,12,371,449,460,342,343,450,347,512,461,362,360,369,361,517],"app/scene/ETTForgetPwdScene.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = undefined;
    var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/app/scene/ETTRegisteredScene.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    var _reactNavigation = _require(_dependencyMap[2], "react-navigation");

    var _reactNativeEasyToast = _require(_dependencyMap[3], "react-native-easy-toast");

    var _reactNativeEasyToast2 = babelHelpers.interopRequireDefault(_reactNativeEasyToast);

    var _ETTDevice = _require(_dependencyMap[4], "../res/values/ETTDevice");

    var _ETTDevice2 = babelHelpers.interopRequireDefault(_ETTDevice);

    var _ETTConfig = _require(_dependencyMap[5], "../res/values/ETTConfig");

    var _ETTRegisteredStyle = _require(_dependencyMap[6], "../res/styles/ETTRegisteredStyle");

    var _ETTRegisteredStyle2 = babelHelpers.interopRequireDefault(_ETTRegisteredStyle);

    var _ETTStatusBar = _require(_dependencyMap[7], "../common/ETTStatusBar");

    var _ETTEditView = _require(_dependencyMap[8], "../common/ETTEditView");

    var _ETTString = _require(_dependencyMap[9], "../res/values/ETTString");

    var _ETTString2 = babelHelpers.interopRequireDefault(_ETTString);

    var _ETTCheckboxView = _require(_dependencyMap[10], "../common/ETTCheckboxView");

    var _ETTCheckboxView2 = babelHelpers.interopRequireDefault(_ETTCheckboxView);

    var _ETTLoadingAnimation = _require(_dependencyMap[11], "../common/ETTLoadingAnimation");

    var _ETTLoadingAnimation2 = babelHelpers.interopRequireDefault(_ETTLoadingAnimation);

    var _ETTNetworkUtil = _require(_dependencyMap[12], "../utils/ETTNetworkUtil");

    var _ETTNetworkUtil2 = babelHelpers.interopRequireDefault(_ETTNetworkUtil);

    var _ETTURLConfig = _require(_dependencyMap[13], "../res/values/ETTURLConfig");

    var _ETTURLConfig2 = babelHelpers.interopRequireDefault(_ETTURLConfig);

    var _ETTNetResponseHelper = _require(_dependencyMap[14], "../utils/ETTNetResponseHelper");

    var _ETTNetResponseHelper2 = babelHelpers.interopRequireDefault(_ETTNetResponseHelper);

    var _ETTRequestModel = _require(_dependencyMap[15], "../mobx/ETTRequestModel");

    var _ETTRequestModel2 = babelHelpers.interopRequireDefault(_ETTRequestModel);

    var ETTRegisteredScene = function (_Component) {
        babelHelpers.inherits(ETTRegisteredScene, _Component);

        function ETTRegisteredScene(props) {
            babelHelpers.classCallCheck(this, ETTRegisteredScene);

            var _this = babelHelpers.possibleConstructorReturn(this, (ETTRegisteredScene.__proto__ || Object.getPrototypeOf(ETTRegisteredScene)).call(this, props));

            _this.state = {
                isChecked: _this.props.isChecked || false,
                amount: '',
                password: '',
                code: ''
            };
            return _this;
        }

        babelHelpers.createClass(ETTRegisteredScene, [{
            key: "render",
            value: function render() {
                var _this2 = this;

                return _react2.default.createElement(
                    _reactNative.View,
                    {
                        style: _ETTRegisteredStyle2.default.reg_Mian,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 54
                        }
                    },
                    _react2.default.createElement(_ETTStatusBar.ETTDarkStatus, {
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 55
                        }
                    }),
                    _react2.default.createElement(
                        _reactNative.View,
                        {
                            style: _ETTRegisteredStyle2.default.reg_body,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 56
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.View,
                            {
                                style: _ETTRegisteredStyle2.default.reg_body_top,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 58
                                }
                            },
                            _react2.default.createElement(
                                _reactNative.TouchableOpacity,
                                {
                                    style: _ETTRegisteredStyle2.default.reg_close_btn,
                                    onPress: function onPress() {
                                        return _this2.closeScene();
                                    },
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 59
                                    }
                                },
                                _react2.default.createElement(_reactNative.Image, {
                                    style: _ETTRegisteredStyle2.default.reg_close_image,
                                    source: _require(_dependencyMap[16], '../res/images/tab_c9_close.png'),
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 60
                                    }
                                })
                            ),
                            _react2.default.createElement(
                                _reactNative.Text,
                                {
                                    style: _ETTRegisteredStyle2.default.reg_title,
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 64
                                    }
                                },
                                "\u6CE8\u518C"
                            ),
                            _react2.default.createElement(_ETTEditView.ETTEditPhoneView, {
                                placeholder: _ETTString2.default.log_amount_placeholder,
                                maxLength: _ETTConfig.AMOUNT_MAXLEGTH,
                                changeHandle: function changeHandle(text) {
                                    return _this2.amountViewHandle(text);
                                },
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 67
                                }
                            }),
                            _react2.default.createElement(_reactNative.Text, {
                                style: _ETTRegisteredStyle2.default.reg_line,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 70
                                }
                            }),
                            _react2.default.createElement(_ETTEditView.ETTEditCodeView, {
                                ref: "editCode",
                                placeholder: _ETTString2.default.forgetamount_pwd_placeholder,
                                maxLength: _ETTConfig.REG_CODEMAXLENGTH,
                                changeHandle: function changeHandle(text) {
                                    return _this2.codeChangehandle(text);
                                },
                                getCodeHandle: function getCodeHandle() {
                                    return _this2.getCodelHandel();
                                },
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 71
                                }
                            }),
                            _react2.default.createElement(_reactNative.Text, {
                                style: _ETTRegisteredStyle2.default.reg_line,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 76
                                }
                            }),
                            _react2.default.createElement(_ETTEditView.ETTEditPwdView, {
                                placeholder: _ETTString2.default.reg_pwd_placeholder,
                                maxLength: _ETTConfig.REG_PWDMAXLENGTH,
                                changeHandle: function changeHandle(text) {
                                    return _this2.pwdViewHandle(text);
                                },
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 77
                                }
                            }),
                            _react2.default.createElement(_reactNative.Text, {
                                style: _ETTRegisteredStyle2.default.reg_line,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 80
                                }
                            }),
                            _react2.default.createElement(
                                _reactNative.View,
                                {
                                    style: _ETTRegisteredStyle2.default.reg_readagreed,
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 81
                                    }
                                },
                                _react2.default.createElement(_ETTCheckboxView2.default, {
                                    info: {
                                        'styles': _ETTRegisteredStyle2.default.ETTCheckbox,
                                        'checkedImage': _ETTString2.default.reg_readagreed_checkedImage,
                                        'checkImage': _ETTString2.default.reg_readagreed_checkImage,
                                        'isChecked': this.state.isChecked
                                    },
                                    checkSelected: function checkSelected(isSelected) {
                                        return _this2.readagreedSelected(isSelected);
                                    },
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 82
                                    }
                                }),
                                _react2.default.createElement(
                                    _reactNative.Text,
                                    {
                                        style: _ETTRegisteredStyle2.default.reg_readagreed_title,
                                        __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 89
                                        }
                                    },
                                    _ETTString2.default.reg_readagreed_title
                                ),
                                _react2.default.createElement(
                                    _reactNative.TouchableOpacity,
                                    {
                                        style: _ETTRegisteredStyle2.default.reg_readagreed_btn,
                                        onPress: function onPress() {
                                            return _this2.toReadagreed();
                                        },
                                        __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 92
                                        }
                                    },
                                    _react2.default.createElement(
                                        _reactNative.Text,
                                        {
                                            style: _ETTRegisteredStyle2.default.reg_readagreed_btn_text,
                                            __source: {
                                                fileName: _jsxFileName,
                                                lineNumber: 93
                                            }
                                        },
                                        _ETTString2.default.reg_readagreed_btn_text
                                    )
                                )
                            ),
                            _react2.default.createElement(
                                _reactNative.TouchableOpacity,
                                {
                                    style: _ETTRegisteredStyle2.default.reg_btn,
                                    onPress: function onPress() {
                                        return _this2.toRegistered();
                                    },
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 100
                                    }
                                },
                                _react2.default.createElement(
                                    _reactNative.Text,
                                    {
                                        style: _ETTRegisteredStyle2.default.reg_btn_text,
                                        __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 101
                                        }
                                    },
                                    "\u6CE8\u518C"
                                )
                            )
                        ),
                        _react2.default.createElement(
                            _reactNative.View,
                            {
                                style: _ETTRegisteredStyle2.default.reg_body_bottom,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 108
                                }
                            },
                            _react2.default.createElement(
                                _reactNative.TouchableOpacity,
                                {
                                    style: _ETTRegisteredStyle2.default.reg_bottom,
                                    onPress: function onPress() {
                                        return _this2.closeScene();
                                    },
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 109
                                    }
                                },
                                _react2.default.createElement(
                                    _reactNative.Text,
                                    {
                                        style: _ETTRegisteredStyle2.default.reg_bottom_left,
                                        __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 110
                                        }
                                    },
                                    "\u5DF2\u6709\u8D26\u53F7?"
                                ),
                                _react2.default.createElement(
                                    _reactNative.Text,
                                    {
                                        style: _ETTRegisteredStyle2.default.reg_bottom_right,
                                        __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 113
                                        }
                                    },
                                    "\u7ACB\u5373\u767B\u5F55"
                                )
                            )
                        )
                    ),
                    _react2.default.createElement(_reactNativeEasyToast2.default, {
                        ref: "toast",
                        style: _ETTRegisteredStyle2.default.reg_toast,
                        opacity: 0.8,
                        position: "top",
                        positionValue: 200,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 119
                        }
                    }),
                    _react2.default.createElement(_ETTLoadingAnimation2.default, {
                        ref: "loading",
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 126
                        }
                    })
                );
            }
        }, {
            key: "toReadagreed",
            value: function toReadagreed() {
                alert('去读');
            }
        }, {
            key: "readagreedSelected",
            value: function readagreedSelected(isSelected) {
                this.setState({
                    isChecked: isSelected
                });
            }
        }, {
            key: "toRegistered",
            value: function toRegistered() {
                var _this3 = this;

                if (this.state.amount.length < 1) {
                    this.refs.toast.show(_ETTString2.default.iphone_null_toast);
                } else if (this.state.amount.length < _ETTConfig.AMOUNT_MAXLEGTH) {
                    this.refs.toast.show(_ETTString2.default.iphone_len_toast);
                } else if (this.state.code.length < 1) {
                    this.refs.toast.show(_ETTString2.default.code_null_toast);
                } else if (this.state.password.length < 1) {
                    this.refs.toast.show(_ETTString2.default.pwd_null_toast);
                } else if (this.state.isChecked == false) {
                    this.refs.toast.show(_ETTString2.default.read_conditions);
                } else {
                    this.refs.loading._show(null);

                    var formData = new FormData();
                    formData.append("phone", this.state.amount);
                    formData.append("phoneCode", this.state.code);
                    formData.append("password", this.state.password);
                    var requetModel = new _ETTRequestModel2.default();
                    requetModel._method = 'POST';
                    requetModel._path = _ETTURLConfig2.default.SERVICE_NAME_ACCOUNT + _ETTURLConfig2.default.amount;
                    requetModel._bodyData = formData;
                    requetModel._getInfo = requetModel.getAuthorizationRequesetData();

                    _ETTNetworkUtil2.default.post(requetModel).then(function (json) {
                        console.log(json);

                        var reslut = _ETTNetResponseHelper2.default.responseJson(json);

                        _this3.refs.loading._hiden();

                        if (reslut.code != 1) {
                            _this3.refs.toast.show(reslut.msg);
                        } else {
                            _this3.refs.toast.show(_ETTString2.default.reg_successful);

                            _ETTConfig.DataManager.regSuccessful(json.data);

                            setTimeout(function () {
                                return _this3.closeScene();
                            }, 1000);
                            var params = _this3.props.navigation.state.params;
                            var callback = params.loginSuccessBack;

                            if (callback) {
                                callback();
                            }
                        }
                    }, function (json) {
                        _this3.refs.loading._hiden();

                        console.log('请求错误' + err);

                        var result = _ETTNetResponseHelper2.default.requestFailJson(json);

                        _this3.refs.toast.show(result.msg);
                    });
                }
            }
        }, {
            key: "getCodelHandel",
            value: function getCodelHandel() {
                var _this4 = this;

                if (this.state.amount.length < 1) {
                    this.refs.toast.show(_ETTString2.default.iphone_null_toast);
                } else if (this.state.amount.length < _ETTConfig.AMOUNT_MAXLEGTH) {
                    this.refs.toast.show(_ETTString2.default.iphone_len_toast);
                } else {
                    this.refs.loading._show(null);

                    this.refs.editCode._countdownAction();

                    var arr = _ETTURLConfig2.default.base_header;
                    var requetModel = new _ETTRequestModel2.default();
                    requetModel._method = 'POST';
                    requetModel._path = _ETTURLConfig2.default.SERVICE_NAME_SMS + _ETTURLConfig2.default.registerCode;
                    requetModel._bodyData = 'phone=' + this.state.amount;
                    requetModel._getInfo = requetModel.getAuthorizationRequesetData();

                    _ETTNetworkUtil2.default.post(requetModel).then(function (json) {
                        console.log(json);

                        _this4.refs.loading._hiden();

                        var reslut = _ETTNetResponseHelper2.default.responseJson(json);

                        if (reslut.code != 1) {
                            _this4.refs.toast.show(reslut.msg);
                        } else {
                            _this4.refs.toast.show(_ETTString2.default.code_send_successful);
                        }
                    }, function (json) {
                        _this4.refs.loading._hiden();

                        var result = _ETTNetResponseHelper2.default.requestFailJson(json);

                        _this4.refs.toast.show(result.msg);
                    });
                }
            }
        }, {
            key: "codeChangehandle",
            value: function codeChangehandle(text) {
                this.setState({
                    code: text
                });
            }
        }, {
            key: "amountViewHandle",
            value: function amountViewHandle(text) {
                this.setState({
                    amount: text
                });
            }
        }, {
            key: "pwdViewHandle",
            value: function pwdViewHandle(text) {
                this.setState({
                    password: text
                });
            }
        }, {
            key: "closeScene",
            value: function closeScene() {
                this.props.navigation.pop();
                var params = this.props.navigation.state.params;
                var callback = params.stackCloseHandle;

                if (callback) {
                    callback();
                }
            }
        }]);
        return ETTRegisteredScene;
    }(_react.Component);

    exports.default = ETTRegisteredScene;
},549,[114,12,371,449,342,343,550,450,512,347,551,461,362,360,369,361,513],"app/scene/ETTRegisteredScene.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    var _react = _require(_dependencyMap[0], "react");

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    var _ETTDevice = _require(_dependencyMap[2], "../values/ETTDevice");

    var _ETTDevice2 = babelHelpers.interopRequireDefault(_ETTDevice);

    var _ETTColor = _require(_dependencyMap[3], "../../res/values/ETTColor");

    var _ETTColor2 = babelHelpers.interopRequireDefault(_ETTColor);

    var _ETTInlineFuction = _require(_dependencyMap[4], "../values/ETTInlineFuction");

    var ETTRegStyles = _reactNative.StyleSheet.create({
        reg_Mian: {
            flex: 1,
            backgroundColor: _ETTColor2.default.white,
            width: _ETTDevice2.default.ScreenWidth,
            height: _ETTDevice2.default.ScreenHeight
        },
        reg_body: {
            flex: 2,
            justifyContent: 'space-between',
            backgroundColor: _ETTColor2.default.white
        },
        reg_body_top: {},
        reg_close_btn: {
            marginLeft: (0, _ETTInlineFuction.scaleSize)(33),
            marginTop: (0, _ETTInlineFuction.scaleSize)(80),
            width: (0, _ETTInlineFuction.scaleSize)(24),
            height: (0, _ETTInlineFuction.scaleSize)(24)
        },
        reg_close_image: {
            width: (0, _ETTInlineFuction.scaleSize)(24),
            height: (0, _ETTInlineFuction.scaleSize)(24)
        },
        reg_title: {
            fontSize: (0, _ETTInlineFuction.scaleSize)(40),
            color: _ETTColor2.default.f1,
            textAlign: 'center',
            marginTop: (0, _ETTInlineFuction.scaleSize)(20),
            marginBottom: (0, _ETTInlineFuction.scaleSize)(46)
        },
        reg_back: {
            marginLeft: (0, _ETTInlineFuction.scaleSize)(33)
        },
        reg_code_title: {
            fontSize: (0, _ETTInlineFuction.scaleSize)(40),
            color: _ETTColor2.default.f1,
            textAlign: 'center',
            width: _ETTDevice2.default.ScreenWidth - (0, _ETTInlineFuction.scaleSize)(118)
        },
        reg_body_bottom: {
            marginBottom: 0
        },
        reg_input_top: {
            justifyContent: 'space-between',
            marginTop: (0, _ETTInlineFuction.scaleSize)(50),
            marginLeft: (0, _ETTInlineFuction.scaleSize)(75),
            marginRight: (0, _ETTInlineFuction.scaleSize)(75),
            flexDirection: 'row',
            alignItems: 'center'
        },
        reg_input_Bottom: {
            justifyContent: 'space-between',
            marginTop: (0, _ETTInlineFuction.scaleSize)(76),
            marginLeft: (0, _ETTInlineFuction.scaleSize)(75),
            marginRight: (0, _ETTInlineFuction.scaleSize)(75),
            flexDirection: 'row',
            alignItems: 'center'
        },
        reg_textInput: {
            fontSize: (0, _ETTInlineFuction.scaleSize)(26),
            width: _ETTDevice2.default.ScreenWidth - (0, _ETTInlineFuction.scaleSize)(200),
            color: _ETTColor2.default.f1
        },
        reg_code_textInput: {
            fontSize: (0, _ETTInlineFuction.scaleSize)(26),
            width: (_ETTDevice2.default.ScreenWidth - (0, _ETTInlineFuction.scaleSize)(150)) / 2,
            color: _ETTColor2.default.f1
        },
        reg_input_phone_image: {
            width: (0, _ETTInlineFuction.scaleSize)(20),
            height: (0, _ETTInlineFuction.scaleSize)(20)
        },
        reg_input_pwd_image: {
            width: (0, _ETTInlineFuction.scaleSize)(28),
            height: (0, _ETTInlineFuction.scaleSize)(19)
        },
        reg_line: {
            marginLeft: (0, _ETTInlineFuction.scaleSize)(75),
            marginRight: (0, _ETTInlineFuction.scaleSize)(75),
            marginTop: (0, _ETTInlineFuction.scaleSize)(33),
            height: (0, _ETTInlineFuction.scaleSize)(1),
            backgroundColor: _ETTColor2.default.l1
        },
        reg_btn: {
            marginLeft: (0, _ETTInlineFuction.scaleSize)(73),
            marginRight: (0, _ETTInlineFuction.scaleSize)(73),
            marginTop: (0, _ETTInlineFuction.scaleSize)(54),
            height: (0, _ETTInlineFuction.scaleSize)(85),
            backgroundColor: _ETTColor2.default.black_t60,
            justifyContent: 'center',
            borderRadius: (0, _ETTInlineFuction.scaleSize)(8)
        },
        reg_btn_text: {
            textAlign: 'center',
            color: _ETTColor2.default.white,
            fontSize: (0, _ETTInlineFuction.scaleSize)(26)
        },
        reg_body_top_bottom: {
            marginLeft: (0, _ETTInlineFuction.scaleSize)(75),
            marginRight: (0, _ETTInlineFuction.scaleSize)(75),
            marginTop: (0, _ETTInlineFuction.scaleSize)(38),
            justifyContent: 'flex-end',
            flexDirection: 'row',
            alignItems: 'center'
        },
        reg_code_btn: {
            justifyContent: 'center',
            marginRight: (0, _ETTInlineFuction.scaleSize)(38)
        },
        reg_code_btn_text: {
            textAlign: 'center',
            fontSize: (0, _ETTInlineFuction.scaleSize)(24),
            color: _ETTColor2.default.f2
        },
        reg_registered_btn_text: {
            textAlign: 'center',
            fontSize: (0, _ETTInlineFuction.scaleSize)(28)
        },
        reg_other_text: {
            marginLeft: (0, _ETTInlineFuction.scaleSize)(28),
            marginRight: (0, _ETTInlineFuction.scaleSize)(28),
            marginTop: (0, _ETTInlineFuction.scaleSize)(50),
            fontSize: (0, _ETTInlineFuction.scaleSize)(28),
            textAlign: 'center',
            color: _ETTColor2.default.f1
        },
        reg_readagreed: {
            justifyContent: 'flex-start',
            flexDirection: 'row',
            alignItems: 'center',
            marginTop: (0, _ETTInlineFuction.scaleSize)(30),
            marginLeft: (0, _ETTInlineFuction.scaleSize)(75),
            marginRight: (0, _ETTInlineFuction.scaleSize)(75)
        },
        reg_readagreed_checkbox: {
            width: (0, _ETTInlineFuction.scaleSize)(24),
            height: (0, _ETTInlineFuction.scaleSize)(24)
        },
        reg_readagreed_title: {
            color: _ETTColor2.default.f2,
            fontSize: (0, _ETTInlineFuction.scaleSize)(20),
            marginLeft: (0, _ETTInlineFuction.scaleSize)(10)
        },
        reg_readagreed_btn: {},
        reg_readagreed_btn_text: {
            color: _ETTColor2.default.f4,
            fontSize: (0, _ETTInlineFuction.scaleSize)(20),
            marginLeft: (0, _ETTInlineFuction.scaleSize)(10)
        },
        reg_bottom: {
            justifyContent: 'center',
            flexDirection: 'row',
            alignItems: 'center',
            marginBottom: (0, _ETTInlineFuction.scaleSize)(45)
        },
        reg_bottom_left: {
            color: _ETTColor2.default.f1,
            fontSize: (0, _ETTInlineFuction.scaleSize)(24)
        },
        reg_bottom_right: {
            color: _ETTColor2.default.f2,
            fontSize: (0, _ETTInlineFuction.scaleSize)(24),
            marginLeft: (0, _ETTInlineFuction.scaleSize)(5)
        },
        reg_otherlog: {
            justifyContent: 'center',
            flexDirection: 'row',
            alignItems: 'center',
            marginTop: 30,
            marginBottom: (0, _ETTInlineFuction.scaleSize)(82)
        },
        reg_vercode_text: {
            color: _ETTColor2.default.f4,
            fontSize: (0, _ETTInlineFuction.scaleSize)(26)
        },
        reg_toast: {
            backgroundColor: _ETTColor2.default.black_t60
        }
    });

    module.exports = ETTRegStyles;
},550,[114,12,342,453,452],"app/res/styles/ETTRegisteredStyle.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = undefined;
    var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/app/common/ETTCheckboxView.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    var ETTCheckBox = function (_PureComponent) {
        babelHelpers.inherits(ETTCheckBox, _PureComponent);

        function ETTCheckBox(props) {
            babelHelpers.classCallCheck(this, ETTCheckBox);

            var _this = babelHelpers.possibleConstructorReturn(this, (ETTCheckBox.__proto__ || Object.getPrototypeOf(ETTCheckBox)).call(this, props));

            _this.state = {
                isChecked: _this.props.info.isChecked || false
            };
            return _this;
        }

        babelHelpers.createClass(ETTCheckBox, [{
            key: "getImage",
            value: function getImage() {
                if (this.state.isChecked) {
                    return _react2.default.createElement(_reactNative.Image, {
                        style: this.props.info.styles,
                        source: _require(_dependencyMap[2], '../res/images/select_c8_pressed.png'),
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 23
                        }
                    });
                }

                return _react2.default.createElement(_reactNative.Image, {
                    source: _require(_dependencyMap[3], '../res/images/select_c10_default.png'),
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 27
                    }
                });
            }
        }, {
            key: "checkClick",
            value: function checkClick() {
                this.setState({
                    isChecked: !this.state.isChecked
                });
                var callback = this.props.checkSelected;

                if (callback) {
                    callback(!this.state.isChecked);
                }
            }
        }, {
            key: "render",
            value: function render() {
                var _this2 = this;

                return _react2.default.createElement(
                    _reactNative.TouchableHighlight,
                    {
                        underlayColor: 'transparent',
                        onPress: function onPress() {
                            return _this2.checkClick();
                        },
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 51
                        }
                    },
                    this.getImage()
                );
            }
        }]);
        return ETTCheckBox;
    }(_react.PureComponent);

    exports.default = ETTCheckBox;
},551,[114,12,552,553],"app/common/ETTCheckboxView.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = _require(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/app/res/images",
    "width": 12,
    "height": 12,
    "scales": [2, 3],
    "hash": "84e7a58d75ee3b01da7c23c165484699",
    "name": "select_c8_pressed",
    "type": "png"
  });
},552,[175],"app/res/images/select_c8_pressed@2x.png");
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = _require(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/app/res/images",
    "width": 12,
    "height": 12,
    "scales": [2, 3],
    "hash": "7b44918ae13d8c193bc3a871594fb517",
    "name": "select_c10_default",
    "type": "png"
  });
},553,[175],"app/res/images/select_c10_default@2x.png");
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = undefined;
    var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/app/scene/ETTChangePwdScene.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    var _reactNavigation = _require(_dependencyMap[2], "react-navigation");

    var _reactNativeEasyToast = _require(_dependencyMap[3], "react-native-easy-toast");

    var _reactNativeEasyToast2 = babelHelpers.interopRequireDefault(_reactNativeEasyToast);

    var _ETTLogStyles = _require(_dependencyMap[4], "../res/styles/ETTLogStyles");

    var _ETTLogStyles2 = babelHelpers.interopRequireDefault(_ETTLogStyles);

    var _ETTChangePwdStyles = _require(_dependencyMap[5], "../res/styles/ETTChangePwdStyles");

    var _ETTChangePwdStyles2 = babelHelpers.interopRequireDefault(_ETTChangePwdStyles);

    var _ETTDevice = _require(_dependencyMap[6], "../res/values/ETTDevice");

    var _ETTDevice2 = babelHelpers.interopRequireDefault(_ETTDevice);

    var _ETTConfig = _require(_dependencyMap[7], "../res/values/ETTConfig");

    var _ETTStatusBar = _require(_dependencyMap[8], "../common/ETTStatusBar");

    var _ETTString = _require(_dependencyMap[9], "../res/values/ETTString");

    var _ETTString2 = babelHelpers.interopRequireDefault(_ETTString);

    var _ETTEditView = _require(_dependencyMap[10], "../common/ETTEditView");

    var _ETTEnum = _require(_dependencyMap[11], "../res/values/ETTEnum");

    var _ETTLoadingAnimation = _require(_dependencyMap[12], "../common/ETTLoadingAnimation");

    var _ETTLoadingAnimation2 = babelHelpers.interopRequireDefault(_ETTLoadingAnimation);

    var _ETTNetworkUtil = _require(_dependencyMap[13], "../utils/ETTNetworkUtil");

    var _ETTNetworkUtil2 = babelHelpers.interopRequireDefault(_ETTNetworkUtil);

    var _ETTURLConfig = _require(_dependencyMap[14], "../res/values/ETTURLConfig");

    var _ETTURLConfig2 = babelHelpers.interopRequireDefault(_ETTURLConfig);

    var _ETTNetResponseHelper = _require(_dependencyMap[15], "../utils/ETTNetResponseHelper");

    var _ETTNetResponseHelper2 = babelHelpers.interopRequireDefault(_ETTNetResponseHelper);

    var _ETTRequestModel = _require(_dependencyMap[16], "../mobx/ETTRequestModel");

    var _ETTRequestModel2 = babelHelpers.interopRequireDefault(_ETTRequestModel);

    var ETTChangePwdScene = function (_Component) {
        babelHelpers.inherits(ETTChangePwdScene, _Component);

        function ETTChangePwdScene(props) {
            babelHelpers.classCallCheck(this, ETTChangePwdScene);

            var _this = babelHelpers.possibleConstructorReturn(this, (ETTChangePwdScene.__proto__ || Object.getPrototypeOf(ETTChangePwdScene)).call(this, props));

            _this.state = {
                changePwdType: _ETTEnum.ETTChangePwdType.changType_oldpwd,
                oldpwd: '',
                newpwd: '',
                newpwdenter: '',
                mobile: '',
                code: ''
            };
            return _this;
        }

        babelHelpers.createClass(ETTChangePwdScene, [{
            key: "changepwdforoldpwd",
            value: function changepwdforoldpwd() {
                var _this2 = this;

                return _react2.default.createElement(
                    _reactNative.View,
                    {
                        style: _ETTLogStyles2.default.log_Mian,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 58
                        }
                    },
                    _react2.default.createElement(_ETTStatusBar.ETTDarkStatus, {
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 59
                        }
                    }),
                    _react2.default.createElement(
                        _reactNative.View,
                        {
                            style: _ETTLogStyles2.default.log_forgetpwd_header,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 60
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.TouchableOpacity,
                            {
                                onPress: function onPress() {
                                    return _this2.goback();
                                },
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 61
                                }
                            },
                            _react2.default.createElement(_reactNative.Image, {
                                style: _ETTLogStyles2.default.log_back,
                                source: _require(_dependencyMap[17], '../res/images/km_back.png'),
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 62
                                }
                            })
                        ),
                        _react2.default.createElement(
                            _reactNative.Text,
                            {
                                style: _ETTLogStyles2.default.log_code_title,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 66
                                }
                            },
                            "\u4FEE\u6539\u5BC6\u7801"
                        )
                    ),
                    _react2.default.createElement(_ETTEditView.ETTEditOldPwdView, {
                        placeholder: _ETTString2.default.changepwd_old_placeholder,
                        maxLength: _ETTConfig.REG_PWDMAXLENGTH,
                        changeHandle: function changeHandle(text) {
                            return _this2.oldpwdChangeHandle(text);
                        },
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 70
                        }
                    }),
                    _react2.default.createElement(_reactNative.Text, {
                        style: _ETTLogStyles2.default.log_line,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 73
                        }
                    }),
                    _react2.default.createElement(
                        _reactNative.TouchableOpacity,
                        {
                            style: _ETTLogStyles2.default.log_forgetpwd_next_btn,
                            onPress: function onPress() {
                                return _this2.oldpwdNextCallback();
                            },
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 74
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.Text,
                            {
                                style: _ETTLogStyles2.default.log_btn_text,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 75
                                }
                            },
                            "\u4E0B\u4E00\u6B65"
                        )
                    ),
                    _react2.default.createElement(
                        _reactNative.View,
                        {
                            style: _ETTChangePwdStyles2.default.down_nav,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 79
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.TouchableOpacity,
                            {
                                onPress: function onPress() {
                                    return _this2.changepwdToSetPwdForCodeCallback();
                                },
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 80
                                }
                            },
                            _react2.default.createElement(
                                _reactNative.Text,
                                {
                                    style: _ETTChangePwdStyles2.default.down_nav_text,
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 81
                                    }
                                },
                                _ETTString2.default.changepwd_forcode_text
                            )
                        ),
                        _react2.default.createElement(_reactNative.Image, {
                            style: _ETTChangePwdStyles2.default.down_nav_image,
                            source: _require(_dependencyMap[18], '../res/images/tab_c5.png'),
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 85
                            }
                        })
                    ),
                    _react2.default.createElement(_reactNativeEasyToast2.default, {
                        ref: "toast",
                        style: _ETTLogStyles2.default.reg_toast,
                        opacity: 0.8,
                        position: "top",
                        positionValue: 200,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 88
                        }
                    }),
                    _react2.default.createElement(_ETTLoadingAnimation2.default, {
                        ref: "loading",
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 95
                        }
                    })
                );
            }
        }, {
            key: "changepwdforCode",
            value: function changepwdforCode() {
                var _this3 = this;

                return _react2.default.createElement(
                    _reactNative.View,
                    {
                        style: _ETTLogStyles2.default.log_Mian,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 104
                        }
                    },
                    _react2.default.createElement(_ETTStatusBar.ETTDarkStatus, {
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 105
                        }
                    }),
                    _react2.default.createElement(
                        _reactNative.View,
                        {
                            style: _ETTLogStyles2.default.log_forgetpwd_header,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 106
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.TouchableOpacity,
                            {
                                onPress: function onPress() {
                                    return _this3.goback();
                                },
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 107
                                }
                            },
                            _react2.default.createElement(_reactNative.Image, {
                                style: _ETTLogStyles2.default.log_back,
                                source: _require(_dependencyMap[17], '../res/images/km_back.png'),
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 108
                                }
                            })
                        ),
                        _react2.default.createElement(
                            _reactNative.Text,
                            {
                                style: _ETTLogStyles2.default.log_code_title,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 112
                                }
                            },
                            "\u4FEE\u6539\u5BC6\u7801"
                        )
                    ),
                    _react2.default.createElement(_ETTEditView.ETTEditPhoneView, {
                        placeholder: _ETTString2.default.log_amount_placeholder,
                        maxLength: _ETTConfig.AMOUNT_MAXLEGTH,
                        changeHandle: function changeHandle(text) {
                            return _this3.iphoneChangeHandle(text);
                        },
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 116
                        }
                    }),
                    _react2.default.createElement(_reactNative.Text, {
                        style: _ETTLogStyles2.default.reg_line,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 119
                        }
                    }),
                    _react2.default.createElement(_ETTEditView.ETTEditCodeView, {
                        ref: "editCode",
                        placeholder: _ETTString2.default.forgetamount_pwd_placeholder,
                        maxLength: _ETTConfig.REG_CODEMAXLENGTH,
                        changeHandle: function changeHandle(text) {
                            return _this3.codeChangeHandle(text);
                        },
                        getCodeHandle: function getCodeHandle() {
                            return _this3.getCodelHandel();
                        },
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 120
                        }
                    }),
                    _react2.default.createElement(_reactNative.Text, {
                        style: _ETTLogStyles2.default.reg_line,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 126
                        }
                    }),
                    _react2.default.createElement(
                        _reactNative.TouchableOpacity,
                        {
                            style: _ETTLogStyles2.default.log_forgetpwd_next_btn,
                            onPress: function onPress() {
                                return _this3.codeNextCallback();
                            },
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 128
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.Text,
                            {
                                style: _ETTLogStyles2.default.log_btn_text,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 129
                                }
                            },
                            "\u4E0B\u4E00\u6B65"
                        )
                    ),
                    _react2.default.createElement(
                        _reactNative.View,
                        {
                            style: _ETTChangePwdStyles2.default.down_nav,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 133
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.TouchableOpacity,
                            {
                                onPress: function onPress() {
                                    return _this3.changepwdToSetPwdForOldPwdCallback();
                                },
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 134
                                }
                            },
                            _react2.default.createElement(
                                _reactNative.Text,
                                {
                                    style: _ETTChangePwdStyles2.default.down_nav_text,
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 135
                                    }
                                },
                                _ETTString2.default.changepwd_forOldpwd_text
                            )
                        ),
                        _react2.default.createElement(_reactNative.Image, {
                            style: _ETTChangePwdStyles2.default.down_nav_image,
                            source: _require(_dependencyMap[18], '../res/images/tab_c5.png'),
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 139
                            }
                        })
                    ),
                    _react2.default.createElement(_reactNativeEasyToast2.default, {
                        ref: "toast",
                        style: _ETTLogStyles2.default.reg_toast,
                        opacity: 0.8,
                        position: "top",
                        positionValue: 200,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 142
                        }
                    }),
                    _react2.default.createElement(_ETTLoadingAnimation2.default, {
                        ref: "loading",
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 149
                        }
                    })
                );
            }
        }, {
            key: "setPassword",
            value: function setPassword() {
                var _this4 = this;

                return _react2.default.createElement(
                    _reactNative.View,
                    {
                        style: _ETTLogStyles2.default.log_Mian,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 158
                        }
                    },
                    _react2.default.createElement(_ETTStatusBar.ETTDarkStatus, {
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 159
                        }
                    }),
                    _react2.default.createElement(
                        _reactNative.View,
                        {
                            style: _ETTLogStyles2.default.log_forgetpwd_header,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 160
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.TouchableOpacity,
                            {
                                onPress: function onPress() {
                                    return _this4.goback();
                                },
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 161
                                }
                            },
                            _react2.default.createElement(_reactNative.Image, {
                                style: _ETTLogStyles2.default.log_back,
                                source: _require(_dependencyMap[17], '../res/images/km_back.png'),
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 162
                                }
                            })
                        ),
                        _react2.default.createElement(
                            _reactNative.Text,
                            {
                                style: _ETTLogStyles2.default.log_code_title,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 166
                                }
                            },
                            "\u8BBE\u7F6E\u5BC6\u7801"
                        )
                    ),
                    _react2.default.createElement(_ETTEditView.ETTEditPwdView, {
                        placeholder: _ETTString2.default.forget_resetpwd_placeholder,
                        maxLength: _ETTConfig.REG_PWDMAXLENGTH,
                        changeHandle: function changeHandle(text) {
                            return _this4.newpwdChangeHandle(text);
                        },
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 170
                        }
                    }),
                    _react2.default.createElement(_reactNative.Text, {
                        style: _ETTLogStyles2.default.log_line,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 173
                        }
                    }),
                    _react2.default.createElement(_ETTEditView.ETTEditPwdView, {
                        placeholder: _ETTString2.default.forget_enterresetpwd_placeholder,
                        maxLength: _ETTConfig.REG_PWDMAXLENGTH,
                        changeHandle: function changeHandle(text) {
                            return _this4.newpwdEnterChangeHandle(text);
                        },
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 174
                        }
                    }),
                    _react2.default.createElement(_reactNative.Text, {
                        style: _ETTLogStyles2.default.log_line,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 177
                        }
                    }),
                    _react2.default.createElement(
                        _reactNative.TouchableOpacity,
                        {
                            style: _ETTLogStyles2.default.log_forgetpwd_next_btn,
                            onPress: function onPress() {
                                return _this4.setPwdCompleteCallback();
                            },
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 178
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.Text,
                            {
                                style: _ETTLogStyles2.default.log_btn_text,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 179
                                }
                            },
                            "\u5B8C\u6210"
                        )
                    ),
                    _react2.default.createElement(_reactNativeEasyToast2.default, {
                        ref: "toast",
                        style: _ETTLogStyles2.default.reg_toast,
                        opacity: 0.8,
                        position: "top",
                        positionValue: 200,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 183
                        }
                    }),
                    _react2.default.createElement(_ETTLoadingAnimation2.default, {
                        ref: "loading",
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 190
                        }
                    })
                );
            }
        }, {
            key: "oldpwdChangeHandle",
            value: function oldpwdChangeHandle(text) {
                this.setState({
                    oldpwd: text
                });
            }
        }, {
            key: "newpwdChangeHandle",
            value: function newpwdChangeHandle(text) {
                this.setState({
                    newpwd: text
                });
            }
        }, {
            key: "newpwdEnterChangeHandle",
            value: function newpwdEnterChangeHandle(text) {
                this.setState({
                    newpwdenter: text
                });
            }
        }, {
            key: "iphoneChangeHandle",
            value: function iphoneChangeHandle(text) {
                this.setState({
                    mobile: text
                });
            }
        }, {
            key: "codeChangeHandle",
            value: function codeChangeHandle(text) {
                this.setState({
                    code: text
                });
            }
        }, {
            key: "changepwdToSetPwdForCodeCallback",
            value: function changepwdToSetPwdForCodeCallback() {
                this.setState({
                    changePwdType: _ETTEnum.ETTChangePwdType.changeType_code
                });
            }
        }, {
            key: "changepwdToSetPwdForOldPwdCallback",
            value: function changepwdToSetPwdForOldPwdCallback() {
                this.setState({
                    changePwdType: _ETTEnum.ETTChangePwdType.changType_oldpwd
                });
            }
        }, {
            key: "oldpwdNextCallback",
            value: function oldpwdNextCallback() {
                console.log('oldpwdNextCallback');

                if (this.state.oldpwd.length < 1) {
                    this.refs.toast.show(_ETTString2.default.pwd_null_toast);
                } else {
                    this.setState({
                        changePwdType: _ETTEnum.ETTChangePwdType.changeType_pwd_setting_frompwd
                    });
                }
            }
        }, {
            key: "codeNextCallback",
            value: function codeNextCallback() {
                if (this.state.mobile.length < 1) {
                    this.refs.toast.show(_ETTString2.default.iphone_null_toast);
                } else if (this.state.mobile.length < _ETTConfig.AMOUNT_MAXLEGTH) {
                    this.refs.toast.show(_ETTString2.default.iphone_len_toast);
                } else if (this.state.code.length < 1) {
                    this.refs.toast.show(_ETTString2.default.code_null_toast);
                } else {
                    this.setState({
                        changePwdType: _ETTEnum.ETTChangePwdType.changeType_pwd_setting_fromcode
                    });
                }
            }
        }, {
            key: "render",
            value: function render() {
                switch (this.state.changePwdType) {
                    case _ETTEnum.ETTChangePwdType.changType_none:
                        {}

                    case _ETTEnum.ETTChangePwdType.changType_oldpwd:
                        {
                            return this.changepwdforoldpwd();
                        }
                        break;

                    case _ETTEnum.ETTChangePwdType.changeType_code:
                        {
                            return this.changepwdforCode();
                        }
                        break;

                    case _ETTEnum.ETTChangePwdType.changeType_pwd_setting_frompwd:
                        {}

                    case _ETTEnum.ETTChangePwdType.changeType_pwd_setting_fromcode:
                        {
                            return this.setPassword();
                        }
                        break;

                    default:
                        {
                            return this.changepwdforoldpwd();
                        }
                }
            }
        }, {
            key: "goback",
            value: function goback() {
                this.props.navigation.pop();
            }
        }, {
            key: "getCodelHandel",
            value: function getCodelHandel() {
                var _this5 = this;

                if (this.state.mobile.length < 1) {
                    this.refs.toast.show(_ETTString2.default.iphone_null_toast);
                } else if (this.state.mobile.length < _ETTConfig.AMOUNT_MAXLEGTH) {
                    this.refs.toast.show(_ETTString2.default.iphone_len_toast);
                } else {
                    this.refs.editCode._countdownAction();

                    this.refs.loading._show(null);

                    var formData = new FormData();
                    formData.append("phone", this.state.mobile);
                    var requetModel = new _ETTRequestModel2.default();
                    requetModel._path = _ETTURLConfig2.default.SERVICE_NAME_SMS + _ETTURLConfig2.default.pwd_reset_sendcode;
                    requetModel._bodyData = 'phone=' + this.state.mobile;
                    requetModel._method = 'POST', requetModel._getInfo = requetModel.getTokenRequesetData();

                    _ETTNetworkUtil2.default.requestWithToken(requetModel, function (json) {
                        console.log(json);

                        var reslut = _ETTNetResponseHelper2.default.responseJsonForResult(json);

                        if (reslut.code != 1) {
                            _this5.refs.toast.show(reslut.msg);
                        } else {
                            _this5.refs.toast.show(_ETTString2.default.code_send_successful);
                        }

                        _this5.refs.loading._hiden();
                    });
                }
            }
        }, {
            key: "setPwdCompleteCallback",
            value: function setPwdCompleteCallback() {
                if (this.state.changePwdType == _ETTEnum.ETTChangePwdType.changeType_pwd_setting_frompwd) {
                    this.resetPwdforOldpwdRequest();
                } else {
                    this.resetPwdforCodepwaRequest();
                }
            }
        }, {
            key: "resetPwdforOldpwdRequest",
            value: function resetPwdforOldpwdRequest() {
                var _this6 = this;

                if (this.state.newpwd.length < 1) {
                    this.refs.toast.show(_ETTString2.default.pwd_null_toast);
                } else if (this.state.newpwdenter.length < 1) {
                    this.refs.toast.show(_ETTString2.default.pwd_enter_toast);
                } else if (this.state.newpwd != this.state.newpwdenter) {
                    this.refs.toast.show(_ETTString2.default.find_pwd_notsame);
                } else {
                    console.log("enterSetPasswor");

                    this.refs.loading._show(null);

                    var formData = new FormData();
                    formData.append("oldPassword", this.state.oldpwd);
                    formData.append("password", this.state.newpwd);
                    var requetModel = new _ETTRequestModel2.default();
                    requetModel._method = 'PUT';
                    requetModel._path = _ETTURLConfig2.default.SERVICE_NAME_ACCOUNT + _ETTURLConfig2.default.pwd_reset_oldpwd;
                    requetModel._bodyData = 'oldPassword=' + this.state.oldpwd + '&password=' + this.state.newpwd;
                    requetModel._getInfo = requetModel.getTokenRequesetData();

                    _ETTNetworkUtil2.default.requestWithToken(requetModel, function (json) {
                        var reslut = _ETTNetResponseHelper2.default.responseJson(json);

                        _this6.refs.loading._hiden();

                        if (reslut.code != 1) {
                            _this6.refs.toast.show(reslut.msg);
                        } else {
                            _this6.refs.toast.show(reslut.msg);

                            _ETTConfig.DataManager.changePassword(_this6.state.newpwd);
                        }
                    });
                }
            }
        }, {
            key: "resetPwdforCodepwaRequest",
            value: function resetPwdforCodepwaRequest() {
                var _this7 = this;

                if (this.state.newpwd.length < 1) {
                    this.refs.toast.show(_ETTString2.default.pwd_null_toast);
                } else if (this.state.newpwdenter.length < 1) {
                    this.refs.toast.show(_ETTString2.default.pwd_enter_toast);
                } else if (this.state.newpwd != this.state.newpwdenter) {
                    this.refs.toast.show(_ETTString2.default.find_pwd_notsame);
                } else {
                    console.log("enterSetPasswor");
                    var requetModel = new _ETTRequestModel2.default();
                    requetModel._path = _ETTURLConfig2.default.SERVICE_NAME_ACCOUNT + _ETTURLConfig2.default.pwd_reset_code;
                    requetModel._bodyData = 'phone=' + this.state.mobile + '&phoneCode=' + this.state.code + '&password=' + this.state.newpwd;
                    requetModel._method = 'PUT', requetModel._getInfo = requetModel.getTokenRequesetData();

                    _ETTNetworkUtil2.default.requestWithToken(requetModel, function (json) {
                        console.log("enterlog" + json);

                        var reslut = _ETTNetResponseHelper2.default.responseJsonForResult(json);

                        _this7.refs.loading._hiden();

                        if (reslut.code != 1) {
                            _this7.refs.toast.show(reslut.msg);
                        } else {
                            _this7.refs.toast.show(reslut.msg);
                        }
                    });
                }
            }
        }, {
            key: "nextCallback",
            value: function nextCallback() {
                this.setState({
                    amountverification: true
                });
            }
        }, {
            key: "resetState",
            value: function resetState() {}
        }]);
        return ETTChangePwdScene;
    }(_react.Component);

    exports.default = ETTChangePwdScene;
},554,[114,12,371,449,460,555,342,343,450,347,512,348,461,362,360,369,361,517,521],"app/scene/ETTChangePwdScene.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    var _react = _require(_dependencyMap[0], "react");

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    var _ETTDevice = _require(_dependencyMap[2], "../values/ETTDevice");

    var _ETTDevice2 = babelHelpers.interopRequireDefault(_ETTDevice);

    var _ETTColor = _require(_dependencyMap[3], "../../res/values/ETTColor");

    var _ETTColor2 = babelHelpers.interopRequireDefault(_ETTColor);

    var _ETTInlineFuction = _require(_dependencyMap[4], "../values/ETTInlineFuction");

    var ETTChangePwdStyles = _reactNative.StyleSheet.create({
        down_nav: {
            justifyContent: 'flex-end',
            marginTop: (0, _ETTInlineFuction.scaleSize)(44),
            marginRight: (0, _ETTInlineFuction.scaleSize)(75),
            flexDirection: 'row',
            alignItems: 'center'
        },
        down_nav_text: {
            alignSelf: 'center',
            fontSize: (0, _ETTInlineFuction.scaleSize)(24),
            color: _ETTColor2.default.f2,
            textAlign: 'center'
        },
        down_nav_image: {
            marginLeft: (0, _ETTInlineFuction.scaleSize)(5)
        }
    });

    module.exports = ETTChangePwdStyles;
},555,[114,12,342,453,452],"app/res/styles/ETTChangePwdStyles.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = undefined;

    var _class,
        _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/app/scene/ETTBindThirdAmountScene.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    var _mobxReact = _require(_dependencyMap[2], "mobx-react");

    var _reactNativeWechat = _require(_dependencyMap[3], "react-native-wechat");

    var wechat = babelHelpers.interopRequireWildcard(_reactNativeWechat);

    var _reactNativeEasyToast = _require(_dependencyMap[4], "react-native-easy-toast");

    var _reactNativeEasyToast2 = babelHelpers.interopRequireDefault(_reactNativeEasyToast);

    var _ETTLoadingAnimation = _require(_dependencyMap[5], "../common/ETTLoadingAnimation");

    var _ETTLoadingAnimation2 = babelHelpers.interopRequireDefault(_ETTLoadingAnimation);

    var _reactNavigation = _require(_dependencyMap[6], "react-navigation");

    var _ETTBindThirdAmountStyles = _require(_dependencyMap[7], "../res/styles/ETTBindThirdAmountStyles");

    var _ETTBindThirdAmountStyles2 = babelHelpers.interopRequireDefault(_ETTBindThirdAmountStyles);

    var _ETTDevice = _require(_dependencyMap[8], "../res/values/ETTDevice");

    var _ETTDevice2 = babelHelpers.interopRequireDefault(_ETTDevice);

    var _ETTConfig = _require(_dependencyMap[9], "../res/values/ETTConfig");

    var _ETTStatusBar = _require(_dependencyMap[10], "../common/ETTStatusBar");

    var _ETTString = _require(_dependencyMap[11], "../res/values/ETTString");

    var _ETTString2 = babelHelpers.interopRequireDefault(_ETTString);

    var _ETTEditView = _require(_dependencyMap[12], "../common/ETTEditView");

    var _ETTBindAmountCell = _require(_dependencyMap[13], "../common/ETTBindAmountCell");

    var _ETTBindAmountCell2 = babelHelpers.interopRequireDefault(_ETTBindAmountCell);

    var _ETTModalView = _require(_dependencyMap[14], "../common/ETTModalView");

    var _ETTModalView2 = babelHelpers.interopRequireDefault(_ETTModalView);

    var _ETTAlertView = _require(_dependencyMap[15], "../common/ETTAlertView");

    var _bindAmont = _require(_dependencyMap[16], "../mobx/bindAmont.json");

    var _bindAmont2 = babelHelpers.interopRequireDefault(_bindAmont);

    var _ETTPersonalDataStyles = _require(_dependencyMap[17], "../res/styles/ETTPersonalDataStyles");

    var _ETTPersonalDataStyles2 = babelHelpers.interopRequireDefault(_ETTPersonalDataStyles);

    var _ETTPerlCenterStyles = _require(_dependencyMap[18], "../res/styles/ETTPerlCenterStyles");

    var _ETTPerlCenterStyles2 = babelHelpers.interopRequireDefault(_ETTPerlCenterStyles);

    var _ETTRequestModel = _require(_dependencyMap[19], "../mobx/ETTRequestModel");

    var _ETTRequestModel2 = babelHelpers.interopRequireDefault(_ETTRequestModel);

    var _ETTNetResponseHelper = _require(_dependencyMap[20], "../utils/ETTNetResponseHelper");

    var _ETTNetResponseHelper2 = babelHelpers.interopRequireDefault(_ETTNetResponseHelper);

    var _ETTEnum = _require(_dependencyMap[21], "../res/values/ETTEnum");

    var _ETTURLConfig = _require(_dependencyMap[22], "../res/values/ETTURLConfig");

    var _ETTURLConfig2 = babelHelpers.interopRequireDefault(_ETTURLConfig);

    var _ETTNetworkUtil = _require(_dependencyMap[23], "../utils/ETTNetworkUtil");

    var _ETTNetworkUtil2 = babelHelpers.interopRequireDefault(_ETTNetworkUtil);

    var _ETTLogStyles = _require(_dependencyMap[24], "../res/styles/ETTLogStyles");

    var _ETTLogStyles2 = babelHelpers.interopRequireDefault(_ETTLogStyles);

    var ETTBindThirdAmountScene = (0, _mobxReact.observer)(_class = function (_Component) {
        babelHelpers.inherits(ETTBindThirdAmountScene, _Component);

        function ETTBindThirdAmountScene(props) {
            babelHelpers.classCallCheck(this, ETTBindThirdAmountScene);

            var _this = babelHelpers.possibleConstructorReturn(this, (ETTBindThirdAmountScene.__proto__ || Object.getPrototypeOf(ETTBindThirdAmountScene)).call(this, props));

            _this.listData = [];

            _this.sectionComp = function (section) {
                return _react2.default.createElement(_reactNative.View, {
                    style: _ETTBindThirdAmountStyles2.default.sessionView,
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 115
                    }
                });
            };

            _this.renderItem = function (item) {
                return _react2.default.createElement(_ETTBindAmountCell2.default, {
                    data: item.item,
                    didSelected: function didSelected(item) {
                        return _this.cellDidSelected(item);
                    },
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 126
                    }
                });
            };

            _this.organizeThirdData();

            _this.state = {
                sectionData: _this.listData,
                isShowModal: false
            };
            return _this;
        }

        babelHelpers.createClass(ETTBindThirdAmountScene, [{
            key: "organizeThirdData",
            value: function organizeThirdData() {
                if (_ETTConfig.DataManager._userModel._weChatisBinding == false) {
                    var list = _bindAmont2.default.bind_amount_data;
                    this.listData = list;
                    console.log(this.listData);
                } else {
                    this.listData = _bindAmont2.default.bind_amount_data;

                    for (var _iterator = this.listData[0].data.entries(), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
                        var _ref3;

                        if (_isArray) {
                            if (_i >= _iterator.length) break;
                            _ref3 = _iterator[_i++];
                        } else {
                            _i = _iterator.next();
                            if (_i.done) break;
                            _ref3 = _i.value;
                        }

                        var _ref = _ref3;

                        var _ref2 = babelHelpers.slicedToArray(_ref, 2);

                        var index = _ref2[0];
                        var item = _ref2[1];

                        if (item.name == '微信') {
                            var weChatInfo = _ETTConfig.DataManager._userModel._weChatBinding;

                            if (weChatInfo) {
                                item.amount = weChatInfo.nickname;
                                item.openId = weChatInfo.openId;
                                item.bindingAppId = weChatInfo.bindingAppId;
                                item.bindingId = weChatInfo.bindingId;
                            }
                        }
                    }
                }
            }
        }, {
            key: "_extraUniqueKey",
            value: function _extraUniqueKey(item, index) {
                return "index" + index + item;
            }
        }, {
            key: "createAlertView",
            value: function createAlertView() {
                var _this2 = this;

                return _react2.default.createElement(_ETTAlertView.ETTBindAmountAlertView, {
                    ref: function ref(alertView) {
                        return _this2._alertView = alertView;
                    },
                    bindname: "\u5FAE\u4FE1:",
                    nickname: "PM\u5927\u5B8B\u795E",
                    title: "\u5FAE\u4FE1\u7ED1\u5B9A",
                    cancel: "\u5173\u95ED",
                    enter: "\u89E3\u7ED1",
                    ensureCallback: function ensureCallback(name) {
                        return _this2.alertEnterCallback(name);
                    },
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 136
                    }
                });
            }
        }, {
            key: "render",
            value: function render() {
                var _this3 = this;

                return _react2.default.createElement(
                    _reactNative.View,
                    {
                        style: _ETTPersonalDataStyles2.default.container,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 148
                        }
                    },
                    _react2.default.createElement(_ETTStatusBar.ETTDarkStatus, {
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 149
                        }
                    }),
                    _react2.default.createElement(
                        _reactNative.View,
                        {
                            style: _ETTPersonalDataStyles2.default.header,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 150
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.TouchableOpacity,
                            {
                                onPress: function onPress() {
                                    return _this3.goback();
                                },
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 151
                                }
                            },
                            _react2.default.createElement(_reactNative.Image, {
                                style: _ETTPerlCenterStyles2.default.top_header_back_image,
                                source: _require(_dependencyMap[25], '../res/images/km_back.png'),
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 152
                                }
                            })
                        ),
                        _react2.default.createElement(
                            _reactNative.Text,
                            {
                                style: _ETTPersonalDataStyles2.default.title,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 156
                                }
                            },
                            "\u7ED1\u5B9A\u8D26\u53F7"
                        )
                    ),
                    _react2.default.createElement(
                        _reactNative.View,
                        {
                            style: _ETTBindThirdAmountStyles2.default.body,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 161
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.View,
                            {
                                style: _ETTBindThirdAmountStyles2.default.body_top,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 162
                                }
                            },
                            _react2.default.createElement(_reactNative.SectionList, {
                                ref: "bindsectionList",
                                keyExtractor: this._extraUniqueKey,
                                style: _ETTBindThirdAmountStyles2.default.list,
                                renderSectionHeader: function renderSectionHeader(section) {
                                    return _this3.sectionComp(section);
                                },
                                renderItem: function renderItem(item) {
                                    return _this3.renderItem(item);
                                },
                                sections: this.state.sectionData,
                                scrollEnabled: false,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 163
                                }
                            })
                        )
                    ),
                    _react2.default.createElement(_reactNativeEasyToast2.default, {
                        ref: "toast",
                        style: _ETTLogStyles2.default.reg_toast,
                        opacity: 0.8,
                        position: "top",
                        positionValue: 200,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 175
                        }
                    }),
                    _react2.default.createElement(_ETTLoadingAnimation2.default, {
                        ref: "loading",
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 182
                        }
                    }),
                    this.createAlertView()
                );
            }
        }, {
            key: "goback",
            value: function goback() {
                this.props.navigation.pop();
            }
        }, {
            key: "showModal",
            value: function showModal() {
                if (this.state.isShowModal) {
                    return _react2.default.createElement(_ETTModalView2.default, {
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 198
                        }
                    });
                }
            }
        }, {
            key: "logout",
            value: function logout() {
                _ETTConfig.DataManager.logOut();
            }
        }, {
            key: "cellDidSelected",
            value: function cellDidSelected(item) {
                if (item.bindingAppId.length < 1) {
                    this.wechatOpenBinding();
                } else {
                    this._alertView.show(item);
                }
            }
        }, {
            key: "alertEnterCallback",
            value: function alertEnterCallback(info) {
                var _this4 = this;

                if (info == null) {
                    return;
                }

                this.refs.loading._show(null);

                var requetModel = new _ETTRequestModel2.default();
                requetModel._method = 'DELETE';
                requetModel._path = _ETTURLConfig2.default.SERVICE_NAME_ACCOUNT + _ETTURLConfig2.default.third_unbind + '?bindingId=' + info.bindingId + '&bindingAppId=' + info.bindingAppId + '&openId=' + info.openId;
                requetModel._bodyData = '';
                +'&bindingAppId=' + info.bindingAppId + '&openId=' + info.openId;
                requetModel._getInfo = requetModel.getTokenRequesetData();

                _ETTNetworkUtil2.default.requestWithToken(requetModel, function (json) {
                    _this4.refs.loading._hiden();

                    var reslut = _ETTNetResponseHelper2.default.responseJsonForResult(json);

                    _this4.refs.toast.show(reslut.msg);

                    if (reslut.code == 1) {
                        _ETTConfig.DataManager.removeThirdAmountSuccessful(info.bindingAppId);

                        _this4.resetThisListData();
                    }
                });
            }
        }, {
            key: "resetThisListData",
            value: function resetThisListData() {
                for (var _iterator2 = this.listData[0].data.entries(), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
                    var _ref6;

                    if (_isArray2) {
                        if (_i2 >= _iterator2.length) break;
                        _ref6 = _iterator2[_i2++];
                    } else {
                        _i2 = _iterator2.next();
                        if (_i2.done) break;
                        _ref6 = _i2.value;
                    }

                    var _ref4 = _ref6;

                    var _ref5 = babelHelpers.slicedToArray(_ref4, 2);

                    var index = _ref5[0];
                    var item = _ref5[1];

                    if (item.name == '微信') {
                        item.amount = '去绑定';
                        item.openId = '';
                        item.bindingAppId = '';
                        item.bindingId = '';
                    }
                }

                this.setState({
                    sectionData: this.listData
                });
            }
        }, {
            key: "wechatOpenBinding",
            value: function wechatOpenBinding() {
                var _this5 = this;

                var scope = 'snsapi_userinfo';
                var state = 'wechat_km_app';
                wechat.isWXAppInstalled().then(function (isInstalled) {
                    if (isInstalled) {
                        console.log('微信已经安装');
                        wechat.sendAuthRequest(scope, state).then(function (responseCode) {
                            console.log('授权成功');

                            _this5.getWechatAccessToken(responseCode);
                        }).catch(function (err) {
                            _this5.refs.loading._hiden();

                            _this5.refs.toast.show('登录授权发生错误' + err.message);
                        });
                    } else {
                        _this5.refs.loading._hiden();

                        _this5.refs.toast.show('没有安装微信软件，请您安装微信之后再试');
                    }
                });
            }
        }, {
            key: "getWechatAccessToken",
            value: function getWechatAccessToken(response) {
                var _this6 = this;

                this.refs.loading._show(null);

                var requetModel = new _ETTRequestModel2.default();
                requetModel._path = 'https://api.weixin.qq.com/sns/oauth2/access_token?appid=' + response.appid + '&secret=' + _ETTURLConfig2.default.wxSecret + '&code=' + response.code + '&grant_type=authorization_code';
                requetModel._getInfo = '';

                _ETTNetworkUtil2.default.weChatRequest(requetModel).then(function (json) {
                    console.log(json);

                    if (json.access_token) {
                        _this6.getWechatUserInfo(json);
                    } else {
                        _this6.refs.loading._hiden();

                        var reslut = _ETTNetResponseHelper2.default.responseJson(json);

                        _this6.refs.toast.show(reslut.msg);
                    }
                }, function (json) {
                    console.log('fail' + json);

                    _this6.refs.loading._hiden();

                    var result = _ETTNetResponseHelper2.default.requestFailJson(json);

                    _this6.refs.toast.show(result.msg);
                });
            }
        }, {
            key: "getWechatUserInfo",
            value: function getWechatUserInfo(response) {
                var _this7 = this;

                var requetModel = new _ETTRequestModel2.default();
                requetModel._path = 'https://api.weixin.qq.com/sns/userinfo?access_token=' + response.access_token + '&openid=' + response.openid;
                requetModel._getInfo = '';

                _ETTNetworkUtil2.default.weChatRequest(requetModel).then(function (json) {
                    console.log(json);
                    var openid = json.openid;

                    if (openid && openid.length > 0) {
                        console.log('获取用户信息成功');

                        _this7.serverBindThirdAmount(json);
                    } else {
                        _this7.refs.loading._hiden();

                        var reslut = _ETTNetResponseHelper2.default.responseJson(json);

                        _this7.refs.toast.show(reslut.msg);
                    }
                }, function (json) {
                    console.log('fail' + json);

                    _this7.refs.loading._hiden();

                    var result = _ETTNetResponseHelper2.default.requestFailJson(json);

                    _this7.refs.toast.show(result.msg);
                });
            }
        }, {
            key: "serverBindThirdAmount",
            value: function serverBindThirdAmount(response) {
                var _this8 = this;

                var requetModel = new _ETTRequestModel2.default();
                requetModel._path = _ETTURLConfig2.default.SERVICE_NAME_ACCOUNT + _ETTURLConfig2.default.third_singin;
                requetModel._bodyData = 'bindingId=' + response.unionid + '&bindingAppId=wexin' + '&openId=' + response.openid + '&nickname=' + response.nickname + '&photoPath=' + response.headimgurl;
                requetModel._getInfo = requetModel.getAuthorizationRequesetData();

                _ETTNetworkUtil2.default.post(requetModel).then(function (json) {
                    console.log(json);

                    var reslut = _ETTNetResponseHelper2.default.responseJsonForResult(json);

                    if (reslut.code == 1) {
                        var phone = reslut.data.phone;
                        var amountInfo = {
                            'userId': reslut.data.userId,
                            'phone': reslut.data.phone
                        };

                        if (phone == null || phone.length < 11) {
                            _this8.refs.loading._hiden();

                            _ETTConfig.DataManager.thirdAmountLogSuccessful(JSON.parse(reslut.data.loginDetail), _ETTEnum.ETTUserLogType.logWeChat, amountInfo);

                            _this8.bindMobiliPhone();
                        } else {
                            _ETTConfig.DataManager.logSuccessful(JSON.parse(reslut.data.loginDetail), _ETTEnum.ETTUserLogType.logWeChat, amountInfo);

                            _this8.requestUserInfo();
                        }
                    } else {
                        _this8.refs.loading._hiden();

                        _this8.refs.toast.show(reslut.msg);
                    }
                }, function (json) {
                    console.log('fail' + json);

                    _this8.refs.loading._hiden();

                    var result = _ETTNetResponseHelper2.default.requestFailJson(json);

                    _this8.refs.toast.show(result.msg);
                });
            }
        }, {
            key: "requestUserInfo",
            value: function requestUserInfo() {
                var _this9 = this;

                var requetModel = new _ETTRequestModel2.default();
                requetModel._path = _ETTURLConfig2.default.SERVICE_NAME_ACCOUNT + _ETTURLConfig2.default.edit_nickname;
                requetModel._bodyData = '';
                requetModel._method = 'GET', requetModel._getInfo = requetModel.getTokenRequesetData();

                _ETTNetworkUtil2.default.requestWithToken(requetModel, function (json) {
                    console.log(json);

                    var reslut = _ETTNetResponseHelper2.default.responseJsonForResult(json);

                    if (reslut.code == 1) {
                        _ETTConfig.DataManager.obtainUserInfoSuccessful(json.data);

                        _this9.updateBindInfo();
                    }

                    _this9.refs.loading._hiden();
                });
            }
        }, {
            key: "updateBindInfo",
            value: function updateBindInfo() {
                for (var _iterator3 = this.listData[0].data.entries(), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
                    var _ref9;

                    if (_isArray3) {
                        if (_i3 >= _iterator3.length) break;
                        _ref9 = _iterator3[_i3++];
                    } else {
                        _i3 = _iterator3.next();
                        if (_i3.done) break;
                        _ref9 = _i3.value;
                    }

                    var _ref7 = _ref9;

                    var _ref8 = babelHelpers.slicedToArray(_ref7, 2);

                    var index = _ref8[0];
                    var item = _ref8[1];

                    if (item.name == '微信') {
                        var weChatInfo = _ETTConfig.DataManager._userModel._weChatBinding;

                        if (weChatInfo) {
                            item.amount = weChatInfo.nickname;
                            item.openId = weChatInfo.openId;
                            item.bindingAppId = weChatInfo.bindingAppId;
                            item.bindingId = weChatInfo.bindingId;
                        }
                    }
                }

                this.setState({
                    sectionData: this.listData
                });
            }
        }, {
            key: "bindMobiliPhone",
            value: function bindMobiliPhone() {
                var _this10 = this;

                this.props.navigation.navigate('ThirdLoginBindScene', {
                    bindfinish: function bindfinish(state) {
                        return _this10.bindPhoneFinish(state);
                    }
                });
            }
        }, {
            key: "bindPhoneFinish",
            value: function bindPhoneFinish(state) {
                if (state == true && _ETTConfig.DataManager._userModel._weChatisBinding == true) {
                    this.updateBindInfo();
                }
            }
        }]);
        return ETTBindThirdAmountScene;
    }(_react.Component)) || _class;

    exports.default = ETTBindThirdAmountScene;
},556,[114,12,340,510,449,461,371,557,342,343,450,347,512,558,559,560,562,563,527,361,369,348,360,362,460,517],"app/scene/ETTBindThirdAmountScene.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    var _react = _require(_dependencyMap[0], "react");

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    var _ETTDevice = _require(_dependencyMap[2], "../values/ETTDevice");

    var _ETTDevice2 = babelHelpers.interopRequireDefault(_ETTDevice);

    var _ETTColor = _require(_dependencyMap[3], "../values/ETTColor");

    var _ETTColor2 = babelHelpers.interopRequireDefault(_ETTColor);

    var _ETTInlineFuction = _require(_dependencyMap[4], "../values/ETTInlineFuction");

    var ETTBindThirdAmountStyles = _reactNative.StyleSheet.create({
        container: {
            flex: 1,
            backgroundColor: _ETTColor2.default.c2
        },
        body: {
            flex: 2,
            backgroundColor: _ETTColor2.default.c2,
            justifyContent: 'space-between'
        },
        body_top: {},
        body_bottom: {
            marginBottom: 0
        },
        sessionView: {
            width: _ETTDevice2.default.ScreenWidth,
            backgroundColor: _ETTColor2.default.c2,
            height: (0, _ETTInlineFuction.scaleSize)(24)
        },
        list: {
            width: _ETTDevice2.default.ScreenWidth,
            backgroundColor: _ETTColor2.default.c2
        },
        listItem: {
            width: _ETTDevice2.default.ScreenWidth
        },
        cellContainer: {
            backgroundColor: _ETTColor2.default.white,
            paddingRight: (0, _ETTInlineFuction.scaleSize)(30),
            paddingLeft: (0, _ETTInlineFuction.scaleSize)(30),
            paddingTop: (0, _ETTInlineFuction.scaleSize)(30),
            width: _ETTDevice2.default.ScreenWidth
        },
        cellBody_top: {
            flex: 1,
            justifyContent: 'space-between',
            flexDirection: 'row',
            alignItems: 'center',
            marginBottom: (0, _ETTInlineFuction.scaleSize)(30)
        },
        cellBody_top_left: {
            marginLeft: (0, _ETTInlineFuction.scaleSize)(30),
            fontSize: (0, _ETTInlineFuction.scaleSize)(28),
            color: _ETTColor2.default.f1
        },
        cellBody_top_right: {
            marginRight: (0, _ETTInlineFuction.scaleSize)(7),
            justifyContent: 'space-between',
            flexDirection: 'row',
            alignItems: 'center'
        },
        cellBody_top_right_text: {
            fontSize: (0, _ETTInlineFuction.scaleSize)(24),
            color: _ETTColor2.default.f4
        },
        cellBody_top_right_image: {
            marginLeft: (0, _ETTInlineFuction.scaleSize)(20)
        },
        cellLine: {
            height: 1,
            backgroundColor: _ETTColor2.default.l1
        },
        logout_btn: {
            marginLeft: (0, _ETTInlineFuction.scaleSize)(73),
            marginRight: (0, _ETTInlineFuction.scaleSize)(73),
            marginBottom: (0, _ETTInlineFuction.scaleSize)(333),
            height: (0, _ETTInlineFuction.scaleSize)(85),
            backgroundColor: _ETTColor2.default.black_t60,
            justifyContent: 'center',
            borderRadius: (0, _ETTInlineFuction.scaleSize)(8)
        },
        logout_btn_text: {
            textAlign: 'center',
            color: _ETTColor2.default.white,
            fontSize: (0, _ETTInlineFuction.scaleSize)(26)
        },
        modalView: {
            width: 100,
            height: 100,
            backgroundColor: 'red'
        }
    });

    module.exports = ETTBindThirdAmountStyles;
},557,[114,12,342,453,452],"app/res/styles/ETTBindThirdAmountStyles.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = undefined;
    var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/app/common/ETTBindAmountCell.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    var _ETTDevice = _require(_dependencyMap[2], "../res/values/ETTDevice");

    var _ETTDevice2 = babelHelpers.interopRequireDefault(_ETTDevice);

    var _ETTPerlCenterStyles = _require(_dependencyMap[3], "../res/styles/ETTPerlCenterStyles");

    var _ETTPerlCenterStyles2 = babelHelpers.interopRequireDefault(_ETTPerlCenterStyles);

    var _ETTBindThirdAmountStyles = _require(_dependencyMap[4], "../res/styles/ETTBindThirdAmountStyles");

    var _ETTBindThirdAmountStyles2 = babelHelpers.interopRequireDefault(_ETTBindThirdAmountStyles);

    var ETTPuRecordsCell = function (_Component) {
        babelHelpers.inherits(ETTPuRecordsCell, _Component);

        function ETTPuRecordsCell(props) {
            babelHelpers.classCallCheck(this, ETTPuRecordsCell);

            var _this = babelHelpers.possibleConstructorReturn(this, (ETTPuRecordsCell.__proto__ || Object.getPrototypeOf(ETTPuRecordsCell)).call(this, props));

            _this.state = {
                cellItem: _this.props.data
            };
            return _this;
        }

        babelHelpers.createClass(ETTPuRecordsCell, [{
            key: "orderType",
            value: function orderType(type) {
                switch (type) {
                    case 1:
                        return _react2.default.createElement(
                            _reactNative.Text,
                            {
                                style: _ETTPerlCenterStyles2.default.cellOrderType,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 41
                                }
                            },
                            "\u5DF2\u53D6\u6D88"
                        );
                        break;

                    case 2:
                        return _react2.default.createElement(
                            _reactNative.Text,
                            {
                                style: _ETTPerlCenterStyles2.default.cellOrderType,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 44
                                }
                            },
                            "\u5DF2\u5B8C\u6210"
                        );
                        break;

                    case 3:
                        return _react2.default.createElement(
                            _reactNative.Text,
                            {
                                style: _ETTPerlCenterStyles2.default.order_WillPay,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 47
                                }
                            },
                            "\u7EE7\u7EED\u652F\u4ED8"
                        );
                        break;

                    default:
                        return _react2.default.createElement(
                            _reactNative.Text,
                            {
                                style: _ETTPerlCenterStyles2.default.cellOrderType,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 50
                                }
                            },
                            this.state.cellItem.orderType
                        );
                }
            }
        }, {
            key: "onPressCell",
            value: function onPressCell() {
                var callback = this.props.didSelected;

                if (callback) {
                    callback(this.state.cellItem);
                }
            }
        }, {
            key: "render",
            value: function render() {
                var _this2 = this;

                return _react2.default.createElement(
                    _reactNative.TouchableOpacity,
                    {
                        onPress: function onPress() {
                            return _this2.onPressCell();
                        },
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 66
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.View,
                        {
                            style: _ETTBindThirdAmountStyles2.default.cellContainer,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 67
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.View,
                            {
                                style: _ETTBindThirdAmountStyles2.default.cellBody_top,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 68
                                }
                            },
                            _react2.default.createElement(
                                _reactNative.Text,
                                {
                                    style: _ETTBindThirdAmountStyles2.default.cellBody_top_left,
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 69
                                    }
                                },
                                this.state.cellItem.name
                            ),
                            _react2.default.createElement(
                                _reactNative.View,
                                {
                                    style: _ETTBindThirdAmountStyles2.default.cellBody_top_right,
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 72
                                    }
                                },
                                _react2.default.createElement(
                                    _reactNative.Text,
                                    {
                                        style: _ETTBindThirdAmountStyles2.default.cellheader,
                                        __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 73
                                        }
                                    },
                                    this.state.cellItem.amount
                                ),
                                _react2.default.createElement(_reactNative.Image, {
                                    style: _ETTBindThirdAmountStyles2.default.cellBody_top_right_image,
                                    source: _require(_dependencyMap[5], '../res/images/tab_c5.png'),
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 76
                                    }
                                })
                            )
                        ),
                        _react2.default.createElement(_reactNative.View, {
                            style: _ETTPerlCenterStyles2.default.cellLine,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 80
                            }
                        })
                    )
                );
            }
        }]);
        return ETTPuRecordsCell;
    }(_react.Component);

    exports.default = ETTPuRecordsCell;
},558,[114,12,342,527,557,521],"app/common/ETTBindAmountCell.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = undefined;
    var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/app/common/ETTModalView.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    var HomePage = function (_Component) {
        babelHelpers.inherits(HomePage, _Component);

        function HomePage(props) {
            babelHelpers.classCallCheck(this, HomePage);

            var _this = babelHelpers.possibleConstructorReturn(this, (HomePage.__proto__ || Object.getPrototypeOf(HomePage)).call(this, props));

            _this.state = {
                modalVisible: true
            };
            return _this;
        }

        babelHelpers.createClass(HomePage, [{
            key: "_showView",
            value: function _showView() {
                var isShow = this.state.show;
                this.setState({
                    modalVisible: !isShow
                });
            }
        }, {
            key: "setModalVisible",
            value: function setModalVisible(flag) {
                this.setState({
                    modalVisible: false
                });
            }
        }, {
            key: "render",
            value: function render() {
                var _this2 = this;

                return _react2.default.createElement(
                    _reactNative.View,
                    {
                        style: {
                            marginTop: 22
                        },
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 34
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.Modal,
                        {
                            animationType: "slide",
                            transparent: false,
                            visible: this.state.modalVisible,
                            onRequestClose: function onRequestClose() {
                                alert("Modal has been closed.");
                            },
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 35
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.View,
                            {
                                style: {
                                    marginTop: 22
                                },
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 41
                                }
                            },
                            _react2.default.createElement(
                                _reactNative.View,
                                {
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 42
                                    }
                                },
                                _react2.default.createElement(
                                    _reactNative.Text,
                                    {
                                        __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 43
                                        }
                                    },
                                    "Hello World!"
                                ),
                                _react2.default.createElement(
                                    _reactNative.TouchableHighlight,
                                    {
                                        onPress: function onPress() {
                                            _this2.setModalVisible(!_this2.state.modalVisible);
                                        },
                                        __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 45
                                        }
                                    },
                                    _react2.default.createElement(
                                        _reactNative.Text,
                                        {
                                            __source: {
                                                fileName: _jsxFileName,
                                                lineNumber: 48
                                            }
                                        },
                                        "Hide Modal"
                                    )
                                )
                            )
                        )
                    ),
                    _react2.default.createElement(
                        _reactNative.TouchableHighlight,
                        {
                            onPress: function onPress() {
                                _this2.setModalVisible(true);
                            },
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 55
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.Text,
                            {
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 58
                                }
                            },
                            "Show Modal"
                        )
                    )
                );
            }
        }]);
        return HomePage;
    }(_react.Component);

    exports.default = HomePage;

    var styles = _reactNative.StyleSheet.create({
        container: {
            backgroundColor: '#ECECF0'
        },
        modalStyle: {
            alignItems: 'center',
            justifyContent: 'center',
            flex: 1,
            width: 100,
            height: 100,
            backgroundColor: 'red'
        },
        subView: {
            marginLeft: 60,
            marginRight: 60,
            backgroundColor: '#fff',
            alignSelf: 'stretch',
            justifyContent: 'center',
            borderRadius: 10,
            borderWidth: 0.5,
            borderColor: '#ccc'
        },
        titleText: {
            marginTop: 10,
            marginBottom: 5,
            fontSize: 16,
            fontWeight: 'bold',
            textAlign: 'center'
        },
        contentText: {
            margin: 8,
            fontSize: 14,
            textAlign: 'center'
        },
        horizontalLine: {
            marginTop: 5,
            height: 0.5,
            backgroundColor: '#ccc'
        },
        buttonView: {
            flexDirection: 'row',
            alignItems: 'center'
        },
        buttonStyle: {
            flex: 1,
            height: 44,
            alignItems: 'center',
            justifyContent: 'center'
        },
        verticalLine: {
            width: 0.5,
            height: 44,
            backgroundColor: '#ccc'
        },
        buttonText: {
            fontSize: 16,
            color: '#3393F2',
            textAlign: 'center'
        }
    });
},559,[114,12],"app/common/ETTModalView.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.ETTInputAlertView = exports.ETTBindAmountAlertView = exports.ETTAlertView = undefined;
    var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/app/common/ETTAlertView.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    var _ETTAlertStyles = _require(_dependencyMap[2], "../res/styles/ETTAlertStyles");

    var _ETTAlertStyles2 = babelHelpers.interopRequireDefault(_ETTAlertStyles);

    var ETTAlertView = exports.ETTAlertView = function (_Component) {
        babelHelpers.inherits(ETTAlertView, _Component);

        function ETTAlertView(props) {
            babelHelpers.classCallCheck(this, ETTAlertView);

            var _this = babelHelpers.possibleConstructorReturn(this, (ETTAlertView.__proto__ || Object.getPrototypeOf(ETTAlertView)).call(this, props));

            _this.show = _this.show.bind(_this);
            _this._close = _this._close.bind(_this);
            _this.state = {
                isShow: false,
                opacityAnimationValue: new _reactNative.Animated.Value(0),
                scaleAnimationValue: new _reactNative.Animated.Value(0),
                info: null
            };
            return _this;
        }

        babelHelpers.createClass(ETTAlertView, [{
            key: "show",
            value: function show(info) {
                this.setState({
                    isShow: true,
                    info: info
                });

                _reactNative.Animated.parallel([_reactNative.Animated.timing(this.state.opacityAnimationValue, {
                    toValue: 1,
                    duration: 200 + 100
                }), _reactNative.Animated.spring(this.state.scaleAnimationValue, {
                    toValue: 1,
                    duration: 200,
                    friction: 5
                })]).start();
            }
        }, {
            key: "_close",
            value: function _close() {
                this.setState({
                    isShow: false
                });
                this.state.opacityAnimationValue.setValue(0);
                this.state.scaleAnimationValue.setValue(0);
            }
        }, {
            key: "outsideLayerStyles",
            value: function outsideLayerStyles() {
                return _ETTAlertStyles2.default.alert_outside;
            }
        }, {
            key: "promptContainerStyles",
            value: function promptContainerStyles() {
                return _ETTAlertStyles2.default.base_promptContainer;
            }
        }, {
            key: "titleStyles",
            value: function titleStyles() {
                return _ETTAlertStyles2.default.base_titletext;
            }
        }, {
            key: "titleView",
            value: function titleView() {
                var title = this.state.info.name + '绑定';

                if (title) {
                    return _react2.default.createElement(
                        _reactNative.Text,
                        {
                            style: _ETTAlertStyles2.default.base_titletext,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 83
                            }
                        },
                        title
                    );
                }

                return null;
            }
        }, {
            key: "contentView",
            value: function contentView() {
                return null;
            }
        }, {
            key: "enterBackcall",
            value: function enterBackcall() {
                this._close();

                var callback = this.props.ensureCallback;

                if (callback) {
                    callback(this.state.info);
                }
            }
        }, {
            key: "buttomView",
            value: function buttomView() {
                var _this2 = this;

                return _react2.default.createElement(
                    _reactNative.View,
                    {
                        style: _ETTAlertStyles2.default.base_buttonContainer,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 105
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.TouchableOpacity,
                        {
                            activeOpacity: 0.75,
                            style: [_ETTAlertStyles2.default.center, {
                                flex: 4.5
                            }],
                            onPress: this._close,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 106
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.Text,
                            {
                                style: _ETTAlertStyles2.default.base_button_text,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 111
                                }
                            },
                            this.props.cancel
                        )
                    ),
                    _react2.default.createElement(_reactNative.View, {
                        style: [_ETTAlertStyles2.default.base_line],
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 113
                        }
                    }),
                    _react2.default.createElement(
                        _reactNative.TouchableOpacity,
                        {
                            activeOpacity: 0.75,
                            style: [_ETTAlertStyles2.default.center, {
                                flex: 4.5
                            }],
                            onPress: function onPress() {
                                return _this2.enterBackcall();
                            },
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 114
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.Text,
                            {
                                style: _ETTAlertStyles2.default.base_button_text,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 119
                                }
                            },
                            this.props.enter
                        )
                    )
                );
            }
        }, {
            key: "render",
            value: function render() {
                if (!this.state.isShow) return null;
                return _react2.default.createElement(
                    _reactNative.Animated.View,
                    {
                        style: [_ETTAlertStyles2.default.container, {
                            opacity: this.state.opacityAnimationValue
                        }],
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 129
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.TouchableOpacity,
                        {
                            activeOpacity: 1,
                            style: this.outsideLayerStyles(),
                            onPress: this._close,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 130
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.Animated.View,
                            {
                                style: [_ETTAlertStyles2.default.base_contentContainer, {
                                    transform: [{
                                        scale: this.state.scaleAnimationValue
                                    }]
                                }],
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 134
                                }
                            },
                            _react2.default.createElement(
                                _reactNative.TouchableOpacity,
                                {
                                    activeOpacity: 1,
                                    style: this.promptContainerStyles(),
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 137
                                    }
                                },
                                this.titleView(),
                                this.contentView()
                            ),
                            this.buttomView()
                        )
                    )
                );
            }
        }]);
        return ETTAlertView;
    }(_react.Component);

    var ETTBindAmountAlertView = exports.ETTBindAmountAlertView = function (_ETTAlertView) {
        babelHelpers.inherits(ETTBindAmountAlertView, _ETTAlertView);

        function ETTBindAmountAlertView(props) {
            babelHelpers.classCallCheck(this, ETTBindAmountAlertView);
            return babelHelpers.possibleConstructorReturn(this, (ETTBindAmountAlertView.__proto__ || Object.getPrototypeOf(ETTBindAmountAlertView)).call(this, props));
        }

        babelHelpers.createClass(ETTBindAmountAlertView, [{
            key: "contentView",
            value: function contentView() {
                return _react2.default.createElement(
                    _reactNative.View,
                    {
                        style: _ETTAlertStyles2.default.alert_bind_content,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 160
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.View,
                        {
                            style: _ETTAlertStyles2.default.center,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 161
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.Text,
                            {
                                style: _ETTAlertStyles2.default.alert_bind_bindname,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 162
                                }
                            },
                            this.state.info.name + ': '
                        )
                    ),
                    _react2.default.createElement(
                        _reactNative.View,
                        {
                            style: _ETTAlertStyles2.default.center,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 167
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.Text,
                            {
                                style: [_ETTAlertStyles2.default.alert_bind_bindname, _ETTAlertStyles2.default.alert_bind_nickname],
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 168
                                }
                            },
                            this.state.info.amount
                        )
                    )
                );
            }
        }]);
        return ETTBindAmountAlertView;
    }(ETTAlertView);

    var ETTInputAlertView = exports.ETTInputAlertView = function (_ETTAlertView2) {
        babelHelpers.inherits(ETTInputAlertView, _ETTAlertView2);

        function ETTInputAlertView(props) {
            babelHelpers.classCallCheck(this, ETTInputAlertView);
            return babelHelpers.possibleConstructorReturn(this, (ETTInputAlertView.__proto__ || Object.getPrototypeOf(ETTInputAlertView)).call(this, props));
        }

        babelHelpers.createClass(ETTInputAlertView, [{
            key: "contentView",
            value: function contentView() {
                var _this5 = this;

                return _react2.default.createElement(
                    _reactNative.View,
                    {
                        style: {
                            flexDirection: 'row',
                            margin: 15
                        },
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 185
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.View,
                        {
                            style: [_ETTAlertStyles2.default.center, {
                                width: 230
                            }],
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 186
                            }
                        },
                        _react2.default.createElement(_reactNative.TextInput, {
                            style: {
                                fontSize: 16,
                                color: '#999',
                                width: 150,
                                padding: 0
                            },
                            value: this.state.inputText,
                            autoFocus: true,
                            underlineColorAndroid: "transparent",
                            onChangeText: function onChangeText(text) {
                                return _this5.setState({
                                    inputText: text
                                });
                            },
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 187
                            }
                        })
                    ),
                    _react2.default.createElement(
                        _reactNative.TouchableOpacity,
                        {
                            onPress: function onPress() {
                                return _this5.setState({
                                    inputText: ''
                                });
                            },
                            style: [_ETTAlertStyles2.default.center, {
                                width: 20
                            }],
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 195
                            }
                        },
                        _react2.default.createElement(_reactNative.Image, {
                            source: _require(_dependencyMap[3], '../res/images/tab_c9_close.png'),
                            style: {
                                width: 18,
                                height: 18
                            },
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 198
                            }
                        })
                    )
                );
            }
        }]);
        return ETTInputAlertView;
    }(ETTAlertView);
},560,[114,12,561,513],"app/common/ETTAlertView.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    var _react = _require(_dependencyMap[0], "react");

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    var _ETTDevice = _require(_dependencyMap[2], "../values/ETTDevice");

    var _ETTDevice2 = babelHelpers.interopRequireDefault(_ETTDevice);

    var _ETTColor = _require(_dependencyMap[3], "../values/ETTColor");

    var _ETTColor2 = babelHelpers.interopRequireDefault(_ETTColor);

    var _ETTInlineFuction = _require(_dependencyMap[4], "../values/ETTInlineFuction");

    var ETTAlertStyles = _reactNative.StyleSheet.create({
        container: {
            position: 'absolute',
            top: 0,
            left: 0,
            bottom: 0,
            right: 0,
            backgroundColor: 'rgba(1, 1, 1, 0.3)'
        },
        base_contentContainer: {
            justifyContent: 'space-between',
            backgroundColor: _ETTColor2.default.white,
            alignItems: 'center',
            borderColor: _ETTColor2.default.l1,
            borderWidth: 1,
            height: (0, _ETTInlineFuction.scaleSize)(351),
            width: (0, _ETTInlineFuction.scaleSize)(516),
            borderRadius: 5
        },
        base_promptContainer: {
            width: (0, _ETTInlineFuction.scaleSize)(516),
            alignItems: 'center',
            justifyContent: 'center',
            marginTop: (0, _ETTInlineFuction.scaleSize)(50),
            marginBottom: (0, _ETTInlineFuction.scaleSize)(15)
        },
        base_titletext: {
            fontSize: (0, _ETTInlineFuction.scaleSize)(30),
            color: _ETTColor2.default.f1
        },
        base_buttonContainer: {
            height: (0, _ETTInlineFuction.scaleSize)(90),
            width: (0, _ETTInlineFuction.scaleSize)(516),
            flexDirection: 'row',
            alignItems: 'center',
            justifyContent: 'space-between',
            borderTopWidth: 1,
            borderColor: _ETTColor2.default.l1
        },
        base_line: {
            height: (0, _ETTInlineFuction.scaleSize)(90),
            width: 1,
            backgroundColor: _ETTColor2.default.l1
        },
        center: {
            justifyContent: 'center',
            alignItems: 'center'
        },
        base_button_text: {
            fontSize: (0, _ETTInlineFuction.scaleSize)(30),
            color: _ETTColor2.default.f1
        },
        base_button_cancel: {},
        base_button_enter: {},
        alert_outside: {
            flex: 1,
            alignItems: 'center',
            paddingTop: 140
        },
        alert_bind_bindname: {
            fontSize: (0, _ETTInlineFuction.scaleSize)(24),
            color: _ETTColor2.default.f2
        },
        alert_bind_nickname: {
            marginLeft: (0, _ETTInlineFuction.scaleSize)(8)
        },
        alert_bind_content: {
            flexDirection: 'row',
            marginTop: (0, _ETTInlineFuction.scaleSize)(86)
        }
    });

    module.exports = ETTAlertStyles;
},561,[114,12,342,453,452],"app/res/styles/ETTAlertStyles.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = {
    "bind_amount_data": [{
      "title": "购买记录",
      "data": [{
        "name": "微信",
        "amount": "去绑定",
        "openId": "",
        "bindingAppId": "",
        "bindingId": ""
      }]
    }]
  };
},562,[],"app/mobx/bindAmont.json");
__d(function (global, _require, module, exports, _dependencyMap) {
    var _react = _require(_dependencyMap[0], "react");

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    var _ETTDevice = _require(_dependencyMap[2], "../values/ETTDevice");

    var _ETTDevice2 = babelHelpers.interopRequireDefault(_ETTDevice);

    var _ETTColor = _require(_dependencyMap[3], "../values/ETTColor");

    var _ETTColor2 = babelHelpers.interopRequireDefault(_ETTColor);

    var _ETTInlineFuction = _require(_dependencyMap[4], "../values/ETTInlineFuction");

    var _ETTPersonalDataEditorScene = _require(_dependencyMap[5], "../../scene/ETTPersonalDataEditorScene");

    var _ETTPersonalDataEditorScene2 = babelHelpers.interopRequireDefault(_ETTPersonalDataEditorScene);

    var ETTPersonalDataStyles = _reactNative.StyleSheet.create({
        container: {
            flex: 1,
            backgroundColor: _ETTColor2.default.white,
            width: _ETTDevice2.default.ScreenWidth
        },
        header: {
            flexDirection: 'row',
            marginTop: (0, _ETTInlineFuction.scaleSize)(39),
            height: (0, _ETTInlineFuction.scaleSize)(88),
            justifyContent: 'flex-start',
            alignItems: 'center',
            backgroundColor: _ETTColor2.default.white
        },
        title: {
            fontSize: (0, _ETTInlineFuction.scaleSize)(36),
            marginLeft: (0, _ETTInlineFuction.scaleSize)(36),
            color: _ETTColor2.default.f1,
            textAlign: 'center',
            width: _ETTDevice2.default.ScreenWidth - (0, _ETTInlineFuction.scaleSize)(168)
        },
        base_row: {
            marginTop: 0,
            justifyContent: 'flex-end',
            flexDirection: 'row',
            alignItems: 'center',
            width: _ETTDevice2.default.ScreenWidth,
            height: (0, _ETTInlineFuction.scaleSize)(124),
            backgroundColor: _ETTColor2.default.white
        },
        base_row_title: {
            fontSize: (0, _ETTInlineFuction.scaleSize)(28),
            paddingLeft: (0, _ETTInlineFuction.scaleSize)(36),
            textAlign: 'left',
            color: _ETTColor2.default.f1,
            width: _ETTDevice2.default.ScreenWidth / 2
        },
        base_row_right: {
            width: _ETTDevice2.default.ScreenWidth / 2,
            backgroundColor: _ETTColor2.default.white,
            justifyContent: 'flex-end',
            flexDirection: 'row',
            alignItems: 'center',
            alignSelf: 'auto'
        },
        base_row_image: {
            width: (0, _ETTInlineFuction.scaleSize)(82),
            height: (0, _ETTInlineFuction.scaleSize)(82),
            marginRight: (0, _ETTInlineFuction.scaleSize)(36)
        },
        base_row_arrow_image: {
            width: (0, _ETTInlineFuction.scaleSize)(12),
            height: (0, _ETTInlineFuction.scaleSize)(19),
            marginRight: (0, _ETTInlineFuction.scaleSize)(42)
        },
        row_line: {
            height: 1,
            marginLeft: (0, _ETTInlineFuction.scaleSize)(36),
            marginRight: (0, _ETTInlineFuction.scaleSize)(30),
            backgroundColor: _ETTColor2.default.l1
        },
        header_line: {
            height: 1,
            marginLeft: 0,
            marginRight: 0,
            backgroundColor: _ETTColor2.default.l1
        },
        row_textInput: {
            fontSize: (0, _ETTInlineFuction.scaleSize)(28),
            width: _ETTDevice2.default.ScreenWidth / 2 - (0, _ETTInlineFuction.scaleSize)(90),
            color: _ETTColor2.default.c9,
            marginRight: (0, _ETTInlineFuction.scaleSize)(36),
            textAlign: 'right'
        }
    });

    module.exports = ETTPersonalDataStyles;
},563,[114,12,342,453,452,564],"app/res/styles/ETTPersonalDataStyles.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = undefined;
    var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/app/scene/ETTPersonalDataEditorScene.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    var _reactNativeEasyToast = _require(_dependencyMap[2], "react-native-easy-toast");

    var _reactNativeEasyToast2 = babelHelpers.interopRequireDefault(_reactNativeEasyToast);

    var _ETTConfig = _require(_dependencyMap[3], "../res/values/ETTConfig");

    var _ETTStatusBar = _require(_dependencyMap[4], "../common/ETTStatusBar");

    var _ETTPersonalDataStyles = _require(_dependencyMap[5], "../res/styles/ETTPersonalDataStyles");

    var _ETTPersonalDataStyles2 = babelHelpers.interopRequireDefault(_ETTPersonalDataStyles);

    var _ETTLogStyles = _require(_dependencyMap[6], "../res/styles/ETTLogStyles");

    var _ETTLogStyles2 = babelHelpers.interopRequireDefault(_ETTLogStyles);

    var _ETTPerlCenterStyles = _require(_dependencyMap[7], "../res/styles/ETTPerlCenterStyles");

    var _ETTPerlCenterStyles2 = babelHelpers.interopRequireDefault(_ETTPerlCenterStyles);

    var _ETTLoadingAnimation = _require(_dependencyMap[8], "../common/ETTLoadingAnimation");

    var _ETTLoadingAnimation2 = babelHelpers.interopRequireDefault(_ETTLoadingAnimation);

    var _ETTNetworkUtil = _require(_dependencyMap[9], "../utils/ETTNetworkUtil");

    var _ETTNetworkUtil2 = babelHelpers.interopRequireDefault(_ETTNetworkUtil);

    var _ETTURLConfig = _require(_dependencyMap[10], "../res/values/ETTURLConfig");

    var _ETTURLConfig2 = babelHelpers.interopRequireDefault(_ETTURLConfig);

    var _ETTNetResponseHelper = _require(_dependencyMap[11], "../utils/ETTNetResponseHelper");

    var _ETTNetResponseHelper2 = babelHelpers.interopRequireDefault(_ETTNetResponseHelper);

    var _ETTRequestModel = _require(_dependencyMap[12], "../mobx/ETTRequestModel");

    var _ETTRequestModel2 = babelHelpers.interopRequireDefault(_ETTRequestModel);

    var _ETTEnum = _require(_dependencyMap[13], "../res/values/ETTEnum");

    var ETTPersonalDataEditorScene = function (_Component) {
        babelHelpers.inherits(ETTPersonalDataEditorScene, _Component);

        function ETTPersonalDataEditorScene(props) {
            babelHelpers.classCallCheck(this, ETTPersonalDataEditorScene);

            var _this = babelHelpers.possibleConstructorReturn(this, (ETTPersonalDataEditorScene.__proto__ || Object.getPrototypeOf(ETTPersonalDataEditorScene)).call(this, props));

            _this.state = {
                user_nickname: _ETTConfig.DataManager._userModel._userName,
                textvisible: false,
                keyboardType: 'default'
            };
            return _this;
        }

        babelHelpers.createClass(ETTPersonalDataEditorScene, [{
            key: "render",
            value: function render() {
                var _this2 = this;

                return _react2.default.createElement(
                    _reactNative.View,
                    {
                        style: _ETTPersonalDataStyles2.default.container,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 40
                        }
                    },
                    _react2.default.createElement(_ETTStatusBar.ETTDarkStatus, {
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 42
                        }
                    }),
                    _react2.default.createElement(
                        _reactNative.View,
                        {
                            style: _ETTPersonalDataStyles2.default.header,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 43
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.TouchableOpacity,
                            {
                                onPress: function onPress() {
                                    return _this2.goback();
                                },
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 44
                                }
                            },
                            _react2.default.createElement(_reactNative.Image, {
                                style: _ETTPerlCenterStyles2.default.top_header_back_image,
                                source: _require(_dependencyMap[14], '../res/images/km_back.png'),
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 45
                                }
                            })
                        ),
                        _react2.default.createElement(
                            _reactNative.Text,
                            {
                                style: _ETTPersonalDataStyles2.default.title,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 49
                                }
                            },
                            "\u4E2A\u4EBA\u8D44\u6599"
                        )
                    ),
                    _react2.default.createElement(_reactNative.View, {
                        style: _ETTPersonalDataStyles2.default.header_line,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 53
                        }
                    }),
                    _react2.default.createElement(
                        _reactNative.View,
                        {
                            style: _ETTPersonalDataStyles2.default.base_row,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 54
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.Text,
                            {
                                style: _ETTPersonalDataStyles2.default.base_row_title,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 55
                                }
                            },
                            "\u5934\u50CF"
                        ),
                        _react2.default.createElement(
                            _reactNative.View,
                            {
                                style: _ETTPersonalDataStyles2.default.base_row_right,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 56
                                }
                            },
                            _react2.default.createElement(_reactNative.Image, {
                                style: _ETTPersonalDataStyles2.default.base_row_image,
                                source: _require(_dependencyMap[15], '../res/images/myinfo_icon_bg.png'),
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 57
                                }
                            }),
                            _react2.default.createElement(_reactNative.Image, {
                                style: _ETTPersonalDataStyles2.default.base_row_arrow_image,
                                source: _require(_dependencyMap[16], '../res/images/right_arrow.png'),
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 62
                                }
                            })
                        )
                    ),
                    _react2.default.createElement(
                        _reactNative.View,
                        {
                            style: _ETTPerlCenterStyles2.default.row_line_bg,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 69
                            }
                        },
                        _react2.default.createElement(_reactNative.View, {
                            style: _ETTPersonalDataStyles2.default.row_line,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 70
                            }
                        })
                    ),
                    _react2.default.createElement(
                        _reactNative.View,
                        {
                            style: _ETTPersonalDataStyles2.default.base_row,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 73
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.Text,
                            {
                                style: _ETTPersonalDataStyles2.default.base_row_title,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 74
                                }
                            },
                            "\u6635\u79F0"
                        ),
                        _react2.default.createElement(
                            _reactNative.View,
                            {
                                style: _ETTPersonalDataStyles2.default.base_row_right,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 75
                                }
                            },
                            _react2.default.createElement(_reactNative.TextInput, {
                                style: _ETTPersonalDataStyles2.default.row_textInput,
                                placeholder: this.placeholder(),
                                underlineColorAndroid: "transparent",
                                secureTextEntry: this.state.textvisible,
                                value: this.state.user_nickname,
                                keyboardType: this.state.keyboardType,
                                maxLength: 16,
                                onBlur: function onBlur() {
                                    return _this2.nickEditEnd();
                                },
                                onChangeText: function onChangeText(text) {
                                    return _this2.valueChange(text);
                                },
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 76
                                }
                            }),
                            _react2.default.createElement(_reactNative.Image, {
                                style: _ETTPersonalDataStyles2.default.base_row_arrow_image,
                                source: _require(_dependencyMap[16], '../res/images/right_arrow.png'),
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 89
                                }
                            })
                        )
                    ),
                    _react2.default.createElement(
                        _reactNative.View,
                        {
                            style: _ETTPerlCenterStyles2.default.row_line_bg,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 96
                            }
                        },
                        _react2.default.createElement(_reactNative.View, {
                            style: _ETTPersonalDataStyles2.default.row_line,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 97
                            }
                        })
                    ),
                    _react2.default.createElement(
                        _reactNative.View,
                        {
                            style: _ETTPersonalDataStyles2.default.base_row,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 100
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.Text,
                            {
                                style: _ETTPersonalDataStyles2.default.base_row_title,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 101
                                }
                            },
                            "\u4FEE\u6539\u5BC6\u7801"
                        ),
                        _react2.default.createElement(
                            _reactNative.TouchableOpacity,
                            {
                                style: _ETTPersonalDataStyles2.default.base_row_right,
                                onPress: function onPress() {
                                    return _this2.gotoChangePwdScene();
                                },
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 102
                                }
                            },
                            _react2.default.createElement(_reactNative.Image, {
                                style: _ETTPersonalDataStyles2.default.base_row_arrow_image,
                                source: _require(_dependencyMap[16], '../res/images/right_arrow.png'),
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 103
                                }
                            })
                        )
                    ),
                    _react2.default.createElement(
                        _reactNative.View,
                        {
                            style: _ETTPerlCenterStyles2.default.row_line_bg,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 110
                            }
                        },
                        _react2.default.createElement(_reactNative.View, {
                            style: _ETTPersonalDataStyles2.default.row_line,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 111
                            }
                        })
                    ),
                    _react2.default.createElement(_reactNativeEasyToast2.default, {
                        ref: "toast",
                        style: _ETTLogStyles2.default.reg_toast,
                        opacity: 0.8,
                        position: "top",
                        positionValue: 200,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 113
                        }
                    }),
                    _react2.default.createElement(_ETTLoadingAnimation2.default, {
                        ref: "loading",
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 120
                        }
                    })
                );
            }
        }, {
            key: "nickEditEnd",
            value: function nickEditEnd() {
                var _this3 = this;

                console.log('编辑昵称结束');

                if (this.state.user_nickname.length < 1 || this.state.user_nickname == _ETTConfig.DataManager._userModel._userName) {
                    return;
                }

                this.refs.loading._show(null);

                var requetModel = new _ETTRequestModel2.default();
                requetModel._path = _ETTURLConfig2.default.SERVICE_NAME_ACCOUNT + _ETTURLConfig2.default.edit_nickname;
                requetModel._method = 'PUT', requetModel._bodyData = 'nickname=' + this.state.user_nickname;
                requetModel._getInfo = requetModel.getTokenRequesetData();

                _ETTNetworkUtil2.default.requestWithToken(requetModel, function (json) {
                    console.log(json);

                    var reslut = _ETTNetResponseHelper2.default.responseJsonForResult(json);

                    _this3.refs.loading._hiden();

                    if (reslut.code == 1) {
                        _ETTConfig.DataManager.editUserNickNameSuccessful(_this3.state.user_nickname);
                    }

                    _this3.refs.toast.show(reslut.msg);
                });
            }
        }, {
            key: "placeholder",
            value: function placeholder() {
                return '未设置';
            }
        }, {
            key: "valueChange",
            value: function valueChange(text) {
                this.setState({
                    user_nickname: text
                });
            }
        }, {
            key: "goback",
            value: function goback() {
                this.props.navigation.pop();
            }
        }, {
            key: "gotoChangePwdScene",
            value: function gotoChangePwdScene() {
                this.props.navigation.navigate('ChangePwdScene');
            }
        }]);
        return ETTPersonalDataEditorScene;
    }(_react.Component);

    exports.default = ETTPersonalDataEditorScene;
},564,[114,12,449,343,450,563,460,527,461,362,360,369,361,348,517,528,565],"app/scene/ETTPersonalDataEditorScene.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = _require(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/app/res/images",
    "width": 6,
    "height": 10,
    "scales": [1, 2, 3],
    "hash": "f62f5816fea4d821ffeaff0370ba125c",
    "name": "right_arrow",
    "type": "png"
  });
},565,[175],"app/res/images/right_arrow.png");
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = undefined;
    var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/app/scene/ETTWelcomeGuideScene.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    var _reactNavigation = _require(_dependencyMap[2], "react-navigation");

    var _reactNativeEasyToast = _require(_dependencyMap[3], "react-native-easy-toast");

    var _reactNativeEasyToast2 = babelHelpers.interopRequireDefault(_reactNativeEasyToast);

    var _ETTLogStyles = _require(_dependencyMap[4], "../res/styles/ETTLogStyles");

    var _ETTLogStyles2 = babelHelpers.interopRequireDefault(_ETTLogStyles);

    var _ETTDevice = _require(_dependencyMap[5], "../res/values/ETTDevice");

    var _ETTDevice2 = babelHelpers.interopRequireDefault(_ETTDevice);

    var _ETTConfig = _require(_dependencyMap[6], "../res/values/ETTConfig");

    var _ETTStatusBar = _require(_dependencyMap[7], "../common/ETTStatusBar");

    var _ETTString = _require(_dependencyMap[8], "../res/values/ETTString");

    var _ETTString2 = babelHelpers.interopRequireDefault(_ETTString);

    var _ETTHeaderStyles = _require(_dependencyMap[9], "../res/styles/ETTHeaderStyles");

    var _ETTInlineFuction = _require(_dependencyMap[10], "../res/values/ETTInlineFuction");

    var ETTWelcomeGuideScene = function (_Component) {
        babelHelpers.inherits(ETTWelcomeGuideScene, _Component);

        function ETTWelcomeGuideScene() {
            var _ref;

            var _temp, _this, _ret;

            babelHelpers.classCallCheck(this, ETTWelcomeGuideScene);

            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }

            return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = ETTWelcomeGuideScene.__proto__ || Object.getPrototypeOf(ETTWelcomeGuideScene)).call.apply(_ref, [this].concat(args))), _this), _this.data = [_require(_dependencyMap[11], '../res/images/welcome_page_1.jpg'), _require(_dependencyMap[12], '../res/images/welcome_page_2.jpg')], _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
        }

        babelHelpers.createClass(ETTWelcomeGuideScene, [{
            key: "render",
            value: function render() {
                var _this2 = this;

                return _react2.default.createElement(
                    _reactNative.View,
                    {
                        style: styles.container,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 36
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.ScrollView,
                        {
                            keyboardDismissMode: "on-drag",
                            keyboardShouldPersistTaps: "never",
                            showsVerticalScrollIndicator: true,
                            scrollEnabled: true,
                            pagingEnabled: true,
                            horizontal: true,
                            onContentSizeChange: function onContentSizeChange(contentWidth, contentHeight) {
                                var msg = 'onContentSizeChange:' + contentWidth + ',' + contentHeight;
                                console.log(msg);
                            },
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 37
                            }
                        },
                        this.data.map(function (item, index) {
                            return _this2.showWelcomeImage(item, index);
                        })
                    )
                );
            }
        }, {
            key: "showWelcomeImage",
            value: function showWelcomeImage(item, index) {
                var _this3 = this;

                console.log('showimage');

                if (index == this.data.length - 1) {
                    return _react2.default.createElement(
                        _reactNative.View,
                        {
                            key: index,
                            style: styles.viewItem,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 67
                            }
                        },
                        _react2.default.createElement(_reactNative.Image, {
                            style: [styles.viewItem],
                            source: item,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 68
                            }
                        }),
                        _react2.default.createElement(
                            _reactNative.TouchableOpacity,
                            {
                                style: styles.ViewForTextStyle,
                                onPress: function onPress() {
                                    return _this3.comeinApp();
                                },
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 71
                                }
                            },
                            _react2.default.createElement(
                                _reactNative.View,
                                {
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 72
                                    }
                                },
                                _react2.default.createElement(
                                    _reactNative.Text,
                                    {
                                        style: [styles.text],
                                        __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 73
                                        }
                                    },
                                    "\u8FDB\u5165\u5E94\u7528"
                                )
                            )
                        )
                    );
                } else {
                    return _react2.default.createElement(_reactNative.Image, {
                        key: index,
                        style: [styles.viewItem, {
                            backgroundColor: '#3B3C3E'
                        }],
                        source: item,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 83
                        }
                    });
                }
            }
        }, {
            key: "comeinApp",
            value: function comeinApp() {
                _ETTConfig.DataManager.welcomeGuideComple();
            }
        }]);
        return ETTWelcomeGuideScene;
    }(_react.Component);

    exports.default = ETTWelcomeGuideScene;

    var styles = _reactNative.StyleSheet.create({
        container: {
            justifyContent: 'center',
            alignItems: 'center'
        },
        viewItem: {
            alignItems: 'center',
            height: _ETTDevice2.default.ScreenHeight,
            width: _ETTDevice2.default.ScreenWidth
        },
        ViewForTextStyle: {
            height: 50,
            width: 200,
            alignItems: 'center',
            justifyContent: 'center',
            backgroundColor: 'blue',
            bottom: 130
        },
        text: {
            fontSize: 30,
            color: 'red'
        }
    });
},566,[114,12,371,449,460,342,343,450,347,451,452,567,568],"app/scene/ETTWelcomeGuideScene.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = _require(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/app/res/images",
    "width": 640,
    "height": 1136,
    "scales": [1],
    "hash": "4ff007fe2009fe1f4ebadcc25509d051",
    "name": "welcome_page_1",
    "type": "jpg"
  });
},567,[175],"app/res/images/welcome_page_1.jpg");
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = _require(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/app/res/images",
    "width": 640,
    "height": 1136,
    "scales": [1],
    "hash": "bdf5a760d75f80fcf4a561dc0b280f59",
    "name": "welcome_page_2",
    "type": "jpg"
  });
},568,[175],"app/res/images/welcome_page_2.jpg");
__d(function (global, _require, module, exports, _dependencyMap) {
    var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/app/res/values/ETTStackOptions.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    var _reactNavigation = _require(_dependencyMap[2], "react-navigation");

    var _ETTHeaderStyles = _require(_dependencyMap[3], "../styles/ETTHeaderStyles");

    var _ETTGoBackView = _require(_dependencyMap[4], "../../common/ETTGoBackView");

    var _ETTConfig = _require(_dependencyMap[5], "./ETTConfig");

    var _ETTEnum = _require(_dependencyMap[6], "./ETTEnum");

    var StackHomeOptions = function StackHomeOptions(_ref) {
        var navigation = _ref.navigation;
        var state = navigation.state;
        console.log('Home navigation:' + navigation + state.params);
        var headerStyle = _ETTHeaderStyles.ETTWitheHeaderStyles.headerStyle;
        var headerTitle = '北京四中网校';
        var headerTitleStyle = _ETTHeaderStyles.ETTWitheHeaderStyles.headerTitleStyle;
        var headerBackTitle = '返回';
        var headerBackTitleStyle = _ETTHeaderStyles.ETTWitheHeaderStyles.headerTitleBackStyle;

        var headerRight = _react2.default.createElement(_reactNative.Button, {
            onPress: function onPress() {
                navigation.navigate('MyScene', {
                    title: '个人中心'
                });
            },
            title: '详情',
            __source: {
                fileName: _jsxFileName,
                lineNumber: 59
            }
        });

        var headerLeft = _react2.default.createElement(_reactNative.View, {
            __source: {
                fileName: _jsxFileName,
                lineNumber: 79
            }
        });

        return {
            headerTitle: headerTitle,
            headerRight: headerRight,
            headerTitleStyle: headerTitleStyle,
            headerStyle: headerStyle,
            headerBackTitle: headerBackTitle,
            headerLeft: headerLeft,
            headerBackTitleStyle: headerBackTitleStyle
        };
    };

    var StackDetailOptions = function StackDetailOptions(_ref2) {
        var navigation = _ref2.navigation;
        var state = navigation.state,
            goBack = navigation.goBack;
        console.log('navigation:' + navigation + state.params);
        var visible = state.params.isVisible;
        var header = void 0;

        if (visible === true) {
            header = null;
        }

        var headerStyle = _ETTHeaderStyles.ETTHeaderStyles.headerStyle;
        var headerTitle = state.params.title;
        var headerTitleStyle = _ETTHeaderStyles.ETTHeaderStyles.headerTitleStyle;
        var headerBackTitle = null;

        var headerRight = _react2.default.createElement(_reactNative.View, {
            __source: {
                fileName: _jsxFileName,
                lineNumber: 115
            }
        });

        return {
            headerStyle: headerStyle,
            headerTitle: headerTitle,
            headerTitleStyle: headerTitleStyle,
            headerBackTitle: headerBackTitle,
            header: header,
            headerRight: headerRight
        };
    };

    var StackProductDetailOptions = function StackProductDetailOptions(_ref3) {
        var navigation = _ref3.navigation;
        var state = navigation.state,
            goBack = navigation.goBack;
        console.log('ProductDetail navigation:' + navigation + state.params);
        var headerStyle = [_ETTHeaderStyles.ETTWitheHeaderStyles.headerStyle, {
            display: 'none'
        }];
        var headerTitle = '课程详情';
        var headerTitleStyle = _ETTHeaderStyles.ETTWitheHeaderStyles.headerTitleStyle;
        var headerBackTitle = '';

        var headerLeft = _react2.default.createElement(_ETTGoBackView.ETTDarkGoBackView, {
            showImage: true,
            showText: '',
            onPress: function onPress() {
                goBack();
            },
            __source: {
                fileName: _jsxFileName,
                lineNumber: 155
            }
        });

        var headerRight = _react2.default.createElement(_ETTGoBackView.ETTDarkGoBackView, {
            showImage: true,
            showText: '',
            onPress: function onPress() {
                goBack();
            },
            __source: {
                fileName: _jsxFileName,
                lineNumber: 157
            }
        });

        var headerBackTitleStyle = _ETTHeaderStyles.ETTWitheHeaderStyles.headerTitleBackStyle;
        return {
            headerTitle: headerTitle,
            headerTitleStyle: headerTitleStyle,
            headerStyle: headerStyle,
            headerBackTitle: headerBackTitle,
            headerBackTitleStyle: headerBackTitleStyle,
            headerLeft: headerLeft,
            headerRight: headerRight,
            header: null
        };
    };

    var StackMySceneOptions = function StackMySceneOptions(_ref4) {
        var navigation = _ref4.navigation;
        var state = navigation.state,
            goBack = navigation.goBack;
        console.log('Home navigation:' + navigation + state.params);
        var headerStyle = _ETTHeaderStyles.ETTHeaderStyles.headerStyle;
        var headerTitle = '个人中心';
        var headerTitleStyle = _ETTHeaderStyles.ETTHeaderStyles.headerTitleStyle;
        var headerBackTitle = null;
        var headerBackTitleStyle = _ETTHeaderStyles.ETTHeaderStyles.headerTitleBackStyle;

        var headerRight = _react2.default.createElement(_reactNative.View, {
            __source: {
                fileName: _jsxFileName,
                lineNumber: 180
            }
        });

        var headerLeft = _react2.default.createElement(_ETTGoBackView.ETTDarkGoBackView, {
            showImage: true,
            showText: '返回',
            onPress: function onPress() {
                navigation.navigate('HomeScene', {
                    title: '北京四中网校'
                });
            },
            __source: {
                fileName: _jsxFileName,
                lineNumber: 181
            }
        });

        return {
            headerTitle: headerTitle,
            headerTitleStyle: headerTitleStyle,
            headerStyle: headerStyle,
            headerBackTitle: headerBackTitle,
            headerRight: headerRight,
            headerBackTitleStyle: headerBackTitleStyle,
            headerLeft: headerLeft
        };
    };

    var StackOrderDetailOptions = function StackOrderDetailOptions(_ref5) {
        var navigation = _ref5.navigation;
        var state = navigation.state,
            goBack = navigation.goBack;
        console.log('OrderDetail navigation:' + navigation + state.params);
        var headerStyle = _ETTHeaderStyles.ETTWitheHeaderStyles.headerStyle;
        var headerTitle = '订单结算';
        var headerTitleStyle = _ETTHeaderStyles.ETTWitheHeaderStyles.headerTitleStyle;
        var headerBackTitle = null;

        var headerRight = _react2.default.createElement(_reactNative.View, {
            __source: {
                fileName: _jsxFileName,
                lineNumber: 199
            }
        });

        var headerLeft = _react2.default.createElement(_ETTGoBackView.ETTDarkGoBackView, {
            showImage: true,
            showText: '',
            onPress: function onPress() {
                goBack();
            },
            __source: {
                fileName: _jsxFileName,
                lineNumber: 200
            }
        });

        return {
            headerTitle: headerTitle,
            headerRight: headerRight,
            headerTitleStyle: headerTitleStyle,
            headerStyle: headerStyle,
            headerBackTitle: headerBackTitle,
            headerLeft: headerLeft
        };
    };

    var StackLogOptions = function StackLogOptions(_ref6) {
        var navigation = _ref6.navigation;
        var state = navigation.state;
        header = null;
        var headerStyle = _ETTHeaderStyles.ETTWitheHeaderStyles.headerStyle;
        var headerTitle = '登录';
        var headerTitleStyle = _ETTHeaderStyles.ETTWitheHeaderStyles.headerTitleStyle;
        var headerBackTitle = '返回';
        var headerBackTitleStyle = _ETTHeaderStyles.ETTWitheHeaderStyles.headerTitleBackStyle;
        return {
            header: header,
            headerTitle: headerTitle,
            headerTitleStyle: headerTitleStyle,
            headerStyle: headerStyle,
            headerBackTitle: headerBackTitle,
            headerBackTitleStyle: headerBackTitleStyle
        };
    };

    var StackBindThirdOptions = function StackBindThirdOptions(_ref7) {
        var navigation = _ref7.navigation;
        var state = navigation.state,
            goBack = navigation.goBack;
        var headerStyle = _ETTHeaderStyles.ETTWitheHeaderStyles.headerStyle;
        var headerTitle = '账号绑定';
        var headerTitleStyle = _ETTHeaderStyles.ETTWitheHeaderStyles.headerTitleStyle;
        var headerBackTitle = '返回';
        var headerBackTitleStyle = _ETTHeaderStyles.ETTWitheHeaderStyles.headerTitleBackStyle;

        var headerLeft = _react2.default.createElement(_ETTGoBackView.ETTDarkGoBackView, {
            showImage: true,
            onPress: function onPress() {
                goBack();
            },
            __source: {
                fileName: _jsxFileName,
                lineNumber: 227
            }
        });

        return {
            headerTitle: headerTitle,
            headerTitleStyle: headerTitleStyle,
            headerStyle: headerStyle,
            headerBackTitle: headerBackTitle,
            headerBackTitleStyle: headerBackTitleStyle,
            headerLeft: headerLeft
        };
    };

    var StackOrderListOptions = function StackOrderListOptions(_ref8) {
        var navigation = _ref8.navigation;
        var state = navigation.state,
            goBack = navigation.goBack;
        var headerStyle = _ETTHeaderStyles.ETTWitheHeaderStyles.headerStyle;
        var headerTitle = '订单列表';
        var headerTitleStyle = _ETTHeaderStyles.ETTWitheHeaderStyles.headerTitleStyle;
        var headerBackTitle = '返回';
        var headerBackTitleStyle = _ETTHeaderStyles.ETTWitheHeaderStyles.headerTitleBackStyle;

        var headerLeft = _react2.default.createElement(_ETTGoBackView.ETTDarkGoBackView, {
            showImage: true,
            onPress: function onPress() {
                navigation.navigate('MyScene', {
                    title: '个人中心'
                });
            },
            __source: {
                fileName: _jsxFileName,
                lineNumber: 240
            }
        });

        return {
            headerTitle: headerTitle,
            headerTitleStyle: headerTitleStyle,
            headerStyle: headerStyle,
            headerBackTitle: headerBackTitle,
            headerBackTitleStyle: headerBackTitleStyle,
            headerLeft: headerLeft
        };
    };

    module.exports = {
        StackHomeOptions: StackHomeOptions,
        StackDetailOptions: StackDetailOptions,
        StackMySceneOptions: StackMySceneOptions,
        StackProductDetailOptions: StackProductDetailOptions,
        StackLogOptions: StackLogOptions,
        StackOrderDetailOptions: StackOrderDetailOptions,
        StackBindThirdOptions: StackBindThirdOptions,
        StackOrderListOptions: StackOrderListOptions
    };
},569,[114,12,371,451,570,343,348],"app/res/values/ETTStackOptions.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.ETTDarkGoBackView = exports.ETTGoBackView = undefined;
    var _jsxFileName = "/Users/kangxg/Desktop/ETTMallWork/app/common/ETTGoBackView.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    var _ETTHeaderStyles = _require(_dependencyMap[2], "../res/styles/ETTHeaderStyles");

    var ETTGoBackView = exports.ETTGoBackView = function (_Component) {
        babelHelpers.inherits(ETTGoBackView, _Component);

        function ETTGoBackView(props) {
            babelHelpers.classCallCheck(this, ETTGoBackView);
            return babelHelpers.possibleConstructorReturn(this, (ETTGoBackView.__proto__ || Object.getPrototypeOf(ETTGoBackView)).call(this, props));
        }

        babelHelpers.createClass(ETTGoBackView, [{
            key: "showBackImage",
            value: function showBackImage() {
                return this.props.showImage ? _react2.default.createElement(_reactNative.Image, {
                    style: _ETTHeaderStyles.ETTHeaderStyles.headerBackImageStyle,
                    source: _require(_dependencyMap[3], '../res/images/nav_tab_cwhite.png'),
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 20
                    }
                }) : null;
            }
        }, {
            key: "showBackText",
            value: function showBackText() {
                return this.props.showText ? _react2.default.createElement(
                    _reactNative.Text,
                    {
                        style: _ETTHeaderStyles.ETTHeaderStyles.headerBackTextStyle,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 24
                        }
                    },
                    this.props.showText
                ) : null;
            }
        }, {
            key: "callback",
            value: function callback() {
                var callback = this.props.onPress;

                if (callback) {
                    callback();
                }
            }
        }, {
            key: "render",
            value: function render() {
                var _this2 = this;

                return _react2.default.createElement(
                    _reactNative.TouchableOpacity,
                    {
                        onPress: function onPress() {
                            return _this2.callback();
                        },
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 36
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.View,
                        {
                            style: _ETTHeaderStyles.ETTHeaderStyles.headerBackStyle,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 37
                            }
                        },
                        this.showBackImage(),
                        this.showBackText()
                    )
                );
            }
        }]);
        return ETTGoBackView;
    }(_react.Component);

    var ETTDarkGoBackView = exports.ETTDarkGoBackView = function (_ETTGoBackView) {
        babelHelpers.inherits(ETTDarkGoBackView, _ETTGoBackView);

        function ETTDarkGoBackView() {
            babelHelpers.classCallCheck(this, ETTDarkGoBackView);
            return babelHelpers.possibleConstructorReturn(this, (ETTDarkGoBackView.__proto__ || Object.getPrototypeOf(ETTDarkGoBackView)).apply(this, arguments));
        }

        babelHelpers.createClass(ETTDarkGoBackView, [{
            key: "showBackImage",
            value: function showBackImage() {
                return this.props.showImage ? _react2.default.createElement(_reactNative.Image, {
                    style: _ETTHeaderStyles.ETTWitheHeaderStyles.headerBackImageStyle,
                    source: _require(_dependencyMap[4], '../res/images/km_back.png'),
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 51
                    }
                }) : null;
            }
        }, {
            key: "showBackText",
            value: function showBackText() {
                return this.props.showText ? _react2.default.createElement(
                    _reactNative.Text,
                    {
                        style: _ETTHeaderStyles.ETTWitheHeaderStyles.headerBackTextStyle,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 55
                        }
                    },
                    this.props.showText
                ) : null;
            }
        }]);
        return ETTDarkGoBackView;
    }(ETTGoBackView);
},570,[114,12,451,571,517],"app/common/ETTGoBackView.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = _require(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/app/res/images",
    "width": 10.5,
    "height": 17,
    "scales": [2, 3],
    "hash": "d7c5f3f1386d776fe33509df7691a841",
    "name": "nav_tab_cwhite",
    "type": "png"
  });
},571,[175],"app/res/images/nav_tab_cwhite@2x.png");
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = _require(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/app/res/images",
    "width": 750,
    "height": 1334,
    "scales": [1],
    "hash": "0433f9734897efd7d65997f9abfc1c96",
    "name": "750X1334",
    "type": "png"
  });
},572,[175],"app/res/images/750X1334.png");
require(23);
require(11);