apply plugin: "com.android.application"

import com.android.build.OutputFile

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // whether to disable dev mode in custom build variants (by default only disabled in release)
 *   // for example: to disable dev mode in the staging build type (if configured)
 *   devDisabledInStaging: true,
 *   // The configuration property can be in the following formats
 *   //         'devDisabledIn${productFlavor}${buildType}'
 *   //         'devDisabledIn${buildType}'
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"],
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

project.ext.react = [
        entryFile: "index.js"
]

apply from: "../../node_modules/react-native/react.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = true

android {
    compileSdkVersion 27
    buildToolsVersion '27.0.3'

    defaultConfig {
        applicationId "com.etiantian.kmonline"
        minSdkVersion 16
        targetSdkVersion 22
        versionCode 1
        versionName "1.0"
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }
    }
    lintOptions {
        abortOnError false
    }
    signingConfigs {
        release {
            storeFile file('../keystores/km.jks')
            storePassword KEY_STORE_PASSWORD
            keyAlias KEY_ALIAS
            keyPassword KEY_PASSWORD
            v2SigningEnabled false
        }
        debug {

        }
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86"
        }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
        debug {
            signingConfig signingConfigs.release
        }
    }

    //产品多渠道配置
    flavorDimensions 'env'
    productFlavors {

        develop {
            dimension 'env'
        }
        production {
            dimension 'env'
        }
    }

    //替换全部产品渠道设置
    productFlavors.all {
//        flavor -> flavor.manifestPlaceholders = [channel_code: name]
    }

    //channel 和production打包标志属性，由命令行提供(eg: gradle -Pchannel)
    //多渠道打包
    channels()
    //测试升级包
    update()

    //gradle clean build distZip upload -Pchannel --daemon --parallel --offline
    variantFilter { variant ->
        def buildType = variant.buildType.name
        def flavorName = variant.getFlavors().get(0).name
        def variantName = flavorName + ((String) buildType.charAt(0)).toUpperCase() + buildType.subSequence(1, buildType.length())
        flavors = variant.getFlavors()
        variant.setIgnore(true)

        // 根据构建类型和定制产品，自动过滤发布类型和渠道

        //channel+release
        if (project.hasProperty("channel")) {
            if (!"release".equals(buildType)) {// channel只要release
                variant.setIgnore(true)
            } else {
                for (f in flavors) {
                    if ('develop'.equals(f.name)) {
                        variant.setIgnore(true)
                        break
                    }
                    variant.setIgnore(false)
                }
            }
        } else if (project.hasProperty("production")) {
            // noop, 4 apk
            variant.setIgnore(false)
        } else if (project.hasProperty("update")) {
            if (buildType.equals('release')) {
                return
            }
            for (f in flavors) {// dimension 只要production
                if (f.name.equals('production')) {
                    return
                }
            }
            variant.setIgnore(false)
        } else {
//            if (buildType.equals("debug") && flavorName.equals("develop")) {
                variant.setIgnore(false)
//            }
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            if (outputFileName.endsWith('.apk')) {
                //这里使用之前定义apk文件名称
                def getVer = getGitVersion()
                outputFileName = "aixue-$variant.flavorName-$variant.buildType.name-$variant.versionName-" + getVer + ".apk"
                println outputFileName
            }
        }
    }
}

// 多渠道打包
def channels() {
    if (project.hasProperty("channel")) {

        android.flavorDimensions('channel', 'env')
        if (!"".equals(channel)) {
            createFlavor(channel)
        } else {
            // 渠道名称文件路径
            def path = "./build_config/channels.txt"
            file(path).eachLine { line ->
                if (!line.trim().startsWith("//")) { //剔除注释行
                    createFlavor(line)
                }
            }
        }
    }
}

// 测试升级打包
def update() {
    println '====='
    if (project.hasProperty("update")) {
        println '====='

        android.flavorDimensions('tester', 'env')
        // 渠道名称文件路径
        android.productFlavors.create('newVersion', {
            dimension 'tester'
            android.defaultConfig.versionName = 'V9999'
            android.defaultConfig.versionCode = android.defaultConfig.versionCode - 1
        })
    }
}

private void createFlavor(String line) {
    println "************ channels *******************" + line;
    android.productFlavors.create(line, {

        dimension 'channel'
        proguardFiles android.getDefaultProguardFile('proguard-android.txt'), 'proguard-project.txt'
        signingConfig android.signingConfigs.release
    })
}

//获得git版本
def getGitVersion() {
    return 'git rev-parse --short HEAD'.execute().text.trim()
}

dependencies {
    compile project(':react-native-vector-icons')
    compile project(':react-native-share')
    //compile project(':react-native-i18n-complete')
    compile project(':react-native-autoheight-webview')
    compile project(':RCTWeChat')
    compile project(':pingpp-react-native')
    compile fileTree(dir: "libs", include: ["*.jar"])
    compile "com.android.support:appcompat-v7:27.1.1"
    compile "com.facebook.react:react-native:+"  // From node_modules
    compile project(':react-native-sqlite-storage')
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}

apply from: './build_config/gradle-mvn-push.gradle'